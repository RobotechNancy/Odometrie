
Tof_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08009fe0  08009fe0  00019fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a0  0800a0a0  00020bc8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0a0  0800a0a0  0001a0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0a8  0800a0a8  00020bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0a8  0800a0a8  0001a0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc8  20000000  0800a0b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000bc8  0800ac78  00020bc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d3c  0800ac78  00020d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd7a  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ae  00000000  00000000  0003d972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00040d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  00042128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236d4  00000000  00000000  000433d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019052  00000000  00000000  00066aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc793  00000000  00000000  0007faf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c289  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005750  00000000  00000000  0014c2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000bc8 	.word	0x20000bc8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fc8 	.word	0x08009fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000bcc 	.word	0x20000bcc
 80001cc:	08009fc8 	.word	0x08009fc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <configure_CAN>:
#include <memory.h>
#include "can.h"

extern CAN_HandleTypeDef hcan1;

void configure_CAN(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR addr) {
 8000584:	b084      	sub	sp, #16
 8000586:	b580      	push	{r7, lr}
 8000588:	b08a      	sub	sp, #40	; 0x28
 800058a:	af00      	add	r7, sp, #0
 800058c:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8000590:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterMode =           CAN_FILTERMODE_IDMASK; // Filtrage par liste ou par masque
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale =          CAN_FILTERSCALE_16BIT; // Filtre de 32 bits ou 1 de 16 bits
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;          // 3 files avec 3 filtres par file
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
    sFilterConfig.SlaveStartFilterBank = 14;                    // Choix du filtre dans la banque
 80005a0:	230e      	movs	r3, #14
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterActivation =     ENABLE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterMaskIdLow =      0b111100000000000;     // Masque LSBs
 80005a8:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80005ac:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh =     0b111100000000000;     // Masque MSBs
 80005ae:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80005b2:	60bb      	str	r3, [r7, #8]

    sFilterConfig.FilterBank =           0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh =         addr >> 9;             // Adresse de l'émetteur
 80005b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005ba:	0a5b      	lsrs	r3, r3, #9
 80005bc:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow =          0b111100000000000;     // Adresse de broadcast
 80005be:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80005c2:	607b      	str	r3, [r7, #4]

    HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80005cc:	f000 fe7d 	bl	80012ca <HAL_CAN_ConfigFilter>

    HAL_CAN_Start(&hcan); // Démarrer le périphérique CAN
 80005d0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80005d4:	f000 ff43 	bl	800145e <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Activer le mode interruption
 80005d8:	2102      	movs	r1, #2
 80005da:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80005de:	f001 f894 	bl	800170a <HAL_CAN_ActivateNotification>
}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr

080005f0 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b098      	sub	sp, #96	; 0x60
 80005f4:	af06      	add	r7, sp, #24
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80005f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005fc:	f107 0220 	add.w	r2, r7, #32
 8000600:	2100      	movs	r1, #0
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 ff6f 	bl	80014e6 <HAL_CAN_GetRxMessage>

	can_mess_t msg;
    int status = format_frame(&msg, RxHeader, RxData);
 8000608:	f107 0508 	add.w	r5, r7, #8
 800060c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000610:	9304      	str	r3, [sp, #16]
 8000612:	466c      	mov	r4, sp
 8000614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000624:	4628      	mov	r0, r5
 8000626:	f000 f807 	bl	8000638 <format_frame>
 800062a:	6478      	str	r0, [r7, #68]	; 0x44

    if (status != 0)
 800062c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800062e:	2b00      	cmp	r3, #0
        return;
 8000630:	bf00      	nop

    switch (msg.fct_code) {
        default:
            break;
    }
}
 8000632:	3748      	adds	r7, #72	; 0x48
 8000634:	46bd      	mov	sp, r7
 8000636:	bdb0      	pop	{r4, r5, r7, pc}

08000638 <format_frame>:


int format_frame(can_mess_t *rep, CAN_RxHeaderTypeDef frame, const uint8_t data[]){
 8000638:	b084      	sub	sp, #16
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	f107 001c 	add.w	r0, r7, #28
 8000646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    rep->recv_addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR);
 800064a:	6a3b      	ldr	r3, [r7, #32]
 800064c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	601a      	str	r2, [r3, #0]
    rep->emit_addr = (frame.ExtId & CAN_FILTER_ADDR_RECEPTEUR);
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	f403 0270 	and.w	r2, r3, #15728640	; 0xf00000
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	605a      	str	r2, [r3, #4]
    rep->fct_code = (frame.ExtId & CAN_FILTER_CODE_FCT);
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	f403 227f 	and.w	r2, r3, #1044480	; 0xff000
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	609a      	str	r2, [r3, #8]
    rep->is_rep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	08db      	lsrs	r3, r3, #3
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	bf14      	ite	ne
 8000674:	2301      	movne	r3, #1
 8000676:	2300      	moveq	r3, #0
 8000678:	b2da      	uxtb	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	735a      	strb	r2, [r3, #13]
    rep->rep_id = (frame.ExtId & CAN_FILTER_REP_NBR);
 800067e:	6a3b      	ldr	r3, [r7, #32]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	b2da      	uxtb	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	739a      	strb	r2, [r3, #14]
    rep->message_id = (frame.ExtId & CAN_FILTER_IDE_MSG) >> CAN_DECALAGE_ID_MSG;
 800068c:	6a3b      	ldr	r3, [r7, #32]
 800068e:	091b      	lsrs	r3, r3, #4
 8000690:	b2da      	uxtb	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	731a      	strb	r2, [r3, #12]

    if(rep->recv_addr < 0 || rep->recv_addr > CAN_MAX_VALUE_ADDR) return CAN_E_OOB_ADDR;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b10      	cmp	r3, #16
 800069c:	d902      	bls.n	80006a4 <format_frame+0x6c>
 800069e:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 80006a2:	e02a      	b.n	80006fa <format_frame+0xc2>
    if(rep->fct_code < 0 || rep->fct_code > CAN_MAX_VALUE_CODE_FCT) return CAN_E_OOB_CODE_FCT;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	2b80      	cmp	r3, #128	; 0x80
 80006aa:	d901      	bls.n	80006b0 <format_frame+0x78>
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <format_frame+0xd0>)
 80006ae:	e024      	b.n	80006fa <format_frame+0xc2>
    if(rep->rep_id < 0 || rep->rep_id > CAN_MAX_VALUE_REP_NBR) return CAN_E_OOB_REP_NBR;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7b9b      	ldrb	r3, [r3, #14]
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d902      	bls.n	80006be <format_frame+0x86>
 80006b8:	f46f 7300 	mvn.w	r3, #512	; 0x200
 80006bc:	e01d      	b.n	80006fa <format_frame+0xc2>
    if (frame.DLC > 8) return CAN_E_DATA_SIZE_TOO_LONG;
 80006be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c0:	2b08      	cmp	r3, #8
 80006c2:	d901      	bls.n	80006c8 <format_frame+0x90>
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <format_frame+0xd4>)
 80006c6:	e018      	b.n	80006fa <format_frame+0xc2>

    rep->data_len = frame.DLC;
 80006c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	73da      	strb	r2, [r3, #15]

    for (int i = 0; i < frame.DLC; i++){
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e00c      	b.n	80006f0 <format_frame+0xb8>
        if(data[i] <0 || data[i] > 255)
            return CAN_E_OOB_DATA;

        rep->data[i] = data[i];
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006da:	4413      	add	r3, r2
 80006dc:	7819      	ldrb	r1, [r3, #0]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	3310      	adds	r3, #16
 80006e6:	460a      	mov	r2, r1
 80006e8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < frame.DLC; i++){
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d8ee      	bhi.n	80006d6 <format_frame+0x9e>
    }

    return 0;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	b004      	add	sp, #16
 8000706:	4770      	bx	lr
 8000708:	fffffe00 	.word	0xfffffe00
 800070c:	fffffe02 	.word	0xfffffe02

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	b099      	sub	sp, #100	; 0x64
 8000714:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	TOF_Units_t montof[9];
	montof[0] = TOF_UNIT_0;
 8000716:	2300      	movs	r3, #0
 8000718:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	montof[1] = TOF_UNIT_1;
 800071c:	2301      	movs	r3, #1
 800071e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	montof[2] = TOF_UNIT_2;
 8000722:	2302      	movs	r3, #2
 8000724:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	montof[3] = TOF_UNIT_3;
 8000728:	2303      	movs	r3, #3
 800072a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	montof[4] = TOF_UNIT_4;
 800072e:	2304      	movs	r3, #4
 8000730:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	montof[5] = TOF_UNIT_5;
 8000734:	2305      	movs	r3, #5
 8000736:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
//	TOF_Units_t montof_1 = TOF_UNIT_1;
//	TOF_Units_t montof_2 = TOF_UNIT_2;
//	TOF_Units_t montof_3 = TOF_UNIT_3;
//	TOF_Units_t montof_4 = TOF_UNIT_4;
//	TOF_Units_t montof_5 = TOF_UNIT_5;
	uint16_t tentatives_max = 100;
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	877b      	strh	r3, [r7, #58]	; 0x3a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fc30 	bl	8000fa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f87f 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 f985 	bl	8000a54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074a:	f000 f953 	bl	80009f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800074e:	f000 f911 	bl	8000974 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000752:	f000 f8d9 	bl	8000908 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  configure_CAN(hcan1, CAN_ADDR_ODOMETRIE_TOF);
 8000756:	4e36      	ldr	r6, [pc, #216]	; (8000830 <main+0x120>)
 8000758:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 800075c:	9306      	str	r3, [sp, #24]
 800075e:	466d      	mov	r5, sp
 8000760:	f106 0410 	add.w	r4, r6, #16
 8000764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000768:	e894 0003 	ldmia.w	r4, {r0, r1}
 800076c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000770:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000774:	f7ff ff06 	bl	8000584 <configure_CAN>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	2102      	movs	r1, #2
 800077c:	482d      	ldr	r0, [pc, #180]	; (8000834 <main+0x124>)
 800077e:	f001 fce3 	bl	8002148 <HAL_GPIO_WritePin>
  TOF_Status_t result_init = TOF_Init();
 8000782:	f005 f823 	bl	80057cc <TOF_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  if(result_init != TOF_STATUS_SUCESS){
 800078c:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8000790:	2b00      	cmp	r3, #0
 8000792:	d012      	beq.n	80007ba <main+0xaa>
	  sprintf((char*)buf, "Erreur lors de l'initialisation : %i\r\n", ((int8_t)result_init));
 8000794:	f997 2039 	ldrsb.w	r2, [r7, #57]	; 0x39
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4927      	ldr	r1, [pc, #156]	; (8000838 <main+0x128>)
 800079c:	4618      	mov	r0, r3
 800079e:	f008 ffb3 	bl	8009708 <siprintf>

	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fd13 	bl	80001d0 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	1d39      	adds	r1, r7, #4
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	4821      	ldr	r0, [pc, #132]	; (800083c <main+0x12c>)
 80007b6:	f004 f9cf 	bl	8004b58 <HAL_UART_Transmit>
  }

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2102      	movs	r1, #2
 80007be:	481d      	ldr	r0, [pc, #116]	; (8000834 <main+0x124>)
 80007c0:	f001 fcc2 	bl	8002148 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(100);
 80007c4:	2064      	movs	r0, #100	; 0x64
 80007c6:	f000 fc61 	bl	800108c <HAL_Delay>
	for(int i = 0; i < TOF_UNIT_COUNT; i++){
 80007ca:	2300      	movs	r3, #0
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007ce:	e02a      	b.n	8000826 <main+0x116>
		TOF_Get_Range(montof[i], tentatives_max, &range_milimeters, &range_status);
 80007d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	4413      	add	r3, r2
 80007d8:	7818      	ldrb	r0, [r3, #0]
 80007da:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80007de:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80007e2:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80007e4:	f005 f824 	bl	8005830 <TOF_Get_Range>
		if(((uint16_t)range_milimeters)-40 <= 100 && (uint8_t)range_status == 1){
 80007e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007ea:	2b8c      	cmp	r3, #140	; 0x8c
 80007ec:	d815      	bhi.n	800081a <main+0x10a>
 80007ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d111      	bne.n	800081a <main+0x10a>
			sprintf((char*)buf, "Warning colision, TOF %u", i);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007fa:	4911      	ldr	r1, [pc, #68]	; (8000840 <main+0x130>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f008 ff83 	bl	8009708 <siprintf>
			HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fce3 	bl	80001d0 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	1d39      	adds	r1, r7, #4
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <main+0x12c>)
 8000816:	f004 f99f 	bl	8004b58 <HAL_UART_Transmit>
		}
//		sprintf((char*)buf, "TOF n°%u | Value : %u mm | Status : %u\r\n", i, ((uint16_t)range_milimeters), ((uint8_t)range_status));
//		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);

		HAL_Delay(100);
 800081a:	2064      	movs	r0, #100	; 0x64
 800081c:	f000 fc36 	bl	800108c <HAL_Delay>
	for(int i = 0; i < TOF_UNIT_COUNT; i++){
 8000820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000822:	3301      	adds	r3, #1
 8000824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000828:	2b05      	cmp	r3, #5
 800082a:	ddd1      	ble.n	80007d0 <main+0xc0>
	HAL_Delay(100);
 800082c:	e7ca      	b.n	80007c4 <main+0xb4>
 800082e:	bf00      	nop
 8000830:	20000be4 	.word	0x20000be4
 8000834:	48000400 	.word	0x48000400
 8000838:	08009fe0 	.word	0x08009fe0
 800083c:	20000c60 	.word	0x20000c60
 8000840:	0800a008 	.word	0x0800a008

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b096      	sub	sp, #88	; 0x58
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2244      	movs	r2, #68	; 0x44
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f008 ff50 	bl	80096f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	463b      	mov	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000866:	f44f 7000 	mov.w	r0, #512	; 0x200
 800086a:	f002 ffa1 	bl	80037b0 <HAL_PWREx_ControlVoltageScaling>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000874:	f000 f95e 	bl	8000b34 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000878:	f002 ff7c 	bl	8003774 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <SystemClock_Config+0xc0>)
 800087e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000882:	4a20      	ldr	r2, [pc, #128]	; (8000904 <SystemClock_Config+0xc0>)
 8000884:	f023 0318 	bic.w	r3, r3, #24
 8000888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800088c:	2314      	movs	r3, #20
 800088e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008a4:	2301      	movs	r3, #1
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008ac:	2328      	movs	r3, #40	; 0x28
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008b0:	2307      	movs	r3, #7
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 ffcb 	bl	800385c <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008cc:	f000 f932 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2303      	movs	r3, #3
 80008d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	2104      	movs	r1, #4
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 fbcb 	bl	8004084 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008f4:	f000 f91e 	bl	8000b34 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008f8:	f003 ffde 	bl	80048b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008fc:	bf00      	nop
 80008fe:	3758      	adds	r7, #88	; 0x58
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000

08000908 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_CAN1_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <MX_CAN1_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_CAN1_Init+0x64>)
 8000914:	2210      	movs	r2, #16
 8000916:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_CAN1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_CAN1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_CAN1_Init+0x64>)
 8000926:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800092a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_CAN1_Init+0x64>)
 800092e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000932:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_CAN1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_CAN1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_CAN1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_CAN1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_CAN1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_CAN1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_CAN1_Init+0x64>)
 800095a:	f000 fbbb 	bl	80010d4 <HAL_CAN_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000964:	f000 f8e6 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000be4 	.word	0x20000be4
 8000970:	40006400 	.word	0x40006400

08000974 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_I2C1_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_I2C1_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xF010F3FE;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_I2C1_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_I2C1_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009b0:	f001 fbe2 	bl	8002178 <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 f8bb 	bl	8000b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009c2:	f002 fe3f 	bl	8003644 <HAL_I2CEx_ConfigAnalogFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 f8b2 	bl	8000b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009d4:	f002 fe81 	bl	80036da <HAL_I2CEx_ConfigDigitalFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 f8a9 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000c0c 	.word	0x20000c0c
 80009ec:	40005400 	.word	0x40005400
 80009f0:	f010f3fe 	.word	0xf010f3fe

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <MX_USART2_UART_Init+0x5c>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART2_UART_Init+0x58>)
 8000a38:	f004 f840 	bl	8004abc <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a42:	f000 f877 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000c60 	.word	0x20000c60
 8000a50:	40004400 	.word	0x40004400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a29      	ldr	r2, [pc, #164]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOF0_XSHUT_Pin|TOF1_XSHUT_Pin|TOF5_XSHUT_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abc:	f001 fb44 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|TOF4_XSHUT_Pin|TOF3_XSHUT_Pin
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	215b      	movs	r1, #91	; 0x5b
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <MX_GPIO_Init+0xdc>)
 8000ac6:	f001 fb3f 	bl	8002148 <HAL_GPIO_WritePin>
                          |TOF2_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TOF0_XSHUT_Pin TOF1_XSHUT_Pin TOF5_XSHUT_Pin */
  GPIO_InitStruct.Pin = TOF0_XSHUT_Pin|TOF1_XSHUT_Pin|TOF5_XSHUT_Pin;
 8000aca:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f001 f9c5 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aea:	2303      	movs	r3, #3
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <MX_GPIO_Init+0xdc>)
 8000b02:	f001 f9b7 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF4_XSHUT_Pin TOF3_XSHUT_Pin TOF2_XSHUT_Pin */
  GPIO_InitStruct.Pin = TOF4_XSHUT_Pin|TOF3_XSHUT_Pin|TOF2_XSHUT_Pin;
 8000b06:	2358      	movs	r3, #88	; 0x58
 8000b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_GPIO_Init+0xdc>)
 8000b1e:	f001 f9a9 	bl	8001e74 <HAL_GPIO_Init>

}
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000400 	.word	0x48000400

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6613      	str	r3, [r2, #96]	; 0x60
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <HAL_CAN_MspInit+0xc0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d149      	bne.n	8000c3e <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <HAL_CAN_MspInit+0xc4>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <HAL_CAN_MspInit+0xc4>)
 8000bb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <HAL_CAN_MspInit+0xc4>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <HAL_CAN_MspInit+0xc4>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <HAL_CAN_MspInit+0xc4>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <HAL_CAN_MspInit+0xc4>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bec:	2309      	movs	r3, #9
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f001 f93b 	bl	8001e74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2013      	movs	r0, #19
 8000c04:	f001 f8b1 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c08:	2013      	movs	r0, #19
 8000c0a:	f001 f8ca 	bl	8001da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2014      	movs	r0, #20
 8000c14:	f001 f8a9 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c18:	2014      	movs	r0, #20
 8000c1a:	f001 f8c2 	bl	8001da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2015      	movs	r0, #21
 8000c24:	f001 f8a1 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c28:	2015      	movs	r0, #21
 8000c2a:	f001 f8ba 	bl	8001da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2016      	movs	r0, #22
 8000c34:	f001 f899 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000c38:	2016      	movs	r0, #22
 8000c3a:	f001 f8b2 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40006400 	.word	0x40006400
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b09e      	sub	sp, #120	; 0x78
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	2254      	movs	r2, #84	; 0x54
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f008 fd41 	bl	80096f8 <memset>
  if(hi2c->Instance==I2C1)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <HAL_I2C_MspInit+0xc8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d147      	bne.n	8000d10 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c80:	2340      	movs	r3, #64	; 0x40
 8000c82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fc1d 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c98:	f7ff ff4c 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_I2C_MspInit+0xcc>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_I2C_MspInit+0xcc>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_I2C_MspInit+0xcc>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cb8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cba:	2312      	movs	r3, #18
 8000cbc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd4:	f001 f8ce 	bl	8001e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_I2C_MspInit+0xcc>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_I2C_MspInit+0xcc>)
 8000cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_I2C_MspInit+0xcc>)
 8000ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	201f      	movs	r0, #31
 8000cf6:	f001 f838 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cfa:	201f      	movs	r0, #31
 8000cfc:	f001 f851 	bl	8001da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2020      	movs	r0, #32
 8000d06:	f001 f830 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d0a:	2020      	movs	r0, #32
 8000d0c:	f001 f849 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3778      	adds	r7, #120	; 0x78
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b09e      	sub	sp, #120	; 0x78
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	2254      	movs	r2, #84	; 0x54
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f008 fcd9 	bl	80096f8 <memset>
  if(huart->Instance==USART2)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a28      	ldr	r2, [pc, #160]	; (8000dec <HAL_UART_MspInit+0xcc>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d148      	bne.n	8000de2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fbb5 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d68:	f7ff fee4 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <HAL_UART_MspInit+0xd0>)
 8000d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d70:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <HAL_UART_MspInit+0xd0>)
 8000d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d76:	6593      	str	r3, [r2, #88]	; 0x58
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_UART_MspInit+0xd0>)
 8000d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_UART_MspInit+0xd0>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_UART_MspInit+0xd0>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_UART_MspInit+0xd0>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dac:	2307      	movs	r3, #7
 8000dae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f001 f85b 	bl	8001e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f001 f849 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3778      	adds	r7, #120	; 0x78
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40004400 	.word	0x40004400
 8000df0:	40021000 	.word	0x40021000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f904 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <CAN1_TX_IRQHandler+0x10>)
 8000e4e:	f000 fc82 	bl	8001756 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000be4 	.word	0x20000be4

08000e5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <CAN1_RX0_IRQHandler+0x10>)
 8000e62:	f000 fc78 	bl	8001756 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000be4 	.word	0x20000be4

08000e70 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <CAN1_RX1_IRQHandler+0x10>)
 8000e76:	f000 fc6e 	bl	8001756 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000be4 	.word	0x20000be4

08000e84 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <CAN1_SCE_IRQHandler+0x10>)
 8000e8a:	f000 fc64 	bl	8001756 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000be4 	.word	0x20000be4

08000e98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <I2C1_EV_IRQHandler+0x10>)
 8000e9e:	f001 fbe5 	bl	800266c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000c0c 	.word	0x20000c0c

08000eac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <I2C1_ER_IRQHandler+0x10>)
 8000eb2:	f001 fbf5 	bl	80026a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000c0c 	.word	0x20000c0c

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f008 fbca 	bl	8009688 <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20010000 	.word	0x20010000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000ce4 	.word	0x20000ce4
 8000f28:	20000d40 	.word	0x20000d40

08000f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f54:	f7ff ffea 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5a:	490d      	ldr	r1, [pc, #52]	; (8000f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <LoopForever+0xe>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f70:	4c0a      	ldr	r4, [pc, #40]	; (8000f9c <LoopForever+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f008 fb89 	bl	8009694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f82:	f7ff fbc5 	bl	8000710 <main>

08000f86 <LoopForever>:

LoopForever:
    b LoopForever
 8000f86:	e7fe      	b.n	8000f86 <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 8000f88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000bc8 	.word	0x20000bc8
  ldr r2, =_sidata
 8000f94:	0800a0b0 	.word	0x0800a0b0
  ldr r2, =_sbss
 8000f98:	20000bc8 	.word	0x20000bc8
  ldr r4, =_ebss
 8000f9c:	20000d3c 	.word	0x20000d3c

08000fa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_IRQHandler>

08000fa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 fed1 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f80e 	bl	8000fd4 <HAL_InitTick>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	e001      	b.n	8000fc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc4:	f7ff fdbc 	bl	8000b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_InitTick+0x6c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d023      	beq.n	8001030 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_InitTick+0x70>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_InitTick+0x6c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fedd 	bl	8001dbe <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10f      	bne.n	800102a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d809      	bhi.n	8001024 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 fea7 	bl	8001d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_InitTick+0x74>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e007      	b.n	8001034 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e004      	b.n	8001034 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e001      	b.n	8001034 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	20000000 	.word	0x20000000
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008
 8001070:	20000ce8 	.word	0x20000ce8

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000ce8 	.word	0x20000ce8

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008

080010d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e0ed      	b.n	80012c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fd48 	bl	8000b88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001108:	f7ff ffb4 	bl	8001074 <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800110e:	e012      	b.n	8001136 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001110:	f7ff ffb0 	bl	8001074 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d90b      	bls.n	8001136 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2205      	movs	r2, #5
 800112e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e0c5      	b.n	80012c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0e5      	beq.n	8001110 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0202 	bic.w	r2, r2, #2
 8001152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001154:	f7ff ff8e 	bl	8001074 <HAL_GetTick>
 8001158:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800115a:	e012      	b.n	8001182 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800115c:	f7ff ff8a 	bl	8001074 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b0a      	cmp	r3, #10
 8001168:	d90b      	bls.n	8001182 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2205      	movs	r2, #5
 800117a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e09f      	b.n	80012c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1e5      	bne.n	800115c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7e1b      	ldrb	r3, [r3, #24]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d108      	bne.n	80011aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e007      	b.n	80011ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7e5b      	ldrb	r3, [r3, #25]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d108      	bne.n	80011d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e007      	b.n	80011e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7e9b      	ldrb	r3, [r3, #26]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d108      	bne.n	80011fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0220 	orr.w	r2, r2, #32
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e007      	b.n	800120e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0220 	bic.w	r2, r2, #32
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7edb      	ldrb	r3, [r3, #27]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d108      	bne.n	8001228 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0210 	bic.w	r2, r2, #16
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e007      	b.n	8001238 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0210 	orr.w	r2, r2, #16
 8001236:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7f1b      	ldrb	r3, [r3, #28]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0208 	orr.w	r2, r2, #8
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e007      	b.n	8001262 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0208 	bic.w	r2, r2, #8
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7f5b      	ldrb	r3, [r3, #29]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d108      	bne.n	800127c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0204 	orr.w	r2, r2, #4
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e007      	b.n	800128c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0204 	bic.w	r2, r2, #4
 800128a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	ea42 0103 	orr.w	r1, r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b087      	sub	sp, #28
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012e2:	7cfb      	ldrb	r3, [r7, #19]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d003      	beq.n	80012f0 <HAL_CAN_ConfigFilter+0x26>
 80012e8:	7cfb      	ldrb	r3, [r7, #19]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	f040 80aa 	bne.w	8001444 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	2201      	movs	r2, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43db      	mvns	r3, r3
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	401a      	ands	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800134c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3248      	adds	r2, #72	; 0x48
 8001352:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001366:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001368:	6979      	ldr	r1, [r7, #20]
 800136a:	3348      	adds	r3, #72	; 0x48
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d122      	bne.n	80013c0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	431a      	orrs	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800139a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3248      	adds	r2, #72	; 0x48
 80013a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013b6:	6979      	ldr	r1, [r7, #20]
 80013b8:	3348      	adds	r3, #72	; 0x48
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013da:	e007      	b.n	80013ec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d109      	bne.n	8001408 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001406:	e007      	b.n	8001418 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d107      	bne.n	8001430 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	431a      	orrs	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001436:	f023 0201 	bic.w	r2, r3, #1
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	e006      	b.n	8001452 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d12e      	bne.n	80014d0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2202      	movs	r2, #2
 8001476:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0201 	bic.w	r2, r2, #1
 8001488:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800148a:	f7ff fdf3 	bl	8001074 <HAL_GetTick>
 800148e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001490:	e012      	b.n	80014b8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001492:	f7ff fdef 	bl	8001074 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b0a      	cmp	r3, #10
 800149e:	d90b      	bls.n	80014b8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2205      	movs	r2, #5
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e012      	b.n	80014de <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1e5      	bne.n	8001492 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e006      	b.n	80014de <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
  }
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d003      	beq.n	800150a <HAL_CAN_GetRxMessage+0x24>
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	2b02      	cmp	r3, #2
 8001506:	f040 80f3 	bne.w	80016f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10e      	bne.n	800152e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d116      	bne.n	800154c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0e7      	b.n	80016fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d107      	bne.n	800154c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0d8      	b.n	80016fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	331b      	adds	r3, #27
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0204 	and.w	r2, r3, #4
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	331b      	adds	r3, #27
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4413      	add	r3, r2
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0d5b      	lsrs	r3, r3, #21
 800157a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e00b      	b.n	800159c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	331b      	adds	r3, #27
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	331b      	adds	r3, #27
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	4413      	add	r3, r2
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0202 	and.w	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	331b      	adds	r3, #27
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	4413      	add	r3, r2
 80015be:	3304      	adds	r3, #4
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 020f 	and.w	r2, r3, #15
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	331b      	adds	r3, #27
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	3304      	adds	r3, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	331b      	adds	r3, #27
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	3304      	adds	r3, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4413      	add	r3, r2
 800161a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0a1a      	lsrs	r2, r3, #8
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	4413      	add	r3, r2
 8001634:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	0c1a      	lsrs	r2, r3, #16
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3302      	adds	r3, #2
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0e1a      	lsrs	r2, r3, #24
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3303      	adds	r3, #3
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	3304      	adds	r3, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4413      	add	r3, r2
 8001680:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	0a1a      	lsrs	r2, r3, #8
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3305      	adds	r3, #5
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0c1a      	lsrs	r2, r3, #16
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3306      	adds	r3, #6
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	0e1a      	lsrs	r2, r3, #24
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	3307      	adds	r3, #7
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d108      	bne.n	80016dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0220 	orr.w	r2, r2, #32
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	e007      	b.n	80016ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0220 	orr.w	r2, r2, #32
 80016ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e006      	b.n	80016fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
  }
}
 80016fe:	4618      	mov	r0, r3
 8001700:	371c      	adds	r7, #28
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d002      	beq.n	8001728 <HAL_CAN_ActivateNotification+0x1e>
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d109      	bne.n	800173c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6959      	ldr	r1, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e006      	b.n	800174a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
  }
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b08a      	sub	sp, #40	; 0x28
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d07c      	beq.n	8001896 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d023      	beq.n	80017ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f983 	bl	8001ac4 <HAL_CAN_TxMailbox0CompleteCallback>
 80017be:	e016      	b.n	80017ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d004      	beq.n	80017d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
 80017d2:	e00c      	b.n	80017ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	e002      	b.n	80017ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f989 	bl	8001b00 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d024      	beq.n	8001842 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001800:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f963 	bl	8001ad8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001812:	e016      	b.n	8001842 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	e00c      	b.n	8001842 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
 800183a:	e002      	b.n	8001842 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f969 	bl	8001b14 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d024      	beq.n	8001896 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001854:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f943 	bl	8001aec <HAL_CAN_TxMailbox2CompleteCallback>
 8001866:	e016      	b.n	8001896 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
 800187a:	e00c      	b.n	8001896 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
 800188e:	e002      	b.n	8001896 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f949 	bl	8001b28 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2210      	movs	r2, #16
 80018b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00b      	beq.n	80018dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2208      	movs	r2, #8
 80018d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f930 	bl	8001b3c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7fe fe7b 	bl	80005f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00c      	beq.n	800191e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001914:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2210      	movs	r2, #16
 800191c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2208      	movs	r2, #8
 8001938:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f912 	bl	8001b64 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f8f9 	bl	8001b50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00b      	beq.n	8001980 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2210      	movs	r2, #16
 8001978:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f8fc 	bl	8001b78 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2208      	movs	r2, #8
 800199a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8f5 	bl	8001b8c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d07b      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d072      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d043      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d03e      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a24:	2b60      	cmp	r3, #96	; 0x60
 8001a26:	d02b      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x32a>
 8001a28:	2b60      	cmp	r3, #96	; 0x60
 8001a2a:	d82e      	bhi.n	8001a8a <HAL_CAN_IRQHandler+0x334>
 8001a2c:	2b50      	cmp	r3, #80	; 0x50
 8001a2e:	d022      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x320>
 8001a30:	2b50      	cmp	r3, #80	; 0x50
 8001a32:	d82a      	bhi.n	8001a8a <HAL_CAN_IRQHandler+0x334>
 8001a34:	2b40      	cmp	r3, #64	; 0x40
 8001a36:	d019      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x316>
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d826      	bhi.n	8001a8a <HAL_CAN_IRQHandler+0x334>
 8001a3c:	2b30      	cmp	r3, #48	; 0x30
 8001a3e:	d010      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x30c>
 8001a40:	2b30      	cmp	r3, #48	; 0x30
 8001a42:	d822      	bhi.n	8001a8a <HAL_CAN_IRQHandler+0x334>
 8001a44:	2b10      	cmp	r3, #16
 8001a46:	d002      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x2f8>
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d005      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a4c:	e01d      	b.n	8001a8a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a56:	e019      	b.n	8001a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a60:	e014      	b.n	8001a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f043 0320 	orr.w	r3, r3, #32
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a6a:	e00f      	b.n	8001a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a74:	e00a      	b.n	8001a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a7e:	e005      	b.n	8001a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a88:	e000      	b.n	8001a8c <HAL_CAN_IRQHandler+0x336>
            break;
 8001a8a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a9a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f872 	bl	8001ba0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff8e 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff29 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff3e 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff8e 	bl	8001ca8 <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff31 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d005      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2204      	movs	r2, #4
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e029      	b.n	8001e4e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 020e 	bic.w	r2, r2, #14
 8001e08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f003 021c 	and.w	r2, r3, #28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	4798      	blx	r3
    }
  }
  return status;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e66:	b2db      	uxtb	r3, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e82:	e148      	b.n	8002116 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 813a 	beq.w	8002110 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d005      	beq.n	8001eb4 <HAL_GPIO_Init+0x40>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d130      	bne.n	8001f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eea:	2201      	movs	r2, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0201 	and.w	r2, r3, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d017      	beq.n	8001f52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d123      	bne.n	8001fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	6939      	ldr	r1, [r7, #16]
 8001fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0203 	and.w	r2, r3, #3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8094 	beq.w	8002110 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe8:	4b52      	ldr	r3, [pc, #328]	; (8002134 <HAL_GPIO_Init+0x2c0>)
 8001fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fec:	4a51      	ldr	r2, [pc, #324]	; (8002134 <HAL_GPIO_Init+0x2c0>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <HAL_GPIO_Init+0x2c0>)
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x2c4>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800202a:	d00d      	beq.n	8002048 <HAL_GPIO_Init+0x1d4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a43      	ldr	r2, [pc, #268]	; (800213c <HAL_GPIO_Init+0x2c8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <HAL_GPIO_Init+0x1d0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a42      	ldr	r2, [pc, #264]	; (8002140 <HAL_GPIO_Init+0x2cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_GPIO_Init+0x1cc>
 800203c:	2302      	movs	r3, #2
 800203e:	e004      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002040:	2307      	movs	r3, #7
 8002042:	e002      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002048:	2300      	movs	r3, #0
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4093      	lsls	r3, r2
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800205a:	4937      	ldr	r1, [pc, #220]	; (8002138 <HAL_GPIO_Init+0x2c4>)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800208c:	4a2d      	ldr	r2, [pc, #180]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e0:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	f47f aeaf 	bne.w	8001e84 <HAL_GPIO_Init+0x10>
  }
}
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40021000 	.word	0x40021000
 8002138:	40010000 	.word	0x40010000
 800213c:	48000400 	.word	0x48000400
 8002140:	48000800 	.word	0x48000800
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002164:	e002      	b.n	800216c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e081      	b.n	800228e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fd56 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	e006      	b.n	8002200 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d104      	bne.n	8002212 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69d9      	ldr	r1, [r3, #28]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1a      	ldr	r2, [r3, #32]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	461a      	mov	r2, r3
 80022a4:	460b      	mov	r3, r1
 80022a6:	817b      	strh	r3, [r7, #10]
 80022a8:	4613      	mov	r3, r2
 80022aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	f040 80da 	bne.w	800246e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_I2C_Master_Transmit+0x30>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e0d3      	b.n	8002470 <HAL_I2C_Master_Transmit+0x1d8>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022d0:	f7fe fed0 	bl	8001074 <HAL_GetTick>
 80022d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2319      	movs	r3, #25
 80022dc:	2201      	movs	r2, #1
 80022de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fefb 	bl	80030de <I2C_WaitOnFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0be      	b.n	8002470 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2221      	movs	r2, #33	; 0x21
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2210      	movs	r2, #16
 80022fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	893a      	ldrh	r2, [r7, #8]
 8002312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	2bff      	cmp	r3, #255	; 0xff
 8002322:	d90e      	bls.n	8002342 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	22ff      	movs	r2, #255	; 0xff
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	b2da      	uxtb	r2, r3
 8002330:	8979      	ldrh	r1, [r7, #10]
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <HAL_I2C_Master_Transmit+0x1e0>)
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f001 f8f2 	bl	8003524 <I2C_TransferConfig>
 8002340:	e06c      	b.n	800241c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	b2da      	uxtb	r2, r3
 8002352:	8979      	ldrh	r1, [r7, #10]
 8002354:	4b48      	ldr	r3, [pc, #288]	; (8002478 <HAL_I2C_Master_Transmit+0x1e0>)
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f001 f8e1 	bl	8003524 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002362:	e05b      	b.n	800241c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	6a39      	ldr	r1, [r7, #32]
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fef8 	bl	800315e <I2C_WaitOnTXISFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e07b      	b.n	8002470 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d034      	beq.n	800241c <HAL_I2C_Master_Transmit+0x184>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d130      	bne.n	800241c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fe8a 	bl	80030de <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e04d      	b.n	8002470 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2bff      	cmp	r3, #255	; 0xff
 80023dc:	d90e      	bls.n	80023fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	22ff      	movs	r2, #255	; 0xff
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	2300      	movs	r3, #0
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f001 f895 	bl	8003524 <I2C_TransferConfig>
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	b2da      	uxtb	r2, r3
 800240c:	8979      	ldrh	r1, [r7, #10]
 800240e:	2300      	movs	r3, #0
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f001 f884 	bl	8003524 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d19e      	bne.n	8002364 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	6a39      	ldr	r1, [r7, #32]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fed7 	bl	80031de <I2C_WaitOnSTOPFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e01a      	b.n	8002470 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2220      	movs	r2, #32
 8002440:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_I2C_Master_Transmit+0x1e4>)
 800244e:	400b      	ands	r3, r1
 8002450:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800246e:	2302      	movs	r3, #2
  }
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	80002000 	.word	0x80002000
 800247c:	fe00e800 	.word	0xfe00e800

08002480 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	461a      	mov	r2, r3
 800248c:	460b      	mov	r3, r1
 800248e:	817b      	strh	r3, [r7, #10]
 8002490:	4613      	mov	r3, r2
 8002492:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b20      	cmp	r3, #32
 800249e:	f040 80db 	bne.w	8002658 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2C_Master_Receive+0x30>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0d4      	b.n	800265a <HAL_I2C_Master_Receive+0x1da>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024b8:	f7fe fddc 	bl	8001074 <HAL_GetTick>
 80024bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2319      	movs	r3, #25
 80024c4:	2201      	movs	r2, #1
 80024c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fe07 	bl	80030de <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0bf      	b.n	800265a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2222      	movs	r2, #34	; 0x22
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2210      	movs	r2, #16
 80024e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	893a      	ldrh	r2, [r7, #8]
 80024fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	2bff      	cmp	r3, #255	; 0xff
 800250a:	d90e      	bls.n	800252a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	22ff      	movs	r2, #255	; 0xff
 8002510:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	b2da      	uxtb	r2, r3
 8002518:	8979      	ldrh	r1, [r7, #10]
 800251a:	4b52      	ldr	r3, [pc, #328]	; (8002664 <HAL_I2C_Master_Receive+0x1e4>)
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fffe 	bl	8003524 <I2C_TransferConfig>
 8002528:	e06d      	b.n	8002606 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	b2da      	uxtb	r2, r3
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	4b49      	ldr	r3, [pc, #292]	; (8002664 <HAL_I2C_Master_Receive+0x1e4>)
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 ffed 	bl	8003524 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800254a:	e05c      	b.n	8002606 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	6a39      	ldr	r1, [r7, #32]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fe81 	bl	8003258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e07c      	b.n	800265a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d034      	beq.n	8002606 <HAL_I2C_Master_Receive+0x186>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d130      	bne.n	8002606 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2200      	movs	r2, #0
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fd95 	bl	80030de <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e04d      	b.n	800265a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2bff      	cmp	r3, #255	; 0xff
 80025c6:	d90e      	bls.n	80025e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	22ff      	movs	r2, #255	; 0xff
 80025cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	8979      	ldrh	r1, [r7, #10]
 80025d6:	2300      	movs	r3, #0
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 ffa0 	bl	8003524 <I2C_TransferConfig>
 80025e4:	e00f      	b.n	8002606 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	8979      	ldrh	r1, [r7, #10]
 80025f8:	2300      	movs	r3, #0
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 ff8f 	bl	8003524 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d19d      	bne.n	800254c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	6a39      	ldr	r1, [r7, #32]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fde2 	bl	80031de <I2C_WaitOnSTOPFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e01a      	b.n	800265a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2220      	movs	r2, #32
 800262a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_I2C_Master_Receive+0x1e8>)
 8002638:	400b      	ands	r3, r1
 800263a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	80002400 	.word	0x80002400
 8002668:	fe00e800 	.word	0xfe00e800

0800266c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	68f9      	ldr	r1, [r7, #12]
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
  }
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d010      	beq.n	80026e6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	09db      	lsrs	r3, r3, #7
 80026c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	0a9b      	lsrs	r3, r3, #10
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d010      	beq.n	8002714 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	09db      	lsrs	r3, r3, #7
 80026f6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f043 0208 	orr.w	r2, r3, #8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002712:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	0a5b      	lsrs	r3, r3, #9
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	09db      	lsrs	r3, r3, #7
 8002724:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f043 0202 	orr.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002740:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 030b 	and.w	r3, r3, #11
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fb89 	bl	8002e6c <I2C_ITError>
  }
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
 8002796:	4613      	mov	r3, r2
 8002798:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <I2C_Slave_ISR_IT+0x24>
 8002802:	2302      	movs	r3, #2
 8002804:	e0ec      	b.n	80029e0 <I2C_Slave_ISR_IT+0x1fe>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002826:	6939      	ldr	r1, [r7, #16]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f9bf 	bl	8002bac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d04d      	beq.n	80028d6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002842:	2b00      	cmp	r3, #0
 8002844:	d047      	beq.n	80028d6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d128      	bne.n	80028a2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b28      	cmp	r3, #40	; 0x28
 800285a:	d108      	bne.n	800286e <I2C_Slave_ISR_IT+0x8c>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002862:	d104      	bne.n	800286e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002864:	6939      	ldr	r1, [r7, #16]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 faaa 	bl	8002dc0 <I2C_ITListenCplt>
 800286c:	e032      	b.n	80028d4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b29      	cmp	r3, #41	; 0x29
 8002878:	d10e      	bne.n	8002898 <I2C_Slave_ISR_IT+0xb6>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002880:	d00a      	beq.n	8002898 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2210      	movs	r2, #16
 8002888:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fbe5 	bl	800305a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f92d 	bl	8002af0 <I2C_ITSlaveSeqCplt>
 8002896:	e01d      	b.n	80028d4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2210      	movs	r2, #16
 800289e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80028a0:	e096      	b.n	80029d0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2210      	movs	r2, #16
 80028a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <I2C_Slave_ISR_IT+0xe4>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c2:	f040 8085 	bne.w	80029d0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4619      	mov	r1, r3
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 facd 	bl	8002e6c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028d2:	e07d      	b.n	80029d0 <I2C_Slave_ISR_IT+0x1ee>
 80028d4:	e07c      	b.n	80029d0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d030      	beq.n	8002944 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d02a      	beq.n	8002944 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d018      	beq.n	800292a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d14f      	bne.n	80029d4 <I2C_Slave_ISR_IT+0x1f2>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800293a:	d04b      	beq.n	80029d4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f8d7 	bl	8002af0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002942:	e047      	b.n	80029d4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	08db      	lsrs	r3, r3, #3
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	08db      	lsrs	r3, r3, #3
 8002954:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800295c:	6939      	ldr	r1, [r7, #16]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f842 	bl	80029e8 <I2C_ITAddrCplt>
 8002964:	e037      	b.n	80029d6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d031      	beq.n	80029d6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800297a:	2b00      	cmp	r3, #0
 800297c:	d02b      	beq.n	80029d6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d018      	beq.n	80029ba <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
 80029b8:	e00d      	b.n	80029d6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c0:	d002      	beq.n	80029c8 <I2C_Slave_ISR_IT+0x1e6>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d106      	bne.n	80029d6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f891 	bl	8002af0 <I2C_ITSlaveSeqCplt>
 80029ce:	e002      	b.n	80029d6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80029d0:	bf00      	nop
 80029d2:	e000      	b.n	80029d6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80029d4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029fe:	2b28      	cmp	r3, #40	; 0x28
 8002a00:	d16a      	bne.n	8002ad8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002a20:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002a3c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d138      	bne.n	8002ab8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	09db      	lsrs	r3, r3, #7
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	89bb      	ldrh	r3, [r7, #12]
 8002a4e:	4053      	eors	r3, r2
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f003 0306 	and.w	r3, r3, #6
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d11c      	bne.n	8002a94 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d13b      	bne.n	8002ae8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a86:	89ba      	ldrh	r2, [r7, #12]
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fe7c 	bl	800278a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a92:	e029      	b.n	8002ae8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fd73 	bl	8003588 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002aaa:	89ba      	ldrh	r2, [r7, #12]
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff fe6a 	bl	800278a <HAL_I2C_AddrCallback>
}
 8002ab6:	e017      	b.n	8002ae8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fd63 	bl	8003588 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002aca:	89ba      	ldrh	r2, [r7, #12]
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fe5a 	bl	800278a <HAL_I2C_AddrCallback>
}
 8002ad6:	e007      	b.n	8002ae8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2208      	movs	r2, #8
 8002ade:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	0b9b      	lsrs	r3, r3, #14
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e00d      	b.n	8002b42 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	0bdb      	lsrs	r3, r3, #15
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b29      	cmp	r3, #41	; 0x29
 8002b4c:	d112      	bne.n	8002b74 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2228      	movs	r2, #40	; 0x28
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2221      	movs	r2, #33	; 0x21
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fd12 	bl	8003588 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fdf8 	bl	8002762 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b72:	e017      	b.n	8002ba4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7e:	d111      	bne.n	8002ba4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2228      	movs	r2, #40	; 0x28
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2222      	movs	r2, #34	; 0x22
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b8e:	2102      	movs	r1, #2
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fcf9 	bl	8003588 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fde9 	bl	8002776 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b21      	cmp	r3, #33	; 0x21
 8002bd6:	d002      	beq.n	8002bde <I2C_ITSlaveCplt+0x32>
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b29      	cmp	r3, #41	; 0x29
 8002bdc:	d108      	bne.n	8002bf0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002bde:	f248 0101 	movw	r1, #32769	; 0x8001
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fcd0 	bl	8003588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2221      	movs	r2, #33	; 0x21
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
 8002bee:	e00d      	b.n	8002c0c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b22      	cmp	r3, #34	; 0x22
 8002bf4:	d002      	beq.n	8002bfc <I2C_ITSlaveCplt+0x50>
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bfa:	d107      	bne.n	8002c0c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002bfc:	f248 0102 	movw	r1, #32770	; 0x8002
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fcc1 	bl	8003588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2222      	movs	r2, #34	; 0x22
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <I2C_ITSlaveCplt+0x20c>)
 8002c28:	400b      	ands	r3, r1
 8002c2a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fa14 	bl	800305a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	0b9b      	lsrs	r3, r3, #14
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d013      	beq.n	8002c66 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c4c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d020      	beq.n	8002c98 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c64:	e018      	b.n	8002c98 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	0bdb      	lsrs	r3, r3, #15
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c80:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0304 	bic.w	r3, r3, #4
 8002caa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00c      	beq.n	8002ce6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d010      	beq.n	8002d34 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f8a7 	bl	8002e6c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b28      	cmp	r3, #40	; 0x28
 8002d28:	d141      	bne.n	8002dae <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d2a:	6979      	ldr	r1, [r7, #20]
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f847 	bl	8002dc0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d32:	e03c      	b.n	8002dae <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d3c:	d014      	beq.n	8002d68 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fed6 	bl	8002af0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <I2C_ITSlaveCplt+0x210>)
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fd20 	bl	80027a6 <HAL_I2C_ListenCpltCallback>
}
 8002d66:	e022      	b.n	8002dae <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b22      	cmp	r3, #34	; 0x22
 8002d72:	d10e      	bne.n	8002d92 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fcf3 	bl	8002776 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d90:	e00d      	b.n	8002dae <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fcda 	bl	8002762 <HAL_I2C_SlaveTxCpltCallback>
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	fe00e800 	.word	0xfe00e800
 8002dbc:	ffff0000 	.word	0xffff0000

08002dc0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a26      	ldr	r2, [pc, #152]	; (8002e68 <I2C_ITListenCplt+0xa8>)
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d022      	beq.n	8002e3e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d012      	beq.n	8002e3e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f043 0204 	orr.w	r2, r3, #4
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e3e:	f248 0103 	movw	r1, #32771	; 0x8003
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fba0 	bl	8003588 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fca4 	bl	80027a6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	ffff0000 	.word	0xffff0000

08002e6c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a5d      	ldr	r2, [pc, #372]	; (8003000 <I2C_ITError+0x194>)
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b28      	cmp	r3, #40	; 0x28
 8002ea2:	d005      	beq.n	8002eb0 <I2C_ITError+0x44>
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b29      	cmp	r3, #41	; 0x29
 8002ea8:	d002      	beq.n	8002eb0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b2a      	cmp	r3, #42	; 0x2a
 8002eae:	d10b      	bne.n	8002ec8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002eb0:	2103      	movs	r1, #3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fb68 	bl	8003588 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2228      	movs	r2, #40	; 0x28
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a50      	ldr	r2, [pc, #320]	; (8003004 <I2C_ITError+0x198>)
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec6:	e011      	b.n	8002eec <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ec8:	f248 0103 	movw	r1, #32771	; 0x8003
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fb5b 	bl	8003588 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b60      	cmp	r3, #96	; 0x60
 8002edc:	d003      	beq.n	8002ee6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d039      	beq.n	8002f6e <I2C_ITError+0x102>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b11      	cmp	r3, #17
 8002efe:	d002      	beq.n	8002f06 <I2C_ITError+0x9a>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b21      	cmp	r3, #33	; 0x21
 8002f04:	d133      	bne.n	8002f6e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f14:	d107      	bne.n	8002f26 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f24:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe ff94 	bl	8001e58 <HAL_DMA_GetState>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d017      	beq.n	8002f66 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	4a33      	ldr	r2, [pc, #204]	; (8003008 <I2C_ITError+0x19c>)
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe ff43 	bl	8001dd6 <HAL_DMA_Abort_IT>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d04d      	beq.n	8002ff2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f60:	4610      	mov	r0, r2
 8002f62:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f64:	e045      	b.n	8002ff2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f850 	bl	800300c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f6c:	e041      	b.n	8002ff2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d039      	beq.n	8002fea <I2C_ITError+0x17e>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b12      	cmp	r3, #18
 8002f7a:	d002      	beq.n	8002f82 <I2C_ITError+0x116>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b22      	cmp	r3, #34	; 0x22
 8002f80:	d133      	bne.n	8002fea <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f90:	d107      	bne.n	8002fa2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fa0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe ff56 	bl	8001e58 <HAL_DMA_GetState>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d017      	beq.n	8002fe2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	4a14      	ldr	r2, [pc, #80]	; (8003008 <I2C_ITError+0x19c>)
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe ff05 	bl	8001dd6 <HAL_DMA_Abort_IT>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d011      	beq.n	8002ff6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fe0:	e009      	b.n	8002ff6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f812 	bl	800300c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fe8:	e005      	b.n	8002ff6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f80e 	bl	800300c <I2C_TreatErrorCallback>
  }
}
 8002ff0:	e002      	b.n	8002ff8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ff6:	bf00      	nop
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	ffff0000 	.word	0xffff0000
 8003004:	080027e3 	.word	0x080027e3
 8003008:	080030a3 	.word	0x080030a3

0800300c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b60      	cmp	r3, #96	; 0x60
 800301e:	d10e      	bne.n	800303e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fbc9 	bl	80027ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800303c:	e009      	b.n	8003052 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff fbb4 	bl	80027ba <HAL_I2C_ErrorCallback>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d103      	bne.n	8003078 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d007      	beq.n	8003096 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	619a      	str	r2, [r3, #24]
  }
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	2200      	movs	r2, #0
 80030be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	2200      	movs	r2, #0
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff ff9b 	bl	800300c <I2C_TreatErrorCallback>
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ee:	e022      	b.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d01e      	beq.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f8:	f7fd ffbc 	bl	8001074 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d113      	bne.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f043 0220 	orr.w	r2, r3, #32
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e00f      	b.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	429a      	cmp	r2, r3
 8003152:	d0cd      	beq.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800316a:	e02c      	b.n	80031c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f8eb 	bl	800334c <I2C_IsErrorOccurred>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e02a      	b.n	80031d6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d01e      	beq.n	80031c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fd ff74 	bl	8001074 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d113      	bne.n	80031c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e007      	b.n	80031d6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d1cb      	bne.n	800316c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ea:	e028      	b.n	800323e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f8ab 	bl	800334c <I2C_IsErrorOccurred>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e026      	b.n	800324e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003200:	f7fd ff38 	bl	8001074 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	d302      	bcc.n	8003216 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d113      	bne.n	800323e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e007      	b.n	800324e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b20      	cmp	r3, #32
 800324a:	d1cf      	bne.n	80031ec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003264:	e064      	b.n	8003330 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f86e 	bl	800334c <I2C_IsErrorOccurred>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e062      	b.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b20      	cmp	r3, #32
 8003286:	d138      	bne.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b04      	cmp	r3, #4
 8003294:	d105      	bne.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e04e      	b.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d107      	bne.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2210      	movs	r2, #16
 80032b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2204      	movs	r2, #4
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
 80032be:	e002      	b.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2220      	movs	r2, #32
 80032cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80032da:	400b      	ands	r3, r1
 80032dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e022      	b.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7fd febb 	bl	8001074 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10f      	bne.n	8003330 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d193      	bne.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	fe00e800 	.word	0xfe00e800

0800334c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d075      	beq.n	8003464 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2210      	movs	r2, #16
 800337e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003380:	e056      	b.n	8003430 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d052      	beq.n	8003430 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fd fe73 	bl	8001074 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_IsErrorOccurred+0x54>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d147      	bne.n	8003430 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c2:	d12e      	bne.n	8003422 <I2C_IsErrorOccurred+0xd6>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ca:	d02a      	beq.n	8003422 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d027      	beq.n	8003422 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033e2:	f7fd fe47 	bl	8001074 <HAL_GetTick>
 80033e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e8:	e01b      	b.n	8003422 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ea:	f7fd fe43 	bl	8001074 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b19      	cmp	r3, #25
 80033f6:	d914      	bls.n	8003422 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	d1dc      	bne.n	80033ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d003      	beq.n	8003446 <I2C_IsErrorOccurred+0xfa>
 800343e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003442:	2b00      	cmp	r3, #0
 8003444:	d09d      	beq.n	8003382 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2220      	movs	r2, #32
 8003454:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003486:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f043 0308 	orr.w	r3, r3, #8
 800349e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01c      	beq.n	8003514 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff fdbd 	bl	800305a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <I2C_IsErrorOccurred+0x1d4>)
 80034ec:	400b      	ands	r3, r1
 80034ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003518:	4618      	mov	r0, r3
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	fe00e800 	.word	0xfe00e800

08003524 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	817b      	strh	r3, [r7, #10]
 8003532:	4613      	mov	r3, r2
 8003534:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800353c:	7a7b      	ldrb	r3, [r7, #9]
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003544:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	4313      	orrs	r3, r2
 800354e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003552:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	0d5b      	lsrs	r3, r3, #21
 800355e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <I2C_TransferConfig+0x60>)
 8003564:	430b      	orrs	r3, r1
 8003566:	43db      	mvns	r3, r3
 8003568:	ea02 0103 	and.w	r1, r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	03ff63ff 	.word	0x03ff63ff

08003588 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00f      	beq.n	80035c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80035a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035b6:	2b28      	cmp	r3, #40	; 0x28
 80035b8:	d003      	beq.n	80035c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80035c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00f      	beq.n	80035ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80035d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035e0:	2b28      	cmp	r3, #40	; 0x28
 80035e2:	d003      	beq.n	80035ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80035ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da03      	bge.n	80035fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d103      	bne.n	800360a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003608:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	2b20      	cmp	r3, #32
 800360e:	d103      	bne.n	8003618 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d103      	bne.n	8003626 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003624:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6819      	ldr	r1, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	43da      	mvns	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	400a      	ands	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b20      	cmp	r3, #32
 8003658:	d138      	bne.n	80036cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003664:	2302      	movs	r3, #2
 8003666:	e032      	b.n	80036ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	; 0x24
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003696:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d139      	bne.n	8003764 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e033      	b.n	8003766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2224      	movs	r2, #36	; 0x24
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800372c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a04      	ldr	r2, [pc, #16]	; (8003790 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003782:	6013      	str	r3, [r2, #0]
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40007000 	.word	0x40007000

08003794 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <HAL_PWREx_GetVoltageRange+0x18>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40007000 	.word	0x40007000

080037b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037be:	d130      	bne.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c0:	4b23      	ldr	r3, [pc, #140]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037cc:	d038      	beq.n	8003840 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037d6:	4a1e      	ldr	r2, [pc, #120]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2232      	movs	r2, #50	; 0x32
 80037e4:	fb02 f303 	mul.w	r3, r2, r3
 80037e8:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	0c9b      	lsrs	r3, r3, #18
 80037f0:	3301      	adds	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037f4:	e002      	b.n	80037fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003808:	d102      	bne.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x60>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f2      	bne.n	80037f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381c:	d110      	bne.n	8003840 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e00f      	b.n	8003842 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382e:	d007      	beq.n	8003840 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003838:	4a05      	ldr	r2, [pc, #20]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800383e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40007000 	.word	0x40007000
 8003854:	20000000 	.word	0x20000000
 8003858:	431bde83 	.word	0x431bde83

0800385c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f000 bc02 	b.w	8004074 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003870:	4b96      	ldr	r3, [pc, #600]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800387a:	4b94      	ldr	r3, [pc, #592]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80e4 	beq.w	8003a5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4c>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	f040 808b 	bne.w	80039b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f040 8087 	bne.w	80039b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038a8:	4b88      	ldr	r3, [pc, #544]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_OscConfig+0x64>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e3d9      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	4b81      	ldr	r3, [pc, #516]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <HAL_RCC_OscConfig+0x7e>
 80038d0:	4b7e      	ldr	r3, [pc, #504]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d8:	e005      	b.n	80038e6 <HAL_RCC_OscConfig+0x8a>
 80038da:	4b7c      	ldr	r3, [pc, #496]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80038dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d223      	bcs.n	8003932 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fd8c 	bl	800440c <RCC_SetFlashLatencyFromMSIRange>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e3ba      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038fe:	4b73      	ldr	r3, [pc, #460]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a72      	ldr	r2, [pc, #456]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003904:	f043 0308 	orr.w	r3, r3, #8
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b70      	ldr	r3, [pc, #448]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	496d      	ldr	r1, [pc, #436]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391c:	4b6b      	ldr	r3, [pc, #428]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	4968      	ldr	r1, [pc, #416]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
 8003930:	e025      	b.n	800397e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003932:	4b66      	ldr	r3, [pc, #408]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a65      	ldr	r2, [pc, #404]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4960      	ldr	r1, [pc, #384]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003950:	4b5e      	ldr	r3, [pc, #376]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	495b      	ldr	r1, [pc, #364]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fd4c 	bl	800440c <RCC_SetFlashLatencyFromMSIRange>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e37a      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800397e:	f000 fc81 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b51      	ldr	r3, [pc, #324]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	4950      	ldr	r1, [pc, #320]	; (8003ad0 <HAL_RCC_OscConfig+0x274>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	fa22 f303 	lsr.w	r3, r2, r3
 800399a:	4a4e      	ldr	r2, [pc, #312]	; (8003ad4 <HAL_RCC_OscConfig+0x278>)
 800399c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800399e:	4b4e      	ldr	r3, [pc, #312]	; (8003ad8 <HAL_RCC_OscConfig+0x27c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fb16 	bl	8000fd4 <HAL_InitTick>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d052      	beq.n	8003a58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	e35e      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d032      	beq.n	8003a24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039be:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a42      	ldr	r2, [pc, #264]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039ca:	f7fd fb53 	bl	8001074 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039d2:	f7fd fb4f 	bl	8001074 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e347      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039e4:	4b39      	ldr	r3, [pc, #228]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f0:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a35      	ldr	r2, [pc, #212]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039f6:	f043 0308 	orr.w	r3, r3, #8
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4930      	ldr	r1, [pc, #192]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a0e:	4b2f      	ldr	r3, [pc, #188]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	492b      	ldr	r1, [pc, #172]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
 8003a22:	e01a      	b.n	8003a5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a24:	4b29      	ldr	r3, [pc, #164]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a28      	ldr	r2, [pc, #160]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a30:	f7fd fb20 	bl	8001074 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a38:	f7fd fb1c 	bl	8001074 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e314      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x1dc>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d073      	beq.n	8003b4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_OscConfig+0x21c>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d10e      	bne.n	8003a90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d10b      	bne.n	8003a90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d063      	beq.n	8003b4c <HAL_RCC_OscConfig+0x2f0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d15f      	bne.n	8003b4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e2f1      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x24c>
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e025      	b.n	8003af4 <HAL_RCC_OscConfig+0x298>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab0:	d114      	bne.n	8003adc <HAL_RCC_OscConfig+0x280>
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a02      	ldr	r2, [pc, #8]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e013      	b.n	8003af4 <HAL_RCC_OscConfig+0x298>
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	0800a024 	.word	0x0800a024
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004
 8003adc:	4ba0      	ldr	r3, [pc, #640]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a9f      	ldr	r2, [pc, #636]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b9d      	ldr	r3, [pc, #628]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a9c      	ldr	r2, [pc, #624]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd faba 	bl	8001074 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fd fab6 	bl	8001074 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e2ae      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b16:	4b92      	ldr	r3, [pc, #584]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2a8>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd faa6 	bl	8001074 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd faa2 	bl	8001074 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e29a      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b3e:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2d0>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d060      	beq.n	8003c1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_OscConfig+0x310>
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d119      	bne.n	8003b9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d116      	bne.n	8003b9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6c:	4b7c      	ldr	r3, [pc, #496]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_OscConfig+0x328>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e277      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b84:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	4973      	ldr	r1, [pc, #460]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b98:	e040      	b.n	8003c1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d023      	beq.n	8003bea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba2:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fd fa61 	bl	8001074 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb6:	f7fd fa5d 	bl	8001074 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e255      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc8:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	4b62      	ldr	r3, [pc, #392]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	495f      	ldr	r1, [pc, #380]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
 8003be8:	e018      	b.n	8003c1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bea:	4b5d      	ldr	r3, [pc, #372]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5c      	ldr	r2, [pc, #368]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fd fa3d 	bl	8001074 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfe:	f7fd fa39 	bl	8001074 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e231      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c10:	4b53      	ldr	r3, [pc, #332]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f0      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d03c      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01c      	beq.n	8003c6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c36:	4a4a      	ldr	r2, [pc, #296]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fd fa18 	bl	8001074 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c48:	f7fd fa14 	bl	8001074 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e20c      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ef      	beq.n	8003c48 <HAL_RCC_OscConfig+0x3ec>
 8003c68:	e01b      	b.n	8003ca2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c70:	4a3b      	ldr	r2, [pc, #236]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fd f9fb 	bl	8001074 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c82:	f7fd f9f7 	bl	8001074 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e1ef      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1ef      	bne.n	8003c82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80a6 	beq.w	8003dfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10d      	bne.n	8003cdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	4a26      	ldr	r2, [pc, #152]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cca:	6593      	str	r3, [r2, #88]	; 0x58
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <HAL_RCC_OscConfig+0x508>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d118      	bne.n	8003d1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_RCC_OscConfig+0x508>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_RCC_OscConfig+0x508>)
 8003cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf4:	f7fd f9be 	bl	8001074 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfc:	f7fd f9ba 	bl	8001074 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1b2      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_RCC_OscConfig+0x508>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d108      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4d8>
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d32:	e029      	b.n	8003d88 <HAL_RCC_OscConfig+0x52c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d115      	bne.n	8003d68 <HAL_RCC_OscConfig+0x50c>
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	4a03      	ldr	r2, [pc, #12]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5c:	e014      	b.n	8003d88 <HAL_RCC_OscConfig+0x52c>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40007000 	.word	0x40007000
 8003d68:	4b9a      	ldr	r3, [pc, #616]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	4a99      	ldr	r2, [pc, #612]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d78:	4b96      	ldr	r3, [pc, #600]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	4a95      	ldr	r2, [pc, #596]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d016      	beq.n	8003dbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fd f970 	bl	8001074 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d98:	f7fd f96c 	bl	8001074 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e162      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dae:	4b89      	ldr	r3, [pc, #548]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ed      	beq.n	8003d98 <HAL_RCC_OscConfig+0x53c>
 8003dbc:	e015      	b.n	8003dea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fd f959 	bl	8001074 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd f955 	bl	8001074 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e14b      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ddc:	4b7d      	ldr	r3, [pc, #500]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ed      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dea:	7ffb      	ldrb	r3, [r7, #31]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df0:	4b78      	ldr	r3, [pc, #480]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	4a77      	ldr	r2, [pc, #476]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d03c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e10:	4b70      	ldr	r3, [pc, #448]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e16:	4a6f      	ldr	r2, [pc, #444]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fd f928 	bl	8001074 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e28:	f7fd f924 	bl	8001074 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e11c      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e3a:	4b66      	ldr	r3, [pc, #408]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ef      	beq.n	8003e28 <HAL_RCC_OscConfig+0x5cc>
 8003e48:	e01b      	b.n	8003e82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e4a:	4b62      	ldr	r3, [pc, #392]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e50:	4a60      	ldr	r2, [pc, #384]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fd f90b 	bl	8001074 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e62:	f7fd f907 	bl	8001074 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e0ff      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e74:	4b57      	ldr	r3, [pc, #348]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ef      	bne.n	8003e62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80f3 	beq.w	8004072 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	f040 80c9 	bne.w	8004028 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e96:	4b4f      	ldr	r3, [pc, #316]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0203 	and.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d12c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d123      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d11b      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d113      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d109      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	3b01      	subs	r3, #1
 8003efe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d06b      	beq.n	8003fdc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d062      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f0a:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0ac      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f1a:	4b2e      	ldr	r3, [pc, #184]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f26:	f7fd f8a5 	bl	8001074 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2e:	f7fd f8a1 	bl	8001074 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e099      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f40:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f4c:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <HAL_RCC_OscConfig+0x77c>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f66:	0212      	lsls	r2, r2, #8
 8003f68:	4311      	orrs	r1, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f6e:	0852      	lsrs	r2, r2, #1
 8003f70:	3a01      	subs	r2, #1
 8003f72:	0552      	lsls	r2, r2, #21
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f7a:	0852      	lsrs	r2, r2, #1
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	0652      	lsls	r2, r2, #25
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f86:	06d2      	lsls	r2, r2, #27
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	4912      	ldr	r1, [pc, #72]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f90:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fa8:	f7fd f864 	bl	8001074 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd f860 	bl	8001074 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e058      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc2:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <HAL_RCC_OscConfig+0x778>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fce:	e050      	b.n	8004072 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e04f      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fdc:	4b27      	ldr	r3, [pc, #156]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d144      	bne.n	8004072 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a23      	ldr	r2, [pc, #140]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8003fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff4:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a20      	ldr	r2, [pc, #128]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004000:	f7fd f838 	bl	8001074 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004008:	f7fd f834 	bl	8001074 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e02c      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_RCC_OscConfig+0x820>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x7ac>
 8004026:	e024      	b.n	8004072 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d01f      	beq.n	800406e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a12      	ldr	r2, [pc, #72]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8004034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fd f81b 	bl	8001074 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004042:	f7fd f817 	bl	8001074 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e00f      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f0      	bne.n	8004042 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	4905      	ldr	r1, [pc, #20]	; (800407c <HAL_RCC_OscConfig+0x820>)
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_RCC_OscConfig+0x824>)
 8004068:	4013      	ands	r3, r2
 800406a:	60cb      	str	r3, [r1, #12]
 800406c:	e001      	b.n	8004072 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	feeefffc 	.word	0xfeeefffc

08004084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0e7      	b.n	8004268 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b75      	ldr	r3, [pc, #468]	; (8004270 <HAL_RCC_ClockConfig+0x1ec>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d910      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b72      	ldr	r3, [pc, #456]	; (8004270 <HAL_RCC_ClockConfig+0x1ec>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 0207 	bic.w	r2, r3, #7
 80040ae:	4970      	ldr	r1, [pc, #448]	; (8004270 <HAL_RCC_ClockConfig+0x1ec>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b6e      	ldr	r3, [pc, #440]	; (8004270 <HAL_RCC_ClockConfig+0x1ec>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0cf      	b.n	8004268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	4b66      	ldr	r3, [pc, #408]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d908      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b63      	ldr	r3, [pc, #396]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4960      	ldr	r1, [pc, #384]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d04c      	beq.n	800419c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410a:	4b5a      	ldr	r3, [pc, #360]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d121      	bne.n	800415a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e0a6      	b.n	8004268 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004122:	4b54      	ldr	r3, [pc, #336]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d115      	bne.n	800415a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e09a      	b.n	8004268 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800413a:	4b4e      	ldr	r3, [pc, #312]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e08e      	b.n	8004268 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800414a:	4b4a      	ldr	r3, [pc, #296]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e086      	b.n	8004268 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800415a:	4b46      	ldr	r3, [pc, #280]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f023 0203 	bic.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4943      	ldr	r1, [pc, #268]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416c:	f7fc ff82 	bl	8001074 <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	e00a      	b.n	800418a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004174:	f7fc ff7e 	bl	8001074 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e06e      	b.n	8004268 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 020c 	and.w	r2, r3, #12
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	429a      	cmp	r2, r3
 800419a:	d1eb      	bne.n	8004174 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d208      	bcs.n	80041ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	492b      	ldr	r1, [pc, #172]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <HAL_RCC_ClockConfig+0x1ec>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d210      	bcs.n	80041fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d8:	4b25      	ldr	r3, [pc, #148]	; (8004270 <HAL_RCC_ClockConfig+0x1ec>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f023 0207 	bic.w	r2, r3, #7
 80041e0:	4923      	ldr	r1, [pc, #140]	; (8004270 <HAL_RCC_ClockConfig+0x1ec>)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e8:	4b21      	ldr	r3, [pc, #132]	; (8004270 <HAL_RCC_ClockConfig+0x1ec>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d001      	beq.n	80041fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e036      	b.n	8004268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	4918      	ldr	r1, [pc, #96]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004224:	4b13      	ldr	r3, [pc, #76]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4910      	ldr	r1, [pc, #64]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004238:	f000 f824 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	490b      	ldr	r1, [pc, #44]	; (8004278 <HAL_RCC_ClockConfig+0x1f4>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
 8004254:	4a09      	ldr	r2, [pc, #36]	; (800427c <HAL_RCC_ClockConfig+0x1f8>)
 8004256:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_ClockConfig+0x1fc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc feb9 	bl	8000fd4 <HAL_InitTick>
 8004262:	4603      	mov	r3, r0
 8004264:	72fb      	strb	r3, [r7, #11]

  return status;
 8004266:	7afb      	ldrb	r3, [r7, #11]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40022000 	.word	0x40022000
 8004274:	40021000 	.word	0x40021000
 8004278:	0800a024 	.word	0x0800a024
 800427c:	20000000 	.word	0x20000000
 8004280:	20000004 	.word	0x20000004

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004292:	4b3e      	ldr	r3, [pc, #248]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800429c:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x34>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	d121      	bne.n	80042f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d11e      	bne.n	80042f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042b8:	4b34      	ldr	r3, [pc, #208]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e005      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042d4:	4b2d      	ldr	r3, [pc, #180]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042e0:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10d      	bne.n	800430c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042f4:	e00a      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d102      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <HAL_RCC_GetSysClockFreq+0x110>)
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	e004      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d101      	bne.n	800430c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004308:	4b23      	ldr	r3, [pc, #140]	; (8004398 <HAL_RCC_GetSysClockFreq+0x114>)
 800430a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d134      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d003      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0xa6>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d003      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0xac>
 8004328:	e005      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800432a:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <HAL_RCC_GetSysClockFreq+0x110>)
 800432c:	617b      	str	r3, [r7, #20]
      break;
 800432e:	e005      	b.n	800433c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_RCC_GetSysClockFreq+0x114>)
 8004332:	617b      	str	r3, [r7, #20]
      break;
 8004334:	e002      	b.n	800433c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	617b      	str	r3, [r7, #20]
      break;
 800433a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800433c:	4b13      	ldr	r3, [pc, #76]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	3301      	adds	r3, #1
 8004348:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	fb03 f202 	mul.w	r2, r3, r2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	0e5b      	lsrs	r3, r3, #25
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	3301      	adds	r3, #1
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800437c:	69bb      	ldr	r3, [r7, #24]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	; 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	0800a03c 	.word	0x0800a03c
 8004394:	00f42400 	.word	0x00f42400
 8004398:	007a1200 	.word	0x007a1200

0800439c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000000 	.word	0x20000000

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043b8:	f7ff fff0 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4904      	ldr	r1, [pc, #16]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000
 80043dc:	0800a034 	.word	0x0800a034

080043e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043e4:	f7ff ffda 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0adb      	lsrs	r3, r3, #11
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4904      	ldr	r1, [pc, #16]	; (8004408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004400:	4618      	mov	r0, r3
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40021000 	.word	0x40021000
 8004408:	0800a034 	.word	0x0800a034

0800440c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004418:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004424:	f7ff f9b6 	bl	8003794 <HAL_PWREx_GetVoltageRange>
 8004428:	6178      	str	r0, [r7, #20]
 800442a:	e014      	b.n	8004456 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800442c:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004436:	6593      	str	r3, [r2, #88]	; 0x58
 8004438:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004444:	f7ff f9a6 	bl	8003794 <HAL_PWREx_GetVoltageRange>
 8004448:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800444a:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004454:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445c:	d10b      	bne.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b80      	cmp	r3, #128	; 0x80
 8004462:	d919      	bls.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2ba0      	cmp	r3, #160	; 0xa0
 8004468:	d902      	bls.n	8004470 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800446a:	2302      	movs	r3, #2
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	e013      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004470:	2301      	movs	r3, #1
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	e010      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d902      	bls.n	8004482 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800447c:	2303      	movs	r3, #3
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e00a      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d102      	bne.n	800448e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004488:	2302      	movs	r3, #2
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e004      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b70      	cmp	r3, #112	; 0x70
 8004492:	d101      	bne.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004494:	2301      	movs	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 0207 	bic.w	r2, r3, #7
 80044a0:	4909      	ldr	r1, [pc, #36]	; (80044c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d001      	beq.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40022000 	.word	0x40022000

080044cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044d4:	2300      	movs	r3, #0
 80044d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044d8:	2300      	movs	r3, #0
 80044da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d031      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044f0:	d01a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80044f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044f6:	d814      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004500:	d10f      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004502:	4b5d      	ldr	r3, [pc, #372]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	4a5c      	ldr	r2, [pc, #368]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800450e:	e00c      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f9de 	bl	80048d8 <RCCEx_PLLSAI1_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	74fb      	strb	r3, [r7, #19]
      break;
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004530:	4b51      	ldr	r3, [pc, #324]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	494e      	ldr	r1, [pc, #312]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004546:	e001      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 809e 	beq.w	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455a:	2300      	movs	r3, #0
 800455c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800455e:	4b46      	ldr	r3, [pc, #280]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00d      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004574:	4b40      	ldr	r3, [pc, #256]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	4a3f      	ldr	r2, [pc, #252]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457e:	6593      	str	r3, [r2, #88]	; 0x58
 8004580:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800458c:	2301      	movs	r3, #1
 800458e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004590:	4b3a      	ldr	r3, [pc, #232]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a39      	ldr	r2, [pc, #228]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800459c:	f7fc fd6a 	bl	8001074 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045a2:	e009      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a4:	f7fc fd66 	bl	8001074 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d902      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	74fb      	strb	r3, [r7, #19]
        break;
 80045b6:	e005      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045b8:	4b30      	ldr	r3, [pc, #192]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ef      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d15a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ca:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01e      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d019      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045e6:	4b24      	ldr	r3, [pc, #144]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045f2:	4b21      	ldr	r3, [pc, #132]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800460a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004612:	4a19      	ldr	r2, [pc, #100]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d016      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fc fd26 	bl	8001074 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462a:	e00b      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462c:	f7fc fd22 	bl	8001074 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	; 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d902      	bls.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	74fb      	strb	r3, [r7, #19]
            break;
 8004642:	e006      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0ec      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004658:	4b07      	ldr	r3, [pc, #28]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004666:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800466e:	e009      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	74bb      	strb	r3, [r7, #18]
 8004674:	e006      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004684:	7c7b      	ldrb	r3, [r7, #17]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d105      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468a:	4b8a      	ldr	r3, [pc, #552]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	4a89      	ldr	r2, [pc, #548]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004694:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046a2:	4b84      	ldr	r3, [pc, #528]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f023 0203 	bic.w	r2, r3, #3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	4980      	ldr	r1, [pc, #512]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046c4:	4b7b      	ldr	r3, [pc, #492]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f023 020c 	bic.w	r2, r3, #12
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	4978      	ldr	r1, [pc, #480]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046e6:	4b73      	ldr	r3, [pc, #460]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	496f      	ldr	r1, [pc, #444]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004708:	4b6a      	ldr	r3, [pc, #424]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	4967      	ldr	r1, [pc, #412]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800472a:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	495e      	ldr	r1, [pc, #376]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800474c:	4b59      	ldr	r3, [pc, #356]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	4956      	ldr	r1, [pc, #344]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800476e:	4b51      	ldr	r3, [pc, #324]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	494d      	ldr	r1, [pc, #308]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d028      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004790:	4b48      	ldr	r3, [pc, #288]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	4945      	ldr	r1, [pc, #276]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ae:	d106      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b0:	4b40      	ldr	r3, [pc, #256]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a3f      	ldr	r2, [pc, #252]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ba:	60d3      	str	r3, [r2, #12]
 80047bc:	e011      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	2101      	movs	r1, #1
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f882 	bl	80048d8 <RCCEx_PLLSAI1_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d028      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ee:	4b31      	ldr	r3, [pc, #196]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	492d      	ldr	r1, [pc, #180]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480c:	d106      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	4a28      	ldr	r2, [pc, #160]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004818:	60d3      	str	r3, [r2, #12]
 800481a:	e011      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004824:	d10c      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2101      	movs	r1, #1
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f853 	bl	80048d8 <RCCEx_PLLSAI1_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01c      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800484c:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485a:	4916      	ldr	r1, [pc, #88]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800486a:	d10c      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f830 	bl	80048d8 <RCCEx_PLLSAI1_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a0:	4904      	ldr	r1, [pc, #16]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000

080048b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048c2:	f043 0304 	orr.w	r3, r3, #4
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000

080048d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048e6:	4b74      	ldr	r3, [pc, #464]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d018      	beq.n	8004924 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048f2:	4b71      	ldr	r3, [pc, #452]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0203 	and.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d10d      	bne.n	800491e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
       ||
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800490a:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
       ||
 800491a:	429a      	cmp	r2, r3
 800491c:	d047      	beq.n	80049ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
 8004922:	e044      	b.n	80049ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d018      	beq.n	800495e <RCCEx_PLLSAI1_Config+0x86>
 800492c:	2b03      	cmp	r3, #3
 800492e:	d825      	bhi.n	800497c <RCCEx_PLLSAI1_Config+0xa4>
 8004930:	2b01      	cmp	r3, #1
 8004932:	d002      	beq.n	800493a <RCCEx_PLLSAI1_Config+0x62>
 8004934:	2b02      	cmp	r3, #2
 8004936:	d009      	beq.n	800494c <RCCEx_PLLSAI1_Config+0x74>
 8004938:	e020      	b.n	800497c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800493a:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d11d      	bne.n	8004982 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800494a:	e01a      	b.n	8004982 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800494c:	4b5a      	ldr	r3, [pc, #360]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	2b00      	cmp	r3, #0
 8004956:	d116      	bne.n	8004986 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495c:	e013      	b.n	8004986 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800495e:	4b56      	ldr	r3, [pc, #344]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800496a:	4b53      	ldr	r3, [pc, #332]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800497a:	e006      	b.n	800498a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      break;
 8004980:	e004      	b.n	800498c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004982:	bf00      	nop
 8004984:	e002      	b.n	800498c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004986:	bf00      	nop
 8004988:	e000      	b.n	800498c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800498a:	bf00      	nop
    }

    if(status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10d      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004992:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6819      	ldr	r1, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	430b      	orrs	r3, r1
 80049a8:	4943      	ldr	r1, [pc, #268]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d17c      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049b4:	4b40      	ldr	r3, [pc, #256]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a3f      	ldr	r2, [pc, #252]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fc fb58 	bl	8001074 <HAL_GetTick>
 80049c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049c6:	e009      	b.n	80049dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049c8:	f7fc fb54 	bl	8001074 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d902      	bls.n	80049dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	73fb      	strb	r3, [r7, #15]
        break;
 80049da:	e005      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049dc:	4b36      	ldr	r3, [pc, #216]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ef      	bne.n	80049c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d15f      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d110      	bne.n	8004a16 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049f4:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6892      	ldr	r2, [r2, #8]
 8004a04:	0211      	lsls	r1, r2, #8
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	06d2      	lsls	r2, r2, #27
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	492a      	ldr	r1, [pc, #168]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	610b      	str	r3, [r1, #16]
 8004a14:	e027      	b.n	8004a66 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d112      	bne.n	8004a42 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	0211      	lsls	r1, r2, #8
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6912      	ldr	r2, [r2, #16]
 8004a32:	0852      	lsrs	r2, r2, #1
 8004a34:	3a01      	subs	r2, #1
 8004a36:	0552      	lsls	r2, r2, #21
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	491f      	ldr	r1, [pc, #124]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	610b      	str	r3, [r1, #16]
 8004a40:	e011      	b.n	8004a66 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a42:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	0211      	lsls	r1, r2, #8
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6952      	ldr	r2, [r2, #20]
 8004a58:	0852      	lsrs	r2, r2, #1
 8004a5a:	3a01      	subs	r2, #1
 8004a5c:	0652      	lsls	r2, r2, #25
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	4915      	ldr	r1, [pc, #84]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a72:	f7fc faff 	bl	8001074 <HAL_GetTick>
 8004a76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a78:	e009      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a7a:	f7fc fafb 	bl	8001074 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d902      	bls.n	8004a8e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	73fb      	strb	r3, [r7, #15]
          break;
 8004a8c:	e005      	b.n	8004a9a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0ef      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40021000 	.word	0x40021000

08004abc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e040      	b.n	8004b50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc f91e 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f8c0 	bl	8004c80 <UART_SetConfig>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e022      	b.n	8004b50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fae0 	bl	80050d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fb67 	bl	800521c <UART_CheckIdleState>
 8004b4e:	4603      	mov	r3, r0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	f040 8082 	bne.w	8004c76 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_UART_Transmit+0x26>
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e07a      	b.n	8004c78 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Transmit+0x38>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e073      	b.n	8004c78 <HAL_UART_Transmit+0x120>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2221      	movs	r2, #33	; 0x21
 8004ba4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba6:	f7fc fa65 	bl	8001074 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	88fa      	ldrh	r2, [r7, #6]
 8004bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d108      	bne.n	8004bd8 <HAL_UART_Transmit+0x80>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e003      	b.n	8004be0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004be8:	e02d      	b.n	8004c46 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2180      	movs	r1, #128	; 0x80
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fb5a 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e039      	b.n	8004c78 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	881a      	ldrh	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c16:	b292      	uxth	r2, r2
 8004c18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e008      	b.n	8004c34 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	b292      	uxth	r2, r2
 8004c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3301      	adds	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1cb      	bne.n	8004bea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2140      	movs	r1, #64	; 0x40
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fb26 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e005      	b.n	8004c78 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c84:	b08a      	sub	sp, #40	; 0x28
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4bb4      	ldr	r3, [pc, #720]	; (8004f80 <UART_SetConfig+0x300>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4aa9      	ldr	r2, [pc, #676]	; (8004f84 <UART_SetConfig+0x304>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4aa0      	ldr	r2, [pc, #640]	; (8004f88 <UART_SetConfig+0x308>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d126      	bne.n	8004d58 <UART_SetConfig+0xd8>
 8004d0a:	4ba0      	ldr	r3, [pc, #640]	; (8004f8c <UART_SetConfig+0x30c>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d81b      	bhi.n	8004d50 <UART_SetConfig+0xd0>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0xa0>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d31 	.word	0x08004d31
 8004d24:	08004d41 	.word	0x08004d41
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d49 	.word	0x08004d49
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e080      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e07c      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e078      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	e074      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d56:	e070      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a8c      	ldr	r2, [pc, #560]	; (8004f90 <UART_SetConfig+0x310>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d138      	bne.n	8004dd4 <UART_SetConfig+0x154>
 8004d62:	4b8a      	ldr	r3, [pc, #552]	; (8004f8c <UART_SetConfig+0x30c>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b0c      	cmp	r3, #12
 8004d6e:	d82d      	bhi.n	8004dcc <UART_SetConfig+0x14c>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <UART_SetConfig+0xf8>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004dad 	.word	0x08004dad
 8004d7c:	08004dcd 	.word	0x08004dcd
 8004d80:	08004dcd 	.word	0x08004dcd
 8004d84:	08004dcd 	.word	0x08004dcd
 8004d88:	08004dbd 	.word	0x08004dbd
 8004d8c:	08004dcd 	.word	0x08004dcd
 8004d90:	08004dcd 	.word	0x08004dcd
 8004d94:	08004dcd 	.word	0x08004dcd
 8004d98:	08004db5 	.word	0x08004db5
 8004d9c:	08004dcd 	.word	0x08004dcd
 8004da0:	08004dcd 	.word	0x08004dcd
 8004da4:	08004dcd 	.word	0x08004dcd
 8004da8:	08004dc5 	.word	0x08004dc5
 8004dac:	2300      	movs	r3, #0
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	e042      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004db4:	2302      	movs	r3, #2
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dba:	e03e      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc2:	e03a      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dca:	e036      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd2:	e032      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a6a      	ldr	r2, [pc, #424]	; (8004f84 <UART_SetConfig+0x304>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d12a      	bne.n	8004e34 <UART_SetConfig+0x1b4>
 8004dde:	4b6b      	ldr	r3, [pc, #428]	; (8004f8c <UART_SetConfig+0x30c>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dec:	d01a      	beq.n	8004e24 <UART_SetConfig+0x1a4>
 8004dee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004df2:	d81b      	bhi.n	8004e2c <UART_SetConfig+0x1ac>
 8004df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df8:	d00c      	beq.n	8004e14 <UART_SetConfig+0x194>
 8004dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfe:	d815      	bhi.n	8004e2c <UART_SetConfig+0x1ac>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <UART_SetConfig+0x18c>
 8004e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e08:	d008      	beq.n	8004e1c <UART_SetConfig+0x19c>
 8004e0a:	e00f      	b.n	8004e2c <UART_SetConfig+0x1ac>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e12:	e012      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004e14:	2302      	movs	r3, #2
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1a:	e00e      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e22:	e00a      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004e24:	2308      	movs	r3, #8
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2a:	e006      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e32:	e002      	b.n	8004e3a <UART_SetConfig+0x1ba>
 8004e34:	2310      	movs	r3, #16
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a51      	ldr	r2, [pc, #324]	; (8004f84 <UART_SetConfig+0x304>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d17a      	bne.n	8004f3a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d824      	bhi.n	8004e96 <UART_SetConfig+0x216>
 8004e4c:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0x1d4>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e79 	.word	0x08004e79
 8004e58:	08004e97 	.word	0x08004e97
 8004e5c:	08004e81 	.word	0x08004e81
 8004e60:	08004e97 	.word	0x08004e97
 8004e64:	08004e87 	.word	0x08004e87
 8004e68:	08004e97 	.word	0x08004e97
 8004e6c:	08004e97 	.word	0x08004e97
 8004e70:	08004e97 	.word	0x08004e97
 8004e74:	08004e8f 	.word	0x08004e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e78:	f7ff fa9c 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8004e7c:	61f8      	str	r0, [r7, #28]
        break;
 8004e7e:	e010      	b.n	8004ea2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e80:	4b44      	ldr	r3, [pc, #272]	; (8004f94 <UART_SetConfig+0x314>)
 8004e82:	61fb      	str	r3, [r7, #28]
        break;
 8004e84:	e00d      	b.n	8004ea2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e86:	f7ff f9fd 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004e8a:	61f8      	str	r0, [r7, #28]
        break;
 8004e8c:	e009      	b.n	8004ea2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e92:	61fb      	str	r3, [r7, #28]
        break;
 8004e94:	e005      	b.n	8004ea2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ea0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8107 	beq.w	80050b8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d305      	bcc.n	8004ec6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d903      	bls.n	8004ece <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ecc:	e0f4      	b.n	80050b8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	461c      	mov	r4, r3
 8004ed4:	4615      	mov	r5, r2
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	022b      	lsls	r3, r5, #8
 8004ee0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ee4:	0222      	lsls	r2, r4, #8
 8004ee6:	68f9      	ldr	r1, [r7, #12]
 8004ee8:	6849      	ldr	r1, [r1, #4]
 8004eea:	0849      	lsrs	r1, r1, #1
 8004eec:	2000      	movs	r0, #0
 8004eee:	4688      	mov	r8, r1
 8004ef0:	4681      	mov	r9, r0
 8004ef2:	eb12 0a08 	adds.w	sl, r2, r8
 8004ef6:	eb43 0b09 	adc.w	fp, r3, r9
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f08:	4650      	mov	r0, sl
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	f7fb f9b8 	bl	8000280 <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4613      	mov	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1e:	d308      	bcc.n	8004f32 <UART_SetConfig+0x2b2>
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f26:	d204      	bcs.n	8004f32 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	60da      	str	r2, [r3, #12]
 8004f30:	e0c2      	b.n	80050b8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f38:	e0be      	b.n	80050b8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	d16a      	bne.n	800501a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004f44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d834      	bhi.n	8004fb6 <UART_SetConfig+0x336>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0x2d4>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f79 	.word	0x08004f79
 8004f58:	08004f99 	.word	0x08004f99
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fb7 	.word	0x08004fb7
 8004f64:	08004fa7 	.word	0x08004fa7
 8004f68:	08004fb7 	.word	0x08004fb7
 8004f6c:	08004fb7 	.word	0x08004fb7
 8004f70:	08004fb7 	.word	0x08004fb7
 8004f74:	08004faf 	.word	0x08004faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f78:	f7ff fa1c 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8004f7c:	61f8      	str	r0, [r7, #28]
        break;
 8004f7e:	e020      	b.n	8004fc2 <UART_SetConfig+0x342>
 8004f80:	efff69f3 	.word	0xefff69f3
 8004f84:	40008000 	.word	0x40008000
 8004f88:	40013800 	.word	0x40013800
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40004400 	.word	0x40004400
 8004f94:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f98:	f7ff fa22 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8004f9c:	61f8      	str	r0, [r7, #28]
        break;
 8004f9e:	e010      	b.n	8004fc2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4b4c      	ldr	r3, [pc, #304]	; (80050d4 <UART_SetConfig+0x454>)
 8004fa2:	61fb      	str	r3, [r7, #28]
        break;
 8004fa4:	e00d      	b.n	8004fc2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7ff f96d 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004faa:	61f8      	str	r0, [r7, #28]
        break;
 8004fac:	e009      	b.n	8004fc2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb2:	61fb      	str	r3, [r7, #28]
        break;
 8004fb4:	e005      	b.n	8004fc2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d077      	beq.n	80050b8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	005a      	lsls	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	441a      	add	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b0f      	cmp	r3, #15
 8004fe2:	d916      	bls.n	8005012 <UART_SetConfig+0x392>
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fea:	d212      	bcs.n	8005012 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f023 030f 	bic.w	r3, r3, #15
 8004ff4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	b29a      	uxth	r2, r3
 8005002:	8afb      	ldrh	r3, [r7, #22]
 8005004:	4313      	orrs	r3, r2
 8005006:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	8afa      	ldrh	r2, [r7, #22]
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	e052      	b.n	80050b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005018:	e04e      	b.n	80050b8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800501a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800501e:	2b08      	cmp	r3, #8
 8005020:	d827      	bhi.n	8005072 <UART_SetConfig+0x3f2>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <UART_SetConfig+0x3a8>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	0800504d 	.word	0x0800504d
 800502c:	08005055 	.word	0x08005055
 8005030:	0800505d 	.word	0x0800505d
 8005034:	08005073 	.word	0x08005073
 8005038:	08005063 	.word	0x08005063
 800503c:	08005073 	.word	0x08005073
 8005040:	08005073 	.word	0x08005073
 8005044:	08005073 	.word	0x08005073
 8005048:	0800506b 	.word	0x0800506b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800504c:	f7ff f9b2 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8005050:	61f8      	str	r0, [r7, #28]
        break;
 8005052:	e014      	b.n	800507e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005054:	f7ff f9c4 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8005058:	61f8      	str	r0, [r7, #28]
        break;
 800505a:	e010      	b.n	800507e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800505c:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <UART_SetConfig+0x454>)
 800505e:	61fb      	str	r3, [r7, #28]
        break;
 8005060:	e00d      	b.n	800507e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005062:	f7ff f90f 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8005066:	61f8      	str	r0, [r7, #28]
        break;
 8005068:	e009      	b.n	800507e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506e:	61fb      	str	r3, [r7, #28]
        break;
 8005070:	e005      	b.n	800507e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800507c:	bf00      	nop
    }

    if (pclk != 0U)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d019      	beq.n	80050b8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	085a      	lsrs	r2, r3, #1
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	441a      	add	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b0f      	cmp	r3, #15
 800509c:	d909      	bls.n	80050b2 <UART_SetConfig+0x432>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a4:	d205      	bcs.n	80050b2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60da      	str	r2, [r3, #12]
 80050b0:	e002      	b.n	80050b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3728      	adds	r7, #40	; 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d2:	bf00      	nop
 80050d4:	00f42400 	.word	0x00f42400

080050d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01a      	beq.n	80051ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051d6:	d10a      	bne.n	80051ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	605a      	str	r2, [r3, #4]
  }
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af02      	add	r7, sp, #8
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800522c:	f7fb ff22 	bl	8001074 <HAL_GetTick>
 8005230:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b08      	cmp	r3, #8
 800523e:	d10e      	bne.n	800525e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f82d 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e023      	b.n	80052a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d10e      	bne.n	800528a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800526c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f817 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e00d      	b.n	80052a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b09c      	sub	sp, #112	; 0x70
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052be:	e0a5      	b.n	800540c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	f000 80a1 	beq.w	800540c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fb fed3 	bl	8001074 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80052da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d13e      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052f4:	667b      	str	r3, [r7, #100]	; 0x64
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005300:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800530c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e6      	bne.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	663b      	str	r3, [r7, #96]	; 0x60
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3308      	adds	r3, #8
 8005330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005332:	64ba      	str	r2, [r7, #72]	; 0x48
 8005334:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e5      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e067      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d04f      	beq.n	800540c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537a:	d147      	bne.n	800540c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005384:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800539a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a4:	637b      	str	r3, [r7, #52]	; 0x34
 80053a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e6      	bne.n	8005386 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3308      	adds	r3, #8
 80053be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	613b      	str	r3, [r7, #16]
   return(result);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3308      	adds	r3, #8
 80053d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053d8:	623a      	str	r2, [r7, #32]
 80053da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	69f9      	ldr	r1, [r7, #28]
 80053de:	6a3a      	ldr	r2, [r7, #32]
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e5      	bne.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e010      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4013      	ands	r3, r2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	429a      	cmp	r2, r3
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	429a      	cmp	r2, r3
 8005428:	f43f af4a 	beq.w	80052c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3770      	adds	r7, #112	; 0x70
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <TOF_XSHUT_Write>:
#define TOF_PDEV &(TOF_Devices[unit])

extern VL53L0X_Dev_t TOF_Devices[TOF_UNIT_COUNT];

void TOF_XSHUT_Write(TOF_Units_t unit, GPIO_PinState state)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	460a      	mov	r2, r1
 8005442:	71fb      	strb	r3, [r7, #7]
 8005444:	4613      	mov	r3, r2
 8005446:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(TOF_DEV.XSHUT_Port, TOF_DEV.XSHUT_Pin, state);
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	4a0d      	ldr	r2, [pc, #52]	; (8005480 <TOF_XSHUT_Write+0x48>)
 800544c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	4413      	add	r3, r2
 8005456:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	4a08      	ldr	r2, [pc, #32]	; (8005480 <TOF_XSHUT_Write+0x48>)
 8005460:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	4413      	add	r3, r2
 800546a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	79ba      	ldrb	r2, [r7, #6]
 8005472:	4619      	mov	r1, r3
 8005474:	f7fc fe68 	bl	8002148 <HAL_GPIO_WritePin>
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	2000000c 	.word	0x2000000c

08005484 <TOF_Init_I2C_Adresses>:

TOF_Status_t TOF_Init_I2C_Adresses(uint8_t *detectedDevices)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	uint16_t Id;
	uint8_t FinalAddress;

	TOF_Units_t unit;

	uint8_t deviceCount = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	757b      	strb	r3, [r7, #21]

	// Shutdown every units
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 8005490:	2300      	movs	r3, #0
 8005492:	75bb      	strb	r3, [r7, #22]
 8005494:	e007      	b.n	80054a6 <TOF_Init_I2C_Adresses+0x22>
		TOF_XSHUT_Write(unit, TOF_XSHUT_RESET);
 8005496:	7dbb      	ldrb	r3, [r7, #22]
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff ffcc 	bl	8005438 <TOF_XSHUT_Write>
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 80054a0:	7dbb      	ldrb	r3, [r7, #22]
 80054a2:	3301      	adds	r3, #1
 80054a4:	75bb      	strb	r3, [r7, #22]
 80054a6:	7dbb      	ldrb	r3, [r7, #22]
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	d9f4      	bls.n	8005496 <TOF_Init_I2C_Adresses+0x12>

	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	75bb      	strb	r3, [r7, #22]
 80054b0:	e086      	b.n	80055c0 <TOF_Init_I2C_Adresses+0x13c>
	{

		Dev = &(TOF_Devices[unit]);
 80054b2:	7dbb      	ldrb	r3, [r7, #22]
 80054b4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80054b8:	fb02 f303 	mul.w	r3, r2, r3
 80054bc:	4a4e      	ldr	r2, [pc, #312]	; (80055f8 <TOF_Init_I2C_Adresses+0x174>)
 80054be:	4413      	add	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
		Dev->I2cDevAddr = TOF_BASE_I2C_ADDRESS;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2252      	movs	r2, #82	; 0x52
 80054c6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		Dev->Present = TOF_ABSENT;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		FinalAddress = TOF_BASE_I2C_ADDRESS + (unit+1)*2;
 80054d2:	7dbb      	ldrb	r3, [r7, #22]
 80054d4:	332a      	adds	r3, #42	; 0x2a
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]

		// Wake up one unit
		TOF_XSHUT_Write(unit, TOF_XSHUT_SET);
 80054dc:	7dbb      	ldrb	r3, [r7, #22]
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ffa9 	bl	8005438 <TOF_XSHUT_Write>
		// delay to let the TOF start
		HAL_Delay(2);
 80054e6:	2002      	movs	r0, #2
 80054e8:	f7fb fdd0 	bl	800108c <HAL_Delay>

		/* Set I2C standard mode (400 KHz) before doing the first register access */
		if (status == VL53L0X_ERROR_NONE) status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80054ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <TOF_Init_I2C_Adresses+0x7e>
 80054f4:	2200      	movs	r2, #0
 80054f6:	2188      	movs	r1, #136	; 0x88
 80054f8:	6938      	ldr	r0, [r7, #16]
 80054fa:	f000 fa77 	bl	80059ec <VL53L0X_WrByte>
 80054fe:	4603      	mov	r3, r0
 8005500:	75fb      	strb	r3, [r7, #23]

		do{

			// Try to get the model ID of the device
			TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 8005502:	f107 030c 	add.w	r3, r7, #12
 8005506:	461a      	mov	r2, r3
 8005508:	21c0      	movs	r1, #192	; 0xc0
 800550a:	6938      	ldr	r0, [r7, #16]
 800550c:	f000 fb1a 	bl	8005b44 <VL53L0X_RdWord>
 8005510:	4603      	mov	r3, r0
 8005512:	75fb      	strb	r3, [r7, #23]
 8005514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d13b      	bne.n	8005594 <TOF_Init_I2C_Adresses+0x110>

			// The device is a VL53L0X
			if(Id==TOF_BASE_ID)
 800551c:	89bb      	ldrh	r3, [r7, #12]
 800551e:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8005522:	4293      	cmp	r3, r2
 8005524:	d13d      	bne.n	80055a2 <TOF_Init_I2C_Adresses+0x11e>
			{
				// Set the new address
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8005526:	2201      	movs	r2, #1
 8005528:	2101      	movs	r1, #1
 800552a:	4834      	ldr	r0, [pc, #208]	; (80055fc <TOF_Init_I2C_Adresses+0x178>)
 800552c:	f7fc fe0c 	bl	8002148 <HAL_GPIO_WritePin>
				TOF_ASSERT_BREAK(VL53L0X_SetDeviceAddress(Dev,FinalAddress))
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	4619      	mov	r1, r3
 8005534:	6938      	ldr	r0, [r7, #16]
 8005536:	f000 fb9b 	bl	8005c70 <VL53L0X_SetDeviceAddress>
 800553a:	4603      	mov	r3, r0
 800553c:	75fb      	strb	r3, [r7, #23]
 800553e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d128      	bne.n	8005598 <TOF_Init_I2C_Adresses+0x114>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8005546:	2200      	movs	r2, #0
 8005548:	2101      	movs	r1, #1
 800554a:	482c      	ldr	r0, [pc, #176]	; (80055fc <TOF_Init_I2C_Adresses+0x178>)
 800554c:	f7fc fdfc 	bl	8002148 <HAL_GPIO_WritePin>
				// change the address of the device to the new one
				Dev->I2cDevAddr = FinalAddress;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	7bfa      	ldrb	r2, [r7, #15]
 8005554:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

				// try to get the model id to verify the address change
				TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 8005558:	f107 030c 	add.w	r3, r7, #12
 800555c:	461a      	mov	r2, r3
 800555e:	21c0      	movs	r1, #192	; 0xc0
 8005560:	6938      	ldr	r0, [r7, #16]
 8005562:	f000 faef 	bl	8005b44 <VL53L0X_RdWord>
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]
 800556a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d114      	bne.n	800559c <TOF_Init_I2C_Adresses+0x118>

				// try to initialize the device data model
				status = VL53L0X_DataInit(Dev);
 8005572:	6938      	ldr	r0, [r7, #16]
 8005574:	f000 fb94 	bl	8005ca0 <VL53L0X_DataInit>
 8005578:	4603      	mov	r3, r0
 800557a:	75fb      	strb	r3, [r7, #23]
				if(status) 	break;
 800557c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10d      	bne.n	80055a0 <TOF_Init_I2C_Adresses+0x11c>

				Dev->Present = TOF_PRESENT;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2201      	movs	r2, #1
 8005588:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
				deviceCount++;
 800558c:	7d7b      	ldrb	r3, [r7, #21]
 800558e:	3301      	adds	r3, #1
 8005590:	757b      	strb	r3, [r7, #21]
 8005592:	e006      	b.n	80055a2 <TOF_Init_I2C_Adresses+0x11e>
			TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 8005594:	bf00      	nop
 8005596:	e004      	b.n	80055a2 <TOF_Init_I2C_Adresses+0x11e>
				TOF_ASSERT_BREAK(VL53L0X_SetDeviceAddress(Dev,FinalAddress))
 8005598:	bf00      	nop
 800559a:	e002      	b.n	80055a2 <TOF_Init_I2C_Adresses+0x11e>
				TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 800559c:	bf00      	nop
 800559e:	e000      	b.n	80055a2 <TOF_Init_I2C_Adresses+0x11e>
				if(status) 	break;
 80055a0:	bf00      	nop
			}

		} while(0); // while loop to be able to exit with a simple break command. (no repetitions, just a coding trick)

		// if there is a fail, shutdown the sensor to be sure
		if(status)TOF_XSHUT_Write(unit, TOF_XSHUT_RESET);
 80055a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <TOF_Init_I2C_Adresses+0x130>
 80055aa:	7dbb      	ldrb	r3, [r7, #22]
 80055ac:	2100      	movs	r1, #0
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff ff42 	bl	8005438 <TOF_XSHUT_Write>

		HAL_Delay(100);
 80055b4:	2064      	movs	r0, #100	; 0x64
 80055b6:	f7fb fd69 	bl	800108c <HAL_Delay>
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 80055ba:	7dbb      	ldrb	r3, [r7, #22]
 80055bc:	3301      	adds	r3, #1
 80055be:	75bb      	strb	r3, [r7, #22]
 80055c0:	7dbb      	ldrb	r3, [r7, #22]
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	f67f af75 	bls.w	80054b2 <TOF_Init_I2C_Adresses+0x2e>

	}

	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 80055c8:	2300      	movs	r3, #0
 80055ca:	75bb      	strb	r3, [r7, #22]
 80055cc:	e007      	b.n	80055de <TOF_Init_I2C_Adresses+0x15a>
		TOF_XSHUT_Write(unit, TOF_XSHUT_SET);
 80055ce:	7dbb      	ldrb	r3, [r7, #22]
 80055d0:	2101      	movs	r1, #1
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff ff30 	bl	8005438 <TOF_XSHUT_Write>
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 80055d8:	7dbb      	ldrb	r3, [r7, #22]
 80055da:	3301      	adds	r3, #1
 80055dc:	75bb      	strb	r3, [r7, #22]
 80055de:	7dbb      	ldrb	r3, [r7, #22]
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d9f4      	bls.n	80055ce <TOF_Init_I2C_Adresses+0x14a>

	*detectedDevices = deviceCount;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	7d7a      	ldrb	r2, [r7, #21]
 80055e8:	701a      	strb	r2, [r3, #0]



	return status;
 80055ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	2000000c 	.word	0x2000000c
 80055fc:	48000400 	.word	0x48000400

08005600 <TOF_Init_Item>:

TOF_Status_t TOF_Init_Item(TOF_Units_t unit)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Dev_t *Dev = &(TOF_Devices[unit]);
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005610:	fb02 f303 	mul.w	r3, r2, r3
 8005614:	4a6b      	ldr	r2, [pc, #428]	; (80057c4 <TOF_Init_Item+0x1c4>)
 8005616:	4413      	add	r3, r2
 8005618:	627b      	str	r3, [r7, #36]	; 0x24

    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800561a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800561e:	623b      	str	r3, [r7, #32]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8005620:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005624:	61fb      	str	r3, [r7, #28]
	uint32_t timingBudget = 33000;
 8005626:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800562a:	61bb      	str	r3, [r7, #24]
	uint8_t preRangeVcselPeriod = 14;
 800562c:	230e      	movs	r3, #14
 800562e:	75fb      	strb	r3, [r7, #23]
	uint8_t finalRangeVcselPeriod = 10;
 8005630:	230a      	movs	r3, #10
 8005632:	75bb      	strb	r3, [r7, #22]

	TOF_ASSERT(VL53L0X_DataInit(Dev))
 8005634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005636:	f000 fb33 	bl	8005ca0 <VL53L0X_DataInit>
 800563a:	4603      	mov	r3, r0
 800563c:	757b      	strb	r3, [r7, #21]
 800563e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <TOF_Init_Item+0x4c>
 8005646:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800564a:	e0b7      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal))
 800564c:	f107 0213 	add.w	r2, r7, #19
 8005650:	f107 0314 	add.w	r3, r7, #20
 8005654:	4619      	mov	r1, r3
 8005656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005658:	f001 f8d6 	bl	8006808 <VL53L0X_PerformRefCalibration>
 800565c:	4603      	mov	r3, r0
 800565e:	757b      	strb	r3, [r7, #21]
 8005660:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <TOF_Init_Item+0x6e>
 8005668:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800566c:	e0a6      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads))
 800566e:	f107 020b 	add.w	r2, r7, #11
 8005672:	f107 030c 	add.w	r3, r7, #12
 8005676:	4619      	mov	r1, r3
 8005678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800567a:	f001 fc2f 	bl	8006edc <VL53L0X_PerformRefSpadManagement>
 800567e:	4603      	mov	r3, r0
 8005680:	757b      	strb	r3, [r7, #21]
 8005682:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <TOF_Init_Item+0x90>
 800568a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800568e:	e095      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING))
 8005690:	2100      	movs	r1, #0
 8005692:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005694:	f000 fcf8 	bl	8006088 <VL53L0X_SetDeviceMode>
 8005698:	4603      	mov	r3, r0
 800569a:	757b      	strb	r3, [r7, #21]
 800569c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <TOF_Init_Item+0xaa>
 80056a4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80056a8:	e088      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1))
 80056aa:	2201      	movs	r2, #1
 80056ac:	2100      	movs	r1, #0
 80056ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056b0:	f000 fea4 	bl	80063fc <VL53L0X_SetLimitCheckEnable>
 80056b4:	4603      	mov	r3, r0
 80056b6:	757b      	strb	r3, [r7, #21]
 80056b8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <TOF_Init_Item+0xc6>
 80056c0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80056c4:	e07a      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1))
 80056c6:	2201      	movs	r2, #1
 80056c8:	2101      	movs	r1, #1
 80056ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056cc:	f000 fe96 	bl	80063fc <VL53L0X_SetLimitCheckEnable>
 80056d0:	4603      	mov	r3, r0
 80056d2:	757b      	strb	r3, [r7, #21]
 80056d4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <TOF_Init_Item+0xe2>
 80056dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80056e0:	e06c      	b.n	80057bc <TOF_Init_Item+0x1bc>
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 80056e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056e6:	623b      	str	r3, [r7, #32]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 80056e8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80056ec:	61fb      	str	r3, [r7, #28]
		timingBudget = 200000;
 80056ee:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <TOF_Init_Item+0x1c8>)
 80056f0:	61bb      	str	r3, [r7, #24]
		preRangeVcselPeriod = 14;
 80056f2:	230e      	movs	r3, #14
 80056f4:	75fb      	strb	r3, [r7, #23]
		finalRangeVcselPeriod = 10;
 80056f6:	230a      	movs	r3, #10
 80056f8:	75bb      	strb	r3, [r7, #22]
		break;
 80056fa:	bf00      	nop
		finalRangeVcselPeriod = 10;
		break;
	default:
		return TOF_STATUS_CONFIG_UNKNOWN_RANGING_MODE;
	}
	status = TOF_STATUS_SUCESS;
 80056fc:	2300      	movs	r3, #0
 80056fe:	757b      	strb	r3, [r7, #21]

	TOF_ASSERT(VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit))
 8005700:	6a3a      	ldr	r2, [r7, #32]
 8005702:	2101      	movs	r1, #1
 8005704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005706:	f000 ff29 	bl	800655c <VL53L0X_SetLimitCheckValue>
 800570a:	4603      	mov	r3, r0
 800570c:	757b      	strb	r3, [r7, #21]
 800570e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <TOF_Init_Item+0x11c>
 8005716:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800571a:	e04f      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit))
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	2100      	movs	r1, #0
 8005720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005722:	f000 ff1b 	bl	800655c <VL53L0X_SetLimitCheckValue>
 8005726:	4603      	mov	r3, r0
 8005728:	757b      	strb	r3, [r7, #21]
 800572a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <TOF_Init_Item+0x138>
 8005732:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005736:	e041      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,  timingBudget))
 8005738:	69b9      	ldr	r1, [r7, #24]
 800573a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800573c:	f000 fce3 	bl	8006106 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8005740:	4603      	mov	r3, r0
 8005742:	757b      	strb	r3, [r7, #21]
 8005744:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <TOF_Init_Item+0x152>
 800574c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005750:	e034      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod))
 8005752:	7dfb      	ldrb	r3, [r7, #23]
 8005754:	461a      	mov	r2, r3
 8005756:	2100      	movs	r1, #0
 8005758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800575a:	f000 fcfa 	bl	8006152 <VL53L0X_SetVcselPulsePeriod>
 800575e:	4603      	mov	r3, r0
 8005760:	757b      	strb	r3, [r7, #21]
 8005762:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <TOF_Init_Item+0x170>
 800576a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800576e:	e025      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod))
 8005770:	7dbb      	ldrb	r3, [r7, #22]
 8005772:	461a      	mov	r2, r3
 8005774:	2101      	movs	r1, #1
 8005776:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005778:	f000 fceb 	bl	8006152 <VL53L0X_SetVcselPulsePeriod>
 800577c:	4603      	mov	r3, r0
 800577e:	757b      	strb	r3, [r7, #21]
 8005780:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <TOF_Init_Item+0x18e>
 8005788:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800578c:	e016      	b.n	80057bc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal))
 800578e:	f107 0213 	add.w	r2, r7, #19
 8005792:	f107 0314 	add.w	r3, r7, #20
 8005796:	4619      	mov	r1, r3
 8005798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579a:	f001 f835 	bl	8006808 <VL53L0X_PerformRefCalibration>
 800579e:	4603      	mov	r3, r0
 80057a0:	757b      	strb	r3, [r7, #21]
 80057a2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <TOF_Init_Item+0x1b0>
 80057aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80057ae:	e005      	b.n	80057bc <TOF_Init_Item+0x1bc>

	Dev->LeakyFirst = 1;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	2201      	movs	r2, #1
 80057b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	return status;
 80057b8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3728      	adds	r7, #40	; 0x28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	2000000c 	.word	0x2000000c
 80057c8:	00030d40 	.word	0x00030d40

080057cc <TOF_Init>:
 * Initialize all the TOFs sensors
 * @param None
 * @return TOF_Status_t error_code
 */
TOF_Status_t TOF_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
	TOF_Status_t status;
	TOF_Units_t unit;
	uint8_t devicesDetected;

	TOF_ASSERT(TOF_Init_I2C_Adresses(&devicesDetected))
 80057d2:	1d7b      	adds	r3, r7, #5
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fe55 	bl	8005484 <TOF_Init_I2C_Adresses>
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <TOF_Init+0x20>
 80057e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ea:	e01d      	b.n	8005828 <TOF_Init+0x5c>

	if(devicesDetected<TOF_UNIT_COUNT) return TOF_STATUS_SENSORS_MISSING;
 80057ec:	797b      	ldrb	r3, [r7, #5]
 80057ee:	2b05      	cmp	r3, #5
 80057f0:	d802      	bhi.n	80057f8 <TOF_Init+0x2c>
 80057f2:	f06f 0360 	mvn.w	r3, #96	; 0x60
 80057f6:	e017      	b.n	8005828 <TOF_Init+0x5c>

	for (unit = 0; unit<TOF_UNIT_COUNT; unit++)
 80057f8:	2300      	movs	r3, #0
 80057fa:	71bb      	strb	r3, [r7, #6]
 80057fc:	e00f      	b.n	800581e <TOF_Init+0x52>
	{
		TOF_ASSERT(TOF_Init_Item(unit))
 80057fe:	79bb      	ldrb	r3, [r7, #6]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fefd 	bl	8005600 <TOF_Init_Item>
 8005806:	4603      	mov	r3, r0
 8005808:	71fb      	strb	r3, [r7, #7]
 800580a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <TOF_Init+0x4c>
 8005812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005816:	e007      	b.n	8005828 <TOF_Init+0x5c>
	for (unit = 0; unit<TOF_UNIT_COUNT; unit++)
 8005818:	79bb      	ldrb	r3, [r7, #6]
 800581a:	3301      	adds	r3, #1
 800581c:	71bb      	strb	r3, [r7, #6]
 800581e:	79bb      	ldrb	r3, [r7, #6]
 8005820:	2b05      	cmp	r3, #5
 8005822:	d9ec      	bls.n	80057fe <TOF_Init+0x32>
	}

	return status;
 8005824:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <TOF_Get_Range>:
 *										3 : minimal value
 *										5 : communication interrupted
 * @return TOF_Status_t error_code
 */
TOF_Status_t TOF_Get_Range(TOF_Units_t unit, uint16_t max_retries, uint16_t *range_milimeters, uint8_t *range_status)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08c      	sub	sp, #48	; 0x30
 8005834:	af00      	add	r7, sp, #0
 8005836:	60ba      	str	r2, [r7, #8]
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
 800583e:	460b      	mov	r3, r1
 8005840:	81bb      	strh	r3, [r7, #12]
	TOF_Status_t status;
	VL53L0X_RangingMeasurementData_t data;
	uint16_t retries;

	for(retries=0; retries<max_retries; retries++)
 8005842:	2300      	movs	r3, #0
 8005844:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005846:	e01d      	b.n	8005884 <TOF_Get_Range+0x54>
	{
		TOF_ASSERT(VL53L0X_PerformSingleRangingMeasurement(TOF_PDEV, &data))
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	4a16      	ldr	r2, [pc, #88]	; (80058ac <TOF_Get_Range+0x7c>)
 8005854:	4413      	add	r3, r2
 8005856:	f107 0210 	add.w	r2, r7, #16
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f001 fa75 	bl	8006d4c <VL53L0X_PerformSingleRangingMeasurement>
 8005862:	4603      	mov	r3, r0
 8005864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005868:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <TOF_Get_Range+0x46>
 8005870:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005874:	e015      	b.n	80058a2 <TOF_Get_Range+0x72>
		if(data.RangeStatus==1) break;
 8005876:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800587a:	2b01      	cmp	r3, #1
 800587c:	d007      	beq.n	800588e <TOF_Get_Range+0x5e>
	for(retries=0; retries<max_retries; retries++)
 800587e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005880:	3301      	adds	r3, #1
 8005882:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005884:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005886:	89bb      	ldrh	r3, [r7, #12]
 8005888:	429a      	cmp	r2, r3
 800588a:	d3dd      	bcc.n	8005848 <TOF_Get_Range+0x18>
 800588c:	e000      	b.n	8005890 <TOF_Get_Range+0x60>
		if(data.RangeStatus==1) break;
 800588e:	bf00      	nop
	}

	*range_milimeters = data.RangeMilliMeter;
 8005890:	8b3a      	ldrh	r2, [r7, #24]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	801a      	strh	r2, [r3, #0]
	*range_status = data.RangeStatus;
 8005896:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	701a      	strb	r2, [r3, #0]

	return status;
 800589e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3730      	adds	r7, #48	; 0x30
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	2000000c 	.word	0x2000000c

080058b0 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	330a      	adds	r3, #10
 80058c0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80058ce:	b299      	uxth	r1, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	4613      	mov	r3, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	f7fc fcdc 	bl	8002298 <HAL_I2C_Master_Transmit>
 80058e0:	4603      	mov	r3, r0
 80058e2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80058e4:	693b      	ldr	r3, [r7, #16]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b088      	sub	sp, #32
 80058f2:	af02      	add	r7, sp, #8
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	330a      	adds	r3, #10
 80058fe:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	b2db      	uxtb	r3, r3
 8005912:	b299      	uxth	r1, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	b29a      	uxth	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	f7fc fdae 	bl	8002480 <HAL_I2C_Master_Receive>
 8005924:	4603      	mov	r3, r0
 8005926:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005928:	693b      	ldr	r3, [r7, #16]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	460b      	mov	r3, r1
 8005942:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005944:	2300      	movs	r3, #0
 8005946:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b3f      	cmp	r3, #63	; 0x3f
 800594c:	d902      	bls.n	8005954 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800594e:	f06f 0303 	mvn.w	r3, #3
 8005952:	e016      	b.n	8005982 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8005954:	4a0d      	ldr	r2, [pc, #52]	; (800598c <VL53L0X_WriteMulti+0x58>)
 8005956:	7afb      	ldrb	r3, [r7, #11]
 8005958:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	480c      	ldr	r0, [pc, #48]	; (8005990 <VL53L0X_WriteMulti+0x5c>)
 8005960:	f003 febc 	bl	80096dc <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	3301      	adds	r3, #1
 8005968:	461a      	mov	r2, r3
 800596a:	4908      	ldr	r1, [pc, #32]	; (800598c <VL53L0X_WriteMulti+0x58>)
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7ff ff9f 	bl	80058b0 <_I2CWrite>
 8005972:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800597a:	23ec      	movs	r3, #236	; 0xec
 800597c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800597e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000cec 	.word	0x20000cec
 8005990:	20000ced 	.word	0x20000ced

08005994 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	460b      	mov	r3, r1
 80059a2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80059a8:	f107 030b 	add.w	r3, r7, #11
 80059ac:	2201      	movs	r2, #1
 80059ae:	4619      	mov	r1, r3
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff ff7d 	bl	80058b0 <_I2CWrite>
 80059b6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80059be:	23ec      	movs	r3, #236	; 0xec
 80059c0:	75fb      	strb	r3, [r7, #23]
        goto done;
 80059c2:	e00c      	b.n	80059de <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ff90 	bl	80058ee <_I2CRead>
 80059ce:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80059d6:	23ec      	movs	r3, #236	; 0xec
 80059d8:	75fb      	strb	r3, [r7, #23]
 80059da:	e000      	b.n	80059de <VL53L0X_ReadMulti+0x4a>
    }
done:
 80059dc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80059de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	70fb      	strb	r3, [r7, #3]
 80059f8:	4613      	mov	r3, r2
 80059fa:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005a00:	4a0b      	ldr	r2, [pc, #44]	; (8005a30 <VL53L0X_WrByte+0x44>)
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8005a06:	4a0a      	ldr	r2, [pc, #40]	; (8005a30 <VL53L0X_WrByte+0x44>)
 8005a08:	78bb      	ldrb	r3, [r7, #2]
 8005a0a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	4908      	ldr	r1, [pc, #32]	; (8005a30 <VL53L0X_WrByte+0x44>)
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff4d 	bl	80058b0 <_I2CWrite>
 8005a16:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005a1e:	23ec      	movs	r3, #236	; 0xec
 8005a20:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000cec 	.word	0x20000cec

08005a34 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
 8005a40:	4613      	mov	r3, r2
 8005a42:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005a48:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <VL53L0X_WrWord+0x50>)
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8005a4e:	883b      	ldrh	r3, [r7, #0]
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <VL53L0X_WrWord+0x50>)
 8005a58:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8005a5a:	883b      	ldrh	r3, [r7, #0]
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <VL53L0X_WrWord+0x50>)
 8005a60:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005a62:	2203      	movs	r2, #3
 8005a64:	4907      	ldr	r1, [pc, #28]	; (8005a84 <VL53L0X_WrWord+0x50>)
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff ff22 	bl	80058b0 <_I2CWrite>
 8005a6c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005a74:	23ec      	movs	r3, #236	; 0xec
 8005a76:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000cec 	.word	0x20000cec

08005a88 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	4608      	mov	r0, r1
 8005a92:	4611      	mov	r1, r2
 8005a94:	461a      	mov	r2, r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	70fb      	strb	r3, [r7, #3]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70bb      	strb	r3, [r7, #2]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8005aa6:	f107 020e 	add.w	r2, r7, #14
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f81e 	bl	8005af0 <VL53L0X_RdByte>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8005ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d110      	bne.n	8005ae2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8005ac0:	7bba      	ldrb	r2, [r7, #14]
 8005ac2:	78bb      	ldrb	r3, [r7, #2]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	787b      	ldrb	r3, [r7, #1]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8005ad0:	7bba      	ldrb	r2, [r7, #14]
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff ff88 	bl	80059ec <VL53L0X_WrByte>
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]
 8005ae0:	e000      	b.n	8005ae4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8005ae2:	bf00      	nop
done:
    return Status;
 8005ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	460b      	mov	r3, r1
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005b02:	f107 030b 	add.w	r3, r7, #11
 8005b06:	2201      	movs	r2, #1
 8005b08:	4619      	mov	r1, r3
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7ff fed0 	bl	80058b0 <_I2CWrite>
 8005b10:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b18:	23ec      	movs	r3, #236	; 0xec
 8005b1a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005b1c:	e00c      	b.n	8005b38 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005b1e:	2201      	movs	r2, #1
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff fee3 	bl	80058ee <_I2CRead>
 8005b28:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b30:	23ec      	movs	r3, #236	; 0xec
 8005b32:	75fb      	strb	r3, [r7, #23]
 8005b34:	e000      	b.n	8005b38 <VL53L0X_RdByte+0x48>
    }
done:
 8005b36:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005b56:	f107 030b 	add.w	r3, r7, #11
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff fea6 	bl	80058b0 <_I2CWrite>
 8005b64:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b6c:	23ec      	movs	r3, #236	; 0xec
 8005b6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005b70:	e017      	b.n	8005ba2 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005b72:	2202      	movs	r2, #2
 8005b74:	490e      	ldr	r1, [pc, #56]	; (8005bb0 <VL53L0X_RdWord+0x6c>)
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff feb9 	bl	80058ee <_I2CRead>
 8005b7c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005b84:	23ec      	movs	r3, #236	; 0xec
 8005b86:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005b88:	e00b      	b.n	8005ba2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <VL53L0X_RdWord+0x6c>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <VL53L0X_RdWord+0x6c>)
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8005ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000cec 	.word	0x20000cec

08005bb4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005bc6:	f107 030b 	add.w	r3, r7, #11
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4619      	mov	r1, r3
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff fe6e 	bl	80058b0 <_I2CWrite>
 8005bd4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005bdc:	23ec      	movs	r3, #236	; 0xec
 8005bde:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005be0:	e01b      	b.n	8005c1a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8005be2:	2204      	movs	r2, #4
 8005be4:	4910      	ldr	r1, [pc, #64]	; (8005c28 <VL53L0X_RdDWord+0x74>)
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7ff fe81 	bl	80058ee <_I2CRead>
 8005bec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005bf4:	23ec      	movs	r3, #236	; 0xec
 8005bf6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005bf8:	e00f      	b.n	8005c1a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <VL53L0X_RdDWord+0x74>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	061a      	lsls	r2, r3, #24
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <VL53L0X_RdDWord+0x74>)
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	041b      	lsls	r3, r3, #16
 8005c06:	441a      	add	r2, r3
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <VL53L0X_RdDWord+0x74>)
 8005c0a:	789b      	ldrb	r3, [r3, #2]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	4413      	add	r3, r2
 8005c10:	4a05      	ldr	r2, [pc, #20]	; (8005c28 <VL53L0X_RdDWord+0x74>)
 8005c12:	78d2      	ldrb	r2, [r2, #3]
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8005c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000cec 	.word	0x20000cec

08005c2c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8005c38:	2002      	movs	r0, #2
 8005c3a:	f7fb fa27 	bl	800108c <HAL_Delay>
    return status;
 8005c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 f953 	bl	8006f06 <VL53L0X_get_offset_calibration_data_micro_meter>
 8005c60:	4603      	mov	r3, r0
 8005c62:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	218a      	movs	r1, #138	; 0x8a
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff feae 	bl	80059ec <VL53L0X_WrByte>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8005c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005ca0:	b5b0      	push	{r4, r5, r7, lr}
 8005ca2:	b096      	sub	sp, #88	; 0x58
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005cae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d107      	bne.n	8005cc6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2188      	movs	r1, #136	; 0x88
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff fe96 	bl	80059ec <VL53L0X_WrByte>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cd4:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005cde:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a9e      	ldr	r2, [pc, #632]	; (8005f60 <VL53L0X_DataInit+0x2c0>)
 8005ce6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a9d      	ldr	r2, [pc, #628]	; (8005f64 <VL53L0X_DataInit+0x2c4>)
 8005cee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005cf8:	f107 0310 	add.w	r3, r7, #16
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f932 	bl	8005f68 <VL53L0X_GetDeviceParameters>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8005d0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d112      	bne.n	8005d38 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005d12:	2300      	movs	r3, #0
 8005d14:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005d16:	2300      	movs	r3, #0
 8005d18:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f103 0410 	add.w	r4, r3, #16
 8005d20:	f107 0510 	add.w	r5, r7, #16
 8005d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2264      	movs	r2, #100	; 0x64
 8005d3c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005d46:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005d50:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005d5a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005d66:	2201      	movs	r2, #1
 8005d68:	2180      	movs	r1, #128	; 0x80
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fe3e 	bl	80059ec <VL53L0X_WrByte>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d7e:	2201      	movs	r2, #1
 8005d80:	21ff      	movs	r1, #255	; 0xff
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff fe32 	bl	80059ec <VL53L0X_WrByte>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005d96:	2200      	movs	r2, #0
 8005d98:	2100      	movs	r1, #0
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff fe26 	bl	80059ec <VL53L0X_WrByte>
 8005da0:	4603      	mov	r3, r0
 8005da2:	461a      	mov	r2, r3
 8005da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8005dae:	f107 030f 	add.w	r3, r7, #15
 8005db2:	461a      	mov	r2, r3
 8005db4:	2191      	movs	r1, #145	; 0x91
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff fe9a 	bl	8005af0 <VL53L0X_RdByte>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8005dca:	7bfa      	ldrb	r2, [r7, #15]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fe08 	bl	80059ec <VL53L0X_WrByte>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	461a      	mov	r2, r3
 8005de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005dea:	2200      	movs	r2, #0
 8005dec:	21ff      	movs	r1, #255	; 0xff
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fdfc 	bl	80059ec <VL53L0X_WrByte>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005e02:	2200      	movs	r2, #0
 8005e04:	2180      	movs	r1, #128	; 0x80
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff fdf0 	bl	80059ec <VL53L0X_WrByte>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	653b      	str	r3, [r7, #80]	; 0x50
 8005e1e:	e014      	b.n	8005e4a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005e20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d114      	bne.n	8005e52 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fae3 	bl	80063fc <VL53L0X_SetLimitCheckEnable>
 8005e36:	4603      	mov	r3, r0
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e46:	3301      	adds	r3, #1
 8005e48:	653b      	str	r3, [r7, #80]	; 0x50
 8005e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e4c:	2b05      	cmp	r3, #5
 8005e4e:	dde7      	ble.n	8005e20 <VL53L0X_DataInit+0x180>
 8005e50:	e000      	b.n	8005e54 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005e52:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005e54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d107      	bne.n	8005e6c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2102      	movs	r1, #2
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 facb 	bl	80063fc <VL53L0X_SetLimitCheckEnable>
 8005e66:	4603      	mov	r3, r0
 8005e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005e6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d107      	bne.n	8005e84 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005e74:	2200      	movs	r2, #0
 8005e76:	2103      	movs	r1, #3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fabf 	bl	80063fc <VL53L0X_SetLimitCheckEnable>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005e84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d107      	bne.n	8005e9c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2104      	movs	r1, #4
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fab3 	bl	80063fc <VL53L0X_SetLimitCheckEnable>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005e9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d107      	bne.n	8005eb4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	2105      	movs	r1, #5
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 faa7 	bl	80063fc <VL53L0X_SetLimitCheckEnable>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005eb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d108      	bne.n	8005ece <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005ebc:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fb4a 	bl	800655c <VL53L0X_SetLimitCheckValue>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005ece:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d108      	bne.n	8005ee8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005ed6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005eda:	2101      	movs	r1, #1
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fb3d 	bl	800655c <VL53L0X_SetLimitCheckValue>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ee8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d108      	bne.n	8005f02 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005ef0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fb30 	bl	800655c <VL53L0X_SetLimitCheckValue>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f02:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d107      	bne.n	8005f1a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2103      	movs	r1, #3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fb24 	bl	800655c <VL53L0X_SetLimitCheckValue>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10f      	bne.n	8005f42 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f2a:	22ff      	movs	r2, #255	; 0xff
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fd5c 	bl	80059ec <VL53L0X_WrByte>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005f42:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005f52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3758      	adds	r7, #88	; 0x58
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	00016b85 	.word	0x00016b85
 8005f64:	000970a4 	.word	0x000970a4

08005f68 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f8b0 	bl	80060e0 <VL53L0X_GetDeviceMode>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d107      	bne.n	8005f9c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9b6 	bl	8006304 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d107      	bne.n	8005fc2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	3310      	adds	r3, #16
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f9ec 	bl	8006396 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d107      	bne.n	8005fda <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	3314      	adds	r3, #20
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fe3a 	bl	8005c4a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d134      	bne.n	800604c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	e02a      	b.n	800603e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d12a      	bne.n	8006046 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	b299      	uxth	r1, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3304      	adds	r3, #4
 8006000:	461a      	mov	r2, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fb0c 	bl	8006620 <VL53L0X_GetLimitCheckValue>
 8006008:	4603      	mov	r3, r0
 800600a:	461a      	mov	r2, r3
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	4313      	orrs	r3, r2
 8006010:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d117      	bne.n	800604a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	b299      	uxth	r1, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	3318      	adds	r3, #24
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	4413      	add	r3, r2
 8006026:	461a      	mov	r2, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa73 	bl	8006514 <VL53L0X_GetLimitCheckEnable>
 800602e:	4603      	mov	r3, r0
 8006030:	461a      	mov	r2, r3
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	4313      	orrs	r3, r2
 8006036:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	3301      	adds	r3, #1
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b05      	cmp	r3, #5
 8006042:	ddd1      	ble.n	8005fe8 <VL53L0X_GetDeviceParameters+0x80>
 8006044:	e002      	b.n	800604c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006046:	bf00      	nop
 8006048:	e000      	b.n	800604c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800604a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800604c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d107      	bne.n	8006064 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	333c      	adds	r3, #60	; 0x3c
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fb6e 	bl	800673c <VL53L0X_GetWrapAroundCheckEnable>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	3304      	adds	r3, #4
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f85a 	bl	800612c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800607c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006094:	2300      	movs	r3, #0
 8006096:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	2b15      	cmp	r3, #21
 800609c:	bf8c      	ite	hi
 800609e:	2201      	movhi	r2, #1
 80060a0:	2200      	movls	r2, #0
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	d10e      	bne.n	80060c6 <VL53L0X_SetDeviceMode+0x3e>
 80060a8:	2201      	movs	r2, #1
 80060aa:	409a      	lsls	r2, r3
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <VL53L0X_SetDeviceMode+0x54>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	78fa      	ldrb	r2, [r7, #3]
 80060c2:	741a      	strb	r2, [r3, #16]
		break;
 80060c4:	e001      	b.n	80060ca <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80060c6:	23f8      	movs	r3, #248	; 0xf8
 80060c8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80060ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	0030000b 	.word	0x0030000b

080060e0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	7c1a      	ldrb	r2, [r3, #16]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80060f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006110:	2300      	movs	r3, #0
 8006112:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f002 faab 	bl	8008672 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006120:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f002 fb78 	bl	8008832 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006142:	4603      	mov	r3, r0
 8006144:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006146:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
 800615e:	4613      	mov	r3, r2
 8006160:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006166:	78ba      	ldrb	r2, [r7, #2]
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 ffc0 	bl	80080f2 <VL53L0X_set_vcsel_pulse_period>
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006176:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b086      	sub	sp, #24
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	460b      	mov	r3, r1
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006190:	2300      	movs	r3, #0
 8006192:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	4619      	mov	r1, r3
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f002 fa32 	bl	8008604 <VL53L0X_get_vcsel_pulse_period>
 80061a0:	4603      	mov	r3, r0
 80061a2:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80061a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <sequence_step_enabled>:
}

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	72fb      	strb	r3, [r7, #11]
 80061be:	4613      	mov	r3, r2
 80061c0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80061cc:	7afb      	ldrb	r3, [r7, #11]
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d836      	bhi.n	8006240 <sequence_step_enabled+0x90>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <sequence_step_enabled+0x28>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061ed 	.word	0x080061ed
 80061dc:	080061ff 	.word	0x080061ff
 80061e0:	08006211 	.word	0x08006211
 80061e4:	08006223 	.word	0x08006223
 80061e8:	08006235 	.word	0x08006235
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80061ec:	7abb      	ldrb	r3, [r7, #10]
 80061ee:	111b      	asrs	r3, r3, #4
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	701a      	strb	r2, [r3, #0]
		break;
 80061fc:	e022      	b.n	8006244 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80061fe:	7abb      	ldrb	r3, [r7, #10]
 8006200:	10db      	asrs	r3, r3, #3
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	b2da      	uxtb	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	701a      	strb	r2, [r3, #0]
		break;
 800620e:	e019      	b.n	8006244 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006210:	7abb      	ldrb	r3, [r7, #10]
 8006212:	109b      	asrs	r3, r3, #2
 8006214:	b2db      	uxtb	r3, r3
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	b2da      	uxtb	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	701a      	strb	r2, [r3, #0]
		break;
 8006220:	e010      	b.n	8006244 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006222:	7abb      	ldrb	r3, [r7, #10]
 8006224:	119b      	asrs	r3, r3, #6
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	b2da      	uxtb	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	701a      	strb	r2, [r3, #0]
		break;
 8006232:	e007      	b.n	8006244 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006234:	7abb      	ldrb	r3, [r7, #10]
 8006236:	09db      	lsrs	r3, r3, #7
 8006238:	b2da      	uxtb	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	701a      	strb	r2, [r3, #0]
		break;
 800623e:	e001      	b.n	8006244 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006240:	23fc      	movs	r3, #252	; 0xfc
 8006242:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006266:	f107 030e 	add.w	r3, r7, #14
 800626a:	461a      	mov	r2, r3
 800626c:	2101      	movs	r1, #1
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff fc3e 	bl	8005af0 <VL53L0X_RdByte>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d107      	bne.n	8006290 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006280:	7bba      	ldrb	r2, [r7, #14]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2100      	movs	r1, #0
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ff92 	bl	80061b0 <sequence_step_enabled>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d108      	bne.n	80062aa <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006298:	7bba      	ldrb	r2, [r7, #14]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	3302      	adds	r3, #2
 800629e:	2101      	movs	r1, #1
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ff85 	bl	80061b0 <sequence_step_enabled>
 80062a6:	4603      	mov	r3, r0
 80062a8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80062aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d108      	bne.n	80062c4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80062b2:	7bba      	ldrb	r2, [r7, #14]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	3301      	adds	r3, #1
 80062b8:	2102      	movs	r1, #2
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff ff78 	bl	80061b0 <sequence_step_enabled>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80062c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d108      	bne.n	80062de <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80062cc:	7bba      	ldrb	r2, [r7, #14]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	3303      	adds	r3, #3
 80062d2:	2103      	movs	r1, #3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff ff6b 	bl	80061b0 <sequence_step_enabled>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80062de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d108      	bne.n	80062f8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80062e6:	7bba      	ldrb	r2, [r7, #14]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	3304      	adds	r3, #4
 80062ec:	2104      	movs	r1, #4
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff ff5e 	bl	80061b0 <sequence_step_enabled>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006312:	f107 030c 	add.w	r3, r7, #12
 8006316:	461a      	mov	r2, r3
 8006318:	21f8      	movs	r1, #248	; 0xf8
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff fc12 	bl	8005b44 <VL53L0X_RdWord>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d108      	bne.n	800633e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800632c:	f107 0308 	add.w	r3, r7, #8
 8006330:	461a      	mov	r2, r3
 8006332:	2104      	movs	r1, #4
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fc3d 	bl	8005bb4 <VL53L0X_RdDWord>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800633e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10c      	bne.n	8006360 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006346:	89bb      	ldrh	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	89ba      	ldrh	r2, [r7, #12]
 8006350:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	7f1b      	ldrb	r3, [r3, #28]
 800637e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	7bba      	ldrb	r2, [r7, #14]
 8006384:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006386:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b086      	sub	sp, #24
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80063a4:	f107 030e 	add.w	r3, r7, #14
 80063a8:	461a      	mov	r2, r3
 80063aa:	2120      	movs	r1, #32
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fbc9 	bl	8005b44 <VL53L0X_RdWord>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80063b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d118      	bne.n	80063f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80063be:	89fb      	ldrh	r3, [r7, #14]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	771a      	strb	r2, [r3, #28]
 80063d6:	e00b      	b.n	80063f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80063d8:	89fb      	ldrh	r3, [r7, #14]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80063f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	807b      	strh	r3, [r7, #2]
 8006408:	4613      	mov	r3, r2
 800640a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800640c:	2300      	movs	r3, #0
 800640e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800641c:	887b      	ldrh	r3, [r7, #2]
 800641e:	2b05      	cmp	r3, #5
 8006420:	d902      	bls.n	8006428 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006422:	23fc      	movs	r3, #252	; 0xfc
 8006424:	75fb      	strb	r3, [r7, #23]
 8006426:	e05b      	b.n	80064e0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006428:	787b      	ldrb	r3, [r7, #1]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006436:	2301      	movs	r3, #1
 8006438:	73bb      	strb	r3, [r7, #14]
 800643a:	e00a      	b.n	8006452 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800643c:	887b      	ldrh	r3, [r7, #2]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	330c      	adds	r3, #12
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800644e:	2301      	movs	r3, #1
 8006450:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006452:	887b      	ldrh	r3, [r7, #2]
 8006454:	2b05      	cmp	r3, #5
 8006456:	d841      	bhi.n	80064dc <VL53L0X_SetLimitCheckEnable+0xe0>
 8006458:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <VL53L0X_SetLimitCheckEnable+0x64>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	08006479 	.word	0x08006479
 8006464:	08006483 	.word	0x08006483
 8006468:	08006499 	.word	0x08006499
 800646c:	080064a3 	.word	0x080064a3
 8006470:	080064ad 	.word	0x080064ad
 8006474:	080064c5 	.word	0x080064c5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	7bfa      	ldrb	r2, [r7, #15]
 800647c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006480:	e02e      	b.n	80064e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006486:	b29b      	uxth	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	2144      	movs	r1, #68	; 0x44
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff fad1 	bl	8005a34 <VL53L0X_WrWord>
 8006492:	4603      	mov	r3, r0
 8006494:	75fb      	strb	r3, [r7, #23]

			break;
 8006496:	e023      	b.n	80064e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	7bfa      	ldrb	r2, [r7, #15]
 800649c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80064a0:	e01e      	b.n	80064e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7bfa      	ldrb	r2, [r7, #15]
 80064a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80064aa:	e019      	b.n	80064e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80064b2:	7b7b      	ldrb	r3, [r7, #13]
 80064b4:	22fe      	movs	r2, #254	; 0xfe
 80064b6:	2160      	movs	r1, #96	; 0x60
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff fae5 	bl	8005a88 <VL53L0X_UpdateByte>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80064c2:	e00d      	b.n	80064e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80064ca:	7b7b      	ldrb	r3, [r7, #13]
 80064cc:	22ef      	movs	r2, #239	; 0xef
 80064ce:	2160      	movs	r1, #96	; 0x60
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fad9 	bl	8005a88 <VL53L0X_UpdateByte>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80064da:	e001      	b.n	80064e0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064dc:	23fc      	movs	r3, #252	; 0xfc
 80064de:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10f      	bne.n	8006508 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80064e8:	787b      	ldrb	r3, [r7, #1]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80064ee:	887b      	ldrh	r3, [r7, #2]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4413      	add	r3, r2
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80064fa:	e005      	b.n	8006508 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80064fc:	887b      	ldrh	r3, [r7, #2]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006508:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	460b      	mov	r3, r1
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006526:	897b      	ldrh	r3, [r7, #10]
 8006528:	2b05      	cmp	r3, #5
 800652a:	d905      	bls.n	8006538 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800652c:	23fc      	movs	r3, #252	; 0xfc
 800652e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	e008      	b.n	800654a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006538:	897b      	ldrh	r3, [r7, #10]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006542:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	7dba      	ldrb	r2, [r7, #22]
 8006548:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800654a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800654e:	4618      	mov	r0, r3
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	460b      	mov	r3, r1
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800656a:	2300      	movs	r3, #0
 800656c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800656e:	897b      	ldrh	r3, [r7, #10]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006578:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800657a:	7dbb      	ldrb	r3, [r7, #22]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d107      	bne.n	8006590 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006580:	897b      	ldrh	r3, [r7, #10]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	330c      	adds	r3, #12
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	605a      	str	r2, [r3, #4]
 800658e:	e040      	b.n	8006612 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006590:	897b      	ldrh	r3, [r7, #10]
 8006592:	2b05      	cmp	r3, #5
 8006594:	d830      	bhi.n	80065f8 <VL53L0X_SetLimitCheckValue+0x9c>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <VL53L0X_SetLimitCheckValue+0x40>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065b5 	.word	0x080065b5
 80065a0:	080065bd 	.word	0x080065bd
 80065a4:	080065d3 	.word	0x080065d3
 80065a8:	080065db 	.word	0x080065db
 80065ac:	080065e3 	.word	0x080065e3
 80065b0:	080065e3 	.word	0x080065e3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80065ba:	e01f      	b.n	80065fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	2144      	movs	r1, #68	; 0x44
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff fa34 	bl	8005a34 <VL53L0X_WrWord>
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80065d0:	e014      	b.n	80065fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80065d8:	e010      	b.n	80065fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80065e0:	e00c      	b.n	80065fc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	2164      	movs	r1, #100	; 0x64
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff fa21 	bl	8005a34 <VL53L0X_WrWord>
 80065f2:	4603      	mov	r3, r0
 80065f4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80065f6:	e001      	b.n	80065fc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065f8:	23fc      	movs	r3, #252	; 0xfc
 80065fa:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80065fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d106      	bne.n	8006612 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006604:	897b      	ldrh	r3, [r7, #10]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	330c      	adds	r3, #12
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop

08006620 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	460b      	mov	r3, r1
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800662e:	2300      	movs	r3, #0
 8006630:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006636:	897b      	ldrh	r3, [r7, #10]
 8006638:	2b05      	cmp	r3, #5
 800663a:	d847      	bhi.n	80066cc <VL53L0X_GetLimitCheckValue+0xac>
 800663c:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <VL53L0X_GetLimitCheckValue+0x24>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	0800665d 	.word	0x0800665d
 8006648:	08006669 	.word	0x08006669
 800664c:	0800668f 	.word	0x0800668f
 8006650:	0800669b 	.word	0x0800669b
 8006654:	080066a7 	.word	0x080066a7
 8006658:	080066a7 	.word	0x080066a7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	77bb      	strb	r3, [r7, #30]
		break;
 8006666:	e033      	b.n	80066d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006668:	f107 0316 	add.w	r3, r7, #22
 800666c:	461a      	mov	r2, r3
 800666e:	2144      	movs	r1, #68	; 0x44
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fa67 	bl	8005b44 <VL53L0X_RdWord>
 8006676:	4603      	mov	r3, r0
 8006678:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800667a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d102      	bne.n	8006688 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006682:	8afb      	ldrh	r3, [r7, #22]
 8006684:	025b      	lsls	r3, r3, #9
 8006686:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006688:	2301      	movs	r3, #1
 800668a:	77bb      	strb	r3, [r7, #30]
		break;
 800668c:	e020      	b.n	80066d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	77bb      	strb	r3, [r7, #30]
		break;
 8006698:	e01a      	b.n	80066d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	77bb      	strb	r3, [r7, #30]
		break;
 80066a4:	e014      	b.n	80066d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80066a6:	f107 0316 	add.w	r3, r7, #22
 80066aa:	461a      	mov	r2, r3
 80066ac:	2164      	movs	r1, #100	; 0x64
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fa48 	bl	8005b44 <VL53L0X_RdWord>
 80066b4:	4603      	mov	r3, r0
 80066b6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80066b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80066c0:	8afb      	ldrh	r3, [r7, #22]
 80066c2:	025b      	lsls	r3, r3, #9
 80066c4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	77bb      	strb	r3, [r7, #30]
		break;
 80066ca:	e001      	b.n	80066d0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066cc:	23fc      	movs	r3, #252	; 0xfc
 80066ce:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d12a      	bne.n	800672e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80066d8:	7fbb      	ldrb	r3, [r7, #30]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d124      	bne.n	8006728 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d110      	bne.n	8006706 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80066e4:	897b      	ldrh	r3, [r7, #10]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	330c      	adds	r3, #12
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80066f8:	897b      	ldrh	r3, [r7, #10]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006704:	e013      	b.n	800672e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800670c:	897b      	ldrh	r3, [r7, #10]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	330c      	adds	r3, #12
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800671a:	897b      	ldrh	r3, [r7, #10]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006726:	e002      	b.n	800672e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800672e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006732:	4618      	mov	r0, r3
 8006734:	3720      	adds	r7, #32
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop

0800673c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800674a:	f107 030e 	add.w	r3, r7, #14
 800674e:	461a      	mov	r2, r3
 8006750:	2101      	movs	r1, #1
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff f9cc 	bl	8005af0 <VL53L0X_RdByte>
 8006758:	4603      	mov	r3, r0
 800675a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800675c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10e      	bne.n	8006782 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006764:	7bba      	ldrb	r2, [r7, #14]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	b25b      	sxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	da03      	bge.n	800677c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2201      	movs	r2, #1
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	e002      	b.n	8006782 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006794:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80067ac:	f107 030e 	add.w	r3, r7, #14
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fc94 	bl	80060e0 <VL53L0X_GetDeviceMode>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80067bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d107      	bne.n	80067d4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d104      	bne.n	80067d4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f898 	bl	8006900 <VL53L0X_StartMeasurement>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80067d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f001 f976 	bl	8007ace <VL53L0X_measurement_poll_for_completion>
 80067e2:	4603      	mov	r3, r0
 80067e4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80067e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2203      	movs	r2, #3
 80067f8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80067fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006814:	2300      	movs	r3, #0
 8006816:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006818:	2301      	movs	r3, #1
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f001 f918 	bl	8007a54 <VL53L0X_perform_ref_calibration>
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006828:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006840:	2300      	movs	r3, #0
 8006842:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800684a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800684c:	7dbb      	ldrb	r3, [r7, #22]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d005      	beq.n	800685e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006852:	7dbb      	ldrb	r3, [r7, #22]
 8006854:	2b02      	cmp	r3, #2
 8006856:	d002      	beq.n	800685e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006858:	7dbb      	ldrb	r3, [r7, #22]
 800685a:	2b03      	cmp	r3, #3
 800685c:	d147      	bne.n	80068ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	f107 0210 	add.w	r2, r7, #16
 8006866:	2101      	movs	r1, #1
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fa9f 	bl	8006dac <VL53L0X_GetInterruptThresholds>
 800686e:	4603      	mov	r3, r0
 8006870:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006878:	d803      	bhi.n	8006882 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800687a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800687c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006880:	d935      	bls.n	80068ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006882:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d131      	bne.n	80068ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d006      	beq.n	800689e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006890:	491a      	ldr	r1, [pc, #104]	; (80068fc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f002 f87e 	bl	8008994 <VL53L0X_load_tuning_settings>
 8006898:	4603      	mov	r3, r0
 800689a:	75fb      	strb	r3, [r7, #23]
 800689c:	e027      	b.n	80068ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800689e:	2204      	movs	r2, #4
 80068a0:	21ff      	movs	r1, #255	; 0xff
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff f8a2 	bl	80059ec <VL53L0X_WrByte>
 80068a8:	4603      	mov	r3, r0
 80068aa:	461a      	mov	r2, r3
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80068b2:	2200      	movs	r2, #0
 80068b4:	2170      	movs	r1, #112	; 0x70
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff f898 	bl	80059ec <VL53L0X_WrByte>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80068c6:	2200      	movs	r2, #0
 80068c8:	21ff      	movs	r1, #255	; 0xff
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff f88e 	bl	80059ec <VL53L0X_WrByte>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80068da:	2200      	movs	r2, #0
 80068dc:	2180      	movs	r1, #128	; 0x80
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff f884 	bl	80059ec <VL53L0X_WrByte>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80068ee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	2000099c 	.word	0x2000099c

08006900 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006908:	2300      	movs	r3, #0
 800690a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006910:	f107 030e 	add.w	r3, r7, #14
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff fbe2 	bl	80060e0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800691c:	2201      	movs	r2, #1
 800691e:	2180      	movs	r1, #128	; 0x80
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff f863 	bl	80059ec <VL53L0X_WrByte>
 8006926:	4603      	mov	r3, r0
 8006928:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800692a:	2201      	movs	r2, #1
 800692c:	21ff      	movs	r1, #255	; 0xff
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff f85c 	bl	80059ec <VL53L0X_WrByte>
 8006934:	4603      	mov	r3, r0
 8006936:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006938:	2200      	movs	r2, #0
 800693a:	2100      	movs	r1, #0
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff f855 	bl	80059ec <VL53L0X_WrByte>
 8006942:	4603      	mov	r3, r0
 8006944:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800694c:	461a      	mov	r2, r3
 800694e:	2191      	movs	r1, #145	; 0x91
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff f84b 	bl	80059ec <VL53L0X_WrByte>
 8006956:	4603      	mov	r3, r0
 8006958:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800695a:	2201      	movs	r2, #1
 800695c:	2100      	movs	r1, #0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff f844 	bl	80059ec <VL53L0X_WrByte>
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006968:	2200      	movs	r2, #0
 800696a:	21ff      	movs	r1, #255	; 0xff
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff f83d 	bl	80059ec <VL53L0X_WrByte>
 8006972:	4603      	mov	r3, r0
 8006974:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006976:	2200      	movs	r2, #0
 8006978:	2180      	movs	r1, #128	; 0x80
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff f836 	bl	80059ec <VL53L0X_WrByte>
 8006980:	4603      	mov	r3, r0
 8006982:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2b03      	cmp	r3, #3
 8006988:	d054      	beq.n	8006a34 <VL53L0X_StartMeasurement+0x134>
 800698a:	2b03      	cmp	r3, #3
 800698c:	dc6c      	bgt.n	8006a68 <VL53L0X_StartMeasurement+0x168>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <VL53L0X_StartMeasurement+0x98>
 8006992:	2b01      	cmp	r3, #1
 8006994:	d034      	beq.n	8006a00 <VL53L0X_StartMeasurement+0x100>
 8006996:	e067      	b.n	8006a68 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006998:	2201      	movs	r2, #1
 800699a:	2100      	movs	r1, #0
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff f825 	bl	80059ec <VL53L0X_WrByte>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80069aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d15d      	bne.n	8006a6e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80069bc:	f107 030d 	add.w	r3, r7, #13
 80069c0:	461a      	mov	r2, r3
 80069c2:	2100      	movs	r1, #0
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff f893 	bl	8005af0 <VL53L0X_RdByte>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80069d4:	7b7a      	ldrb	r2, [r7, #13]
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	4013      	ands	r3, r2
 80069da:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80069dc:	7bfa      	ldrb	r2, [r7, #15]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d107      	bne.n	80069f2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80069e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80069f0:	d3e1      	bcc.n	80069b6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80069f8:	d339      	bcc.n	8006a6e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80069fa:	23f9      	movs	r3, #249	; 0xf9
 80069fc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80069fe:	e036      	b.n	8006a6e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d105      	bne.n	8006a14 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006a08:	2101      	movs	r1, #1
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff ff12 	bl	8006834 <VL53L0X_CheckAndLoadInterruptSettings>
 8006a10:	4603      	mov	r3, r0
 8006a12:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006a14:	2202      	movs	r2, #2
 8006a16:	2100      	movs	r1, #0
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fe ffe7 	bl	80059ec <VL53L0X_WrByte>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d123      	bne.n	8006a72 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2204      	movs	r2, #4
 8006a2e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006a32:	e01e      	b.n	8006a72 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fef8 	bl	8006834 <VL53L0X_CheckAndLoadInterruptSettings>
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006a48:	2204      	movs	r2, #4
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fe ffcd 	bl	80059ec <VL53L0X_WrByte>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10b      	bne.n	8006a76 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2204      	movs	r2, #4
 8006a62:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006a66:	e006      	b.n	8006a76 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006a68:	23f8      	movs	r3, #248	; 0xf8
 8006a6a:	75fb      	strb	r3, [r7, #23]
 8006a6c:	e004      	b.n	8006a78 <VL53L0X_StartMeasurement+0x178>
		break;
 8006a6e:	bf00      	nop
 8006a70:	e002      	b.n	8006a78 <VL53L0X_StartMeasurement+0x178>
		break;
 8006a72:	bf00      	nop
 8006a74:	e000      	b.n	8006a78 <VL53L0X_StartMeasurement+0x178>
		break;
 8006a76:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006a98:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d112      	bne.n	8006ac6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006aa0:	f107 0308 	add.w	r3, r7, #8
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f9f6 	bl	8006e98 <VL53L0X_GetInterruptMaskStatus>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d103      	bne.n	8006abe <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e01c      	b.n	8006af8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	e018      	b.n	8006af8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006ac6:	f107 030d 	add.w	r3, r7, #13
 8006aca:	461a      	mov	r2, r3
 8006acc:	2114      	movs	r1, #20
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff f80e 	bl	8005af0 <VL53L0X_RdByte>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10b      	bne.n	8006af8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006ae0:	7b7b      	ldrb	r3, [r7, #13]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2201      	movs	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	e002      	b.n	8006af8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2200      	movs	r2, #0
 8006af6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006b04:	b5b0      	push	{r4, r5, r7, lr}
 8006b06:	b096      	sub	sp, #88	; 0x58
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006b14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b18:	230c      	movs	r3, #12
 8006b1a:	2114      	movs	r1, #20
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7fe ff39 	bl	8005994 <VL53L0X_ReadMulti>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006b28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 80d1 	bne.w	8006cd4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2200      	movs	r2, #0
 8006b36:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006b3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006b5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	025b      	lsls	r3, r3, #9
 8006b70:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b76:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006b78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4413      	add	r3, r2
 8006b8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006b8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b92:	025b      	lsls	r3, r3, #9
 8006b94:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006b9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006bb6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006bb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8006bc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006bce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006bd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bd8:	d046      	beq.n	8006c68 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006bda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006bdc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006be0:	fb02 f303 	mul.w	r3, r2, r3
 8006be4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006be8:	4a57      	ldr	r2, [pc, #348]	; (8006d48 <VL53L0X_GetRangingMeasurementData+0x244>)
 8006bea:	fb82 1203 	smull	r1, r2, r2, r3
 8006bee:	1192      	asrs	r2, r2, #6
 8006bf0:	17db      	asrs	r3, r3, #31
 8006bf2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006bf4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7f1b      	ldrb	r3, [r3, #28]
 8006c02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006c06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d02c      	beq.n	8006c68 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006c0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c10:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
 8006c18:	121a      	asrs	r2, r3, #8
					<= 0) {
 8006c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d10d      	bne.n	8006c3c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8006c20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8006c28:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006c2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006c30:	e016      	b.n	8006c60 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8006c32:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006c36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006c3a:	e011      	b.n	8006c60 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006c3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c42:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006c46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c48:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8006c50:	121b      	asrs	r3, r3, #8
 8006c52:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c56:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006c5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8006c60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006c68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00d      	beq.n	8006c8c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006c70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006c74:	089b      	lsrs	r3, r3, #2
 8006c76:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006c7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	019b      	lsls	r3, r3, #6
 8006c84:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	75da      	strb	r2, [r3, #23]
 8006c8a:	e006      	b.n	8006c9a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006c92:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2200      	movs	r2, #0
 8006c98:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006c9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006c9e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006ca2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f002 fb0d 	bl	80092d0 <VL53L0X_get_pal_range_status>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006cc4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d103      	bne.n	8006cd4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006ccc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006cd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d12f      	bne.n	8006d3c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f107 040c 	add.w	r4, r7, #12
 8006ce2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8006ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006cf6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006d04:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006d0a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006d10:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006d16:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006d1c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006d22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006d2c:	f107 050c 	add.w	r5, r7, #12
 8006d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006d38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d3c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3750      	adds	r7, #80	; 0x50
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bdb0      	pop	{r4, r5, r7, pc}
 8006d48:	10624dd3 	.word	0x10624dd3

08006d4c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff f993 	bl	8006088 <VL53L0X_SetDeviceMode>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d104      	bne.n	8006d78 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff fd16 	bl	80067a0 <VL53L0X_PerformSingleMeasurement>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d105      	bne.n	8006d8c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff febe 	bl	8006b04 <VL53L0X_GetRangingMeasurementData>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006d94:	2100      	movs	r1, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f83e 	bl	8006e18 <VL53L0X_ClearInterruptMask>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	460b      	mov	r3, r1
 8006dba:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006dc0:	f107 0314 	add.w	r3, r7, #20
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	210e      	movs	r1, #14
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7fe febb 	bl	8005b44 <VL53L0X_RdWord>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006dd2:	8abb      	ldrh	r3, [r7, #20]
 8006dd4:	045b      	lsls	r3, r3, #17
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <VL53L0X_GetInterruptThresholds+0x68>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10f      	bne.n	8006e08 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8006de8:	f107 0314 	add.w	r3, r7, #20
 8006dec:	461a      	mov	r2, r3
 8006dee:	210c      	movs	r1, #12
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f7fe fea7 	bl	8005b44 <VL53L0X_RdWord>
 8006df6:	4603      	mov	r3, r0
 8006df8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006dfa:	8abb      	ldrh	r3, [r7, #20]
 8006dfc:	045b      	lsls	r3, r3, #17
 8006dfe:	461a      	mov	r2, r3
 8006e00:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <VL53L0X_GetInterruptThresholds+0x68>)
 8006e02:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	1ffe0000 	.word	0x1ffe0000

08006e18 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	210b      	movs	r1, #11
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fe fddc 	bl	80059ec <VL53L0X_WrByte>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006e38:	2200      	movs	r2, #0
 8006e3a:	210b      	movs	r1, #11
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7fe fdd5 	bl	80059ec <VL53L0X_WrByte>
 8006e42:	4603      	mov	r3, r0
 8006e44:	461a      	mov	r2, r3
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006e4c:	f107 030d 	add.w	r3, r7, #13
 8006e50:	461a      	mov	r2, r3
 8006e52:	2113      	movs	r1, #19
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fe fe4b 	bl	8005af0 <VL53L0X_RdByte>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	3301      	adds	r3, #1
 8006e68:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006e6a:	7b7b      	ldrb	r3, [r7, #13]
 8006e6c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d006      	beq.n	8006e82 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d803      	bhi.n	8006e82 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0d3      	beq.n	8006e2a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006e88:	23f4      	movs	r3, #244	; 0xf4
 8006e8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006ea6:	f107 030e 	add.w	r3, r7, #14
 8006eaa:	461a      	mov	r2, r3
 8006eac:	2113      	movs	r1, #19
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fe fe1e 	bl	8005af0 <VL53L0X_RdByte>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	f003 0207 	and.w	r2, r3, #7
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	f003 0318 	and.w	r3, r3, #24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006ecc:	23fa      	movs	r3, #250	; 0xfa
 8006ece:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fa03 	bl	80072fc <VL53L0X_perform_ref_spad_management>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8006efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006f14:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006f18:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8006f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f1e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006f20:	f107 0308 	add.w	r3, r7, #8
 8006f24:	461a      	mov	r2, r3
 8006f26:	2128      	movs	r1, #40	; 0x28
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7fe fe0b 	bl	8005b44 <VL53L0X_RdWord>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d11e      	bne.n	8006f78 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8006f3a:	893b      	ldrh	r3, [r7, #8]
 8006f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006f44:	893b      	ldrh	r3, [r7, #8]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	dd0b      	ble.n	8006f68 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006f50:	893a      	ldrh	r2, [r7, #8]
 8006f52:	897b      	ldrh	r3, [r7, #10]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	b21b      	sxth	r3, r3
 8006f5a:	461a      	mov	r2, r3
					* 250;
 8006f5c:	23fa      	movs	r3, #250	; 0xfa
 8006f5e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	e007      	b.n	8006f78 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006f68:	893b      	ldrh	r3, [r7, #8]
 8006f6a:	b21b      	sxth	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	23fa      	movs	r3, #250	; 0xfa
 8006f70:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b08b      	sub	sp, #44	; 0x2c
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006f92:	2308      	movs	r3, #8
 8006f94:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006faa:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fb4:	69b9      	ldr	r1, [r7, #24]
 8006fb6:	fb01 f202 	mul.w	r2, r1, r2
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc2:	e030      	b.n	8007026 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	4413      	add	r3, r2
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d11e      	bne.n	8007018 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006fda:	7ffa      	ldrb	r2, [r7, #31]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	fa42 f303 	asr.w	r3, r2, r3
 8006fe2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006fe8:	e016      	b.n	8007018 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8006fea:	7ffb      	ldrb	r3, [r7, #31]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <get_next_good_spad+0x88>
				success = 1;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	fb03 f202 	mul.w	r2, r3, r2
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	4413      	add	r3, r2
 8007004:	461a      	mov	r2, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	601a      	str	r2, [r3, #0]
				break;
 800700a:	e009      	b.n	8007020 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800700c:	7ffb      	ldrb	r3, [r7, #31]
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	3301      	adds	r3, #1
 8007016:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007018:	6a3a      	ldr	r2, [r7, #32]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	429a      	cmp	r2, r3
 800701e:	d3e4      	bcc.n	8006fea <get_next_good_spad+0x66>
				coarseIndex++) {
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	3301      	adds	r3, #1
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	d202      	bcs.n	8007034 <get_next_good_spad+0xb0>
 800702e:	7fbb      	ldrb	r3, [r7, #30]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0c7      	beq.n	8006fc4 <get_next_good_spad+0x40>
		}
	}
}
 8007034:	bf00      	nop
 8007036:	372c      	adds	r7, #44	; 0x2c
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007048:	2301      	movs	r3, #1
 800704a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	099b      	lsrs	r3, r3, #6
 8007050:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007052:	4a07      	ldr	r2, [pc, #28]	; (8007070 <is_aperture+0x30>)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <is_aperture+0x22>
		isAperture = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	20000b54 	.word	0x20000b54

08007074 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	; 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007080:	2300      	movs	r3, #0
 8007082:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007084:	2308      	movs	r3, #8
 8007086:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007090:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	fbb3 f2f2 	udiv	r2, r3, r2
 800709a:	69b9      	ldr	r1, [r7, #24]
 800709c:	fb01 f202 	mul.w	r2, r1, r2
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80070ac:	23ce      	movs	r3, #206	; 0xce
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e010      	b.n	80070d4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	4413      	add	r3, r2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	b25a      	sxtb	r2, r3
 80070bc:	2101      	movs	r1, #1
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	fa01 f303 	lsl.w	r3, r1, r3
 80070c4:	b25b      	sxtb	r3, r3
 80070c6:	4313      	orrs	r3, r2
 80070c8:	b259      	sxtb	r1, r3
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	4413      	add	r3, r2
 80070d0:	b2ca      	uxtb	r2, r1
 80070d2:	701a      	strb	r2, [r3, #0]

	return status;
 80070d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3724      	adds	r7, #36	; 0x24
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80070ee:	2306      	movs	r3, #6
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	21b0      	movs	r1, #176	; 0xb0
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7fe fc1d 	bl	8005934 <VL53L0X_WriteMulti>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80070fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007114:	2306      	movs	r3, #6
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	21b0      	movs	r1, #176	; 0xb0
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fe fc3a 	bl	8005994 <VL53L0X_ReadMulti>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007124:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08c      	sub	sp, #48	; 0x30
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	460b      	mov	r3, r1
 800713e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007140:	2300      	movs	r3, #0
 8007142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007148:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800714a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800714c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800714e:	2300      	movs	r3, #0
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
 8007152:	e02b      	b.n	80071ac <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007154:	f107 031c 	add.w	r3, r7, #28
 8007158:	6a3a      	ldr	r2, [r7, #32]
 800715a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff11 	bl	8006f84 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007168:	d103      	bne.n	8007172 <enable_ref_spads+0x42>
//			status = VL53L0X_ERROR_NONE;
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800716a:	23ce      	movs	r3, #206	; 0xce
 800716c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007170:	e020      	b.n	80071b4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	461a      	mov	r2, r3
 8007176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007178:	4413      	add	r3, r2
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff ff60 	bl	8007040 <is_aperture>
 8007180:	4603      	mov	r3, r0
 8007182:	461a      	mov	r2, r3
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
//			status = VL53L0X_ERROR_NONE;
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800718a:	23ce      	movs	r3, #206	; 0xce
 800718c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007190:	e010      	b.n	80071b4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007196:	6a3a      	ldr	r2, [r7, #32]
 8007198:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800719a:	6838      	ldr	r0, [r7, #0]
 800719c:	f7ff ff6a 	bl	8007074 <enable_spad_bit>
		currentSpad++;
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	3301      	adds	r3, #1
 80071a4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	3301      	adds	r3, #1
 80071aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d3cf      	bcc.n	8007154 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80071b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b6:	6a3a      	ldr	r2, [r7, #32]
 80071b8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80071ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d106      	bne.n	80071d0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff ff8d 	bl	80070e4 <set_ref_spad_map>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80071d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d121      	bne.n	800721c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80071d8:	f107 0314 	add.w	r3, r7, #20
 80071dc:	4619      	mov	r1, r3
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff ff93 	bl	800710a <get_ref_spad_map>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80071ee:	e011      	b.n	8007214 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	4413      	add	r3, r2
 80071f6:	781a      	ldrb	r2, [r3, #0]
 80071f8:	f107 0114 	add.w	r1, r7, #20
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	440b      	add	r3, r1
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d003      	beq.n	800720e <enable_ref_spads+0xde>
//				status = VL53L0X_ERROR_NONE;
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007206:	23ce      	movs	r3, #206	; 0xce
 8007208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800720c:	e006      	b.n	800721c <enable_ref_spads+0xec>
			}
			i++;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	3301      	adds	r3, #1
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	429a      	cmp	r2, r3
 800721a:	d3e9      	bcc.n	80071f0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800721c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007220:	4618      	mov	r0, r3
 8007222:	3730      	adds	r7, #48	; 0x30
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007232:	2300      	movs	r3, #0
 8007234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007248:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800724c:	2b00      	cmp	r3, #0
 800724e:	d107      	bne.n	8007260 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007250:	22c0      	movs	r2, #192	; 0xc0
 8007252:	2101      	movs	r1, #1
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fe fbc9 	bl	80059ec <VL53L0X_WrByte>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007260:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007264:	2b00      	cmp	r3, #0
 8007266:	d108      	bne.n	800727a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007268:	f107 0308 	add.w	r3, r7, #8
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fd6c 	bl	8006d4c <VL53L0X_PerformSingleRangingMeasurement>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800727a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007282:	2201      	movs	r2, #1
 8007284:	21ff      	movs	r1, #255	; 0xff
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fe fbb0 	bl	80059ec <VL53L0X_WrByte>
 800728c:	4603      	mov	r3, r0
 800728e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007292:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007296:	2b00      	cmp	r3, #0
 8007298:	d107      	bne.n	80072aa <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	21b6      	movs	r1, #182	; 0xb6
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fe fc50 	bl	8005b44 <VL53L0X_RdWord>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80072aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d107      	bne.n	80072c2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80072b2:	2200      	movs	r2, #0
 80072b4:	21ff      	movs	r1, #255	; 0xff
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fe fb98 	bl	80059ec <VL53L0X_WrByte>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80072c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d112      	bne.n	80072f0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80072ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072ce:	461a      	mov	r2, r3
 80072d0:	2101      	movs	r1, #1
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fe fb8a 	bl	80059ec <VL53L0X_WrByte>
 80072d8:	4603      	mov	r3, r0
 80072da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80072de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80072ec:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80072f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3728      	adds	r7, #40	; 0x28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80072fc:	b590      	push	{r4, r7, lr}
 80072fe:	b09d      	sub	sp, #116	; 0x74
 8007300:	af06      	add	r7, sp, #24
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007308:	2300      	movs	r3, #0
 800730a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800730e:	23b4      	movs	r3, #180	; 0xb4
 8007310:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007314:	2303      	movs	r3, #3
 8007316:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007318:	232c      	movs	r3, #44	; 0x2c
 800731a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007328:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800732c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007336:	2306      	movs	r3, #6
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007360:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007362:	2300      	movs	r3, #0
 8007364:	64bb      	str	r3, [r7, #72]	; 0x48
 8007366:	e009      	b.n	800737c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736c:	4413      	add	r3, r2
 800736e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007372:	2200      	movs	r2, #0
 8007374:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007378:	3301      	adds	r3, #1
 800737a:	64bb      	str	r3, [r7, #72]	; 0x48
 800737c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	429a      	cmp	r2, r3
 8007382:	d3f1      	bcc.n	8007368 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007384:	2201      	movs	r2, #1
 8007386:	21ff      	movs	r1, #255	; 0xff
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7fe fb2f 	bl	80059ec <VL53L0X_WrByte>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007394:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007398:	2b00      	cmp	r3, #0
 800739a:	d107      	bne.n	80073ac <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800739c:	2200      	movs	r2, #0
 800739e:	214f      	movs	r1, #79	; 0x4f
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7fe fb23 	bl	80059ec <VL53L0X_WrByte>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80073ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d107      	bne.n	80073c4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80073b4:	222c      	movs	r2, #44	; 0x2c
 80073b6:	214e      	movs	r1, #78	; 0x4e
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7fe fb17 	bl	80059ec <VL53L0X_WrByte>
 80073be:	4603      	mov	r3, r0
 80073c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80073c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d107      	bne.n	80073dc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80073cc:	2200      	movs	r2, #0
 80073ce:	21ff      	movs	r1, #255	; 0xff
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7fe fb0b 	bl	80059ec <VL53L0X_WrByte>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80073dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80073e4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80073e8:	461a      	mov	r2, r3
 80073ea:	21b6      	movs	r1, #182	; 0xb6
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7fe fafd 	bl	80059ec <VL53L0X_WrByte>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80073f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d107      	bne.n	8007410 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007400:	2200      	movs	r2, #0
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7fe faf1 	bl	80059ec <VL53L0X_WrByte>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007410:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007418:	f107 0210 	add.w	r2, r7, #16
 800741c:	f107 0111 	add.w	r1, r7, #17
 8007420:	2300      	movs	r3, #0
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 fb16 	bl	8007a54 <VL53L0X_perform_ref_calibration>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800742e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007432:	2b00      	cmp	r3, #0
 8007434:	d121      	bne.n	800747a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800743a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800743c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007444:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007452:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007456:	f107 0218 	add.w	r2, r7, #24
 800745a:	9204      	str	r2, [sp, #16]
 800745c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800745e:	9203      	str	r2, [sp, #12]
 8007460:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007462:	9202      	str	r2, [sp, #8]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4623      	mov	r3, r4
 800746c:	4602      	mov	r2, r0
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7ff fe5e 	bl	8007130 <enable_ref_spads>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800747a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800747e:	2b00      	cmp	r3, #0
 8007480:	d174      	bne.n	800756c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007486:	f107 0312 	add.w	r3, r7, #18
 800748a:	4619      	mov	r1, r3
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff fecb 	bl	8007228 <perform_ref_signal_measurement>
 8007492:	4603      	mov	r3, r0
 8007494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007498:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800749c:	2b00      	cmp	r3, #0
 800749e:	d161      	bne.n	8007564 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80074a0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80074a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d25d      	bcs.n	8007564 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80074a8:	2300      	movs	r3, #0
 80074aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ac:	e009      	b.n	80074c2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80074bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074be:	3301      	adds	r3, #1
 80074c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80074c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d3f1      	bcc.n	80074ae <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80074ca:	e002      	b.n	80074d2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80074cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ce:	3301      	adds	r3, #1
 80074d0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80074d2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80074d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d8:	4413      	add	r3, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fdb0 	bl	8007040 <is_aperture>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80074e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d3ee      	bcc.n	80074cc <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80074ee:	2301      	movs	r3, #1
 80074f0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80074f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007502:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007506:	f107 0218 	add.w	r2, r7, #24
 800750a:	9204      	str	r2, [sp, #16]
 800750c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800750e:	9203      	str	r2, [sp, #12]
 8007510:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007512:	9202      	str	r2, [sp, #8]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	4623      	mov	r3, r4
 800751c:	4602      	mov	r2, r0
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff fe06 	bl	8007130 <enable_ref_spads>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800752a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800752e:	2b00      	cmp	r3, #0
 8007530:	d11b      	bne.n	800756a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007536:	f107 0312 	add.w	r3, r7, #18
 800753a:	4619      	mov	r1, r3
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7ff fe73 	bl	8007228 <perform_ref_signal_measurement>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007548:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10c      	bne.n	800756a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007550:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007552:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007554:	429a      	cmp	r2, r3
 8007556:	d208      	bcs.n	800756a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007560:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007562:	e002      	b.n	800756a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007568:	e000      	b.n	800756c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800756a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800756c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007570:	2b00      	cmp	r3, #0
 8007572:	f040 80af 	bne.w	80076d4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007576:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007578:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800757a:	429a      	cmp	r2, r3
 800757c:	f240 80aa 	bls.w	80076d4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007590:	f107 031c 	add.w	r3, r7, #28
 8007594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007596:	4618      	mov	r0, r3
 8007598:	f002 f8a0 	bl	80096dc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800759c:	8a7b      	ldrh	r3, [r7, #18]
 800759e:	461a      	mov	r2, r3
 80075a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bfb8      	it	lt
 80075a8:	425b      	neglt	r3, r3
 80075aa:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80075b2:	e086      	b.n	80076c2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80075ba:	f107 0314 	add.w	r3, r7, #20
 80075be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c2:	f7ff fcdf 	bl	8006f84 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d103      	bne.n	80075d6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80075ce:	23ce      	movs	r3, #206	; 0xce
 80075d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80075d4:	e07e      	b.n	80076d4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80075d6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4413      	add	r3, r2
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff fd2e 	bl	8007040 <is_aperture>
 80075e4:	4603      	mov	r3, r0
 80075e6:	461a      	mov	r2, r3
 80075e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80075f4:	e06e      	b.n	80076d4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80075f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f8:	3301      	adds	r3, #1
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007606:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff fd32 	bl	8007074 <enable_spad_bit>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007616:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10c      	bne.n	8007638 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800761e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007620:	3301      	adds	r3, #1
 8007622:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800762a:	4619      	mov	r1, r3
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f7ff fd59 	bl	80070e4 <set_ref_spad_map>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007638:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800763c:	2b00      	cmp	r3, #0
 800763e:	d146      	bne.n	80076ce <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007640:	f107 0312 	add.w	r3, r7, #18
 8007644:	4619      	mov	r1, r3
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fdee 	bl	8007228 <perform_ref_signal_measurement>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007652:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007656:	2b00      	cmp	r3, #0
 8007658:	d13b      	bne.n	80076d2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800765a:	8a7b      	ldrh	r3, [r7, #18]
 800765c:	461a      	mov	r2, r3
 800765e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	bfb8      	it	lt
 8007666:	425b      	neglt	r3, r3
 8007668:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800766a:	8a7b      	ldrh	r3, [r7, #18]
 800766c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800766e:	429a      	cmp	r2, r3
 8007670:	d21c      	bcs.n	80076ac <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007676:	429a      	cmp	r2, r3
 8007678:	d914      	bls.n	80076a4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800767a:	f107 031c 	add.w	r3, r7, #28
 800767e:	4619      	mov	r1, r3
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f7ff fd2f 	bl	80070e4 <set_ref_spad_map>
 8007686:	4603      	mov	r3, r0
 8007688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007692:	f107 011c 	add.w	r1, r7, #28
 8007696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007698:	4618      	mov	r0, r3
 800769a:	f002 f81f 	bl	80096dc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800769e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a0:	3b01      	subs	r3, #1
 80076a2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e00a      	b.n	80076c2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80076b6:	f107 031c 	add.w	r3, r7, #28
 80076ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076bc:	4618      	mov	r0, r3
 80076be:	f002 f80d 	bl	80096dc <memcpy>
		while (!complete) {
 80076c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f43f af74 	beq.w	80075b4 <VL53L0X_perform_ref_spad_management+0x2b8>
 80076cc:	e002      	b.n	80076d4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80076d2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d115      	bne.n	8007708 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076e0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80076e8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007708:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800770c:	4618      	mov	r0, r3
 800770e:	375c      	adds	r7, #92	; 0x5c
 8007710:	46bd      	mov	sp, r7
 8007712:	bd90      	pop	{r4, r7, pc}

08007714 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	2100      	movs	r1, #0
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7fe f957 	bl	80059ec <VL53L0X_WrByte>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d104      	bne.n	8007754 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9bf 	bl	8007ace <VL53L0X_measurement_poll_for_completion>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d105      	bne.n	8007768 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800775c:	2100      	movs	r1, #0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff fb5a 	bl	8006e18 <VL53L0X_ClearInterruptMask>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d106      	bne.n	800777e <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007770:	2200      	movs	r2, #0
 8007772:	2100      	movs	r1, #0
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7fe f939 	bl	80059ec <VL53L0X_WrByte>
 800777a:	4603      	mov	r3, r0
 800777c:	73fb      	strb	r3, [r7, #15]

	return Status;
 800777e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	461a      	mov	r2, r3
 8007798:	4603      	mov	r3, r0
 800779a:	70fb      	strb	r3, [r7, #3]
 800779c:	460b      	mov	r3, r1
 800779e:	70bb      	strb	r3, [r7, #2]
 80077a0:	4613      	mov	r3, r2
 80077a2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80077ac:	2201      	movs	r2, #1
 80077ae:	21ff      	movs	r1, #255	; 0xff
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7fe f91b 	bl	80059ec <VL53L0X_WrByte>
 80077b6:	4603      	mov	r3, r0
 80077b8:	461a      	mov	r2, r3
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	4313      	orrs	r3, r2
 80077be:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80077c0:	2200      	movs	r2, #0
 80077c2:	2100      	movs	r1, #0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7fe f911 	bl	80059ec <VL53L0X_WrByte>
 80077ca:	4603      	mov	r3, r0
 80077cc:	461a      	mov	r2, r3
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80077d4:	2200      	movs	r2, #0
 80077d6:	21ff      	movs	r1, #255	; 0xff
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7fe f907 	bl	80059ec <VL53L0X_WrByte>
 80077de:	4603      	mov	r3, r0
 80077e0:	461a      	mov	r2, r3
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d01e      	beq.n	800782c <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80077ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	21cb      	movs	r1, #203	; 0xcb
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fe f978 	bl	8005af0 <VL53L0X_RdByte>
 8007800:	4603      	mov	r3, r0
 8007802:	461a      	mov	r2, r3
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	4313      	orrs	r3, r2
 8007808:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800780a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d02a      	beq.n	8007868 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007812:	f107 030e 	add.w	r3, r7, #14
 8007816:	461a      	mov	r2, r3
 8007818:	21ee      	movs	r1, #238	; 0xee
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fe f968 	bl	8005af0 <VL53L0X_RdByte>
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	4313      	orrs	r3, r2
 8007828:	73fb      	strb	r3, [r7, #15]
 800782a:	e01d      	b.n	8007868 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800782c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00a      	beq.n	800784a <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007834:	78bb      	ldrb	r3, [r7, #2]
 8007836:	461a      	mov	r2, r3
 8007838:	21cb      	movs	r1, #203	; 0xcb
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fe f8d6 	bl	80059ec <VL53L0X_WrByte>
 8007840:	4603      	mov	r3, r0
 8007842:	461a      	mov	r2, r3
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	4313      	orrs	r3, r2
 8007848:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800784a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007852:	787b      	ldrb	r3, [r7, #1]
 8007854:	2280      	movs	r2, #128	; 0x80
 8007856:	21ee      	movs	r1, #238	; 0xee
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fe f915 	bl	8005a88 <VL53L0X_UpdateByte>
 800785e:	4603      	mov	r3, r0
 8007860:	461a      	mov	r2, r3
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	4313      	orrs	r3, r2
 8007866:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007868:	2201      	movs	r2, #1
 800786a:	21ff      	movs	r1, #255	; 0xff
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7fe f8bd 	bl	80059ec <VL53L0X_WrByte>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	4313      	orrs	r3, r2
 800787a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800787c:	2201      	movs	r2, #1
 800787e:	2100      	movs	r1, #0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7fe f8b3 	bl	80059ec <VL53L0X_WrByte>
 8007886:	4603      	mov	r3, r0
 8007888:	461a      	mov	r2, r3
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	4313      	orrs	r3, r2
 800788e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007890:	2200      	movs	r2, #0
 8007892:	21ff      	movs	r1, #255	; 0xff
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7fe f8a9 	bl	80059ec <VL53L0X_WrByte>
 800789a:	4603      	mov	r3, r0
 800789c:	461a      	mov	r2, r3
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	f023 0310 	bic.w	r3, r3, #16
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	701a      	strb	r2, [r3, #0]

	return Status;
 80078b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08a      	sub	sp, #40	; 0x28
 80078c0:	af04      	add	r7, sp, #16
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4611      	mov	r1, r2
 80078c8:	461a      	mov	r2, r3
 80078ca:	460b      	mov	r3, r1
 80078cc:	71fb      	strb	r3, [r7, #7]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80078e6:	79bb      	ldrb	r3, [r7, #6]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80078f2:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80078f4:	2201      	movs	r2, #1
 80078f6:	2101      	movs	r1, #1
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7fe f877 	bl	80059ec <VL53L0X_WrByte>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800790a:	2140      	movs	r1, #64	; 0x40
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f7ff ff01 	bl	8007714 <VL53L0X_perform_single_ref_calibration>
 8007912:	4603      	mov	r3, r0
 8007914:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d115      	bne.n	800794a <VL53L0X_perform_vhv_calibration+0x8e>
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d112      	bne.n	800794a <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007924:	7d39      	ldrb	r1, [r7, #20]
 8007926:	7d7a      	ldrb	r2, [r7, #21]
 8007928:	2300      	movs	r3, #0
 800792a:	9303      	str	r3, [sp, #12]
 800792c:	2301      	movs	r3, #1
 800792e:	9302      	str	r3, [sp, #8]
 8007930:	f107 0313 	add.w	r3, r7, #19
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	460b      	mov	r3, r1
 800793c:	2101      	movs	r1, #1
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f7ff ff23 	bl	800778a <VL53L0X_ref_calibration_io>
 8007944:	4603      	mov	r3, r0
 8007946:	75fb      	strb	r3, [r7, #23]
 8007948:	e002      	b.n	8007950 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2200      	movs	r2, #0
 800794e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d112      	bne.n	800797e <VL53L0X_perform_vhv_calibration+0xc2>
 8007958:	79bb      	ldrb	r3, [r7, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00f      	beq.n	800797e <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800795e:	7dbb      	ldrb	r3, [r7, #22]
 8007960:	461a      	mov	r2, r3
 8007962:	2101      	movs	r1, #1
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7fe f841 	bl	80059ec <VL53L0X_WrByte>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800796e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	7dba      	ldrb	r2, [r7, #22]
 800797a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800797e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b08a      	sub	sp, #40	; 0x28
 800798e:	af04      	add	r7, sp, #16
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	4611      	mov	r1, r2
 8007996:	461a      	mov	r2, r3
 8007998:	460b      	mov	r3, r1
 800799a:	71fb      	strb	r3, [r7, #7]
 800799c:	4613      	mov	r3, r2
 800799e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80079b0:	79bb      	ldrb	r3, [r7, #6]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80079bc:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80079be:	2202      	movs	r2, #2
 80079c0:	2101      	movs	r1, #1
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7fe f812 	bl	80059ec <VL53L0X_WrByte>
 80079c8:	4603      	mov	r3, r0
 80079ca:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80079cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d105      	bne.n	80079e0 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80079d4:	2100      	movs	r1, #0
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff fe9c 	bl	8007714 <VL53L0X_perform_single_ref_calibration>
 80079dc:	4603      	mov	r3, r0
 80079de:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80079e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d115      	bne.n	8007a14 <VL53L0X_perform_phase_calibration+0x8a>
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d112      	bne.n	8007a14 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80079ee:	7d39      	ldrb	r1, [r7, #20]
 80079f0:	7d7a      	ldrb	r2, [r7, #21]
 80079f2:	2301      	movs	r3, #1
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	2300      	movs	r3, #0
 80079f8:	9302      	str	r3, [sp, #8]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	f107 0313 	add.w	r3, r7, #19
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	460b      	mov	r3, r1
 8007a06:	2101      	movs	r1, #1
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff febe 	bl	800778a <VL53L0X_ref_calibration_io>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75fb      	strb	r3, [r7, #23]
 8007a12:	e002      	b.n	8007a1a <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d112      	bne.n	8007a48 <VL53L0X_perform_phase_calibration+0xbe>
 8007a22:	79bb      	ldrb	r3, [r7, #6]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00f      	beq.n	8007a48 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007a28:	7dbb      	ldrb	r3, [r7, #22]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7fd ffdc 	bl	80059ec <VL53L0X_WrByte>
 8007a34:	4603      	mov	r3, r0
 8007a36:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	7dba      	ldrb	r2, [r7, #22]
 8007a44:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007a48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007a70:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	2300      	movs	r3, #0
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff ff1f 	bl	80078bc <VL53L0X_perform_vhv_calibration>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d107      	bne.n	8007a9a <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007a8a:	78fa      	ldrb	r2, [r7, #3]
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f7ff ff7a 	bl	800798a <VL53L0X_perform_phase_calibration>
 8007a96:	4603      	mov	r3, r0
 8007a98:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10f      	bne.n	8007ac2 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007aa2:	7dbb      	ldrb	r3, [r7, #22]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7fd ff9f 	bl	80059ec <VL53L0X_WrByte>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d103      	bne.n	8007ac2 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	7dba      	ldrb	r2, [r7, #22]
 8007abe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007ac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b086      	sub	sp, #24
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007ae2:	f107 030f 	add.w	r3, r7, #15
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fe ffcb 	bl	8006a84 <VL53L0X_GetMeasurementDataReady>
 8007aee:	4603      	mov	r3, r0
 8007af0:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d110      	bne.n	8007b1c <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d00f      	beq.n	8007b20 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	3301      	adds	r3, #1
 8007b04:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007b0c:	d302      	bcc.n	8007b14 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007b0e:	23f9      	movs	r3, #249	; 0xf9
 8007b10:	75fb      	strb	r3, [r7, #23]
			break;
 8007b12:	e006      	b.n	8007b22 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fe f889 	bl	8005c2c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007b1a:	e7e2      	b.n	8007ae2 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007b20:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	4603      	mov	r3, r0
 8007b36:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	085b      	lsrs	r3, r3, #1
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b8a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007b8c:	e002      	b.n	8007b94 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	089b      	lsrs	r3, r3, #2
 8007b92:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d8f8      	bhi.n	8007b8e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8007b9c:	e017      	b.n	8007bce <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d30b      	bcc.n	8007bc2 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4413      	add	r3, r2
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	085b      	lsrs	r3, r3, #1
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e002      	b.n	8007bc8 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	085b      	lsrs	r3, r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	089b      	lsrs	r3, r3, #2
 8007bcc:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e4      	bne.n	8007b9e <VL53L0X_isqrt+0x24>
	}

	return res;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <VL53L0X_calc_macro_period_ps>:
	return Status;
}


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b087      	sub	sp, #28
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007bee:	f240 6277 	movw	r2, #1655	; 0x677
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007bfa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007bfe:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	fb02 f303 	mul.w	r3, r2, r3
 8007c0e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007c10:	68bb      	ldr	r3, [r7, #8]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b087      	sub	sp, #28
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d017      	beq.n	8007c68 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c3e:	e005      	b.n	8007c4c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007c46:	89fb      	ldrh	r3, [r7, #14]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f4      	bne.n	8007c40 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007c56:	89fb      	ldrh	r3, [r7, #14]
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007c64:	4413      	add	r3, r2
 8007c66:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007c68:	8afb      	ldrh	r3, [r7, #22]

}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007c88:	88fa      	ldrh	r2, [r7, #6]
 8007c8a:	0a12      	lsrs	r2, r2, #8
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007c94:	68fb      	ldr	r3, [r7, #12]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff ff91 	bl	8007be2 <VL53L0X_calc_macro_period_ps>
 8007cc0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cc8:	4a0a      	ldr	r2, [pc, #40]	; (8007cf4 <VL53L0X_calc_timeout_mclks+0x50>)
 8007cca:	fba2 2303 	umull	r2, r3, r2, r3
 8007cce:	099b      	lsrs	r3, r3, #6
 8007cd0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cd8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	085b      	lsrs	r3, r3, #1
 8007ce0:	441a      	add	r2, r3
	timeout_period_mclks =
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007cea:	69fb      	ldr	r3, [r7, #28]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	10624dd3 	.word	0x10624dd3

08007cf8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	807b      	strh	r3, [r7, #2]
 8007d04:	4613      	mov	r3, r2
 8007d06:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007d0c:	787b      	ldrb	r3, [r7, #1]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff ff66 	bl	8007be2 <VL53L0X_calc_macro_period_ps>
 8007d16:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d1e:	4a0a      	ldr	r2, [pc, #40]	; (8007d48 <VL53L0X_calc_timeout_us+0x50>)
 8007d20:	fba2 2303 	umull	r2, r3, r2, r3
 8007d24:	099b      	lsrs	r3, r3, #6
 8007d26:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007d28:	887b      	ldrh	r3, [r7, #2]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
 8007d30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007d34:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <VL53L0X_calc_timeout_us+0x50>)
 8007d36:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3a:	099b      	lsrs	r3, r3, #6
 8007d3c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007d3e:	697b      	ldr	r3, [r7, #20]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	10624dd3 	.word	0x10624dd3

08007d4c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08c      	sub	sp, #48	; 0x30
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	460b      	mov	r3, r1
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <get_sequence_step_timeout+0x38>
 8007d78:	7afb      	ldrb	r3, [r7, #11]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d002      	beq.n	8007d84 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007d7e:	7afb      	ldrb	r3, [r7, #11]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d128      	bne.n	8007dd6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007d84:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007d88:	461a      	mov	r2, r3
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7fe f9f8 	bl	8006182 <VL53L0X_GetVcselPulsePeriod>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007d98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007da0:	f107 0320 	add.w	r3, r7, #32
 8007da4:	461a      	mov	r2, r3
 8007da6:	2146      	movs	r1, #70	; 0x46
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7fd fea1 	bl	8005af0 <VL53L0X_RdByte>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007db4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff ff5b 	bl	8007c76 <VL53L0X_decode_timeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007dc4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dca:	4619      	mov	r1, r3
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff ff93 	bl	8007cf8 <VL53L0X_calc_timeout_us>
 8007dd2:	62b8      	str	r0, [r7, #40]	; 0x28
 8007dd4:	e092      	b.n	8007efc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d135      	bne.n	8007e48 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ddc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007de0:	461a      	mov	r2, r3
 8007de2:	2100      	movs	r1, #0
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7fe f9cc 	bl	8006182 <VL53L0X_GetVcselPulsePeriod>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007df0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f040 8081 	bne.w	8007efc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007dfa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007dfe:	461a      	mov	r2, r3
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7fe f9bd 	bl	8006182 <VL53L0X_GetVcselPulsePeriod>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007e0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007e16:	f107 031e 	add.w	r3, r7, #30
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	2151      	movs	r1, #81	; 0x51
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7fd fe90 	bl	8005b44 <VL53L0X_RdWord>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007e2a:	8bfb      	ldrh	r3, [r7, #30]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff ff22 	bl	8007c76 <VL53L0X_decode_timeout>
 8007e32:	4603      	mov	r3, r0
 8007e34:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e36:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff ff5a 	bl	8007cf8 <VL53L0X_calc_timeout_us>
 8007e44:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e46:	e059      	b.n	8007efc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d156      	bne.n	8007efc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007e4e:	f107 0314 	add.w	r3, r7, #20
 8007e52:	4619      	mov	r1, r3
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7fe f9fd 	bl	8006254 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01d      	beq.n	8007ea0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e64:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7fe f988 	bl	8006182 <VL53L0X_GetVcselPulsePeriod>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007e78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10f      	bne.n	8007ea0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007e80:	f107 031e 	add.w	r3, r7, #30
 8007e84:	461a      	mov	r2, r3
 8007e86:	2151      	movs	r1, #81	; 0x51
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7fd fe5b 	bl	8005b44 <VL53L0X_RdWord>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007e94:	8bfb      	ldrh	r3, [r7, #30]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff feed 	bl	8007c76 <VL53L0X_decode_timeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007ea0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d109      	bne.n	8007ebc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ea8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007eac:	461a      	mov	r2, r3
 8007eae:	2101      	movs	r1, #1
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7fe f966 	bl	8006182 <VL53L0X_GetVcselPulsePeriod>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007ebc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10f      	bne.n	8007ee4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007ec4:	f107 031c 	add.w	r3, r7, #28
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2171      	movs	r1, #113	; 0x71
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7fd fe39 	bl	8005b44 <VL53L0X_RdWord>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007ed8:	8bbb      	ldrh	r3, [r7, #28]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fecb 	bl	8007c76 <VL53L0X_decode_timeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007ee4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ee6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007eec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007ef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7ff feff 	bl	8007cf8 <VL53L0X_calc_timeout_us>
 8007efa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f00:	601a      	str	r2, [r3, #0]

	return Status;
 8007f02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3730      	adds	r7, #48	; 0x30
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b08a      	sub	sp, #40	; 0x28
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	460b      	mov	r3, r1
 8007f18:	607a      	str	r2, [r7, #4]
 8007f1a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <set_sequence_step_timeout+0x26>
 8007f28:	7afb      	ldrb	r3, [r7, #11]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d002      	beq.n	8007f34 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007f2e:	7afb      	ldrb	r3, [r7, #11]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d138      	bne.n	8007fa6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f34:	f107 031b 	add.w	r3, r7, #27
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f7fe f920 	bl	8006182 <VL53L0X_GetVcselPulsePeriod>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007f48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d11a      	bne.n	8007f86 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007f50:	7efb      	ldrb	r3, [r7, #27]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fea4 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007f60:	8bbb      	ldrh	r3, [r7, #28]
 8007f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f66:	d903      	bls.n	8007f70 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007f68:	23ff      	movs	r3, #255	; 0xff
 8007f6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f6e:	e004      	b.n	8007f7a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007f70:	8bbb      	ldrh	r3, [r7, #28]
 8007f72:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007f74:	3b01      	subs	r3, #1
 8007f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007f86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 80ab 	bne.w	80080e6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007f90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f94:	461a      	mov	r2, r3
 8007f96:	2146      	movs	r1, #70	; 0x46
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7fd fd27 	bl	80059ec <VL53L0X_WrByte>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007fa4:	e09f      	b.n	80080e6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d135      	bne.n	8008018 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007fac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d11b      	bne.n	8007fec <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007fb4:	f107 031b 	add.w	r3, r7, #27
 8007fb8:	461a      	mov	r2, r3
 8007fba:	2100      	movs	r1, #0
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7fe f8e0 	bl	8006182 <VL53L0X_GetVcselPulsePeriod>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007fc8:	7efb      	ldrb	r3, [r7, #27]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff fe68 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 8007fd4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007fd6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7ff fe1f 	bl	8007c1e <VL53L0X_encode_timeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fe4:	8b3a      	ldrh	r2, [r7, #24]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d108      	bne.n	8008006 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007ff4:	8b3b      	ldrh	r3, [r7, #24]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2151      	movs	r1, #81	; 0x51
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7fd fd1a 	bl	8005a34 <VL53L0X_WrWord>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008006:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800800a:	2b00      	cmp	r3, #0
 800800c:	d16b      	bne.n	80080e6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008016:	e066      	b.n	80080e6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008018:	7afb      	ldrb	r3, [r7, #11]
 800801a:	2b04      	cmp	r3, #4
 800801c:	d160      	bne.n	80080e0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800801e:	f107 0310 	add.w	r3, r7, #16
 8008022:	4619      	mov	r1, r3
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7fe f915 	bl	8006254 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800802e:	7cfb      	ldrb	r3, [r7, #19]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01d      	beq.n	8008070 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008034:	f107 031b 	add.w	r3, r7, #27
 8008038:	461a      	mov	r2, r3
 800803a:	2100      	movs	r1, #0
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7fe f8a0 	bl	8006182 <VL53L0X_GetVcselPulsePeriod>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008048:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10f      	bne.n	8008070 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008050:	f107 0318 	add.w	r3, r7, #24
 8008054:	461a      	mov	r2, r3
 8008056:	2151      	movs	r1, #81	; 0x51
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f7fd fd73 	bl	8005b44 <VL53L0X_RdWord>
 800805e:	4603      	mov	r3, r0
 8008060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008064:	8b3b      	ldrh	r3, [r7, #24]
 8008066:	4618      	mov	r0, r3
 8008068:	f7ff fe05 	bl	8007c76 <VL53L0X_decode_timeout>
 800806c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800806e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008074:	2b00      	cmp	r3, #0
 8008076:	d109      	bne.n	800808c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008078:	f107 031b 	add.w	r3, r7, #27
 800807c:	461a      	mov	r2, r3
 800807e:	2101      	movs	r1, #1
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7fe f87e 	bl	8006182 <VL53L0X_GetVcselPulsePeriod>
 8008086:	4603      	mov	r3, r0
 8008088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800808c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008090:	2b00      	cmp	r3, #0
 8008092:	d128      	bne.n	80080e6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008094:	7efb      	ldrb	r3, [r7, #27]
 8008096:	461a      	mov	r2, r3
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7ff fe02 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 80080a0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80080a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	4413      	add	r3, r2
 80080a8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80080aa:	6a38      	ldr	r0, [r7, #32]
 80080ac:	f7ff fdb7 	bl	8007c1e <VL53L0X_encode_timeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80080b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d108      	bne.n	80080ce <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80080bc:	8bfb      	ldrh	r3, [r7, #30]
 80080be:	461a      	mov	r2, r3
 80080c0:	2171      	movs	r1, #113	; 0x71
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7fd fcb6 	bl	8005a34 <VL53L0X_WrWord>
 80080c8:	4603      	mov	r3, r0
 80080ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80080ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d107      	bne.n	80080e6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80080de:	e002      	b.n	80080e6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080e0:	23fc      	movs	r3, #252	; 0xfc
 80080e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80080e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3728      	adds	r7, #40	; 0x28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b08a      	sub	sp, #40	; 0x28
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	460b      	mov	r3, r1
 80080fc:	70fb      	strb	r3, [r7, #3]
 80080fe:	4613      	mov	r3, r2
 8008100:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008102:	2300      	movs	r3, #0
 8008104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8008108:	230c      	movs	r3, #12
 800810a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800810e:	2312      	movs	r3, #18
 8008110:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8008114:	2308      	movs	r3, #8
 8008116:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800811a:	230e      	movs	r3, #14
 800811c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8008124:	78bb      	ldrb	r3, [r7, #2]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008130:	23fc      	movs	r3, #252	; 0xfc
 8008132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008136:	e020      	b.n	800817a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10d      	bne.n	800815a <VL53L0X_set_vcsel_pulse_period+0x68>
 800813e:	78ba      	ldrb	r2, [r7, #2]
 8008140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008144:	429a      	cmp	r2, r3
 8008146:	d304      	bcc.n	8008152 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8008148:	78ba      	ldrb	r2, [r7, #2]
 800814a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800814e:	429a      	cmp	r2, r3
 8008150:	d903      	bls.n	800815a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008152:	23fc      	movs	r3, #252	; 0xfc
 8008154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008158:	e00f      	b.n	800817a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10c      	bne.n	800817a <VL53L0X_set_vcsel_pulse_period+0x88>
 8008160:	78ba      	ldrb	r2, [r7, #2]
 8008162:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008166:	429a      	cmp	r2, r3
 8008168:	d304      	bcc.n	8008174 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800816a:	78ba      	ldrb	r2, [r7, #2]
 800816c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008170:	429a      	cmp	r2, r3
 8008172:	d902      	bls.n	800817a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008174:	23fc      	movs	r3, #252	; 0xfc
 8008176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800817a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8008182:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008186:	e239      	b.n	80085fc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d150      	bne.n	8008230 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800818e:	78bb      	ldrb	r3, [r7, #2]
 8008190:	2b0c      	cmp	r3, #12
 8008192:	d110      	bne.n	80081b6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8008194:	2218      	movs	r2, #24
 8008196:	2157      	movs	r1, #87	; 0x57
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7fd fc27 	bl	80059ec <VL53L0X_WrByte>
 800819e:	4603      	mov	r3, r0
 80081a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80081a4:	2208      	movs	r2, #8
 80081a6:	2156      	movs	r1, #86	; 0x56
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fd fc1f 	bl	80059ec <VL53L0X_WrByte>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081b4:	e17f      	b.n	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80081b6:	78bb      	ldrb	r3, [r7, #2]
 80081b8:	2b0e      	cmp	r3, #14
 80081ba:	d110      	bne.n	80081de <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80081bc:	2230      	movs	r2, #48	; 0x30
 80081be:	2157      	movs	r1, #87	; 0x57
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7fd fc13 	bl	80059ec <VL53L0X_WrByte>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80081cc:	2208      	movs	r2, #8
 80081ce:	2156      	movs	r1, #86	; 0x56
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7fd fc0b 	bl	80059ec <VL53L0X_WrByte>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081dc:	e16b      	b.n	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80081de:	78bb      	ldrb	r3, [r7, #2]
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	d110      	bne.n	8008206 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80081e4:	2240      	movs	r2, #64	; 0x40
 80081e6:	2157      	movs	r1, #87	; 0x57
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fd fbff 	bl	80059ec <VL53L0X_WrByte>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80081f4:	2208      	movs	r2, #8
 80081f6:	2156      	movs	r1, #86	; 0x56
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7fd fbf7 	bl	80059ec <VL53L0X_WrByte>
 80081fe:	4603      	mov	r3, r0
 8008200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008204:	e157      	b.n	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8008206:	78bb      	ldrb	r3, [r7, #2]
 8008208:	2b12      	cmp	r3, #18
 800820a:	f040 8154 	bne.w	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800820e:	2250      	movs	r2, #80	; 0x50
 8008210:	2157      	movs	r1, #87	; 0x57
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7fd fbea 	bl	80059ec <VL53L0X_WrByte>
 8008218:	4603      	mov	r3, r0
 800821a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800821e:	2208      	movs	r2, #8
 8008220:	2156      	movs	r1, #86	; 0x56
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fd fbe2 	bl	80059ec <VL53L0X_WrByte>
 8008228:	4603      	mov	r3, r0
 800822a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800822e:	e142      	b.n	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	2b01      	cmp	r3, #1
 8008234:	f040 813f 	bne.w	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8008238:	78bb      	ldrb	r3, [r7, #2]
 800823a:	2b08      	cmp	r3, #8
 800823c:	d14c      	bne.n	80082d8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800823e:	2210      	movs	r2, #16
 8008240:	2148      	movs	r1, #72	; 0x48
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fd fbd2 	bl	80059ec <VL53L0X_WrByte>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800824e:	2208      	movs	r2, #8
 8008250:	2147      	movs	r1, #71	; 0x47
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7fd fbca 	bl	80059ec <VL53L0X_WrByte>
 8008258:	4603      	mov	r3, r0
 800825a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800825e:	2202      	movs	r2, #2
 8008260:	2132      	movs	r1, #50	; 0x32
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7fd fbc2 	bl	80059ec <VL53L0X_WrByte>
 8008268:	4603      	mov	r3, r0
 800826a:	461a      	mov	r2, r3
 800826c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008270:	4313      	orrs	r3, r2
 8008272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8008276:	220c      	movs	r2, #12
 8008278:	2130      	movs	r1, #48	; 0x30
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fd fbb6 	bl	80059ec <VL53L0X_WrByte>
 8008280:	4603      	mov	r3, r0
 8008282:	461a      	mov	r2, r3
 8008284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008288:	4313      	orrs	r3, r2
 800828a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800828e:	2201      	movs	r2, #1
 8008290:	21ff      	movs	r1, #255	; 0xff
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7fd fbaa 	bl	80059ec <VL53L0X_WrByte>
 8008298:	4603      	mov	r3, r0
 800829a:	461a      	mov	r2, r3
 800829c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082a0:	4313      	orrs	r3, r2
 80082a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80082a6:	2230      	movs	r2, #48	; 0x30
 80082a8:	2130      	movs	r1, #48	; 0x30
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7fd fb9e 	bl	80059ec <VL53L0X_WrByte>
 80082b0:	4603      	mov	r3, r0
 80082b2:	461a      	mov	r2, r3
 80082b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80082be:	2200      	movs	r2, #0
 80082c0:	21ff      	movs	r1, #255	; 0xff
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fd fb92 	bl	80059ec <VL53L0X_WrByte>
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d0:	4313      	orrs	r3, r2
 80082d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082d6:	e0ee      	b.n	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80082d8:	78bb      	ldrb	r3, [r7, #2]
 80082da:	2b0a      	cmp	r3, #10
 80082dc:	d14c      	bne.n	8008378 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80082de:	2228      	movs	r2, #40	; 0x28
 80082e0:	2148      	movs	r1, #72	; 0x48
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fd fb82 	bl	80059ec <VL53L0X_WrByte>
 80082e8:	4603      	mov	r3, r0
 80082ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80082ee:	2208      	movs	r2, #8
 80082f0:	2147      	movs	r1, #71	; 0x47
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fd fb7a 	bl	80059ec <VL53L0X_WrByte>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80082fe:	2203      	movs	r2, #3
 8008300:	2132      	movs	r1, #50	; 0x32
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fd fb72 	bl	80059ec <VL53L0X_WrByte>
 8008308:	4603      	mov	r3, r0
 800830a:	461a      	mov	r2, r3
 800830c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008310:	4313      	orrs	r3, r2
 8008312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008316:	2209      	movs	r2, #9
 8008318:	2130      	movs	r1, #48	; 0x30
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7fd fb66 	bl	80059ec <VL53L0X_WrByte>
 8008320:	4603      	mov	r3, r0
 8008322:	461a      	mov	r2, r3
 8008324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008328:	4313      	orrs	r3, r2
 800832a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800832e:	2201      	movs	r2, #1
 8008330:	21ff      	movs	r1, #255	; 0xff
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7fd fb5a 	bl	80059ec <VL53L0X_WrByte>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008340:	4313      	orrs	r3, r2
 8008342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008346:	2220      	movs	r2, #32
 8008348:	2130      	movs	r1, #48	; 0x30
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fd fb4e 	bl	80059ec <VL53L0X_WrByte>
 8008350:	4603      	mov	r3, r0
 8008352:	461a      	mov	r2, r3
 8008354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008358:	4313      	orrs	r3, r2
 800835a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800835e:	2200      	movs	r2, #0
 8008360:	21ff      	movs	r1, #255	; 0xff
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7fd fb42 	bl	80059ec <VL53L0X_WrByte>
 8008368:	4603      	mov	r3, r0
 800836a:	461a      	mov	r2, r3
 800836c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008370:	4313      	orrs	r3, r2
 8008372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008376:	e09e      	b.n	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8008378:	78bb      	ldrb	r3, [r7, #2]
 800837a:	2b0c      	cmp	r3, #12
 800837c:	d14c      	bne.n	8008418 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800837e:	2238      	movs	r2, #56	; 0x38
 8008380:	2148      	movs	r1, #72	; 0x48
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7fd fb32 	bl	80059ec <VL53L0X_WrByte>
 8008388:	4603      	mov	r3, r0
 800838a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800838e:	2208      	movs	r2, #8
 8008390:	2147      	movs	r1, #71	; 0x47
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7fd fb2a 	bl	80059ec <VL53L0X_WrByte>
 8008398:	4603      	mov	r3, r0
 800839a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800839e:	2203      	movs	r2, #3
 80083a0:	2132      	movs	r1, #50	; 0x32
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7fd fb22 	bl	80059ec <VL53L0X_WrByte>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b0:	4313      	orrs	r3, r2
 80083b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80083b6:	2208      	movs	r2, #8
 80083b8:	2130      	movs	r1, #48	; 0x30
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7fd fb16 	bl	80059ec <VL53L0X_WrByte>
 80083c0:	4603      	mov	r3, r0
 80083c2:	461a      	mov	r2, r3
 80083c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80083ce:	2201      	movs	r2, #1
 80083d0:	21ff      	movs	r1, #255	; 0xff
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7fd fb0a 	bl	80059ec <VL53L0X_WrByte>
 80083d8:	4603      	mov	r3, r0
 80083da:	461a      	mov	r2, r3
 80083dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e0:	4313      	orrs	r3, r2
 80083e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80083e6:	2220      	movs	r2, #32
 80083e8:	2130      	movs	r1, #48	; 0x30
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7fd fafe 	bl	80059ec <VL53L0X_WrByte>
 80083f0:	4603      	mov	r3, r0
 80083f2:	461a      	mov	r2, r3
 80083f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f8:	4313      	orrs	r3, r2
 80083fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80083fe:	2200      	movs	r2, #0
 8008400:	21ff      	movs	r1, #255	; 0xff
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fd faf2 	bl	80059ec <VL53L0X_WrByte>
 8008408:	4603      	mov	r3, r0
 800840a:	461a      	mov	r2, r3
 800840c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008410:	4313      	orrs	r3, r2
 8008412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008416:	e04e      	b.n	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008418:	78bb      	ldrb	r3, [r7, #2]
 800841a:	2b0e      	cmp	r3, #14
 800841c:	d14b      	bne.n	80084b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800841e:	2248      	movs	r2, #72	; 0x48
 8008420:	2148      	movs	r1, #72	; 0x48
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fd fae2 	bl	80059ec <VL53L0X_WrByte>
 8008428:	4603      	mov	r3, r0
 800842a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800842e:	2208      	movs	r2, #8
 8008430:	2147      	movs	r1, #71	; 0x47
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7fd fada 	bl	80059ec <VL53L0X_WrByte>
 8008438:	4603      	mov	r3, r0
 800843a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800843e:	2203      	movs	r2, #3
 8008440:	2132      	movs	r1, #50	; 0x32
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7fd fad2 	bl	80059ec <VL53L0X_WrByte>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008450:	4313      	orrs	r3, r2
 8008452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008456:	2207      	movs	r2, #7
 8008458:	2130      	movs	r1, #48	; 0x30
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7fd fac6 	bl	80059ec <VL53L0X_WrByte>
 8008460:	4603      	mov	r3, r0
 8008462:	461a      	mov	r2, r3
 8008464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008468:	4313      	orrs	r3, r2
 800846a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800846e:	2201      	movs	r2, #1
 8008470:	21ff      	movs	r1, #255	; 0xff
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7fd faba 	bl	80059ec <VL53L0X_WrByte>
 8008478:	4603      	mov	r3, r0
 800847a:	461a      	mov	r2, r3
 800847c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008480:	4313      	orrs	r3, r2
 8008482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008486:	2220      	movs	r2, #32
 8008488:	2130      	movs	r1, #48	; 0x30
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fd faae 	bl	80059ec <VL53L0X_WrByte>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008498:	4313      	orrs	r3, r2
 800849a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800849e:	2200      	movs	r2, #0
 80084a0:	21ff      	movs	r1, #255	; 0xff
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fd faa2 	bl	80059ec <VL53L0X_WrByte>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084b0:	4313      	orrs	r3, r2
 80084b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80084b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d17f      	bne.n	80085be <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80084be:	78bb      	ldrb	r3, [r7, #2]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff fb47 	bl	8007b54 <VL53L0X_encode_vcsel_period>
 80084c6:	4603      	mov	r3, r0
 80084c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d045      	beq.n	8008562 <VL53L0X_set_vcsel_pulse_period+0x470>
 80084d6:	e06e      	b.n	80085b6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80084d8:	f107 0314 	add.w	r3, r7, #20
 80084dc:	461a      	mov	r2, r3
 80084de:	2103      	movs	r1, #3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff fc33 	bl	8007d4c <get_sequence_step_timeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80084ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d109      	bne.n	8008508 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80084f4:	f107 0310 	add.w	r3, r7, #16
 80084f8:	461a      	mov	r2, r3
 80084fa:	2102      	movs	r1, #2
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff fc25 	bl	8007d4c <get_sequence_step_timeout>
 8008502:	4603      	mov	r3, r0
 8008504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008508:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800850c:	2b00      	cmp	r3, #0
 800850e:	d109      	bne.n	8008524 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8008510:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008514:	461a      	mov	r2, r3
 8008516:	2150      	movs	r1, #80	; 0x50
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7fd fa67 	bl	80059ec <VL53L0X_WrByte>
 800851e:	4603      	mov	r3, r0
 8008520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008528:	2b00      	cmp	r3, #0
 800852a:	d108      	bne.n	800853e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	461a      	mov	r2, r3
 8008530:	2103      	movs	r1, #3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff fceb 	bl	8007f0e <set_sequence_step_timeout>
 8008538:	4603      	mov	r3, r0
 800853a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800853e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008542:	2b00      	cmp	r3, #0
 8008544:	d108      	bne.n	8008558 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	461a      	mov	r2, r3
 800854a:	2102      	movs	r1, #2
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff fcde 	bl	8007f0e <set_sequence_step_timeout>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	78ba      	ldrb	r2, [r7, #2]
 800855c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008560:	e02e      	b.n	80085c0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008562:	f107 0318 	add.w	r3, r7, #24
 8008566:	461a      	mov	r2, r3
 8008568:	2104      	movs	r1, #4
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fbee 	bl	8007d4c <get_sequence_step_timeout>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008576:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800857e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008582:	461a      	mov	r2, r3
 8008584:	2170      	movs	r1, #112	; 0x70
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7fd fa30 	bl	80059ec <VL53L0X_WrByte>
 800858c:	4603      	mov	r3, r0
 800858e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008592:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008596:	2b00      	cmp	r3, #0
 8008598:	d108      	bne.n	80085ac <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	461a      	mov	r2, r3
 800859e:	2104      	movs	r1, #4
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff fcb4 	bl	8007f0e <set_sequence_step_timeout>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	78ba      	ldrb	r2, [r7, #2]
 80085b0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80085b4:	e004      	b.n	80085c0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085b6:	23fc      	movs	r3, #252	; 0xfc
 80085b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085bc:	e000      	b.n	80085c0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80085be:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80085c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d109      	bne.n	80085dc <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80085ce:	69f9      	ldr	r1, [r7, #28]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7fd fd98 	bl	8006106 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80085dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d109      	bne.n	80085f8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80085e4:	f107 010f 	add.w	r1, r7, #15
 80085e8:	2301      	movs	r3, #1
 80085ea:	2200      	movs	r2, #0
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff f9cc 	bl	800798a <VL53L0X_perform_phase_calibration>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80085f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3728      	adds	r7, #40	; 0x28
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	460b      	mov	r3, r1
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008616:	7afb      	ldrb	r3, [r7, #11]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800861c:	2b01      	cmp	r3, #1
 800861e:	d00a      	beq.n	8008636 <VL53L0X_get_vcsel_pulse_period+0x32>
 8008620:	e013      	b.n	800864a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008622:	f107 0316 	add.w	r3, r7, #22
 8008626:	461a      	mov	r2, r3
 8008628:	2150      	movs	r1, #80	; 0x50
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7fd fa60 	bl	8005af0 <VL53L0X_RdByte>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008634:	e00b      	b.n	800864e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008636:	f107 0316 	add.w	r3, r7, #22
 800863a:	461a      	mov	r2, r3
 800863c:	2170      	movs	r1, #112	; 0x70
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7fd fa56 	bl	8005af0 <VL53L0X_RdByte>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008648:	e001      	b.n	800864e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800864a:	23fc      	movs	r3, #252	; 0xfc
 800864c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800864e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d107      	bne.n	8008666 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008656:	7dbb      	ldrb	r3, [r7, #22]
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff fa68 	bl	8007b2e <VL53L0X_decode_vcsel_period>
 800865e:	4603      	mov	r3, r0
 8008660:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	701a      	strb	r2, [r3, #0]

	return Status;
 8008666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b092      	sub	sp, #72	; 0x48
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800867c:	2300      	movs	r3, #0
 800867e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008682:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008686:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008688:	f240 7376 	movw	r3, #1910	; 0x776
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800868e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008692:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008694:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800869a:	f240 234e 	movw	r3, #590	; 0x24e
 800869e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80086a0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80086a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80086a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80086aa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80086ac:	f240 2326 	movw	r3, #550	; 0x226
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80086b6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80086ba:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80086bc:	2300      	movs	r3, #0
 80086be:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d205      	bcs.n	80086d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80086c8:	23fc      	movs	r3, #252	; 0xfc
 80086ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80086ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80086d2:	e0aa      	b.n	800882a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80086d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80086e0:	f107 0314 	add.w	r3, r7, #20
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fd fdb4 	bl	8006254 <VL53L0X_GetSequenceStepEnables>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80086f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d15b      	bne.n	80087b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80086fa:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d105      	bne.n	800870c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008700:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008702:	2b00      	cmp	r3, #0
 8008704:	d102      	bne.n	800870c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008706:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008708:	2b00      	cmp	r3, #0
 800870a:	d052      	beq.n	80087b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800870c:	f107 0310 	add.w	r3, r7, #16
 8008710:	461a      	mov	r2, r3
 8008712:	2102      	movs	r1, #2
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff fb19 	bl	8007d4c <get_sequence_step_timeout>
 800871a:	4603      	mov	r3, r0
 800871c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008720:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008728:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800872c:	e07d      	b.n	800882a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800872e:	7d3b      	ldrb	r3, [r7, #20]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00f      	beq.n	8008754 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008734:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008738:	4413      	add	r3, r2
 800873a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008740:	429a      	cmp	r2, r3
 8008742:	d204      	bcs.n	800874e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	643b      	str	r3, [r7, #64]	; 0x40
 800874c:	e002      	b.n	8008754 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800874e:	23fc      	movs	r3, #252	; 0xfc
 8008750:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008754:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800875c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008760:	e063      	b.n	800882a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008762:	7dbb      	ldrb	r3, [r7, #22]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d011      	beq.n	800878c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	4413      	add	r3, r2
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008776:	429a      	cmp	r2, r3
 8008778:	d204      	bcs.n	8008784 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800877a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	643b      	str	r3, [r7, #64]	; 0x40
 8008782:	e016      	b.n	80087b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008784:	23fc      	movs	r3, #252	; 0xfc
 8008786:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800878a:	e012      	b.n	80087b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800878c:	7d7b      	ldrb	r3, [r7, #21]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00f      	beq.n	80087b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008796:	4413      	add	r3, r2
 8008798:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800879e:	429a      	cmp	r2, r3
 80087a0:	d204      	bcs.n	80087ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80087a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	643b      	str	r3, [r7, #64]	; 0x40
 80087aa:	e002      	b.n	80087b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087ac:	23fc      	movs	r3, #252	; 0xfc
 80087ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80087b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80087ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087be:	e034      	b.n	800882a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d019      	beq.n	80087fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80087c6:	f107 030c 	add.w	r3, r7, #12
 80087ca:	461a      	mov	r2, r3
 80087cc:	2103      	movs	r1, #3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff fabc 	bl	8007d4c <get_sequence_step_timeout>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087de:	4413      	add	r3, r2
 80087e0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d204      	bcs.n	80087f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80087ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	643b      	str	r3, [r7, #64]	; 0x40
 80087f2:	e002      	b.n	80087fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087f4:	23fc      	movs	r3, #252	; 0xfc
 80087f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80087fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d111      	bne.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008802:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00e      	beq.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008812:	2104      	movs	r1, #4
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff fb7a 	bl	8007f0e <set_sequence_step_timeout>
 800881a:	4603      	mov	r3, r0
 800881c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008826:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800882a:	4618      	mov	r0, r3
 800882c:	3748      	adds	r7, #72	; 0x48
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b090      	sub	sp, #64	; 0x40
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800883c:	2300      	movs	r3, #0
 800883e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008842:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008846:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008848:	f240 7376 	movw	r3, #1910	; 0x776
 800884c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800884e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008852:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008854:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008858:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800885a:	f240 234e 	movw	r3, #590	; 0x24e
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008860:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008866:	f44f 7325 	mov.w	r3, #660	; 0x294
 800886a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800886c:	f240 2326 	movw	r3, #550	; 0x226
 8008870:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887a:	441a      	add	r2, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008880:	f107 0318 	add.w	r3, r7, #24
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7fd fce4 	bl	8006254 <VL53L0X_GetSequenceStepEnables>
 800888c:	4603      	mov	r3, r0
 800888e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008892:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800889a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800889e:	e075      	b.n	800898c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80088a0:	7e3b      	ldrb	r3, [r7, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d105      	bne.n	80088b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80088a6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80088ac:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d030      	beq.n	8008914 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80088b2:	f107 0310 	add.w	r3, r7, #16
 80088b6:	461a      	mov	r2, r3
 80088b8:	2102      	movs	r1, #2
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff fa46 	bl	8007d4c <get_sequence_step_timeout>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80088c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d122      	bne.n	8008914 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80088ce:	7e3b      	ldrb	r3, [r7, #24]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d007      	beq.n	80088e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80088d8:	6939      	ldr	r1, [r7, #16]
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80088de:	441a      	add	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80088e4:	7ebb      	ldrb	r3, [r7, #26]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d009      	beq.n	80088fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80088ee:	6939      	ldr	r1, [r7, #16]
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	440b      	add	r3, r1
 80088f4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80088f6:	441a      	add	r2, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	e00a      	b.n	8008914 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80088fe:	7e7b      	ldrb	r3, [r7, #25]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d007      	beq.n	8008914 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008908:	6939      	ldr	r1, [r7, #16]
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800890e:	441a      	add	r2, r3
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008914:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008918:	2b00      	cmp	r3, #0
 800891a:	d114      	bne.n	8008946 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800891c:	7efb      	ldrb	r3, [r7, #27]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d011      	beq.n	8008946 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008922:	f107 030c 	add.w	r3, r7, #12
 8008926:	461a      	mov	r2, r3
 8008928:	2103      	movs	r1, #3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fa0e 	bl	8007d4c <get_sequence_step_timeout>
 8008930:	4603      	mov	r3, r0
 8008932:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800893a:	68f9      	ldr	r1, [r7, #12]
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008940:	441a      	add	r2, r3
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008946:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800894a:	2b00      	cmp	r3, #0
 800894c:	d114      	bne.n	8008978 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800894e:	7f3b      	ldrb	r3, [r7, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d011      	beq.n	8008978 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008954:	f107 0314 	add.w	r3, r7, #20
 8008958:	461a      	mov	r2, r3
 800895a:	2104      	movs	r1, #4
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff f9f5 	bl	8007d4c <get_sequence_step_timeout>
 8008962:	4603      	mov	r3, r0
 8008964:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008972:	441a      	add	r2, r3
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008978:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008988:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800898c:	4618      	mov	r0, r3
 800898e:	3740      	adds	r7, #64	; 0x40
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800899e:	2300      	movs	r3, #0
 80089a0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80089a6:	e0c6      	b.n	8008b36 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	4413      	add	r3, r2
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	3301      	adds	r3, #1
 80089b6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80089b8:	7cfb      	ldrb	r3, [r7, #19]
 80089ba:	2bff      	cmp	r3, #255	; 0xff
 80089bc:	f040 808d 	bne.w	8008ada <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	4413      	add	r3, r2
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	747b      	strb	r3, [r7, #17]
			Index++;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	3301      	adds	r3, #1
 80089ce:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80089d0:	7c7b      	ldrb	r3, [r7, #17]
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	d87e      	bhi.n	8008ad4 <VL53L0X_load_tuning_settings+0x140>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <VL53L0X_load_tuning_settings+0x48>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	080089ed 	.word	0x080089ed
 80089e0:	08008a27 	.word	0x08008a27
 80089e4:	08008a61 	.word	0x08008a61
 80089e8:	08008a9b 	.word	0x08008a9b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	4413      	add	r3, r2
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	743b      	strb	r3, [r7, #16]
				Index++;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	3301      	adds	r3, #1
 80089fa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	4413      	add	r3, r2
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008a0c:	7c3b      	ldrb	r3, [r7, #16]
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	021b      	lsls	r3, r3, #8
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	4413      	add	r3, r2
 8008a1a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	89ba      	ldrh	r2, [r7, #12]
 8008a20:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008a24:	e087      	b.n	8008b36 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	743b      	strb	r3, [r7, #16]
				Index++;
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	3301      	adds	r3, #1
 8008a34:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	3301      	adds	r3, #1
 8008a44:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008a46:	7c3b      	ldrb	r3, [r7, #16]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	021b      	lsls	r3, r3, #8
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	4413      	add	r3, r2
 8008a54:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	89ba      	ldrh	r2, [r7, #12]
 8008a5a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008a5e:	e06a      	b.n	8008b36 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	4413      	add	r3, r2
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	743b      	strb	r3, [r7, #16]
				Index++;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	4413      	add	r3, r2
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008a80:	7c3b      	ldrb	r3, [r7, #16]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	021b      	lsls	r3, r3, #8
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	89ba      	ldrh	r2, [r7, #12]
 8008a94:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008a98:	e04d      	b.n	8008b36 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	743b      	strb	r3, [r7, #16]
				Index++;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	4413      	add	r3, r2
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008aba:	7c3b      	ldrb	r3, [r7, #16]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	89ba      	ldrh	r2, [r7, #12]
 8008ace:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008ad2:	e030      	b.n	8008b36 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ad4:	23fc      	movs	r3, #252	; 0xfc
 8008ad6:	77fb      	strb	r3, [r7, #31]
 8008ad8:	e02d      	b.n	8008b36 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008ada:	7cfb      	ldrb	r3, [r7, #19]
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d828      	bhi.n	8008b32 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	3301      	adds	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008af0:	2300      	movs	r3, #0
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	e00f      	b.n	8008b16 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	4413      	add	r3, r2
 8008afc:	7819      	ldrb	r1, [r3, #0]
 8008afe:	f107 0208 	add.w	r2, r7, #8
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	4413      	add	r3, r2
 8008b06:	460a      	mov	r2, r1
 8008b08:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	3301      	adds	r3, #1
 8008b14:	61bb      	str	r3, [r7, #24]
 8008b16:	7cfb      	ldrb	r3, [r7, #19]
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	dbeb      	blt.n	8008af6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008b1e:	7cfb      	ldrb	r3, [r7, #19]
 8008b20:	f107 0208 	add.w	r2, r7, #8
 8008b24:	7cb9      	ldrb	r1, [r7, #18]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7fc ff04 	bl	8005934 <VL53L0X_WriteMulti>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	77fb      	strb	r3, [r7, #31]
 8008b30:	e001      	b.n	8008b36 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b32:	23fc      	movs	r3, #252	; 0xfc
 8008b34:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d004      	beq.n	8008b4c <VL53L0X_load_tuning_settings+0x1b8>
 8008b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f43f af2e 	beq.w	80089a8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3720      	adds	r7, #32
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008b6e:	f107 0313 	add.w	r3, r7, #19
 8008b72:	4619      	mov	r1, r3
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7fd fbf9 	bl	800636c <VL53L0X_GetXTalkCompensationEnable>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008b7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d111      	bne.n	8008baa <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008b86:	7cfb      	ldrb	r3, [r7, #19]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00e      	beq.n	8008baa <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	8a9b      	ldrh	r3, [r3, #20]
 8008b96:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	fb02 f303 	mul.w	r3, r2, r3
 8008b9e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	3380      	adds	r3, #128	; 0x80
 8008ba4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008baa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b086      	sub	sp, #24
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008bce:	f107 0310 	add.w	r3, r7, #16
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	68b9      	ldr	r1, [r7, #8]
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff ffbe 	bl	8008b58 <VL53L0X_get_total_xtalk_rate>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d105      	bne.n	8008bf4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	441a      	add	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	601a      	str	r2, [r3, #0]

	return Status;
 8008bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b09a      	sub	sp, #104	; 0x68
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008c0e:	2312      	movs	r3, #18
 8008c10:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008c12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c16:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008c18:	2342      	movs	r3, #66	; 0x42
 8008c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008c1c:	2306      	movs	r3, #6
 8008c1e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008c20:	2307      	movs	r3, #7
 8008c22:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008c38:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c3e:	fb02 f303 	mul.w	r3, r2, r3
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c46:	3380      	adds	r3, #128	; 0x80
 8008c48:	0a1b      	lsrs	r3, r3, #8
 8008c4a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c50:	fb02 f303 	mul.w	r3, r2, r3
 8008c54:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01a      	beq.n	8008c96 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	029b      	lsls	r3, r3, #10
 8008c64:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8008c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6c:	4413      	add	r3, r2
 8008c6e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008c70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c78:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8008c7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	4413      	add	r3, r2
 8008c82:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c86:	fb03 f303 	mul.w	r3, r3, r3
 8008c8a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c92:	0c1b      	lsrs	r3, r3, #16
 8008c94:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c9a:	fb02 f303 	mul.w	r3, r2, r3
 8008c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008ca6:	0c1b      	lsrs	r3, r3, #16
 8008ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	fb03 f303 	mul.w	r3, r3, r3
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cb4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008cb8:	0c1b      	lsrs	r3, r3, #16
 8008cba:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8008cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cbe:	085a      	lsrs	r2, r3, #1
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	441a      	add	r2, r3
 8008cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cca:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cd0:	fb02 f303 	mul.w	r3, r2, r3
 8008cd4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cdc:	d302      	bcc.n	8008ce4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8008cde:	4b54      	ldr	r3, [pc, #336]	; (8008e30 <VL53L0X_calc_dmax+0x230>)
 8008ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ce2:	e015      	b.n	8008d10 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce6:	085a      	lsrs	r2, r3, #1
 8008ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cea:	441a      	add	r2, r3
 8008cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cf8:	fb02 f303 	mul.w	r3, r2, r3
 8008cfc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d04:	0c1b      	lsrs	r3, r3, #16
 8008d06:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d0a:	fb03 f303 	mul.w	r3, r3, r3
 8008d0e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d12:	039b      	lsls	r3, r3, #14
 8008d14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008d18:	4a46      	ldr	r2, [pc, #280]	; (8008e34 <VL53L0X_calc_dmax+0x234>)
 8008d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1e:	099b      	lsrs	r3, r3, #6
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	fb03 f303 	mul.w	r3, r3, r3
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2c:	fb03 f303 	mul.w	r3, r3, r3
 8008d30:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	3308      	adds	r3, #8
 8008d36:	091b      	lsrs	r3, r3, #4
 8008d38:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d44:	4613      	mov	r3, r2
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	4413      	add	r3, r2
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d54:	0b9b      	lsrs	r3, r3, #14
 8008d56:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d5c:	4413      	add	r3, r2
 8008d5e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d62:	085b      	lsrs	r3, r3, #1
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	4413      	add	r3, r2
 8008d68:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d72:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	039b      	lsls	r3, r3, #14
 8008d78:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	085b      	lsrs	r3, r3, #1
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	4413      	add	r3, r2
 8008d82:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d92:	fb02 f303 	mul.w	r3, r2, r3
 8008d96:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008d9e:	4a25      	ldr	r2, [pc, #148]	; (8008e34 <VL53L0X_calc_dmax+0x234>)
 8008da0:	fba2 2303 	umull	r2, r3, r2, r3
 8008da4:	099b      	lsrs	r3, r3, #6
 8008da6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008db4:	4a1f      	ldr	r2, [pc, #124]	; (8008e34 <VL53L0X_calc_dmax+0x234>)
 8008db6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dba:	099b      	lsrs	r3, r3, #6
 8008dbc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8008dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc0:	3380      	adds	r3, #128	; 0x80
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d008      	beq.n	8008dde <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	085a      	lsrs	r2, r3, #1
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd2:	441a      	add	r2, r3
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dda:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ddc:	e001      	b.n	8008de2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8008de2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008de4:	f7fe fec9 	bl	8007b7a <VL53L0X_isqrt>
 8008de8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d008      	beq.n	8008e02 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	085a      	lsrs	r2, r3, #1
 8008df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df6:	441a      	add	r2, r3
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e00:	e001      	b.n	8008e06 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8008e06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008e08:	f7fe feb7 	bl	8007b7a <VL53L0X_isqrt>
 8008e0c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8008e0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d902      	bls.n	8008e22 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8008e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e20:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008e22:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3768      	adds	r7, #104	; 0x68
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	fff00000 	.word	0xfff00000
 8008e34:	10624dd3 	.word	0x10624dd3

08008e38 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b0b4      	sub	sp, #208	; 0xd0
 8008e3c:	af04      	add	r7, sp, #16
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008e46:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008e4e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008e56:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8008e5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008e5e:	f241 235c 	movw	r3, #4700	; 0x125c
 8008e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008e66:	4b9e      	ldr	r3, [pc, #632]	; (80090e0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008e6c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008e70:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008e72:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e7e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008e80:	4b98      	ldr	r3, [pc, #608]	; (80090e4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008e82:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008e84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e88:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008e8a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008e90:	f240 6377 	movw	r3, #1655	; 0x677
 8008e94:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008eae:	0c1b      	lsrs	r3, r3, #16
 8008eb0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff fe78 	bl	8008bb6 <VL53L0X_get_total_signal_rate>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8008ecc:	f107 0314 	add.w	r3, r7, #20
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fe3f 	bl	8008b58 <VL53L0X_get_total_xtalk_rate>
 8008eda:	4603      	mov	r3, r0
 8008edc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ee6:	fb02 f303 	mul.w	r3, r2, r3
 8008eea:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8008eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008ef2:	0c1b      	lsrs	r3, r3, #16
 8008ef4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008efc:	fb02 f303 	mul.w	r3, r2, r3
 8008f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008f04:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d902      	bls.n	8008f14 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008f14:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d168      	bne.n	8008fee <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008f22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008f2c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008f30:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008f34:	461a      	mov	r2, r3
 8008f36:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7fe feb2 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 8008f40:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008f52:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008f56:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7fe fe9f 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 8008f66:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008f6e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008f72:	2b08      	cmp	r3, #8
 8008f74:	d102      	bne.n	8008f7c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008f76:	2302      	movs	r3, #2
 8008f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f80:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008f82:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008f86:	fb02 f303 	mul.w	r3, r2, r3
 8008f8a:	02db      	lsls	r3, r3, #11
 8008f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008f98:	4a53      	ldr	r2, [pc, #332]	; (80090e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9e:	099b      	lsrs	r3, r3, #6
 8008fa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008fa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fa8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008faa:	fb02 f303 	mul.w	r3, r2, r3
 8008fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fb6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fba:	4a4b      	ldr	r2, [pc, #300]	; (80090e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc0:	099b      	lsrs	r3, r3, #6
 8008fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3380      	adds	r3, #128	; 0x80
 8008fca:	0a1b      	lsrs	r3, r3, #8
 8008fcc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8008fdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008fe0:	3380      	adds	r3, #128	; 0x80
 8008fe2:	0a1b      	lsrs	r3, r3, #8
 8008fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008fee:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008ff6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008ffa:	e15e      	b.n	80092ba <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8008ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10c      	bne.n	800901c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009008:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009010:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	e14c      	b.n	80092b6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800901c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009024:	2301      	movs	r3, #1
 8009026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800902a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800902e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009032:	041a      	lsls	r2, r3, #16
 8009034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009036:	fbb2 f3f3 	udiv	r3, r2, r3
 800903a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800903e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009044:	429a      	cmp	r2, r3
 8009046:	d902      	bls.n	800904e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800904a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800904e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009052:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009056:	fb02 f303 	mul.w	r3, r2, r3
 800905a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800905e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009062:	4613      	mov	r3, r2
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fd85 	bl	8007b7a <VL53L0X_isqrt>
 8009070:	4603      	mov	r3, r0
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	891b      	ldrh	r3, [r3, #8]
 800907a:	461a      	mov	r2, r3
 800907c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800907e:	fb02 f303 	mul.w	r3, r2, r3
 8009082:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009086:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009088:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800908c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800908e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009090:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009094:	4a14      	ldr	r2, [pc, #80]	; (80090e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009096:	fba2 2303 	umull	r2, r3, r2, r3
 800909a:	099b      	lsrs	r3, r3, #6
 800909c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800909e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090a0:	041b      	lsls	r3, r3, #16
 80090a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80090a6:	4a10      	ldr	r2, [pc, #64]	; (80090e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80090a8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ac:	099b      	lsrs	r3, r3, #6
 80090ae:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80090b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80090b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bfb8      	it	lt
 80090c2:	425b      	neglt	r3, r3
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	021b      	lsls	r3, r3, #8
 80090ca:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	7e1b      	ldrb	r3, [r3, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00b      	beq.n	80090ec <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80090d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090dc:	e033      	b.n	8009146 <VL53L0X_calc_sigma_estimate+0x30e>
 80090de:	bf00      	nop
 80090e0:	028f87ae 	.word	0x028f87ae
 80090e4:	0006999a 	.word	0x0006999a
 80090e8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80090ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80090fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009104:	fb02 f303 	mul.w	r3, r2, r3
 8009108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800910c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009112:	4413      	add	r3, r2
 8009114:	0c1b      	lsrs	r3, r3, #16
 8009116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800911a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800911e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8009126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800912a:	085b      	lsrs	r3, r3, #1
 800912c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009134:	fb03 f303 	mul.w	r3, r3, r3
 8009138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800913c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009140:	0b9b      	lsrs	r3, r3, #14
 8009142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8009146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800914a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800914c:	fb02 f303 	mul.w	r3, r2, r3
 8009150:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009158:	0c1b      	lsrs	r3, r3, #16
 800915a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	fb03 f303 	mul.w	r3, r3, r3
 8009162:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8009164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009168:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009170:	0c1b      	lsrs	r3, r3, #16
 8009172:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	fb03 f303 	mul.w	r3, r3, r3
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800917c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009180:	4413      	add	r3, r2
 8009182:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8009184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009186:	f7fe fcf8 	bl	8007b7a <VL53L0X_isqrt>
 800918a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	041b      	lsls	r3, r3, #16
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	3332      	adds	r3, #50	; 0x32
 8009196:	4a4b      	ldr	r2, [pc, #300]	; (80092c4 <VL53L0X_calc_sigma_estimate+0x48c>)
 8009198:	fba2 2303 	umull	r2, r3, r2, r3
 800919c:	095a      	lsrs	r2, r3, #5
 800919e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80091a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091ac:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80091b0:	fb02 f303 	mul.w	r3, r2, r3
 80091b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80091b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091bc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80091c0:	3308      	adds	r3, #8
 80091c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80091c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091ca:	4a3f      	ldr	r2, [pc, #252]	; (80092c8 <VL53L0X_calc_sigma_estimate+0x490>)
 80091cc:	fba2 2303 	umull	r2, r3, r2, r3
 80091d0:	0b5b      	lsrs	r3, r3, #13
 80091d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80091d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091dc:	429a      	cmp	r2, r3
 80091de:	d902      	bls.n	80091e6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80091e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80091e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80091ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80091f4:	4a35      	ldr	r2, [pc, #212]	; (80092cc <VL53L0X_calc_sigma_estimate+0x494>)
 80091f6:	fba2 2303 	umull	r2, r3, r2, r3
 80091fa:	099b      	lsrs	r3, r3, #6
 80091fc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8009202:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009206:	441a      	add	r2, r3
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	fbb2 f3f3 	udiv	r3, r2, r3
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe fcb3 	bl	8007b7a <VL53L0X_isqrt>
 8009214:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009222:	4a2a      	ldr	r2, [pc, #168]	; (80092cc <VL53L0X_calc_sigma_estimate+0x494>)
 8009224:	fba2 2303 	umull	r2, r3, r2, r3
 8009228:	099b      	lsrs	r3, r3, #6
 800922a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800922c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009230:	fb03 f303 	mul.w	r3, r3, r3
 8009234:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	fb03 f303 	mul.w	r3, r3, r3
 800923c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800923e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	4413      	add	r3, r2
 8009244:	4618      	mov	r0, r3
 8009246:	f7fe fc98 	bl	8007b7a <VL53L0X_isqrt>
 800924a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009252:	fb02 f303 	mul.w	r3, r2, r3
 8009256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800925a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <VL53L0X_calc_sigma_estimate+0x43c>
 8009260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009264:	2b00      	cmp	r3, #0
 8009266:	d005      	beq.n	8009274 <VL53L0X_calc_sigma_estimate+0x43c>
 8009268:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800926c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009270:	429a      	cmp	r2, r3
 8009272:	d903      	bls.n	800927c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8009274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009278:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009282:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800928e:	6939      	ldr	r1, [r7, #16]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009298:	9302      	str	r3, [sp, #8]
 800929a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fca8 	bl	8008c00 <VL53L0X_calc_dmax>
 80092b0:	4603      	mov	r3, r0
 80092b2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092b6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	37c0      	adds	r7, #192	; 0xc0
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	51eb851f 	.word	0x51eb851f
 80092c8:	d1b71759 	.word	0xd1b71759
 80092cc:	10624dd3 	.word	0x10624dd3

080092d0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b090      	sub	sp, #64	; 0x40
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	607a      	str	r2, [r7, #4]
 80092da:	461a      	mov	r2, r3
 80092dc:	460b      	mov	r3, r1
 80092de:	72fb      	strb	r3, [r7, #11]
 80092e0:	4613      	mov	r3, r2
 80092e2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009322:	7afb      	ldrb	r3, [r7, #11]
 8009324:	10db      	asrs	r3, r3, #3
 8009326:	b2db      	uxtb	r3, r3
 8009328:	f003 030f 	and.w	r3, r3, #15
 800932c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009330:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d017      	beq.n	8009368 <VL53L0X_get_pal_range_status+0x98>
 8009338:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800933c:	2b05      	cmp	r3, #5
 800933e:	d013      	beq.n	8009368 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009340:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009344:	2b07      	cmp	r3, #7
 8009346:	d00f      	beq.n	8009368 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009348:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800934c:	2b0c      	cmp	r3, #12
 800934e:	d00b      	beq.n	8009368 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009350:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009354:	2b0d      	cmp	r3, #13
 8009356:	d007      	beq.n	8009368 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009358:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800935c:	2b0e      	cmp	r3, #14
 800935e:	d003      	beq.n	8009368 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009360:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009364:	2b0f      	cmp	r3, #15
 8009366:	d103      	bne.n	8009370 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8009368:	2301      	movs	r3, #1
 800936a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800936e:	e002      	b.n	8009376 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009376:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800937a:	2b00      	cmp	r3, #0
 800937c:	d109      	bne.n	8009392 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800937e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009382:	461a      	mov	r2, r3
 8009384:	2100      	movs	r1, #0
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7fd f8c4 	bl	8006514 <VL53L0X_GetLimitCheckEnable>
 800938c:	4603      	mov	r3, r0
 800938e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8009392:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009396:	2b00      	cmp	r3, #0
 8009398:	d02e      	beq.n	80093f8 <VL53L0X_get_pal_range_status+0x128>
 800939a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d12a      	bne.n	80093f8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80093a2:	f107 0310 	add.w	r3, r7, #16
 80093a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80093aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f7ff fd43 	bl	8008e38 <VL53L0X_calc_sigma_estimate>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80093b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d103      	bne.n	80093c8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093c6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80093c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d113      	bne.n	80093f8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80093d0:	f107 0320 	add.w	r3, r7, #32
 80093d4:	461a      	mov	r2, r3
 80093d6:	2100      	movs	r1, #0
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7fd f921 	bl	8006620 <VL53L0X_GetLimitCheckValue>
 80093de:	4603      	mov	r3, r0
 80093e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d006      	beq.n	80093f8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80093ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ec:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d902      	bls.n	80093f8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80093f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009400:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009404:	461a      	mov	r2, r3
 8009406:	2102      	movs	r1, #2
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7fd f883 	bl	8006514 <VL53L0X_GetLimitCheckEnable>
 800940e:	4603      	mov	r3, r0
 8009410:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009414:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009418:	2b00      	cmp	r3, #0
 800941a:	d044      	beq.n	80094a6 <VL53L0X_get_pal_range_status+0x1d6>
 800941c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009420:	2b00      	cmp	r3, #0
 8009422:	d140      	bne.n	80094a6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009424:	f107 031c 	add.w	r3, r7, #28
 8009428:	461a      	mov	r2, r3
 800942a:	2102      	movs	r1, #2
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7fd f8f7 	bl	8006620 <VL53L0X_GetLimitCheckValue>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009438:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800943c:	2b00      	cmp	r3, #0
 800943e:	d107      	bne.n	8009450 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009440:	2201      	movs	r2, #1
 8009442:	21ff      	movs	r1, #255	; 0xff
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7fc fad1 	bl	80059ec <VL53L0X_WrByte>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009450:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009454:	2b00      	cmp	r3, #0
 8009456:	d109      	bne.n	800946c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8009458:	f107 0316 	add.w	r3, r7, #22
 800945c:	461a      	mov	r2, r3
 800945e:	21b6      	movs	r1, #182	; 0xb6
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7fc fb6f 	bl	8005b44 <VL53L0X_RdWord>
 8009466:	4603      	mov	r3, r0
 8009468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800946c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009470:	2b00      	cmp	r3, #0
 8009472:	d107      	bne.n	8009484 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009474:	2200      	movs	r2, #0
 8009476:	21ff      	movs	r1, #255	; 0xff
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7fc fab7 	bl	80059ec <VL53L0X_WrByte>
 800947e:	4603      	mov	r3, r0
 8009480:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8009484:	8afb      	ldrh	r3, [r7, #22]
 8009486:	025b      	lsls	r3, r3, #9
 8009488:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800948e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d006      	beq.n	80094a6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8009498:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800949a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800949c:	429a      	cmp	r2, r3
 800949e:	d902      	bls.n	80094a6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80094a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80094ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094b2:	461a      	mov	r2, r3
 80094b4:	2103      	movs	r1, #3
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7fd f82c 	bl	8006514 <VL53L0X_GetLimitCheckEnable>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80094c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d023      	beq.n	8009512 <VL53L0X_get_pal_range_status+0x242>
 80094ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d11f      	bne.n	8009512 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80094d2:	893b      	ldrh	r3, [r7, #8]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d102      	bne.n	80094de <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	637b      	str	r3, [r7, #52]	; 0x34
 80094dc:	e005      	b.n	80094ea <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	021a      	lsls	r2, r3, #8
 80094e2:	893b      	ldrh	r3, [r7, #8]
 80094e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80094ea:	f107 0318 	add.w	r3, r7, #24
 80094ee:	461a      	mov	r2, r3
 80094f0:	2103      	movs	r1, #3
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f7fd f894 	bl	8006620 <VL53L0X_GetLimitCheckValue>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d006      	beq.n	8009512 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009504:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009508:	429a      	cmp	r2, r3
 800950a:	d202      	bcs.n	8009512 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009512:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009516:	2b00      	cmp	r3, #0
 8009518:	d14a      	bne.n	80095b0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800951a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800951e:	2b01      	cmp	r3, #1
 8009520:	d103      	bne.n	800952a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009524:	22ff      	movs	r2, #255	; 0xff
 8009526:	701a      	strb	r2, [r3, #0]
 8009528:	e042      	b.n	80095b0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800952a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800952e:	2b01      	cmp	r3, #1
 8009530:	d007      	beq.n	8009542 <VL53L0X_get_pal_range_status+0x272>
 8009532:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009536:	2b02      	cmp	r3, #2
 8009538:	d003      	beq.n	8009542 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800953a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800953e:	2b03      	cmp	r3, #3
 8009540:	d103      	bne.n	800954a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009544:	2205      	movs	r2, #5
 8009546:	701a      	strb	r2, [r3, #0]
 8009548:	e032      	b.n	80095b0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800954a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800954e:	2b06      	cmp	r3, #6
 8009550:	d003      	beq.n	800955a <VL53L0X_get_pal_range_status+0x28a>
 8009552:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009556:	2b09      	cmp	r3, #9
 8009558:	d103      	bne.n	8009562 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800955a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955c:	2204      	movs	r2, #4
 800955e:	701a      	strb	r2, [r3, #0]
 8009560:	e026      	b.n	80095b0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009562:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009566:	2b08      	cmp	r3, #8
 8009568:	d007      	beq.n	800957a <VL53L0X_get_pal_range_status+0x2aa>
 800956a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800956e:	2b0a      	cmp	r3, #10
 8009570:	d003      	beq.n	800957a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009572:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009576:	2b01      	cmp	r3, #1
 8009578:	d103      	bne.n	8009582 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800957a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957c:	2203      	movs	r2, #3
 800957e:	701a      	strb	r2, [r3, #0]
 8009580:	e016      	b.n	80095b0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009582:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009586:	2b04      	cmp	r3, #4
 8009588:	d003      	beq.n	8009592 <VL53L0X_get_pal_range_status+0x2c2>
 800958a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800958e:	2b01      	cmp	r3, #1
 8009590:	d103      	bne.n	800959a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009594:	2202      	movs	r2, #2
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	e00a      	b.n	80095b0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800959a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d103      	bne.n	80095aa <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80095a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a4:	2201      	movs	r2, #1
 80095a6:	701a      	strb	r2, [r3, #0]
 80095a8:	e002      	b.n	80095b0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80095aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ac:	2200      	movs	r2, #0
 80095ae:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80095b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80095b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ba:	2200      	movs	r2, #0
 80095bc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80095be:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80095c2:	461a      	mov	r2, r3
 80095c4:	2101      	movs	r1, #1
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7fc ffa4 	bl	8006514 <VL53L0X_GetLimitCheckEnable>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80095d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d14f      	bne.n	800967a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80095da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <VL53L0X_get_pal_range_status+0x31a>
 80095e2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d103      	bne.n	80095f2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80095ea:	2301      	movs	r3, #1
 80095ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f0:	e002      	b.n	80095f8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80095fe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009602:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009606:	2b04      	cmp	r3, #4
 8009608:	d003      	beq.n	8009612 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800960a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800960e:	2b00      	cmp	r3, #0
 8009610:	d103      	bne.n	800961a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009612:	2301      	movs	r3, #1
 8009614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009618:	e002      	b.n	8009620 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009626:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800962a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <VL53L0X_get_pal_range_status+0x36a>
 8009632:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009636:	2b01      	cmp	r3, #1
 8009638:	d103      	bne.n	8009642 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800963a:	2301      	movs	r3, #1
 800963c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009640:	e002      	b.n	8009648 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800964e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009652:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <VL53L0X_get_pal_range_status+0x392>
 800965a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800965e:	2b01      	cmp	r3, #1
 8009660:	d103      	bne.n	800966a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009668:	e002      	b.n	8009670 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009676:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800967a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800967e:	4618      	mov	r0, r3
 8009680:	3740      	adds	r7, #64	; 0x40
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <__errno>:
 8009688:	4b01      	ldr	r3, [pc, #4]	; (8009690 <__errno+0x8>)
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	20000b64 	.word	0x20000b64

08009694 <__libc_init_array>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	4d0d      	ldr	r5, [pc, #52]	; (80096cc <__libc_init_array+0x38>)
 8009698:	4c0d      	ldr	r4, [pc, #52]	; (80096d0 <__libc_init_array+0x3c>)
 800969a:	1b64      	subs	r4, r4, r5
 800969c:	10a4      	asrs	r4, r4, #2
 800969e:	2600      	movs	r6, #0
 80096a0:	42a6      	cmp	r6, r4
 80096a2:	d109      	bne.n	80096b8 <__libc_init_array+0x24>
 80096a4:	4d0b      	ldr	r5, [pc, #44]	; (80096d4 <__libc_init_array+0x40>)
 80096a6:	4c0c      	ldr	r4, [pc, #48]	; (80096d8 <__libc_init_array+0x44>)
 80096a8:	f000 fc8e 	bl	8009fc8 <_init>
 80096ac:	1b64      	subs	r4, r4, r5
 80096ae:	10a4      	asrs	r4, r4, #2
 80096b0:	2600      	movs	r6, #0
 80096b2:	42a6      	cmp	r6, r4
 80096b4:	d105      	bne.n	80096c2 <__libc_init_array+0x2e>
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096bc:	4798      	blx	r3
 80096be:	3601      	adds	r6, #1
 80096c0:	e7ee      	b.n	80096a0 <__libc_init_array+0xc>
 80096c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c6:	4798      	blx	r3
 80096c8:	3601      	adds	r6, #1
 80096ca:	e7f2      	b.n	80096b2 <__libc_init_array+0x1e>
 80096cc:	0800a0a8 	.word	0x0800a0a8
 80096d0:	0800a0a8 	.word	0x0800a0a8
 80096d4:	0800a0a8 	.word	0x0800a0a8
 80096d8:	0800a0ac 	.word	0x0800a0ac

080096dc <memcpy>:
 80096dc:	440a      	add	r2, r1
 80096de:	4291      	cmp	r1, r2
 80096e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80096e4:	d100      	bne.n	80096e8 <memcpy+0xc>
 80096e6:	4770      	bx	lr
 80096e8:	b510      	push	{r4, lr}
 80096ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096f2:	4291      	cmp	r1, r2
 80096f4:	d1f9      	bne.n	80096ea <memcpy+0xe>
 80096f6:	bd10      	pop	{r4, pc}

080096f8 <memset>:
 80096f8:	4402      	add	r2, r0
 80096fa:	4603      	mov	r3, r0
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d100      	bne.n	8009702 <memset+0xa>
 8009700:	4770      	bx	lr
 8009702:	f803 1b01 	strb.w	r1, [r3], #1
 8009706:	e7f9      	b.n	80096fc <memset+0x4>

08009708 <siprintf>:
 8009708:	b40e      	push	{r1, r2, r3}
 800970a:	b500      	push	{lr}
 800970c:	b09c      	sub	sp, #112	; 0x70
 800970e:	ab1d      	add	r3, sp, #116	; 0x74
 8009710:	9002      	str	r0, [sp, #8]
 8009712:	9006      	str	r0, [sp, #24]
 8009714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009718:	4809      	ldr	r0, [pc, #36]	; (8009740 <siprintf+0x38>)
 800971a:	9107      	str	r1, [sp, #28]
 800971c:	9104      	str	r1, [sp, #16]
 800971e:	4909      	ldr	r1, [pc, #36]	; (8009744 <siprintf+0x3c>)
 8009720:	f853 2b04 	ldr.w	r2, [r3], #4
 8009724:	9105      	str	r1, [sp, #20]
 8009726:	6800      	ldr	r0, [r0, #0]
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	a902      	add	r1, sp, #8
 800972c:	f000 f868 	bl	8009800 <_svfiprintf_r>
 8009730:	9b02      	ldr	r3, [sp, #8]
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	b01c      	add	sp, #112	; 0x70
 8009738:	f85d eb04 	ldr.w	lr, [sp], #4
 800973c:	b003      	add	sp, #12
 800973e:	4770      	bx	lr
 8009740:	20000b64 	.word	0x20000b64
 8009744:	ffff0208 	.word	0xffff0208

08009748 <__ssputs_r>:
 8009748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800974c:	688e      	ldr	r6, [r1, #8]
 800974e:	429e      	cmp	r6, r3
 8009750:	4682      	mov	sl, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4690      	mov	r8, r2
 8009756:	461f      	mov	r7, r3
 8009758:	d838      	bhi.n	80097cc <__ssputs_r+0x84>
 800975a:	898a      	ldrh	r2, [r1, #12]
 800975c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009760:	d032      	beq.n	80097c8 <__ssputs_r+0x80>
 8009762:	6825      	ldr	r5, [r4, #0]
 8009764:	6909      	ldr	r1, [r1, #16]
 8009766:	eba5 0901 	sub.w	r9, r5, r1
 800976a:	6965      	ldr	r5, [r4, #20]
 800976c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009774:	3301      	adds	r3, #1
 8009776:	444b      	add	r3, r9
 8009778:	106d      	asrs	r5, r5, #1
 800977a:	429d      	cmp	r5, r3
 800977c:	bf38      	it	cc
 800977e:	461d      	movcc	r5, r3
 8009780:	0553      	lsls	r3, r2, #21
 8009782:	d531      	bpl.n	80097e8 <__ssputs_r+0xa0>
 8009784:	4629      	mov	r1, r5
 8009786:	f000 fb55 	bl	8009e34 <_malloc_r>
 800978a:	4606      	mov	r6, r0
 800978c:	b950      	cbnz	r0, 80097a4 <__ssputs_r+0x5c>
 800978e:	230c      	movs	r3, #12
 8009790:	f8ca 3000 	str.w	r3, [sl]
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800979a:	81a3      	strh	r3, [r4, #12]
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a4:	6921      	ldr	r1, [r4, #16]
 80097a6:	464a      	mov	r2, r9
 80097a8:	f7ff ff98 	bl	80096dc <memcpy>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	6126      	str	r6, [r4, #16]
 80097ba:	6165      	str	r5, [r4, #20]
 80097bc:	444e      	add	r6, r9
 80097be:	eba5 0509 	sub.w	r5, r5, r9
 80097c2:	6026      	str	r6, [r4, #0]
 80097c4:	60a5      	str	r5, [r4, #8]
 80097c6:	463e      	mov	r6, r7
 80097c8:	42be      	cmp	r6, r7
 80097ca:	d900      	bls.n	80097ce <__ssputs_r+0x86>
 80097cc:	463e      	mov	r6, r7
 80097ce:	6820      	ldr	r0, [r4, #0]
 80097d0:	4632      	mov	r2, r6
 80097d2:	4641      	mov	r1, r8
 80097d4:	f000 faa8 	bl	8009d28 <memmove>
 80097d8:	68a3      	ldr	r3, [r4, #8]
 80097da:	1b9b      	subs	r3, r3, r6
 80097dc:	60a3      	str	r3, [r4, #8]
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	4433      	add	r3, r6
 80097e2:	6023      	str	r3, [r4, #0]
 80097e4:	2000      	movs	r0, #0
 80097e6:	e7db      	b.n	80097a0 <__ssputs_r+0x58>
 80097e8:	462a      	mov	r2, r5
 80097ea:	f000 fb97 	bl	8009f1c <_realloc_r>
 80097ee:	4606      	mov	r6, r0
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d1e1      	bne.n	80097b8 <__ssputs_r+0x70>
 80097f4:	6921      	ldr	r1, [r4, #16]
 80097f6:	4650      	mov	r0, sl
 80097f8:	f000 fab0 	bl	8009d5c <_free_r>
 80097fc:	e7c7      	b.n	800978e <__ssputs_r+0x46>
	...

08009800 <_svfiprintf_r>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	4698      	mov	r8, r3
 8009806:	898b      	ldrh	r3, [r1, #12]
 8009808:	061b      	lsls	r3, r3, #24
 800980a:	b09d      	sub	sp, #116	; 0x74
 800980c:	4607      	mov	r7, r0
 800980e:	460d      	mov	r5, r1
 8009810:	4614      	mov	r4, r2
 8009812:	d50e      	bpl.n	8009832 <_svfiprintf_r+0x32>
 8009814:	690b      	ldr	r3, [r1, #16]
 8009816:	b963      	cbnz	r3, 8009832 <_svfiprintf_r+0x32>
 8009818:	2140      	movs	r1, #64	; 0x40
 800981a:	f000 fb0b 	bl	8009e34 <_malloc_r>
 800981e:	6028      	str	r0, [r5, #0]
 8009820:	6128      	str	r0, [r5, #16]
 8009822:	b920      	cbnz	r0, 800982e <_svfiprintf_r+0x2e>
 8009824:	230c      	movs	r3, #12
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	f04f 30ff 	mov.w	r0, #4294967295
 800982c:	e0d1      	b.n	80099d2 <_svfiprintf_r+0x1d2>
 800982e:	2340      	movs	r3, #64	; 0x40
 8009830:	616b      	str	r3, [r5, #20]
 8009832:	2300      	movs	r3, #0
 8009834:	9309      	str	r3, [sp, #36]	; 0x24
 8009836:	2320      	movs	r3, #32
 8009838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800983c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009840:	2330      	movs	r3, #48	; 0x30
 8009842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099ec <_svfiprintf_r+0x1ec>
 8009846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800984a:	f04f 0901 	mov.w	r9, #1
 800984e:	4623      	mov	r3, r4
 8009850:	469a      	mov	sl, r3
 8009852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009856:	b10a      	cbz	r2, 800985c <_svfiprintf_r+0x5c>
 8009858:	2a25      	cmp	r2, #37	; 0x25
 800985a:	d1f9      	bne.n	8009850 <_svfiprintf_r+0x50>
 800985c:	ebba 0b04 	subs.w	fp, sl, r4
 8009860:	d00b      	beq.n	800987a <_svfiprintf_r+0x7a>
 8009862:	465b      	mov	r3, fp
 8009864:	4622      	mov	r2, r4
 8009866:	4629      	mov	r1, r5
 8009868:	4638      	mov	r0, r7
 800986a:	f7ff ff6d 	bl	8009748 <__ssputs_r>
 800986e:	3001      	adds	r0, #1
 8009870:	f000 80aa 	beq.w	80099c8 <_svfiprintf_r+0x1c8>
 8009874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009876:	445a      	add	r2, fp
 8009878:	9209      	str	r2, [sp, #36]	; 0x24
 800987a:	f89a 3000 	ldrb.w	r3, [sl]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80a2 	beq.w	80099c8 <_svfiprintf_r+0x1c8>
 8009884:	2300      	movs	r3, #0
 8009886:	f04f 32ff 	mov.w	r2, #4294967295
 800988a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800988e:	f10a 0a01 	add.w	sl, sl, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	9307      	str	r3, [sp, #28]
 8009896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800989a:	931a      	str	r3, [sp, #104]	; 0x68
 800989c:	4654      	mov	r4, sl
 800989e:	2205      	movs	r2, #5
 80098a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a4:	4851      	ldr	r0, [pc, #324]	; (80099ec <_svfiprintf_r+0x1ec>)
 80098a6:	f7f6 fc9b 	bl	80001e0 <memchr>
 80098aa:	9a04      	ldr	r2, [sp, #16]
 80098ac:	b9d8      	cbnz	r0, 80098e6 <_svfiprintf_r+0xe6>
 80098ae:	06d0      	lsls	r0, r2, #27
 80098b0:	bf44      	itt	mi
 80098b2:	2320      	movmi	r3, #32
 80098b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b8:	0711      	lsls	r1, r2, #28
 80098ba:	bf44      	itt	mi
 80098bc:	232b      	movmi	r3, #43	; 0x2b
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c2:	f89a 3000 	ldrb.w	r3, [sl]
 80098c6:	2b2a      	cmp	r3, #42	; 0x2a
 80098c8:	d015      	beq.n	80098f6 <_svfiprintf_r+0xf6>
 80098ca:	9a07      	ldr	r2, [sp, #28]
 80098cc:	4654      	mov	r4, sl
 80098ce:	2000      	movs	r0, #0
 80098d0:	f04f 0c0a 	mov.w	ip, #10
 80098d4:	4621      	mov	r1, r4
 80098d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098da:	3b30      	subs	r3, #48	; 0x30
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d94e      	bls.n	800997e <_svfiprintf_r+0x17e>
 80098e0:	b1b0      	cbz	r0, 8009910 <_svfiprintf_r+0x110>
 80098e2:	9207      	str	r2, [sp, #28]
 80098e4:	e014      	b.n	8009910 <_svfiprintf_r+0x110>
 80098e6:	eba0 0308 	sub.w	r3, r0, r8
 80098ea:	fa09 f303 	lsl.w	r3, r9, r3
 80098ee:	4313      	orrs	r3, r2
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	46a2      	mov	sl, r4
 80098f4:	e7d2      	b.n	800989c <_svfiprintf_r+0x9c>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d19      	adds	r1, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9103      	str	r1, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfbb      	ittet	lt
 8009902:	425b      	neglt	r3, r3
 8009904:	f042 0202 	orrlt.w	r2, r2, #2
 8009908:	9307      	strge	r3, [sp, #28]
 800990a:	9307      	strlt	r3, [sp, #28]
 800990c:	bfb8      	it	lt
 800990e:	9204      	strlt	r2, [sp, #16]
 8009910:	7823      	ldrb	r3, [r4, #0]
 8009912:	2b2e      	cmp	r3, #46	; 0x2e
 8009914:	d10c      	bne.n	8009930 <_svfiprintf_r+0x130>
 8009916:	7863      	ldrb	r3, [r4, #1]
 8009918:	2b2a      	cmp	r3, #42	; 0x2a
 800991a:	d135      	bne.n	8009988 <_svfiprintf_r+0x188>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	1d1a      	adds	r2, r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	9203      	str	r2, [sp, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfb8      	it	lt
 8009928:	f04f 33ff 	movlt.w	r3, #4294967295
 800992c:	3402      	adds	r4, #2
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099fc <_svfiprintf_r+0x1fc>
 8009934:	7821      	ldrb	r1, [r4, #0]
 8009936:	2203      	movs	r2, #3
 8009938:	4650      	mov	r0, sl
 800993a:	f7f6 fc51 	bl	80001e0 <memchr>
 800993e:	b140      	cbz	r0, 8009952 <_svfiprintf_r+0x152>
 8009940:	2340      	movs	r3, #64	; 0x40
 8009942:	eba0 000a 	sub.w	r0, r0, sl
 8009946:	fa03 f000 	lsl.w	r0, r3, r0
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	4303      	orrs	r3, r0
 800994e:	3401      	adds	r4, #1
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009956:	4826      	ldr	r0, [pc, #152]	; (80099f0 <_svfiprintf_r+0x1f0>)
 8009958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800995c:	2206      	movs	r2, #6
 800995e:	f7f6 fc3f 	bl	80001e0 <memchr>
 8009962:	2800      	cmp	r0, #0
 8009964:	d038      	beq.n	80099d8 <_svfiprintf_r+0x1d8>
 8009966:	4b23      	ldr	r3, [pc, #140]	; (80099f4 <_svfiprintf_r+0x1f4>)
 8009968:	bb1b      	cbnz	r3, 80099b2 <_svfiprintf_r+0x1b2>
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	3307      	adds	r3, #7
 800996e:	f023 0307 	bic.w	r3, r3, #7
 8009972:	3308      	adds	r3, #8
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009978:	4433      	add	r3, r6
 800997a:	9309      	str	r3, [sp, #36]	; 0x24
 800997c:	e767      	b.n	800984e <_svfiprintf_r+0x4e>
 800997e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009982:	460c      	mov	r4, r1
 8009984:	2001      	movs	r0, #1
 8009986:	e7a5      	b.n	80098d4 <_svfiprintf_r+0xd4>
 8009988:	2300      	movs	r3, #0
 800998a:	3401      	adds	r4, #1
 800998c:	9305      	str	r3, [sp, #20]
 800998e:	4619      	mov	r1, r3
 8009990:	f04f 0c0a 	mov.w	ip, #10
 8009994:	4620      	mov	r0, r4
 8009996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800999a:	3a30      	subs	r2, #48	; 0x30
 800999c:	2a09      	cmp	r2, #9
 800999e:	d903      	bls.n	80099a8 <_svfiprintf_r+0x1a8>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0c5      	beq.n	8009930 <_svfiprintf_r+0x130>
 80099a4:	9105      	str	r1, [sp, #20]
 80099a6:	e7c3      	b.n	8009930 <_svfiprintf_r+0x130>
 80099a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ac:	4604      	mov	r4, r0
 80099ae:	2301      	movs	r3, #1
 80099b0:	e7f0      	b.n	8009994 <_svfiprintf_r+0x194>
 80099b2:	ab03      	add	r3, sp, #12
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	462a      	mov	r2, r5
 80099b8:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <_svfiprintf_r+0x1f8>)
 80099ba:	a904      	add	r1, sp, #16
 80099bc:	4638      	mov	r0, r7
 80099be:	f3af 8000 	nop.w
 80099c2:	1c42      	adds	r2, r0, #1
 80099c4:	4606      	mov	r6, r0
 80099c6:	d1d6      	bne.n	8009976 <_svfiprintf_r+0x176>
 80099c8:	89ab      	ldrh	r3, [r5, #12]
 80099ca:	065b      	lsls	r3, r3, #25
 80099cc:	f53f af2c 	bmi.w	8009828 <_svfiprintf_r+0x28>
 80099d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d2:	b01d      	add	sp, #116	; 0x74
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d8:	ab03      	add	r3, sp, #12
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	462a      	mov	r2, r5
 80099de:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <_svfiprintf_r+0x1f8>)
 80099e0:	a904      	add	r1, sp, #16
 80099e2:	4638      	mov	r0, r7
 80099e4:	f000 f87a 	bl	8009adc <_printf_i>
 80099e8:	e7eb      	b.n	80099c2 <_svfiprintf_r+0x1c2>
 80099ea:	bf00      	nop
 80099ec:	0800a06c 	.word	0x0800a06c
 80099f0:	0800a076 	.word	0x0800a076
 80099f4:	00000000 	.word	0x00000000
 80099f8:	08009749 	.word	0x08009749
 80099fc:	0800a072 	.word	0x0800a072

08009a00 <_printf_common>:
 8009a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a04:	4616      	mov	r6, r2
 8009a06:	4699      	mov	r9, r3
 8009a08:	688a      	ldr	r2, [r1, #8]
 8009a0a:	690b      	ldr	r3, [r1, #16]
 8009a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a10:	4293      	cmp	r3, r2
 8009a12:	bfb8      	it	lt
 8009a14:	4613      	movlt	r3, r2
 8009a16:	6033      	str	r3, [r6, #0]
 8009a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	b10a      	cbz	r2, 8009a26 <_printf_common+0x26>
 8009a22:	3301      	adds	r3, #1
 8009a24:	6033      	str	r3, [r6, #0]
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	0699      	lsls	r1, r3, #26
 8009a2a:	bf42      	ittt	mi
 8009a2c:	6833      	ldrmi	r3, [r6, #0]
 8009a2e:	3302      	addmi	r3, #2
 8009a30:	6033      	strmi	r3, [r6, #0]
 8009a32:	6825      	ldr	r5, [r4, #0]
 8009a34:	f015 0506 	ands.w	r5, r5, #6
 8009a38:	d106      	bne.n	8009a48 <_printf_common+0x48>
 8009a3a:	f104 0a19 	add.w	sl, r4, #25
 8009a3e:	68e3      	ldr	r3, [r4, #12]
 8009a40:	6832      	ldr	r2, [r6, #0]
 8009a42:	1a9b      	subs	r3, r3, r2
 8009a44:	42ab      	cmp	r3, r5
 8009a46:	dc26      	bgt.n	8009a96 <_printf_common+0x96>
 8009a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a4c:	1e13      	subs	r3, r2, #0
 8009a4e:	6822      	ldr	r2, [r4, #0]
 8009a50:	bf18      	it	ne
 8009a52:	2301      	movne	r3, #1
 8009a54:	0692      	lsls	r2, r2, #26
 8009a56:	d42b      	bmi.n	8009ab0 <_printf_common+0xb0>
 8009a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	4638      	mov	r0, r7
 8009a60:	47c0      	blx	r8
 8009a62:	3001      	adds	r0, #1
 8009a64:	d01e      	beq.n	8009aa4 <_printf_common+0xa4>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	68e5      	ldr	r5, [r4, #12]
 8009a6a:	6832      	ldr	r2, [r6, #0]
 8009a6c:	f003 0306 	and.w	r3, r3, #6
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	bf08      	it	eq
 8009a74:	1aad      	subeq	r5, r5, r2
 8009a76:	68a3      	ldr	r3, [r4, #8]
 8009a78:	6922      	ldr	r2, [r4, #16]
 8009a7a:	bf0c      	ite	eq
 8009a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a80:	2500      	movne	r5, #0
 8009a82:	4293      	cmp	r3, r2
 8009a84:	bfc4      	itt	gt
 8009a86:	1a9b      	subgt	r3, r3, r2
 8009a88:	18ed      	addgt	r5, r5, r3
 8009a8a:	2600      	movs	r6, #0
 8009a8c:	341a      	adds	r4, #26
 8009a8e:	42b5      	cmp	r5, r6
 8009a90:	d11a      	bne.n	8009ac8 <_printf_common+0xc8>
 8009a92:	2000      	movs	r0, #0
 8009a94:	e008      	b.n	8009aa8 <_printf_common+0xa8>
 8009a96:	2301      	movs	r3, #1
 8009a98:	4652      	mov	r2, sl
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	47c0      	blx	r8
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d103      	bne.n	8009aac <_printf_common+0xac>
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aac:	3501      	adds	r5, #1
 8009aae:	e7c6      	b.n	8009a3e <_printf_common+0x3e>
 8009ab0:	18e1      	adds	r1, r4, r3
 8009ab2:	1c5a      	adds	r2, r3, #1
 8009ab4:	2030      	movs	r0, #48	; 0x30
 8009ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aba:	4422      	add	r2, r4
 8009abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ac4:	3302      	adds	r3, #2
 8009ac6:	e7c7      	b.n	8009a58 <_printf_common+0x58>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	4622      	mov	r2, r4
 8009acc:	4649      	mov	r1, r9
 8009ace:	4638      	mov	r0, r7
 8009ad0:	47c0      	blx	r8
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d0e6      	beq.n	8009aa4 <_printf_common+0xa4>
 8009ad6:	3601      	adds	r6, #1
 8009ad8:	e7d9      	b.n	8009a8e <_printf_common+0x8e>
	...

08009adc <_printf_i>:
 8009adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	7e0f      	ldrb	r7, [r1, #24]
 8009ae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ae4:	2f78      	cmp	r7, #120	; 0x78
 8009ae6:	4691      	mov	r9, r2
 8009ae8:	4680      	mov	r8, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	469a      	mov	sl, r3
 8009aee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009af2:	d807      	bhi.n	8009b04 <_printf_i+0x28>
 8009af4:	2f62      	cmp	r7, #98	; 0x62
 8009af6:	d80a      	bhi.n	8009b0e <_printf_i+0x32>
 8009af8:	2f00      	cmp	r7, #0
 8009afa:	f000 80d8 	beq.w	8009cae <_printf_i+0x1d2>
 8009afe:	2f58      	cmp	r7, #88	; 0x58
 8009b00:	f000 80a3 	beq.w	8009c4a <_printf_i+0x16e>
 8009b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b0c:	e03a      	b.n	8009b84 <_printf_i+0xa8>
 8009b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b12:	2b15      	cmp	r3, #21
 8009b14:	d8f6      	bhi.n	8009b04 <_printf_i+0x28>
 8009b16:	a101      	add	r1, pc, #4	; (adr r1, 8009b1c <_printf_i+0x40>)
 8009b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b1c:	08009b75 	.word	0x08009b75
 8009b20:	08009b89 	.word	0x08009b89
 8009b24:	08009b05 	.word	0x08009b05
 8009b28:	08009b05 	.word	0x08009b05
 8009b2c:	08009b05 	.word	0x08009b05
 8009b30:	08009b05 	.word	0x08009b05
 8009b34:	08009b89 	.word	0x08009b89
 8009b38:	08009b05 	.word	0x08009b05
 8009b3c:	08009b05 	.word	0x08009b05
 8009b40:	08009b05 	.word	0x08009b05
 8009b44:	08009b05 	.word	0x08009b05
 8009b48:	08009c95 	.word	0x08009c95
 8009b4c:	08009bb9 	.word	0x08009bb9
 8009b50:	08009c77 	.word	0x08009c77
 8009b54:	08009b05 	.word	0x08009b05
 8009b58:	08009b05 	.word	0x08009b05
 8009b5c:	08009cb7 	.word	0x08009cb7
 8009b60:	08009b05 	.word	0x08009b05
 8009b64:	08009bb9 	.word	0x08009bb9
 8009b68:	08009b05 	.word	0x08009b05
 8009b6c:	08009b05 	.word	0x08009b05
 8009b70:	08009c7f 	.word	0x08009c7f
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	1d1a      	adds	r2, r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	602a      	str	r2, [r5, #0]
 8009b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b84:	2301      	movs	r3, #1
 8009b86:	e0a3      	b.n	8009cd0 <_printf_i+0x1f4>
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	6829      	ldr	r1, [r5, #0]
 8009b8c:	0606      	lsls	r6, r0, #24
 8009b8e:	f101 0304 	add.w	r3, r1, #4
 8009b92:	d50a      	bpl.n	8009baa <_printf_i+0xce>
 8009b94:	680e      	ldr	r6, [r1, #0]
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	2e00      	cmp	r6, #0
 8009b9a:	da03      	bge.n	8009ba4 <_printf_i+0xc8>
 8009b9c:	232d      	movs	r3, #45	; 0x2d
 8009b9e:	4276      	negs	r6, r6
 8009ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ba4:	485e      	ldr	r0, [pc, #376]	; (8009d20 <_printf_i+0x244>)
 8009ba6:	230a      	movs	r3, #10
 8009ba8:	e019      	b.n	8009bde <_printf_i+0x102>
 8009baa:	680e      	ldr	r6, [r1, #0]
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009bb2:	bf18      	it	ne
 8009bb4:	b236      	sxthne	r6, r6
 8009bb6:	e7ef      	b.n	8009b98 <_printf_i+0xbc>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	6820      	ldr	r0, [r4, #0]
 8009bbc:	1d19      	adds	r1, r3, #4
 8009bbe:	6029      	str	r1, [r5, #0]
 8009bc0:	0601      	lsls	r1, r0, #24
 8009bc2:	d501      	bpl.n	8009bc8 <_printf_i+0xec>
 8009bc4:	681e      	ldr	r6, [r3, #0]
 8009bc6:	e002      	b.n	8009bce <_printf_i+0xf2>
 8009bc8:	0646      	lsls	r6, r0, #25
 8009bca:	d5fb      	bpl.n	8009bc4 <_printf_i+0xe8>
 8009bcc:	881e      	ldrh	r6, [r3, #0]
 8009bce:	4854      	ldr	r0, [pc, #336]	; (8009d20 <_printf_i+0x244>)
 8009bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8009bd2:	bf0c      	ite	eq
 8009bd4:	2308      	moveq	r3, #8
 8009bd6:	230a      	movne	r3, #10
 8009bd8:	2100      	movs	r1, #0
 8009bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bde:	6865      	ldr	r5, [r4, #4]
 8009be0:	60a5      	str	r5, [r4, #8]
 8009be2:	2d00      	cmp	r5, #0
 8009be4:	bfa2      	ittt	ge
 8009be6:	6821      	ldrge	r1, [r4, #0]
 8009be8:	f021 0104 	bicge.w	r1, r1, #4
 8009bec:	6021      	strge	r1, [r4, #0]
 8009bee:	b90e      	cbnz	r6, 8009bf4 <_printf_i+0x118>
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	d04d      	beq.n	8009c90 <_printf_i+0x1b4>
 8009bf4:	4615      	mov	r5, r2
 8009bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8009bfe:	5dc7      	ldrb	r7, [r0, r7]
 8009c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c04:	4637      	mov	r7, r6
 8009c06:	42bb      	cmp	r3, r7
 8009c08:	460e      	mov	r6, r1
 8009c0a:	d9f4      	bls.n	8009bf6 <_printf_i+0x11a>
 8009c0c:	2b08      	cmp	r3, #8
 8009c0e:	d10b      	bne.n	8009c28 <_printf_i+0x14c>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	07de      	lsls	r6, r3, #31
 8009c14:	d508      	bpl.n	8009c28 <_printf_i+0x14c>
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	6861      	ldr	r1, [r4, #4]
 8009c1a:	4299      	cmp	r1, r3
 8009c1c:	bfde      	ittt	le
 8009c1e:	2330      	movle	r3, #48	; 0x30
 8009c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c28:	1b52      	subs	r2, r2, r5
 8009c2a:	6122      	str	r2, [r4, #16]
 8009c2c:	f8cd a000 	str.w	sl, [sp]
 8009c30:	464b      	mov	r3, r9
 8009c32:	aa03      	add	r2, sp, #12
 8009c34:	4621      	mov	r1, r4
 8009c36:	4640      	mov	r0, r8
 8009c38:	f7ff fee2 	bl	8009a00 <_printf_common>
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	d14c      	bne.n	8009cda <_printf_i+0x1fe>
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295
 8009c44:	b004      	add	sp, #16
 8009c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4a:	4835      	ldr	r0, [pc, #212]	; (8009d20 <_printf_i+0x244>)
 8009c4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c50:	6829      	ldr	r1, [r5, #0]
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c58:	6029      	str	r1, [r5, #0]
 8009c5a:	061d      	lsls	r5, r3, #24
 8009c5c:	d514      	bpl.n	8009c88 <_printf_i+0x1ac>
 8009c5e:	07df      	lsls	r7, r3, #31
 8009c60:	bf44      	itt	mi
 8009c62:	f043 0320 	orrmi.w	r3, r3, #32
 8009c66:	6023      	strmi	r3, [r4, #0]
 8009c68:	b91e      	cbnz	r6, 8009c72 <_printf_i+0x196>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	f023 0320 	bic.w	r3, r3, #32
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	2310      	movs	r3, #16
 8009c74:	e7b0      	b.n	8009bd8 <_printf_i+0xfc>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	f043 0320 	orr.w	r3, r3, #32
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	2378      	movs	r3, #120	; 0x78
 8009c80:	4828      	ldr	r0, [pc, #160]	; (8009d24 <_printf_i+0x248>)
 8009c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c86:	e7e3      	b.n	8009c50 <_printf_i+0x174>
 8009c88:	0659      	lsls	r1, r3, #25
 8009c8a:	bf48      	it	mi
 8009c8c:	b2b6      	uxthmi	r6, r6
 8009c8e:	e7e6      	b.n	8009c5e <_printf_i+0x182>
 8009c90:	4615      	mov	r5, r2
 8009c92:	e7bb      	b.n	8009c0c <_printf_i+0x130>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	6826      	ldr	r6, [r4, #0]
 8009c98:	6961      	ldr	r1, [r4, #20]
 8009c9a:	1d18      	adds	r0, r3, #4
 8009c9c:	6028      	str	r0, [r5, #0]
 8009c9e:	0635      	lsls	r5, r6, #24
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	d501      	bpl.n	8009ca8 <_printf_i+0x1cc>
 8009ca4:	6019      	str	r1, [r3, #0]
 8009ca6:	e002      	b.n	8009cae <_printf_i+0x1d2>
 8009ca8:	0670      	lsls	r0, r6, #25
 8009caa:	d5fb      	bpl.n	8009ca4 <_printf_i+0x1c8>
 8009cac:	8019      	strh	r1, [r3, #0]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6123      	str	r3, [r4, #16]
 8009cb2:	4615      	mov	r5, r2
 8009cb4:	e7ba      	b.n	8009c2c <_printf_i+0x150>
 8009cb6:	682b      	ldr	r3, [r5, #0]
 8009cb8:	1d1a      	adds	r2, r3, #4
 8009cba:	602a      	str	r2, [r5, #0]
 8009cbc:	681d      	ldr	r5, [r3, #0]
 8009cbe:	6862      	ldr	r2, [r4, #4]
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f7f6 fa8c 	bl	80001e0 <memchr>
 8009cc8:	b108      	cbz	r0, 8009cce <_printf_i+0x1f2>
 8009cca:	1b40      	subs	r0, r0, r5
 8009ccc:	6060      	str	r0, [r4, #4]
 8009cce:	6863      	ldr	r3, [r4, #4]
 8009cd0:	6123      	str	r3, [r4, #16]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd8:	e7a8      	b.n	8009c2c <_printf_i+0x150>
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	462a      	mov	r2, r5
 8009cde:	4649      	mov	r1, r9
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	47d0      	blx	sl
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d0ab      	beq.n	8009c40 <_printf_i+0x164>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	079b      	lsls	r3, r3, #30
 8009cec:	d413      	bmi.n	8009d16 <_printf_i+0x23a>
 8009cee:	68e0      	ldr	r0, [r4, #12]
 8009cf0:	9b03      	ldr	r3, [sp, #12]
 8009cf2:	4298      	cmp	r0, r3
 8009cf4:	bfb8      	it	lt
 8009cf6:	4618      	movlt	r0, r3
 8009cf8:	e7a4      	b.n	8009c44 <_printf_i+0x168>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	4649      	mov	r1, r9
 8009d00:	4640      	mov	r0, r8
 8009d02:	47d0      	blx	sl
 8009d04:	3001      	adds	r0, #1
 8009d06:	d09b      	beq.n	8009c40 <_printf_i+0x164>
 8009d08:	3501      	adds	r5, #1
 8009d0a:	68e3      	ldr	r3, [r4, #12]
 8009d0c:	9903      	ldr	r1, [sp, #12]
 8009d0e:	1a5b      	subs	r3, r3, r1
 8009d10:	42ab      	cmp	r3, r5
 8009d12:	dcf2      	bgt.n	8009cfa <_printf_i+0x21e>
 8009d14:	e7eb      	b.n	8009cee <_printf_i+0x212>
 8009d16:	2500      	movs	r5, #0
 8009d18:	f104 0619 	add.w	r6, r4, #25
 8009d1c:	e7f5      	b.n	8009d0a <_printf_i+0x22e>
 8009d1e:	bf00      	nop
 8009d20:	0800a07d 	.word	0x0800a07d
 8009d24:	0800a08e 	.word	0x0800a08e

08009d28 <memmove>:
 8009d28:	4288      	cmp	r0, r1
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	eb01 0402 	add.w	r4, r1, r2
 8009d30:	d902      	bls.n	8009d38 <memmove+0x10>
 8009d32:	4284      	cmp	r4, r0
 8009d34:	4623      	mov	r3, r4
 8009d36:	d807      	bhi.n	8009d48 <memmove+0x20>
 8009d38:	1e43      	subs	r3, r0, #1
 8009d3a:	42a1      	cmp	r1, r4
 8009d3c:	d008      	beq.n	8009d50 <memmove+0x28>
 8009d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d46:	e7f8      	b.n	8009d3a <memmove+0x12>
 8009d48:	4402      	add	r2, r0
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	428a      	cmp	r2, r1
 8009d4e:	d100      	bne.n	8009d52 <memmove+0x2a>
 8009d50:	bd10      	pop	{r4, pc}
 8009d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d5a:	e7f7      	b.n	8009d4c <memmove+0x24>

08009d5c <_free_r>:
 8009d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d5e:	2900      	cmp	r1, #0
 8009d60:	d044      	beq.n	8009dec <_free_r+0x90>
 8009d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d66:	9001      	str	r0, [sp, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d6e:	bfb8      	it	lt
 8009d70:	18e4      	addlt	r4, r4, r3
 8009d72:	f000 f913 	bl	8009f9c <__malloc_lock>
 8009d76:	4a1e      	ldr	r2, [pc, #120]	; (8009df0 <_free_r+0x94>)
 8009d78:	9801      	ldr	r0, [sp, #4]
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	b933      	cbnz	r3, 8009d8c <_free_r+0x30>
 8009d7e:	6063      	str	r3, [r4, #4]
 8009d80:	6014      	str	r4, [r2, #0]
 8009d82:	b003      	add	sp, #12
 8009d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d88:	f000 b90e 	b.w	8009fa8 <__malloc_unlock>
 8009d8c:	42a3      	cmp	r3, r4
 8009d8e:	d908      	bls.n	8009da2 <_free_r+0x46>
 8009d90:	6825      	ldr	r5, [r4, #0]
 8009d92:	1961      	adds	r1, r4, r5
 8009d94:	428b      	cmp	r3, r1
 8009d96:	bf01      	itttt	eq
 8009d98:	6819      	ldreq	r1, [r3, #0]
 8009d9a:	685b      	ldreq	r3, [r3, #4]
 8009d9c:	1949      	addeq	r1, r1, r5
 8009d9e:	6021      	streq	r1, [r4, #0]
 8009da0:	e7ed      	b.n	8009d7e <_free_r+0x22>
 8009da2:	461a      	mov	r2, r3
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	b10b      	cbz	r3, 8009dac <_free_r+0x50>
 8009da8:	42a3      	cmp	r3, r4
 8009daa:	d9fa      	bls.n	8009da2 <_free_r+0x46>
 8009dac:	6811      	ldr	r1, [r2, #0]
 8009dae:	1855      	adds	r5, r2, r1
 8009db0:	42a5      	cmp	r5, r4
 8009db2:	d10b      	bne.n	8009dcc <_free_r+0x70>
 8009db4:	6824      	ldr	r4, [r4, #0]
 8009db6:	4421      	add	r1, r4
 8009db8:	1854      	adds	r4, r2, r1
 8009dba:	42a3      	cmp	r3, r4
 8009dbc:	6011      	str	r1, [r2, #0]
 8009dbe:	d1e0      	bne.n	8009d82 <_free_r+0x26>
 8009dc0:	681c      	ldr	r4, [r3, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	6053      	str	r3, [r2, #4]
 8009dc6:	4421      	add	r1, r4
 8009dc8:	6011      	str	r1, [r2, #0]
 8009dca:	e7da      	b.n	8009d82 <_free_r+0x26>
 8009dcc:	d902      	bls.n	8009dd4 <_free_r+0x78>
 8009dce:	230c      	movs	r3, #12
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	e7d6      	b.n	8009d82 <_free_r+0x26>
 8009dd4:	6825      	ldr	r5, [r4, #0]
 8009dd6:	1961      	adds	r1, r4, r5
 8009dd8:	428b      	cmp	r3, r1
 8009dda:	bf04      	itt	eq
 8009ddc:	6819      	ldreq	r1, [r3, #0]
 8009dde:	685b      	ldreq	r3, [r3, #4]
 8009de0:	6063      	str	r3, [r4, #4]
 8009de2:	bf04      	itt	eq
 8009de4:	1949      	addeq	r1, r1, r5
 8009de6:	6021      	streq	r1, [r4, #0]
 8009de8:	6054      	str	r4, [r2, #4]
 8009dea:	e7ca      	b.n	8009d82 <_free_r+0x26>
 8009dec:	b003      	add	sp, #12
 8009dee:	bd30      	pop	{r4, r5, pc}
 8009df0:	20000d2c 	.word	0x20000d2c

08009df4 <sbrk_aligned>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	4e0e      	ldr	r6, [pc, #56]	; (8009e30 <sbrk_aligned+0x3c>)
 8009df8:	460c      	mov	r4, r1
 8009dfa:	6831      	ldr	r1, [r6, #0]
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	b911      	cbnz	r1, 8009e06 <sbrk_aligned+0x12>
 8009e00:	f000 f8bc 	bl	8009f7c <_sbrk_r>
 8009e04:	6030      	str	r0, [r6, #0]
 8009e06:	4621      	mov	r1, r4
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f000 f8b7 	bl	8009f7c <_sbrk_r>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d00a      	beq.n	8009e28 <sbrk_aligned+0x34>
 8009e12:	1cc4      	adds	r4, r0, #3
 8009e14:	f024 0403 	bic.w	r4, r4, #3
 8009e18:	42a0      	cmp	r0, r4
 8009e1a:	d007      	beq.n	8009e2c <sbrk_aligned+0x38>
 8009e1c:	1a21      	subs	r1, r4, r0
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f000 f8ac 	bl	8009f7c <_sbrk_r>
 8009e24:	3001      	adds	r0, #1
 8009e26:	d101      	bne.n	8009e2c <sbrk_aligned+0x38>
 8009e28:	f04f 34ff 	mov.w	r4, #4294967295
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	20000d30 	.word	0x20000d30

08009e34 <_malloc_r>:
 8009e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e38:	1ccd      	adds	r5, r1, #3
 8009e3a:	f025 0503 	bic.w	r5, r5, #3
 8009e3e:	3508      	adds	r5, #8
 8009e40:	2d0c      	cmp	r5, #12
 8009e42:	bf38      	it	cc
 8009e44:	250c      	movcc	r5, #12
 8009e46:	2d00      	cmp	r5, #0
 8009e48:	4607      	mov	r7, r0
 8009e4a:	db01      	blt.n	8009e50 <_malloc_r+0x1c>
 8009e4c:	42a9      	cmp	r1, r5
 8009e4e:	d905      	bls.n	8009e5c <_malloc_r+0x28>
 8009e50:	230c      	movs	r3, #12
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	2600      	movs	r6, #0
 8009e56:	4630      	mov	r0, r6
 8009e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5c:	4e2e      	ldr	r6, [pc, #184]	; (8009f18 <_malloc_r+0xe4>)
 8009e5e:	f000 f89d 	bl	8009f9c <__malloc_lock>
 8009e62:	6833      	ldr	r3, [r6, #0]
 8009e64:	461c      	mov	r4, r3
 8009e66:	bb34      	cbnz	r4, 8009eb6 <_malloc_r+0x82>
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	f7ff ffc2 	bl	8009df4 <sbrk_aligned>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	4604      	mov	r4, r0
 8009e74:	d14d      	bne.n	8009f12 <_malloc_r+0xde>
 8009e76:	6834      	ldr	r4, [r6, #0]
 8009e78:	4626      	mov	r6, r4
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	d140      	bne.n	8009f00 <_malloc_r+0xcc>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	4631      	mov	r1, r6
 8009e82:	4638      	mov	r0, r7
 8009e84:	eb04 0803 	add.w	r8, r4, r3
 8009e88:	f000 f878 	bl	8009f7c <_sbrk_r>
 8009e8c:	4580      	cmp	r8, r0
 8009e8e:	d13a      	bne.n	8009f06 <_malloc_r+0xd2>
 8009e90:	6821      	ldr	r1, [r4, #0]
 8009e92:	3503      	adds	r5, #3
 8009e94:	1a6d      	subs	r5, r5, r1
 8009e96:	f025 0503 	bic.w	r5, r5, #3
 8009e9a:	3508      	adds	r5, #8
 8009e9c:	2d0c      	cmp	r5, #12
 8009e9e:	bf38      	it	cc
 8009ea0:	250c      	movcc	r5, #12
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff ffa5 	bl	8009df4 <sbrk_aligned>
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d02b      	beq.n	8009f06 <_malloc_r+0xd2>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	442b      	add	r3, r5
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	e00e      	b.n	8009ed4 <_malloc_r+0xa0>
 8009eb6:	6822      	ldr	r2, [r4, #0]
 8009eb8:	1b52      	subs	r2, r2, r5
 8009eba:	d41e      	bmi.n	8009efa <_malloc_r+0xc6>
 8009ebc:	2a0b      	cmp	r2, #11
 8009ebe:	d916      	bls.n	8009eee <_malloc_r+0xba>
 8009ec0:	1961      	adds	r1, r4, r5
 8009ec2:	42a3      	cmp	r3, r4
 8009ec4:	6025      	str	r5, [r4, #0]
 8009ec6:	bf18      	it	ne
 8009ec8:	6059      	strne	r1, [r3, #4]
 8009eca:	6863      	ldr	r3, [r4, #4]
 8009ecc:	bf08      	it	eq
 8009ece:	6031      	streq	r1, [r6, #0]
 8009ed0:	5162      	str	r2, [r4, r5]
 8009ed2:	604b      	str	r3, [r1, #4]
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f104 060b 	add.w	r6, r4, #11
 8009eda:	f000 f865 	bl	8009fa8 <__malloc_unlock>
 8009ede:	f026 0607 	bic.w	r6, r6, #7
 8009ee2:	1d23      	adds	r3, r4, #4
 8009ee4:	1af2      	subs	r2, r6, r3
 8009ee6:	d0b6      	beq.n	8009e56 <_malloc_r+0x22>
 8009ee8:	1b9b      	subs	r3, r3, r6
 8009eea:	50a3      	str	r3, [r4, r2]
 8009eec:	e7b3      	b.n	8009e56 <_malloc_r+0x22>
 8009eee:	6862      	ldr	r2, [r4, #4]
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	bf0c      	ite	eq
 8009ef4:	6032      	streq	r2, [r6, #0]
 8009ef6:	605a      	strne	r2, [r3, #4]
 8009ef8:	e7ec      	b.n	8009ed4 <_malloc_r+0xa0>
 8009efa:	4623      	mov	r3, r4
 8009efc:	6864      	ldr	r4, [r4, #4]
 8009efe:	e7b2      	b.n	8009e66 <_malloc_r+0x32>
 8009f00:	4634      	mov	r4, r6
 8009f02:	6876      	ldr	r6, [r6, #4]
 8009f04:	e7b9      	b.n	8009e7a <_malloc_r+0x46>
 8009f06:	230c      	movs	r3, #12
 8009f08:	603b      	str	r3, [r7, #0]
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	f000 f84c 	bl	8009fa8 <__malloc_unlock>
 8009f10:	e7a1      	b.n	8009e56 <_malloc_r+0x22>
 8009f12:	6025      	str	r5, [r4, #0]
 8009f14:	e7de      	b.n	8009ed4 <_malloc_r+0xa0>
 8009f16:	bf00      	nop
 8009f18:	20000d2c 	.word	0x20000d2c

08009f1c <_realloc_r>:
 8009f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f20:	4680      	mov	r8, r0
 8009f22:	4614      	mov	r4, r2
 8009f24:	460e      	mov	r6, r1
 8009f26:	b921      	cbnz	r1, 8009f32 <_realloc_r+0x16>
 8009f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	f7ff bf81 	b.w	8009e34 <_malloc_r>
 8009f32:	b92a      	cbnz	r2, 8009f40 <_realloc_r+0x24>
 8009f34:	f7ff ff12 	bl	8009d5c <_free_r>
 8009f38:	4625      	mov	r5, r4
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f40:	f000 f838 	bl	8009fb4 <_malloc_usable_size_r>
 8009f44:	4284      	cmp	r4, r0
 8009f46:	4607      	mov	r7, r0
 8009f48:	d802      	bhi.n	8009f50 <_realloc_r+0x34>
 8009f4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f4e:	d812      	bhi.n	8009f76 <_realloc_r+0x5a>
 8009f50:	4621      	mov	r1, r4
 8009f52:	4640      	mov	r0, r8
 8009f54:	f7ff ff6e 	bl	8009e34 <_malloc_r>
 8009f58:	4605      	mov	r5, r0
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d0ed      	beq.n	8009f3a <_realloc_r+0x1e>
 8009f5e:	42bc      	cmp	r4, r7
 8009f60:	4622      	mov	r2, r4
 8009f62:	4631      	mov	r1, r6
 8009f64:	bf28      	it	cs
 8009f66:	463a      	movcs	r2, r7
 8009f68:	f7ff fbb8 	bl	80096dc <memcpy>
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	4640      	mov	r0, r8
 8009f70:	f7ff fef4 	bl	8009d5c <_free_r>
 8009f74:	e7e1      	b.n	8009f3a <_realloc_r+0x1e>
 8009f76:	4635      	mov	r5, r6
 8009f78:	e7df      	b.n	8009f3a <_realloc_r+0x1e>
	...

08009f7c <_sbrk_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	; (8009f98 <_sbrk_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f6 ff9a 	bl	8000ec0 <_sbrk>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_sbrk_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_sbrk_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	20000d34 	.word	0x20000d34

08009f9c <__malloc_lock>:
 8009f9c:	4801      	ldr	r0, [pc, #4]	; (8009fa4 <__malloc_lock+0x8>)
 8009f9e:	f000 b811 	b.w	8009fc4 <__retarget_lock_acquire_recursive>
 8009fa2:	bf00      	nop
 8009fa4:	20000d38 	.word	0x20000d38

08009fa8 <__malloc_unlock>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	; (8009fb0 <__malloc_unlock+0x8>)
 8009faa:	f000 b80c 	b.w	8009fc6 <__retarget_lock_release_recursive>
 8009fae:	bf00      	nop
 8009fb0:	20000d38 	.word	0x20000d38

08009fb4 <_malloc_usable_size_r>:
 8009fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fb8:	1f18      	subs	r0, r3, #4
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	bfbc      	itt	lt
 8009fbe:	580b      	ldrlt	r3, [r1, r0]
 8009fc0:	18c0      	addlt	r0, r0, r3
 8009fc2:	4770      	bx	lr

08009fc4 <__retarget_lock_acquire_recursive>:
 8009fc4:	4770      	bx	lr

08009fc6 <__retarget_lock_release_recursive>:
 8009fc6:	4770      	bx	lr

08009fc8 <_init>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	bf00      	nop
 8009fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fce:	bc08      	pop	{r3}
 8009fd0:	469e      	mov	lr, r3
 8009fd2:	4770      	bx	lr

08009fd4 <_fini>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	bf00      	nop
 8009fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fda:	bc08      	pop	{r3}
 8009fdc:	469e      	mov	lr, r3
 8009fde:	4770      	bx	lr
