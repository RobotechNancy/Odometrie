
GYRO_ACC_Yann.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080084e8  080084e8  000184e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088cc  080088cc  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  080088cc  080088cc  000188cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088d4  080088d4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d8  080088d8  000188d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080088dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000210  08008ae8  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08008ae8  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b29  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c5e  00000000  00000000  00034da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbb  00000000  00000000  00038e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227b1  00000000  00000000  00039df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001699e  00000000  00000000  0005c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfab0  00000000  00000000  00072f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065f0  00000000  00000000  001429f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00148fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084d0 	.word	0x080084d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	080084d0 	.word	0x080084d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <Accelero_GetData_X>:

// private functions


void Accelero_GetData_X(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	Accelero_Data.Accelerorate = MPU6050_GetData_CF_Accelero(0) - Accelero_Data.offset_x;
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 fea5 	bl	8001c98 <MPU6050_GetData_CF_Accelero>
 8000f4e:	ee10 3a10 	vmov	r3, s0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff faf8 	bl	8000548 <__aeabi_f2d>
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <Accelero_GetData_X+0x2c>)
 8000f5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f5e:	f7ff f993 	bl	8000288 <__aeabi_dsub>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4902      	ldr	r1, [pc, #8]	; (8000f70 <Accelero_GetData_X+0x2c>)
 8000f68:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000230 	.word	0x20000230

08000f74 <Accelero_GetData_Y>:
void Accelero_GetData_Y(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	Accelero_Data.Accelerorate = MPU6050_GetData_CF_Accelero(1) - Accelero_Data.offset_y;
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 fe8d 	bl	8001c98 <MPU6050_GetData_CF_Accelero>
 8000f7e:	ee10 3a10 	vmov	r3, s0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fae0 	bl	8000548 <__aeabi_f2d>
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <Accelero_GetData_Y+0x2c>)
 8000f8a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f8e:	f7ff f97b 	bl	8000288 <__aeabi_dsub>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4902      	ldr	r1, [pc, #8]	; (8000fa0 <Accelero_GetData_Y+0x2c>)
 8000f98:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000230 	.word	0x20000230

08000fa4 <Accelero_NewData>:

Accelero_NewData_t Accelero_NewData(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	return (Accelero_NewData_t)MPU6050_NewData();
 8000fa8:	f000 fd98 	bl	8001adc <MPU6050_NewData>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <Accelero_ResetAccumulator>:

void Accelero_ResetAccumulator(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	Accelero_Data.accumulator = 0.0;
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <Accelero_ResetAccumulator+0x24>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	e9c1 2300 	strd	r2, r3, [r1]
	Accelero_Data.counter = 0;
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <Accelero_ResetAccumulator+0x24>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	811a      	strh	r2, [r3, #8]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000230 	.word	0x20000230

08000fdc <Accelero_Accumulate_X>:

void Accelero_Accumulate_X(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	if(Accelero_NewData()==ACCEL_DATA_AVAILABLE)
 8000fe0:	f7ff ffe0 	bl	8000fa4 <Accelero_NewData>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d114      	bne.n	8001014 <Accelero_Accumulate_X+0x38>
	{
		Accelero_GetData_X();
 8000fea:	f7ff ffab 	bl	8000f44 <Accelero_GetData_X>
		Accelero_Data.accumulator += Accelero_Data.Accelerorate;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <Accelero_Accumulate_X+0x3c>)
 8000ff0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <Accelero_Accumulate_X+0x3c>)
 8000ff6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000ffa:	f7ff f947 	bl	800028c <__adddf3>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4905      	ldr	r1, [pc, #20]	; (8001018 <Accelero_Accumulate_X+0x3c>)
 8001004:	e9c1 2300 	strd	r2, r3, [r1]
		Accelero_Data.counter++;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <Accelero_Accumulate_X+0x3c>)
 800100a:	891b      	ldrh	r3, [r3, #8]
 800100c:	3301      	adds	r3, #1
 800100e:	b29a      	uxth	r2, r3
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <Accelero_Accumulate_X+0x3c>)
 8001012:	811a      	strh	r2, [r3, #8]
	}
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000230 	.word	0x20000230

0800101c <Accelero_Accumulate_Y>:

void Accelero_Accumulate_Y(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	if(Accelero_NewData()==ACCEL_DATA_AVAILABLE)
 8001020:	f7ff ffc0 	bl	8000fa4 <Accelero_NewData>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d114      	bne.n	8001054 <Accelero_Accumulate_Y+0x38>
	{
		Accelero_GetData_Y();
 800102a:	f7ff ffa3 	bl	8000f74 <Accelero_GetData_Y>
		Accelero_Data.accumulator += Accelero_Data.Accelerorate;
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <Accelero_Accumulate_Y+0x3c>)
 8001030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <Accelero_Accumulate_Y+0x3c>)
 8001036:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800103a:	f7ff f927 	bl	800028c <__adddf3>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4905      	ldr	r1, [pc, #20]	; (8001058 <Accelero_Accumulate_Y+0x3c>)
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
		Accelero_Data.counter++;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <Accelero_Accumulate_Y+0x3c>)
 800104a:	891b      	ldrh	r3, [r3, #8]
 800104c:	3301      	adds	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b01      	ldr	r3, [pc, #4]	; (8001058 <Accelero_Accumulate_Y+0x3c>)
 8001052:	811a      	strh	r2, [r3, #8]
	}
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000230 	.word	0x20000230

0800105c <Accelero_SetOffset_X>:

void Accelero_SetOffset_X(void)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	af00      	add	r7, sp, #0
	Accelero_Data.offset_x = Accelero_Data.accumulator / Accelero_Data.counter;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <Accelero_SetOffset_X+0x30>)
 8001062:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <Accelero_SetOffset_X+0x30>)
 8001068:	891b      	ldrh	r3, [r3, #8]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa5a 	bl	8000524 <__aeabi_i2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	f7ff fbe8 	bl	800084c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4902      	ldr	r1, [pc, #8]	; (800108c <Accelero_SetOffset_X+0x30>)
 8001082:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001086:	bf00      	nop
 8001088:	bdb0      	pop	{r4, r5, r7, pc}
 800108a:	bf00      	nop
 800108c:	20000230 	.word	0x20000230

08001090 <Accelero_SetOffset_Y>:

void Accelero_SetOffset_Y(void)
{
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	af00      	add	r7, sp, #0
	Accelero_Data.offset_y = Accelero_Data.accumulator / Accelero_Data.counter;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <Accelero_SetOffset_Y+0x30>)
 8001096:	e9d3 4500 	ldrd	r4, r5, [r3]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <Accelero_SetOffset_Y+0x30>)
 800109c:	891b      	ldrh	r3, [r3, #8]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa40 	bl	8000524 <__aeabi_i2d>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4620      	mov	r0, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	f7ff fbce 	bl	800084c <__aeabi_ddiv>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4902      	ldr	r1, [pc, #8]	; (80010c0 <Accelero_SetOffset_Y+0x30>)
 80010b6:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80010ba:	bf00      	nop
 80010bc:	bdb0      	pop	{r4, r5, r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000230 	.word	0x20000230

080010c4 <Accelero_Estimate_X>:

void Accelero_Estimate_X(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	if(Accelero_NewData()==ACCEL_DATA_AVAILABLE)
 80010c8:	f7ff ff6c 	bl	8000fa4 <Accelero_NewData>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <Accelero_Estimate_X+0x12>
	{
		Accelero_GetData_X();
 80010d2:	f7ff ff37 	bl	8000f44 <Accelero_GetData_X>
	}
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}

080010da <Accelero_Estimate_Y>:

void Accelero_Estimate_Y(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
	if(Accelero_NewData()==ACCEL_DATA_AVAILABLE)
 80010de:	f7ff ff61 	bl	8000fa4 <Accelero_NewData>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <Accelero_Estimate_Y+0x12>
	{
		Accelero_GetData_Y();
 80010e8:	f7ff ff44 	bl	8000f74 <Accelero_GetData_Y>
	}
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Accelero_FSM>:

void Accelero_FSM(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	// actions
	switch(State_Acc)
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <Accelero_FSM+0xbc>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d81f      	bhi.n	800113c <Accelero_FSM+0x4c>
 80010fc:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <Accelero_FSM+0x14>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	0800113d 	.word	0x0800113d
 8001108:	08001119 	.word	0x08001119
 800110c:	0800111f 	.word	0x0800111f
 8001110:	08001129 	.word	0x08001129
 8001114:	08001133 	.word	0x08001133
	case ACCEL_STATE_NOT_INIT :
		// NOP
		break;

	case ACCEL_STATE_INIT :
		Accelero_ResetAccumulator();
 8001118:	f7ff ff4c 	bl	8000fb4 <Accelero_ResetAccumulator>
		break;
 800111c:	e00f      	b.n	800113e <Accelero_FSM+0x4e>

	case ACCEL_STATE_CALIBRATION :
		Accelero_Accumulate_X();
 800111e:	f7ff ff5d 	bl	8000fdc <Accelero_Accumulate_X>
		Accelero_Accumulate_Y();
 8001122:	f7ff ff7b 	bl	800101c <Accelero_Accumulate_Y>
		break;
 8001126:	e00a      	b.n	800113e <Accelero_FSM+0x4e>

	case ACCEL_STATE_APPLY_CALIBRATION :
		Accelero_SetOffset_X();
 8001128:	f7ff ff98 	bl	800105c <Accelero_SetOffset_X>
		Accelero_SetOffset_Y();
 800112c:	f7ff ffb0 	bl	8001090 <Accelero_SetOffset_Y>
		break;
 8001130:	e005      	b.n	800113e <Accelero_FSM+0x4e>

	case ACCEL_STATE_READY:
		Accelero_Estimate_X();
 8001132:	f7ff ffc7 	bl	80010c4 <Accelero_Estimate_X>
		Accelero_Estimate_Y();
 8001136:	f7ff ffd0 	bl	80010da <Accelero_Estimate_Y>
		break;
 800113a:	e000      	b.n	800113e <Accelero_FSM+0x4e>

	default :
		break;
 800113c:	bf00      	nop
	}

	// transitions
	switch(State_Acc)
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <Accelero_FSM+0xbc>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d82c      	bhi.n	80011a0 <Accelero_FSM+0xb0>
 8001146:	a201      	add	r2, pc, #4	; (adr r2, 800114c <Accelero_FSM+0x5c>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	080011a1 	.word	0x080011a1
 8001150:	08001161 	.word	0x08001161
 8001154:	0800117d 	.word	0x0800117d
 8001158:	08001199 	.word	0x08001199
 800115c:	080011a1 	.word	0x080011a1
	case ACCEL_STATE_NOT_INIT :
		// NOP
		break;

	case ACCEL_STATE_INIT :
		if( Descriptor_Acc->Config->skip_calibration )
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <Accelero_FSM+0xc0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	789b      	ldrb	r3, [r3, #2]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <Accelero_FSM+0x84>
			State_Acc = ACCEL_STATE_READY;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <Accelero_FSM+0xbc>)
 800116e:	2204      	movs	r2, #4
 8001170:	701a      	strb	r2, [r3, #0]
		else
			State_Acc = ACCEL_STATE_CALIBRATION;
		break;
 8001172:	e018      	b.n	80011a6 <Accelero_FSM+0xb6>
			State_Acc = ACCEL_STATE_CALIBRATION;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <Accelero_FSM+0xbc>)
 8001176:	2202      	movs	r2, #2
 8001178:	701a      	strb	r2, [r3, #0]
		break;
 800117a:	e014      	b.n	80011a6 <Accelero_FSM+0xb6>

	case ACCEL_STATE_CALIBRATION :
		if( Accelero_Data.counter >= Descriptor_Acc->Config->mean_etimation_samples_number - 1 )
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <Accelero_FSM+0xc4>)
 800117e:	891b      	ldrh	r3, [r3, #8]
 8001180:	461a      	mov	r2, r3
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <Accelero_FSM+0xc0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	3b01      	subs	r3, #1
 800118c:	429a      	cmp	r2, r3
 800118e:	db09      	blt.n	80011a4 <Accelero_FSM+0xb4>
			State_Acc = ACCEL_STATE_APPLY_CALIBRATION;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <Accelero_FSM+0xbc>)
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
		break;
 8001196:	e005      	b.n	80011a4 <Accelero_FSM+0xb4>

	case ACCEL_STATE_APPLY_CALIBRATION :
		State_Acc = ACCEL_STATE_READY;
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <Accelero_FSM+0xbc>)
 800119a:	2204      	movs	r2, #4
 800119c:	701a      	strb	r2, [r3, #0]
		break;
 800119e:	e002      	b.n	80011a6 <Accelero_FSM+0xb6>
	case ACCEL_STATE_READY:
		// NOP
		break;

	default :
		break;
 80011a0:	bf00      	nop
 80011a2:	e000      	b.n	80011a6 <Accelero_FSM+0xb6>
		break;
 80011a4:	bf00      	nop
	}
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000260 	.word	0x20000260
 80011b0:	2000022c 	.word	0x2000022c
 80011b4:	20000230 	.word	0x20000230

080011b8 <Accelero_Init>:

// public functions implementations

void Accelero_Init(Accelero_Desciptor_t * _Descriptor)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	Descriptor_Acc = _Descriptor;
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <Accelero_Init+0x48>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
	Accelero_Data.datarate = MPU6050_GetSampleRate();
 80011c6:	f000 fd7d 	bl	8001cc4 <MPU6050_GetSampleRate>
 80011ca:	ee10 3a10 	vmov	r3, s0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9ba 	bl	8000548 <__aeabi_f2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	490a      	ldr	r1, [pc, #40]	; (8001204 <Accelero_Init+0x4c>)
 80011da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Accelero_ResetAccumulator();
 80011de:	f7ff fee9 	bl	8000fb4 <Accelero_ResetAccumulator>
	Accelero_SetAccX(0);
 80011e2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001208 <Accelero_Init+0x50>
 80011e6:	f000 f847 	bl	8001278 <Accelero_SetAccX>
	Accelero_SetAccX(0);
 80011ea:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001208 <Accelero_Init+0x50>
 80011ee:	f000 f843 	bl	8001278 <Accelero_SetAccX>
	State_Acc = ACCEL_STATE_INIT;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <Accelero_Init+0x54>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000022c 	.word	0x2000022c
 8001204:	20000230 	.word	0x20000230
 8001208:	00000000 	.word	0x00000000
 800120c:	20000260 	.word	0x20000260

08001210 <Accelero_Process>:

void Accelero_Process(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	Accelero_FSM();
 8001214:	f7ff ff6c 	bl	80010f0 <Accelero_FSM>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <Accelero_isReady>:
	Accelero_ResetAccumulator();
	State_Acc = ACCEL_STATE_CALIBRATION;
}

bool Accelero_isReady(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	return State_Acc == ACCEL_STATE_READY;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <Accelero_isReady+0x1c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b04      	cmp	r3, #4
 8001226:	bf0c      	ite	eq
 8001228:	2301      	moveq	r3, #1
 800122a:	2300      	movne	r3, #0
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000260 	.word	0x20000260

0800123c <Accelero_GetAccX>:

float Accelero_GetAccX(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	return MPU6050_GetData_CF_Accelero(0)- Accelero_Data.offset_x;
 8001240:	2000      	movs	r0, #0
 8001242:	f000 fd29 	bl	8001c98 <MPU6050_GetData_CF_Accelero>
 8001246:	ee10 3a10 	vmov	r3, s0
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f97c 	bl	8000548 <__aeabi_f2d>
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <Accelero_GetAccX+0x38>)
 8001252:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001256:	f7ff f817 	bl	8000288 <__aeabi_dsub>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fca1 	bl	8000ba8 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	ee07 3a90 	vmov	s15, r3
}
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000230 	.word	0x20000230

08001278 <Accelero_SetAccX>:

void Accelero_SetAccX(float newValue)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	ed87 0a01 	vstr	s0, [r7, #4]
	Accelero_Data.Accelerorate = newValue;
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff f960 	bl	8000548 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4903      	ldr	r1, [pc, #12]	; (800129c <Accelero_SetAccX+0x24>)
 800128e:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000230 	.word	0x20000230

080012a0 <Accelero_GetAccY>:

float Accelero_GetAccY(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	return MPU6050_GetData_CF_Accelero(1)- Accelero_Data.offset_y;
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fcf7 	bl	8001c98 <MPU6050_GetData_CF_Accelero>
 80012aa:	ee10 3a10 	vmov	r3, s0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f94a 	bl	8000548 <__aeabi_f2d>
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <Accelero_GetAccY+0x38>)
 80012b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012ba:	f7fe ffe5 	bl	8000288 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc6f 	bl	8000ba8 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	ee07 3a90 	vmov	s15, r3
}
 80012d0:	eeb0 0a67 	vmov.f32	s0, s15
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000230 	.word	0x20000230

080012dc <Accelero_GetCalibrationAdvancement>:
//{
//	Accelero_Data = newValue;
//}

float Accelero_GetCalibrationAdvancement(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	return (float)(Accelero_Data.counter) * 100 / (float)(Descriptor_Acc->Config->mean_etimation_samples_number);
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <Accelero_GetCalibrationAdvancement+0x3c>)
 80012e2:	891b      	ldrh	r3, [r3, #8]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ec:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800131c <Accelero_GetCalibrationAdvancement+0x40>
 80012f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <Accelero_GetCalibrationAdvancement+0x44>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001304:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001308:	eef0 7a66 	vmov.f32	s15, s13
}
 800130c:	eeb0 0a67 	vmov.f32	s0, s15
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	20000230 	.word	0x20000230
 800131c:	42c80000 	.word	0x42c80000
 8001320:	2000022c 	.word	0x2000022c

08001324 <Gyro_Modulo>:
Gyro_State_t State = GYRO_STATE_NOT_INIT;

// private functions

void Gyro_Modulo(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	 while ( Gyro_Data.integral < 0.0f || Gyro_Data.integral > 180.0f ){
 8001328:	e032      	b.n	8001390 <Gyro_Modulo+0x6c>
		 if(Gyro_Data.integral > 180.0f)
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <Gyro_Modulo+0xa0>)
 800132c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <Gyro_Modulo+0xa4>)
 8001336:	f7ff fbef 	bl	8000b18 <__aeabi_dcmpgt>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00d      	beq.n	800135c <Gyro_Modulo+0x38>
			 Gyro_Data.integral -= 180.0f;
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <Gyro_Modulo+0xa0>)
 8001342:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <Gyro_Modulo+0xa4>)
 800134c:	f7fe ff9c 	bl	8000288 <__aeabi_dsub>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	491b      	ldr	r1, [pc, #108]	; (80013c4 <Gyro_Modulo+0xa0>)
 8001356:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800135a:	e019      	b.n	8001390 <Gyro_Modulo+0x6c>
		 else if (Gyro_Data.integral < 0.0f)
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <Gyro_Modulo+0xa0>)
 800135e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	f7ff fbb7 	bl	8000adc <__aeabi_dcmplt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d100      	bne.n	8001376 <Gyro_Modulo+0x52>
 8001374:	e00c      	b.n	8001390 <Gyro_Modulo+0x6c>
			 Gyro_Data.integral += 180.0f;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <Gyro_Modulo+0xa0>)
 8001378:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <Gyro_Modulo+0xa4>)
 8001382:	f7fe ff83 	bl	800028c <__adddf3>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	490e      	ldr	r1, [pc, #56]	; (80013c4 <Gyro_Modulo+0xa0>)
 800138c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 while ( Gyro_Data.integral < 0.0f || Gyro_Data.integral > 180.0f ){
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <Gyro_Modulo+0xa0>)
 8001392:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	f7ff fb9d 	bl	8000adc <__aeabi_dcmplt>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1c0      	bne.n	800132a <Gyro_Modulo+0x6>
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <Gyro_Modulo+0xa0>)
 80013aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <Gyro_Modulo+0xa4>)
 80013b4:	f7ff fbb0 	bl	8000b18 <__aeabi_dcmpgt>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1b5      	bne.n	800132a <Gyro_Modulo+0x6>
	 }
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000268 	.word	0x20000268
 80013c8:	40668000 	.word	0x40668000

080013cc <Gyro_GetData>:

void Gyro_GetData(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	 Gyro_Data.gyrorate = MPU6050_GetData_CF() - Gyro_Data.offset;
 80013d0:	f000 fbe4 	bl	8001b9c <MPU6050_GetData_CF>
 80013d4:	ee10 3a10 	vmov	r3, s0
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8b5 	bl	8000548 <__aeabi_f2d>
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <Gyro_GetData+0x2c>)
 80013e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013e4:	f7fe ff50 	bl	8000288 <__aeabi_dsub>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4902      	ldr	r1, [pc, #8]	; (80013f8 <Gyro_GetData+0x2c>)
 80013ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000268 	.word	0x20000268

080013fc <Gyro_NewData>:

Gyro_NewData_t Gyro_NewData(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	return (Gyro_NewData_t)MPU6050_NewData();
 8001400:	f000 fb6c 	bl	8001adc <MPU6050_NewData>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <Gyro_ResetAccumulator>:

void Gyro_ResetAccumulator(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	 Gyro_Data.accumulator = 0.0;
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <Gyro_ResetAccumulator+0x24>)
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	e9c1 2300 	strd	r2, r3, [r1]
	 Gyro_Data.counter = 0;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <Gyro_ResetAccumulator+0x24>)
 8001420:	2200      	movs	r2, #0
 8001422:	811a      	strh	r2, [r3, #8]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000268 	.word	0x20000268

08001434 <Gyro_Accumulate>:

void Gyro_Accumulate(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	if(Gyro_NewData()==GYRO_DATA_AVAILABLE)
 8001438:	f7ff ffe0 	bl	80013fc <Gyro_NewData>
 800143c:	4603      	mov	r3, r0
 800143e:	2b01      	cmp	r3, #1
 8001440:	d114      	bne.n	800146c <Gyro_Accumulate+0x38>
	{
		Gyro_GetData();
 8001442:	f7ff ffc3 	bl	80013cc <Gyro_GetData>
		Gyro_Data.accumulator += Gyro_Data.gyrorate;
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <Gyro_Accumulate+0x3c>)
 8001448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <Gyro_Accumulate+0x3c>)
 800144e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001452:	f7fe ff1b 	bl	800028c <__adddf3>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4905      	ldr	r1, [pc, #20]	; (8001470 <Gyro_Accumulate+0x3c>)
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
		Gyro_Data.counter++;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <Gyro_Accumulate+0x3c>)
 8001462:	891b      	ldrh	r3, [r3, #8]
 8001464:	3301      	adds	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b01      	ldr	r3, [pc, #4]	; (8001470 <Gyro_Accumulate+0x3c>)
 800146a:	811a      	strh	r2, [r3, #8]
	}
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000268 	.word	0x20000268

08001474 <Gyro_SetOffset>:

void Gyro_SetOffset(void)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	af00      	add	r7, sp, #0
	Gyro_Data.offset = Gyro_Data.accumulator / Gyro_Data.counter;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <Gyro_SetOffset+0x30>)
 800147a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <Gyro_SetOffset+0x30>)
 8001480:	891b      	ldrh	r3, [r3, #8]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f84e 	bl	8000524 <__aeabi_i2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4620      	mov	r0, r4
 800148e:	4629      	mov	r1, r5
 8001490:	f7ff f9dc 	bl	800084c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4902      	ldr	r1, [pc, #8]	; (80014a4 <Gyro_SetOffset+0x30>)
 800149a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800149e:	bf00      	nop
 80014a0:	bdb0      	pop	{r4, r5, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000268 	.word	0x20000268

080014a8 <Gyro_Estimate>:

void Gyro_Estimate(void)
{
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	if(Gyro_NewData()==GYRO_DATA_AVAILABLE)
 80014ac:	f7ff ffa6 	bl	80013fc <Gyro_NewData>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d117      	bne.n	80014e6 <Gyro_Estimate+0x3e>
	{
		 Gyro_GetData();
 80014b6:	f7ff ff89 	bl	80013cc <Gyro_GetData>
		 Gyro_Data.integral += Gyro_Data.gyrorate / Gyro_Data.datarate;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <Gyro_Estimate+0x44>)
 80014bc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <Gyro_Estimate+0x44>)
 80014c2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <Gyro_Estimate+0x44>)
 80014c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014cc:	f7ff f9be 	bl	800084c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4620      	mov	r0, r4
 80014d6:	4629      	mov	r1, r5
 80014d8:	f7fe fed8 	bl	800028c <__adddf3>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4902      	ldr	r1, [pc, #8]	; (80014ec <Gyro_Estimate+0x44>)
 80014e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	}
}
 80014e6:	bf00      	nop
 80014e8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000268 	.word	0x20000268

080014f0 <Gyro_FSM>:

void Gyro_FSM(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	// actions
	switch(State)
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <Gyro_FSM+0xc4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d821      	bhi.n	8001540 <Gyro_FSM+0x50>
 80014fc:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <Gyro_FSM+0x14>)
 80014fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	08001541 	.word	0x08001541
 8001508:	08001519 	.word	0x08001519
 800150c:	0800151f 	.word	0x0800151f
 8001510:	08001525 	.word	0x08001525
 8001514:	0800152b 	.word	0x0800152b
	case GYRO_STATE_NOT_INIT :
		// NOP
		break;

	case GYRO_STATE_INIT :
		Gyro_ResetAccumulator();
 8001518:	f7ff ff78 	bl	800140c <Gyro_ResetAccumulator>
		break;
 800151c:	e013      	b.n	8001546 <Gyro_FSM+0x56>

	case GYRO_STATE_CALIBRATION :
		Gyro_Accumulate();
 800151e:	f7ff ff89 	bl	8001434 <Gyro_Accumulate>
		break;
 8001522:	e010      	b.n	8001546 <Gyro_FSM+0x56>

	case GYRO_STATE_APPLY_CALIBRATION :
		Gyro_SetOffset();
 8001524:	f7ff ffa6 	bl	8001474 <Gyro_SetOffset>
		break;
 8001528:	e00d      	b.n	8001546 <Gyro_FSM+0x56>

	case GYRO_STATE_READY:
		Gyro_Estimate();
 800152a:	f7ff ffbd 	bl	80014a8 <Gyro_Estimate>
		if( Descriptor->Config->use_modulo )
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <Gyro_FSM+0xc8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <Gyro_FSM+0x54>
			Gyro_Modulo();
 800153a:	f7ff fef3 	bl	8001324 <Gyro_Modulo>
		break;
 800153e:	e001      	b.n	8001544 <Gyro_FSM+0x54>

	default :
		break;
 8001540:	bf00      	nop
 8001542:	e000      	b.n	8001546 <Gyro_FSM+0x56>
		break;
 8001544:	bf00      	nop
	}

	// transitions
	switch(State)
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <Gyro_FSM+0xc4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b04      	cmp	r3, #4
 800154c:	d82c      	bhi.n	80015a8 <Gyro_FSM+0xb8>
 800154e:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <Gyro_FSM+0x64>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	080015a9 	.word	0x080015a9
 8001558:	08001569 	.word	0x08001569
 800155c:	08001585 	.word	0x08001585
 8001560:	080015a1 	.word	0x080015a1
 8001564:	080015a9 	.word	0x080015a9
	case GYRO_STATE_NOT_INIT :
		// NOP
		break;

	case GYRO_STATE_INIT :
		if( Descriptor->Config->skip_calibration )
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <Gyro_FSM+0xc8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	791b      	ldrb	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <Gyro_FSM+0x8c>
			State = GYRO_STATE_READY;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <Gyro_FSM+0xc4>)
 8001576:	2204      	movs	r2, #4
 8001578:	701a      	strb	r2, [r3, #0]
		else
			State = GYRO_STATE_CALIBRATION;
		break;
 800157a:	e018      	b.n	80015ae <Gyro_FSM+0xbe>
			State = GYRO_STATE_CALIBRATION;
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <Gyro_FSM+0xc4>)
 800157e:	2202      	movs	r2, #2
 8001580:	701a      	strb	r2, [r3, #0]
		break;
 8001582:	e014      	b.n	80015ae <Gyro_FSM+0xbe>

	case GYRO_STATE_CALIBRATION :
		if( Gyro_Data.counter >= Descriptor->Config->mean_etimation_samples_number - 1 )
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <Gyro_FSM+0xcc>)
 8001586:	891b      	ldrh	r3, [r3, #8]
 8001588:	461a      	mov	r2, r3
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <Gyro_FSM+0xc8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	885b      	ldrh	r3, [r3, #2]
 8001592:	3b01      	subs	r3, #1
 8001594:	429a      	cmp	r2, r3
 8001596:	db09      	blt.n	80015ac <Gyro_FSM+0xbc>
			State = GYRO_STATE_APPLY_CALIBRATION;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <Gyro_FSM+0xc4>)
 800159a:	2203      	movs	r2, #3
 800159c:	701a      	strb	r2, [r3, #0]
		break;
 800159e:	e005      	b.n	80015ac <Gyro_FSM+0xbc>

	case GYRO_STATE_APPLY_CALIBRATION :
		State = GYRO_STATE_READY;
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <Gyro_FSM+0xc4>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	701a      	strb	r2, [r3, #0]
		break;
 80015a6:	e002      	b.n	80015ae <Gyro_FSM+0xbe>
	case GYRO_STATE_READY:
		// NOP
		break;

	default :
		break;
 80015a8:	bf00      	nop
 80015aa:	e000      	b.n	80015ae <Gyro_FSM+0xbe>
		break;
 80015ac:	bf00      	nop
	}
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000298 	.word	0x20000298
 80015b8:	20000264 	.word	0x20000264
 80015bc:	20000268 	.word	0x20000268

080015c0 <Gyro_Init>:

// public functions implementations

void Gyro_Init(Gyro_Desciptor_t * _Descriptor)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	Descriptor = _Descriptor;
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <Gyro_Init+0x40>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
	Gyro_Data.datarate = MPU6050_GetSampleRate();
 80015ce:	f000 fb79 	bl	8001cc4 <MPU6050_GetSampleRate>
 80015d2:	ee10 3a10 	vmov	r3, s0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffb6 	bl	8000548 <__aeabi_f2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4908      	ldr	r1, [pc, #32]	; (8001604 <Gyro_Init+0x44>)
 80015e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Gyro_ResetAccumulator();
 80015e6:	f7ff ff11 	bl	800140c <Gyro_ResetAccumulator>
	Gyro_SetRot(0);
 80015ea:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001608 <Gyro_Init+0x48>
 80015ee:	f000 f837 	bl	8001660 <Gyro_SetRot>
	State = GYRO_STATE_INIT;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <Gyro_Init+0x4c>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000264 	.word	0x20000264
 8001604:	20000268 	.word	0x20000268
 8001608:	00000000 	.word	0x00000000
 800160c:	20000298 	.word	0x20000298

08001610 <Gyro_Process>:

void Gyro_Process(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	Gyro_FSM();
 8001614:	f7ff ff6c 	bl	80014f0 <Gyro_FSM>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <Gyro_isReady>:
	Gyro_ResetAccumulator();
	State = GYRO_STATE_CALIBRATION;
}

bool Gyro_isReady(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
	return State == GYRO_STATE_READY;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <Gyro_isReady+0x1c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b04      	cmp	r3, #4
 8001626:	bf0c      	ite	eq
 8001628:	2301      	moveq	r3, #1
 800162a:	2300      	movne	r3, #0
 800162c:	b2db      	uxtb	r3, r3
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	20000298 	.word	0x20000298

0800163c <Gyro_GetRot>:

float Gyro_GetRot(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	return Gyro_Data.integral;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <Gyro_GetRot+0x20>)
 8001642:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff faad 	bl	8000ba8 <__aeabi_d2f>
 800164e:	4603      	mov	r3, r0
 8001650:	ee07 3a90 	vmov	s15, r3
}
 8001654:	eeb0 0a67 	vmov.f32	s0, s15
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000268 	.word	0x20000268

08001660 <Gyro_SetRot>:

void Gyro_SetRot(float newValue)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
	 Gyro_Data.integral = newValue;
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff6c 	bl	8000548 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4903      	ldr	r1, [pc, #12]	; (8001684 <Gyro_SetRot+0x24>)
 8001676:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000268 	.word	0x20000268

08001688 <Gyro_GetCalibrationAdvancement>:

float Gyro_GetCalibrationAdvancement(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	return (float)(Gyro_Data.counter) * 100 / (float)(Descriptor->Config->mean_etimation_samples_number);
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <Gyro_GetCalibrationAdvancement+0x3c>)
 800168e:	891b      	ldrh	r3, [r3, #8]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001698:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016c8 <Gyro_GetCalibrationAdvancement+0x40>
 800169c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <Gyro_GetCalibrationAdvancement+0x44>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	885b      	ldrh	r3, [r3, #2]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016b4:	eef0 7a66 	vmov.f32	s15, s13
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	20000268 	.word	0x20000268
 80016c8:	42c80000 	.word	0x42c80000
 80016cc:	20000264 	.word	0x20000264

080016d0 <MPU6050_Write_Reg>:
{
	return HAL_I2C_Mem_Read(__Descriptor->hi2c, (__Descriptor->I2C_Addr)<<1|0x01, addr, 1, dest, 1, MPU6050_TIMEOUT);
}

HAL_StatusTypeDef MPU6050_Write_Reg(MPU6050_REG_ADDR_t addr, uint8_t value)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af04      	add	r7, sp, #16
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Write(__Descriptor->hi2c, __Descriptor->I2C_Addr<<1, addr, 1, &value, 1, MPU6050_TIMEOUT);
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MPU6050_Write_Reg+0x44>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MPU6050_Write_Reg+0x44>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	791b      	ldrb	r3, [r3, #4]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	b299      	uxth	r1, r3
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2301      	movs	r3, #1
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	1dbb      	adds	r3, r7, #6
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2301      	movs	r3, #1
 8001706:	f001 fb6f 	bl	8002de8 <HAL_I2C_Mem_Write>
 800170a:	4603      	mov	r3, r0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000029c 	.word	0x2000029c

08001718 <MPU6050_Read_Gyro>:

HAL_StatusTypeDef MPU6050_Read_Gyro(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af04      	add	r7, sp, #16
	return HAL_I2C_Mem_Read(__Descriptor->hi2c, (__Descriptor->I2C_Addr)<<1|0x01, MPU6050_REG_G_Z_H, 1, MPU6050_Data.raw, 2, MPU6050_TIMEOUT);
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <MPU6050_Read_Gyro+0x3c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MPU6050_Read_Gyro+0x3c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	791b      	ldrb	r3, [r3, #4]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	b21b      	sxth	r3, r3
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	b21b      	sxth	r3, r3
 8001734:	b299      	uxth	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2302      	movs	r3, #2
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <MPU6050_Read_Gyro+0x40>)
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2301      	movs	r3, #1
 8001746:	2247      	movs	r2, #71	; 0x47
 8001748:	f001 fc62 	bl	8003010 <HAL_I2C_Mem_Read>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000029c 	.word	0x2000029c
 8001758:	200002a0 	.word	0x200002a0

0800175c <MPU6050_Read_Accelero_X>:

HAL_StatusTypeDef MPU6050_Read_Accelero_X(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af04      	add	r7, sp, #16
	return HAL_I2C_Mem_Read(__Descriptor->hi2c, (__Descriptor->I2C_Addr)<<1|0x01, MPU6050_REG_A_X_H, 1, MPU6050_Data.raw_acc, 4, MPU6050_TIMEOUT);
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MPU6050_Read_Accelero_X+0x3c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MPU6050_Read_Accelero_X+0x3c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	791b      	ldrb	r3, [r3, #4]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	b21b      	sxth	r3, r3
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	b21b      	sxth	r3, r3
 8001778:	b299      	uxth	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2304      	movs	r3, #4
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <MPU6050_Read_Accelero_X+0x40>)
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	223b      	movs	r2, #59	; 0x3b
 800178c:	f001 fc40 	bl	8003010 <HAL_I2C_Mem_Read>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000029c 	.word	0x2000029c
 800179c:	200002a8 	.word	0x200002a8

080017a0 <MPU6050_Configure>:

HAL_StatusTypeDef MPU6050_Configure(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef error;
	uint8_t dtw;

	// clock configuration
	dtw = __Descriptor->Config->Clock_Config & 0x07;
 80017a6:	4b81      	ldr	r3, [pc, #516]	; (80019ac <MPU6050_Configure+0x20c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	799b      	ldrb	r3, [r3, #6]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_PWR_MGMT_1, dtw))
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	4619      	mov	r1, r3
 80017b8:	206b      	movs	r0, #107	; 0x6b
 80017ba:	f7ff ff89 	bl	80016d0 <MPU6050_Write_Reg>
 80017be:	4603      	mov	r3, r0
 80017c0:	71bb      	strb	r3, [r7, #6]
 80017c2:	79bb      	ldrb	r3, [r7, #6]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MPU6050_Configure+0x2c>
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	e0ea      	b.n	80019a2 <MPU6050_Configure+0x202>

	// sample rate divider
	dtw = __Descriptor->Config->SampleRateDivider;
 80017cc:	4b77      	ldr	r3, [pc, #476]	; (80019ac <MPU6050_Configure+0x20c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_SMPLRT_DIV, dtw))
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4619      	mov	r1, r3
 80017da:	2019      	movs	r0, #25
 80017dc:	f7ff ff78 	bl	80016d0 <MPU6050_Write_Reg>
 80017e0:	4603      	mov	r3, r0
 80017e2:	71bb      	strb	r3, [r7, #6]
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MPU6050_Configure+0x4e>
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	e0d9      	b.n	80019a2 <MPU6050_Configure+0x202>

	//general config
	dtw = __Descriptor->Config->DLPF_Frequency & 0x07;
 80017ee:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <MPU6050_Configure+0x20c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	785b      	ldrb	r3, [r3, #1]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Ext_Sync_Set << 3 & 0x38;
 80017fc:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <MPU6050_Configure+0x20c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	789b      	ldrb	r3, [r3, #2]
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	b25b      	sxtb	r3, r3
 8001808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800180c:	b25a      	sxtb	r2, r3
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	4313      	orrs	r3, r2
 8001814:	b25b      	sxtb	r3, r3
 8001816:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_CONFIG, dtw))
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4619      	mov	r1, r3
 800181c:	201a      	movs	r0, #26
 800181e:	f7ff ff57 	bl	80016d0 <MPU6050_Write_Reg>
 8001822:	4603      	mov	r3, r0
 8001824:	71bb      	strb	r3, [r7, #6]
 8001826:	79bb      	ldrb	r3, [r7, #6]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MPU6050_Configure+0x90>
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	e0b8      	b.n	80019a2 <MPU6050_Configure+0x202>

	// gyro config
	dtw = __Descriptor->Config->Gyro_Sensitivity << 3 & 0x18;
 8001830:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <MPU6050_Configure+0x20c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f003 0318 	and.w	r3, r3, #24
 8001840:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_GYRO_CONFIG, dtw))
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4619      	mov	r1, r3
 8001846:	201b      	movs	r0, #27
 8001848:	f7ff ff42 	bl	80016d0 <MPU6050_Write_Reg>
 800184c:	4603      	mov	r3, r0
 800184e:	71bb      	strb	r3, [r7, #6]
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MPU6050_Configure+0xba>
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	e0a3      	b.n	80019a2 <MPU6050_Configure+0x202>

	// accelero config
	dtw = __Descriptor->Config->Accelero_Sensitivity << 3 & 0x18;
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <MPU6050_Configure+0x20c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 0318 	and.w	r3, r3, #24
 800186a:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_ACCEL_CONFIG, dtw))
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4619      	mov	r1, r3
 8001870:	201c      	movs	r0, #28
 8001872:	f7ff ff2d 	bl	80016d0 <MPU6050_Write_Reg>
 8001876:	4603      	mov	r3, r0
 8001878:	71bb      	strb	r3, [r7, #6]
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MPU6050_Configure+0xe4>
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	e08e      	b.n	80019a2 <MPU6050_Configure+0x202>

	// FIFO enable
	dtw = __Descriptor->Config->Use_FIFO << 4 & 0x10;
 8001884:	4b49      	ldr	r3, [pc, #292]	; (80019ac <MPU6050_Configure+0x20c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	795b      	ldrb	r3, [r3, #5]
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_FIFO_EN, dtw))
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4619      	mov	r1, r3
 800189a:	2023      	movs	r0, #35	; 0x23
 800189c:	f7ff ff18 	bl	80016d0 <MPU6050_Write_Reg>
 80018a0:	4603      	mov	r3, r0
 80018a2:	71bb      	strb	r3, [r7, #6]
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MPU6050_Configure+0x10e>
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	e079      	b.n	80019a2 <MPU6050_Configure+0x202>

	// INT Pin config
	dtw = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->FSYNC_en 		<< 2;
 80018b2:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <MPU6050_Configure+0x20c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	795b      	ldrb	r3, [r3, #5]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	b25a      	sxtb	r2, r3
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->FSYNC_level 	<< 3;
 80018ca:	4b38      	ldr	r3, [pc, #224]	; (80019ac <MPU6050_Configure+0x20c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4313      	orrs	r3, r2
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->clear_type		<< 4;
 80018e2:	4b32      	ldr	r3, [pc, #200]	; (80019ac <MPU6050_Configure+0x20c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	78db      	ldrb	r3, [r3, #3]
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	b25a      	sxtb	r2, r3
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->latch_en 		<< 5;
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <MPU6050_Configure+0x20c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	789b      	ldrb	r3, [r3, #2]
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	b25a      	sxtb	r2, r3
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	4313      	orrs	r3, r2
 800190e:	b25b      	sxtb	r3, r3
 8001910:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->output_type	<< 6;
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <MPU6050_Configure+0x20c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	785b      	ldrb	r3, [r3, #1]
 800191c:	019b      	lsls	r3, r3, #6
 800191e:	b25a      	sxtb	r2, r3
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4313      	orrs	r3, r2
 8001926:	b25b      	sxtb	r3, r3
 8001928:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->level	 		<< 7;
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <MPU6050_Configure+0x20c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	01db      	lsls	r3, r3, #7
 8001936:	b25a      	sxtb	r2, r3
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4313      	orrs	r3, r2
 800193e:	b25b      	sxtb	r3, r3
 8001940:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_INT_PIN_CFG, dtw))
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4619      	mov	r1, r3
 8001946:	2037      	movs	r0, #55	; 0x37
 8001948:	f7ff fec2 	bl	80016d0 <MPU6050_Write_Reg>
 800194c:	4603      	mov	r3, r0
 800194e:	71bb      	strb	r3, [r7, #6]
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MPU6050_Configure+0x1ba>
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	e023      	b.n	80019a2 <MPU6050_Configure+0x202>

	// INT Enable
	dtw = __Descriptor->Config->Interrupt_Config->Mask_DRDY;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MPU6050_Configure+0x20c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	7a1b      	ldrb	r3, [r3, #8]
 8001964:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->Mask_MST_INT << 3;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MPU6050_Configure+0x20c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	79db      	ldrb	r3, [r3, #7]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	b25a      	sxtb	r2, r3
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	4313      	orrs	r3, r2
 800197a:	b25b      	sxtb	r3, r3
 800197c:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->Mask_FIFO << 4;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MPU6050_Configure+0x20c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	799b      	ldrb	r3, [r3, #6]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	b25a      	sxtb	r2, r3
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4313      	orrs	r3, r2
 8001992:	b25b      	sxtb	r3, r3
 8001994:	71fb      	strb	r3, [r7, #7]
	return MPU6050_Write_Reg(MPU6050_REG_INT_ENABLE, dtw);
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4619      	mov	r1, r3
 800199a:	2038      	movs	r0, #56	; 0x38
 800199c:	f7ff fe98 	bl	80016d0 <MPU6050_Write_Reg>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000029c 	.word	0x2000029c

080019b0 <MPU6050_FSM>:

void MPU6050_FSM(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef error;

	switch(state)
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <MPU6050_FSM+0xc4>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d82b      	bhi.n	8001a16 <MPU6050_FSM+0x66>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <MPU6050_FSM+0x14>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001a17 	.word	0x08001a17
 80019c8:	080019d5 	.word	0x080019d5
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	08001a17 	.word	0x08001a17
	{
	case MPU6050_STATE_NOT_INIT :
		//NOP
		break;
	case MPU6050_STATE_INIT :
		error = MPU6050_Configure();
 80019d4:	f7ff fee4 	bl	80017a0 <MPU6050_Configure>
 80019d8:	4603      	mov	r3, r0
 80019da:	71fb      	strb	r3, [r7, #7]
		error_count = 0;
 80019dc:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <MPU6050_FSM+0xc8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
		break;
 80019e2:	e01b      	b.n	8001a1c <MPU6050_FSM+0x6c>
	case MPU6050_STATE_READY :
		if(Flags.int_triggered)
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <MPU6050_FSM+0xcc>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d016      	beq.n	8001a1a <MPU6050_FSM+0x6a>
		{
			// read accelero : no error handling
			// TODO : if needed, handle the error of accelero read
			MPU6050_Read_Accelero_X();
 80019ec:	f7ff feb6 	bl	800175c <MPU6050_Read_Accelero_X>

			error = MPU6050_Read_Gyro();
 80019f0:	f7ff fe92 	bl	8001718 <MPU6050_Read_Gyro>
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]

			if(error!=HAL_OK) error_count++;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <MPU6050_FSM+0x58>
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MPU6050_FSM+0xc8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <MPU6050_FSM+0xc8>)
 8001a06:	6013      	str	r3, [r2, #0]

			Flags.new_data = TRUE;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MPU6050_FSM+0xcc>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	705a      	strb	r2, [r3, #1]

			Flags.int_triggered = FALSE;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MPU6050_FSM+0xcc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001a14:	e001      	b.n	8001a1a <MPU6050_FSM+0x6a>
	case MPU6050_STATE_ERROR :
		//NOP
		break;
	default :
		//NOP
		break;
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <MPU6050_FSM+0x6c>
		break;
 8001a1a:	bf00      	nop
	}

	switch(state)
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MPU6050_FSM+0xc4>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d820      	bhi.n	8001a66 <MPU6050_FSM+0xb6>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <MPU6050_FSM+0x7c>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a67 	.word	0x08001a67
 8001a30:	08001a3d 	.word	0x08001a3d
 8001a34:	08001a53 	.word	0x08001a53
 8001a38:	08001a67 	.word	0x08001a67
	{
	case MPU6050_STATE_NOT_INIT :
		//NOP
		break;
	case MPU6050_STATE_INIT :
		if(error==HAL_OK)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <MPU6050_FSM+0x9a>
			state = MPU6050_STATE_READY;
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MPU6050_FSM+0xc4>)
 8001a44:	2202      	movs	r2, #2
 8001a46:	701a      	strb	r2, [r3, #0]
		else
			state = MPU6050_STATE_ERROR;
		break;
 8001a48:	e010      	b.n	8001a6c <MPU6050_FSM+0xbc>
			state = MPU6050_STATE_ERROR;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <MPU6050_FSM+0xc4>)
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	701a      	strb	r2, [r3, #0]
		break;
 8001a50:	e00c      	b.n	8001a6c <MPU6050_FSM+0xbc>
	case MPU6050_STATE_READY :
		if(error_count>MPU6050_ERROR_LIMIT)
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MPU6050_FSM+0xc8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f647 7238 	movw	r2, #32568	; 0x7f38
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d905      	bls.n	8001a6a <MPU6050_FSM+0xba>
			state = MPU6050_STATE_ERROR;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <MPU6050_FSM+0xc4>)
 8001a60:	2203      	movs	r2, #3
 8001a62:	701a      	strb	r2, [r3, #0]
		break;
 8001a64:	e001      	b.n	8001a6a <MPU6050_FSM+0xba>
	case MPU6050_STATE_ERROR :
		//NOP
		break;
	default :
		//NOP
		break;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <MPU6050_FSM+0xbc>
		break;
 8001a6a:	bf00      	nop
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200002bb 	.word	0x200002bb
 8001a78:	200002bc 	.word	0x200002bc
 8001a7c:	200002b8 	.word	0x200002b8

08001a80 <MPU6050_Init>:


// public functions implementations

void MPU6050_Init(MPU6050_Descriptor_t * _Descriptor)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	Flags.int_triggered = 0;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MPU6050_Init+0x2c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	Flags.new_data = 0;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <MPU6050_Init+0x2c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	705a      	strb	r2, [r3, #1]

	__Descriptor = _Descriptor;
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <MPU6050_Init+0x30>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]

	state = MPU6050_STATE_INIT;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MPU6050_Init+0x34>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	200002b8 	.word	0x200002b8
 8001ab0:	2000029c 	.word	0x2000029c
 8001ab4:	200002bb 	.word	0x200002bb

08001ab8 <MPU6050_Process>:

void MPU6050_Process(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	MPU6050_FSM();
 8001abc:	f7ff ff78 	bl	80019b0 <MPU6050_FSM>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <MPU6050_Interrupt_Routine>:

void MPU6050_Interrupt_Routine(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	Flags.int_triggered = TRUE;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <MPU6050_Interrupt_Routine+0x14>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	200002b8 	.word	0x200002b8

08001adc <MPU6050_NewData>:

bool MPU6050_NewData(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	return Flags.new_data;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <MPU6050_NewData+0x14>)
 8001ae2:	785b      	ldrb	r3, [r3, #1]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200002b8 	.word	0x200002b8

08001af4 <MPU6050_GetData>:

float MPU6050_GetData(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
	float LSB_Scale;
	MPU6050_Data.unified = (int16_t)( (MPU6050_Data.raw[0] << 8) | MPU6050_Data.raw[1]);
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <MPU6050_GetData+0x90>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <MPU6050_GetData+0x90>)
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <MPU6050_GetData+0x90>)
 8001b0e:	805a      	strh	r2, [r3, #2]
	switch(__Descriptor->Config->Gyro_Sensitivity)
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MPU6050_GetData+0x94>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	78db      	ldrb	r3, [r3, #3]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d817      	bhi.n	8001b4c <MPU6050_GetData+0x58>
 8001b1c:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <MPU6050_GetData+0x30>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b3b 	.word	0x08001b3b
 8001b2c:	08001b41 	.word	0x08001b41
 8001b30:	08001b47 	.word	0x08001b47
	{
	case MPU6050_GYRO_SENSITIVITY_250:
		LSB_Scale = 131.0f;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MPU6050_GetData+0x98>)
 8001b36:	607b      	str	r3, [r7, #4]
		break;
 8001b38:	e00b      	b.n	8001b52 <MPU6050_GetData+0x5e>
	case MPU6050_GYRO_SENSITIVITY_500:
		LSB_Scale = 65.5f;
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MPU6050_GetData+0x9c>)
 8001b3c:	607b      	str	r3, [r7, #4]
		break;
 8001b3e:	e008      	b.n	8001b52 <MPU6050_GetData+0x5e>
	case MPU6050_GYRO_SENSITIVITY_1000:
		LSB_Scale = 32.8f;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MPU6050_GetData+0xa0>)
 8001b42:	607b      	str	r3, [r7, #4]
		break;
 8001b44:	e005      	b.n	8001b52 <MPU6050_GetData+0x5e>
	case MPU6050_GYRO_SENSITIVITY_2000:
		LSB_Scale = 16.4f;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MPU6050_GetData+0xa4>)
 8001b48:	607b      	str	r3, [r7, #4]
		break;
 8001b4a:	e002      	b.n	8001b52 <MPU6050_GetData+0x5e>
	default :
		LSB_Scale = 131.0f;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MPU6050_GetData+0x98>)
 8001b4e:	607b      	str	r3, [r7, #4]
		break;
 8001b50:	bf00      	nop
	}
	MPU6050_Data.scaled = (float)(MPU6050_Data.unified) / LSB_Scale;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MPU6050_GetData+0x90>)
 8001b54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b60:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MPU6050_GetData+0x90>)
 8001b6a:	edc3 7a01 	vstr	s15, [r3, #4]
	return MPU6050_Data.scaled;
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <MPU6050_GetData+0x90>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	ee07 3a90 	vmov	s15, r3
}
 8001b76:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	200002a0 	.word	0x200002a0
 8001b88:	2000029c 	.word	0x2000029c
 8001b8c:	43030000 	.word	0x43030000
 8001b90:	42830000 	.word	0x42830000
 8001b94:	42033333 	.word	0x42033333
 8001b98:	41833333 	.word	0x41833333

08001b9c <MPU6050_GetData_CF>:

float MPU6050_GetData_CF(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	Flags.new_data = FALSE;
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <MPU6050_GetData_CF+0x18>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	705a      	strb	r2, [r3, #1]
	return MPU6050_GetData();
 8001ba6:	f7ff ffa5 	bl	8001af4 <MPU6050_GetData>
 8001baa:	eef0 7a40 	vmov.f32	s15, s0
}
 8001bae:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200002b8 	.word	0x200002b8

08001bb8 <MPU6050_GetData_Accelero>:

// TODO : replicate the get_data and get_data_cf functions for accelerometers
float MPU6050_GetData_Accelero(short idx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
	float AFS_Scale;
	MPU6050_Data.unified_acc[0] = (int16_t)((MPU6050_Data.raw_acc[0] << 8) | MPU6050_Data.raw_acc[1]);
 8001bc2:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001bc4:	7a1b      	ldrb	r3, [r3, #8]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001bcc:	7a5b      	ldrb	r3, [r3, #9]
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001bd6:	819a      	strh	r2, [r3, #12]
	MPU6050_Data.unified_acc[1] = (int16_t)((MPU6050_Data.raw_acc[2] << 8) | MPU6050_Data.raw_acc[3]);
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001bda:	7a9b      	ldrb	r3, [r3, #10]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001be2:	7adb      	ldrb	r3, [r3, #11]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001bec:	81da      	strh	r2, [r3, #14]
	switch(__Descriptor->Config->Accelero_Sensitivity)
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <MPU6050_GetData_Accelero+0xdc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	791b      	ldrb	r3, [r3, #4]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d81a      	bhi.n	8001c30 <MPU6050_GetData_Accelero+0x78>
 8001bfa:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <MPU6050_GetData_Accelero+0x48>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c11 	.word	0x08001c11
 8001c04:	08001c19 	.word	0x08001c19
 8001c08:	08001c21 	.word	0x08001c21
 8001c0c:	08001c29 	.word	0x08001c29
	{
	case MPU6050_ACCELERO_SENSITIVITY_2:
		AFS_Scale = 16384.0f;
 8001c10:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001c14:	60fb      	str	r3, [r7, #12]
		break;
 8001c16:	e00f      	b.n	8001c38 <MPU6050_GetData_Accelero+0x80>
	case MPU6050_ACCELERO_SENSITIVITY_4:
		AFS_Scale = 8192.0f;
 8001c18:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001c1c:	60fb      	str	r3, [r7, #12]
		break;
 8001c1e:	e00b      	b.n	8001c38 <MPU6050_GetData_Accelero+0x80>
	case MPU6050_ACCELERO_SENSITIVITY_8:
		AFS_Scale = 4096.0f;
 8001c20:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001c24:	60fb      	str	r3, [r7, #12]
		break;
 8001c26:	e007      	b.n	8001c38 <MPU6050_GetData_Accelero+0x80>
	case MPU6050_ACCELERO_SENSITIVITY_16:
		AFS_Scale = 2048.0f;
 8001c28:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8001c2c:	60fb      	str	r3, [r7, #12]
		break;
 8001c2e:	e003      	b.n	8001c38 <MPU6050_GetData_Accelero+0x80>
	default :
		AFS_Scale = 16384.0f;
 8001c30:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001c34:	60fb      	str	r3, [r7, #12]
		break;
 8001c36:	bf00      	nop
	}
	MPU6050_Data.scaled_acc[0] = (float)(MPU6050_Data.unified_acc[0]) / AFS_Scale;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001c3a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c46:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001c50:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050_Data.scaled_acc[1] = (float)(MPU6050_Data.unified_acc[1]) / AFS_Scale;
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001c56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c62:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001c6c:	edc3 7a05 	vstr	s15, [r3, #20]
	return MPU6050_Data.scaled_acc[idx];
 8001c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <MPU6050_GetData_Accelero+0xd8>)
 8001c76:	3304      	adds	r3, #4
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	ee07 3a90 	vmov	s15, r3
}
 8001c82:	eeb0 0a67 	vmov.f32	s0, s15
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	200002a0 	.word	0x200002a0
 8001c94:	2000029c 	.word	0x2000029c

08001c98 <MPU6050_GetData_CF_Accelero>:

float MPU6050_GetData_CF_Accelero(short idx)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
	Flags.new_data = FALSE;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <MPU6050_GetData_CF_Accelero+0x28>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	705a      	strb	r2, [r3, #1]
	return MPU6050_GetData_Accelero(idx);
 8001ca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff83 	bl	8001bb8 <MPU6050_GetData_Accelero>
 8001cb2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200002b8 	.word	0x200002b8

08001cc4 <MPU6050_GetSampleRate>:
//	return MPU6050_GetData_Accelero_Z();
//}


float MPU6050_GetSampleRate(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
	float SRD = (float)(__Descriptor->Config->SampleRateDivider);
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MPU6050_GetSampleRate+0x58>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cda:	edc7 7a00 	vstr	s15, [r7]

	float GOR;

	if(__Descriptor->Config->DLPF_Frequency == MPU6050_DLPF_256Hz)
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MPU6050_GetSampleRate+0x58>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <MPU6050_GetSampleRate+0x2c>
		GOR = MPU6050_BASE_SAMPLERATE_DLPF_OFF;
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <MPU6050_GetSampleRate+0x5c>)
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	e001      	b.n	8001cf4 <MPU6050_GetSampleRate+0x30>
	else
		GOR = MPU6050_BASE_SAMPLERATE_DLPF_ON;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MPU6050_GetSampleRate+0x60>)
 8001cf2:	607b      	str	r3, [r7, #4]

	return GOR/(1+SRD);
 8001cf4:	edd7 7a00 	vldr	s15, [r7]
 8001cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d00:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d08:	eef0 7a66 	vmov.f32	s15, s13
}
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	2000029c 	.word	0x2000029c
 8001d20:	45fa0000 	.word	0x45fa0000
 8001d24:	447a0000 	.word	0x447a0000

08001d28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001d48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00b      	beq.n	8001d68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d50:	e000      	b.n	8001d54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f9      	beq.n	8001d52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e009      	b.n	8001da0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60ba      	str	r2, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ffc7 	bl	8001d28 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbf1      	blt.n	8001d8c <_write+0x16>
	return len;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	0000      	movs	r0, r0
 8001db4:	0000      	movs	r0, r0
	...

08001db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc0:	f000 fc57 	bl	8002672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc4:	f000 f8ca 	bl	8001f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc8:	f000 f9d0 	bl	800216c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dcc:	f000 f99e 	bl	800210c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001dd0:	f000 f926 	bl	8002020 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001dd4:	f000 f964 	bl	80020a0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim6, TIM_CHANNEL_1);

  MPU6050_Init(&MPU6050_Descriptor);
 8001dd8:	4855      	ldr	r0, [pc, #340]	; (8001f30 <main+0x178>)
 8001dda:	f7ff fe51 	bl	8001a80 <MPU6050_Init>
  Gyro_Init(&Gyro_Descriptor);
 8001dde:	4855      	ldr	r0, [pc, #340]	; (8001f34 <main+0x17c>)
 8001de0:	f7ff fbee 	bl	80015c0 <Gyro_Init>
  Accelero_Init(&Accelero_Descriptor);
 8001de4:	4854      	ldr	r0, [pc, #336]	; (8001f38 <main+0x180>)
 8001de6:	f7ff f9e7 	bl	80011b8 <Accelero_Init>

  t=HAL_GetTick();
 8001dea:	f000 fcab 	bl	8002744 <HAL_GetTick>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <main+0x184>)
 8001df2:	6013      	str	r3, [r2, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Process();
 8001df4:	f7ff fe60 	bl	8001ab8 <MPU6050_Process>
	  Gyro_Process();
 8001df8:	f7ff fc0a 	bl	8001610 <Gyro_Process>
	  Accelero_Process();
 8001dfc:	f7ff fa08 	bl	8001210 <Accelero_Process>
	  if(HAL_GetTick()>t+100)
 8001e00:	f000 fca0 	bl	8002744 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <main+0x184>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3364      	adds	r3, #100	; 0x64
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d9f1      	bls.n	8001df4 <main+0x3c>
	  {
		  t = HAL_GetTick();
 8001e10:	f000 fc98 	bl	8002744 <HAL_GetTick>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a49      	ldr	r2, [pc, #292]	; (8001f3c <main+0x184>)
 8001e18:	6013      	str	r3, [r2, #0]

		  if(Gyro_isReady()){
 8001e1a:	f7ff fbff 	bl	800161c <Gyro_isReady>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <main+0x80>
			  GZ_Data = 2 * Gyro_GetRot();
 8001e24:	f7ff fc0a 	bl	800163c <Gyro_GetRot>
 8001e28:	eef0 7a40 	vmov.f32	s15, s0
 8001e2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e30:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <main+0x188>)
 8001e32:	edc3 7a00 	vstr	s15, [r3]
 8001e36:	e006      	b.n	8001e46 <main+0x8e>

		  }
		  else{
			  GZ_Data = Gyro_GetCalibrationAdvancement();
 8001e38:	f7ff fc26 	bl	8001688 <Gyro_GetCalibrationAdvancement>
 8001e3c:	eef0 7a40 	vmov.f32	s15, s0
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <main+0x188>)
 8001e42:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(Accelero_isReady()){
 8001e46:	f7ff f9e9 	bl	800121c <Accelero_isReady>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d02a      	beq.n	8001ea6 <main+0xee>
			  Acc_Data_X = Accelero_GetAccX() - 0.11;
 8001e50:	f7ff f9f4 	bl	800123c <Accelero_GetAccX>
 8001e54:	ee10 3a10 	vmov	r3, s0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb75 	bl	8000548 <__aeabi_f2d>
 8001e5e:	a330      	add	r3, pc, #192	; (adr r3, 8001f20 <main+0x168>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fa10 	bl	8000288 <__aeabi_dsub>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fe9a 	bl	8000ba8 <__aeabi_d2f>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <main+0x18c>)
 8001e78:	6013      	str	r3, [r2, #0]
			  Acc_Data_Y = Accelero_GetAccY() + 0.02 ;
 8001e7a:	f7ff fa11 	bl	80012a0 <Accelero_GetAccY>
 8001e7e:	ee10 3a10 	vmov	r3, s0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fb60 	bl	8000548 <__aeabi_f2d>
 8001e88:	a327      	add	r3, pc, #156	; (adr r3, 8001f28 <main+0x170>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe f9fd 	bl	800028c <__adddf3>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fe85 	bl	8000ba8 <__aeabi_d2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <main+0x190>)
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e00d      	b.n	8001ec2 <main+0x10a>
		  }
		  else{
		  	  Acc_Data_X = Accelero_GetCalibrationAdvancement();
 8001ea6:	f7ff fa19 	bl	80012dc <Accelero_GetCalibrationAdvancement>
 8001eaa:	eef0 7a40 	vmov.f32	s15, s0
 8001eae:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <main+0x18c>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]
		  	  Acc_Data_Y = Accelero_GetCalibrationAdvancement();
 8001eb4:	f7ff fa12 	bl	80012dc <Accelero_GetCalibrationAdvancement>
 8001eb8:	eef0 7a40 	vmov.f32	s15, s0
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <main+0x190>)
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
		  }



		txlen = sprintf((char*)txbuffer, "RotZ: %0.02f AccX: %0.03f AccY: %0.03f\n\r", GZ_Data, Acc_Data_X, Acc_Data_Y);
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <main+0x188>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb3e 	bl	8000548 <__aeabi_f2d>
 8001ecc:	4680      	mov	r8, r0
 8001ece:	4689      	mov	r9, r1
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <main+0x18c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fb37 	bl	8000548 <__aeabi_f2d>
 8001eda:	4604      	mov	r4, r0
 8001edc:	460d      	mov	r5, r1
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <main+0x190>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb30 	bl	8000548 <__aeabi_f2d>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ef0:	e9cd 4500 	strd	r4, r5, [sp]
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	4914      	ldr	r1, [pc, #80]	; (8001f4c <main+0x194>)
 8001efa:	4815      	ldr	r0, [pc, #84]	; (8001f50 <main+0x198>)
 8001efc:	f004 f98c 	bl	8006218 <siprintf>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <main+0x19c>)
 8001f06:	801a      	strh	r2, [r3, #0]
//		txlen = sprintf((char*)txbuffer, "%0.02f %0.03f %0.03f \n\r", GZ_Data, Acc_Data_X, Acc_Data_Y);
		HAL_UART_Transmit(&huart2, txbuffer, txlen, HAL_MAX_DELAY);
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <main+0x19c>)
 8001f0a:	881a      	ldrh	r2, [r3, #0]
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f10:	490f      	ldr	r1, [pc, #60]	; (8001f50 <main+0x198>)
 8001f12:	4811      	ldr	r0, [pc, #68]	; (8001f58 <main+0x1a0>)
 8001f14:	f002 ffe8 	bl	8004ee8 <HAL_UART_Transmit>
	  MPU6050_Process();
 8001f18:	e76c      	b.n	8001df4 <main+0x3c>
 8001f1a:	bf00      	nop
 8001f1c:	f3af 8000 	nop.w
 8001f20:	c28f5c29 	.word	0xc28f5c29
 8001f24:	3fbc28f5 	.word	0x3fbc28f5
 8001f28:	47ae147b 	.word	0x47ae147b
 8001f2c:	3f947ae1 	.word	0x3f947ae1
 8001f30:	20000018 	.word	0x20000018
 8001f34:	2000002c 	.word	0x2000002c
 8001f38:	20000034 	.word	0x20000034
 8001f3c:	20000434 	.word	0x20000434
 8001f40:	20000428 	.word	0x20000428
 8001f44:	2000042c 	.word	0x2000042c
 8001f48:	20000430 	.word	0x20000430
 8001f4c:	080084e8 	.word	0x080084e8
 8001f50:	200003e4 	.word	0x200003e4
 8001f54:	20000424 	.word	0x20000424
 8001f58:	20000360 	.word	0x20000360

08001f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b096      	sub	sp, #88	; 0x58
 8001f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	2244      	movs	r2, #68	; 0x44
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 f9b7 	bl	80062de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f70:	463b      	mov	r3, r7
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f82:	f001 fcbb 	bl	80038fc <HAL_PWREx_ControlVoltageScaling>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f8c:	f000 f94e 	bl	800222c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f90:	f001 fc96 	bl	80038c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <SystemClock_Config+0xc0>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a20      	ldr	r2, [pc, #128]	; (800201c <SystemClock_Config+0xc0>)
 8001f9c:	f023 0318 	bic.w	r3, r3, #24
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001fa4:	2314      	movs	r3, #20
 8001fa6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fac:	2301      	movs	r3, #1
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fb4:	2360      	movs	r3, #96	; 0x60
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 fce5 	bl	80039a8 <HAL_RCC_OscConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001fe4:	f000 f922 	bl	800222c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe8:	230f      	movs	r3, #15
 8001fea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fec:	2303      	movs	r3, #3
 8001fee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2101      	movs	r1, #1
 8002000:	4618      	mov	r0, r3
 8002002:	f002 f8e5 	bl	80041d0 <HAL_RCC_ClockConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800200c:	f000 f90e 	bl	800222c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002010:	f002 fcf8 	bl	8004a04 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002014:	bf00      	nop
 8002016:	3758      	adds	r7, #88	; 0x58
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000

08002020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_I2C1_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <MX_I2C1_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6010C7FF;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_I2C1_Init+0x74>)
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <MX_I2C1_Init+0x7c>)
 800202e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_I2C1_Init+0x74>)
 8002038:	2201      	movs	r2, #1
 800203a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_I2C1_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_I2C1_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C1_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C1_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <MX_I2C1_Init+0x74>)
 800205c:	f000 fe35 	bl	8002cca <HAL_I2C_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002066:	f000 f8e1 	bl	800222c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <MX_I2C1_Init+0x74>)
 800206e:	f001 fb8f 	bl	8003790 <HAL_I2CEx_ConfigAnalogFilter>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002078:	f000 f8d8 	bl	800222c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800207c:	2100      	movs	r1, #0
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_I2C1_Init+0x74>)
 8002080:	f001 fbd1 	bl	8003826 <HAL_I2CEx_ConfigDigitalFilter>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800208a:	f000 f8cf 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200002c0 	.word	0x200002c0
 8002098:	40005400 	.word	0x40005400
 800209c:	6010c7ff 	.word	0x6010c7ff

080020a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <MX_TIM6_Init+0x64>)
 80020b2:	4a15      	ldr	r2, [pc, #84]	; (8002108 <MX_TIM6_Init+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <MX_TIM6_Init+0x64>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_TIM6_Init+0x64>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <MX_TIM6_Init+0x64>)
 80020c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_TIM6_Init+0x64>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <MX_TIM6_Init+0x64>)
 80020d2:	f002 fd99 	bl	8004c08 <HAL_TIM_Base_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80020dc:	f000 f8a6 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_TIM6_Init+0x64>)
 80020ee:	f002 fe47 	bl	8004d80 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80020f8:	f000 f898 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000314 	.word	0x20000314
 8002108:	40001000 	.word	0x40001000

0800210c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002110:	4b14      	ldr	r3, [pc, #80]	; (8002164 <MX_USART2_UART_Init+0x58>)
 8002112:	4a15      	ldr	r2, [pc, #84]	; (8002168 <MX_USART2_UART_Init+0x5c>)
 8002114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <MX_USART2_UART_Init+0x58>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_USART2_UART_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <MX_USART2_UART_Init+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_USART2_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_USART2_UART_Init+0x58>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <MX_USART2_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_USART2_UART_Init+0x58>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MX_USART2_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_USART2_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_USART2_UART_Init+0x58>)
 8002150:	f002 fe7c 	bl	8004e4c <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800215a:	f000 f867 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000360 	.word	0x20000360
 8002168:	40004400 	.word	0x40004400

0800216c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <MX_GPIO_Init+0xb8>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <MX_GPIO_Init+0xb8>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <MX_GPIO_Init+0xb8>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <MX_GPIO_Init+0xb8>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a21      	ldr	r2, [pc, #132]	; (8002224 <MX_GPIO_Init+0xb8>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <MX_GPIO_Init+0xb8>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <MX_GPIO_Init+0xb8>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a1b      	ldr	r2, [pc, #108]	; (8002224 <MX_GPIO_Init+0xb8>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <MX_GPIO_Init+0xb8>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2108      	movs	r1, #8
 80021ce:	4816      	ldr	r0, [pc, #88]	; (8002228 <MX_GPIO_Init+0xbc>)
 80021d0:	f000 fd40 	bl	8002c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80021d4:	2308      	movs	r3, #8
 80021d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4619      	mov	r1, r3
 80021ea:	480f      	ldr	r0, [pc, #60]	; (8002228 <MX_GPIO_Init+0xbc>)
 80021ec:	f000 fbc8 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021f0:	2310      	movs	r3, #16
 80021f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 030c 	add.w	r3, r7, #12
 8002202:	4619      	mov	r1, r3
 8002204:	4808      	ldr	r0, [pc, #32]	; (8002228 <MX_GPIO_Init+0xbc>)
 8002206:	f000 fbbb 	bl	8002980 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	200a      	movs	r0, #10
 8002210:	f000 fb7f 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002214:	200a      	movs	r0, #10
 8002216:	f000 fb98 	bl	800294a <HAL_NVIC_EnableIRQ>

}
 800221a:	bf00      	nop
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	48000400 	.word	0x48000400

0800222c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002230:	b672      	cpsid	i
}
 8002232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002234:	e7fe      	b.n	8002234 <Error_Handler+0x8>
	...

08002238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_MspInit+0x44>)
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	4a0e      	ldr	r2, [pc, #56]	; (800227c <HAL_MspInit+0x44>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6613      	str	r3, [r2, #96]	; 0x60
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_MspInit+0x44>)
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_MspInit+0x44>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <HAL_MspInit+0x44>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6593      	str	r3, [r2, #88]	; 0x58
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_MspInit+0x44>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b09e      	sub	sp, #120	; 0x78
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	2254      	movs	r2, #84	; 0x54
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 f81c 	bl	80062de <memset>
  if(hi2c->Instance==I2C1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_I2C_MspInit+0xa8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d137      	bne.n	8002320 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022b0:	2340      	movs	r3, #64	; 0x40
 80022b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 f9ab 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80022c8:	f7ff ffb0 	bl	800222c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_I2C_MspInit+0xac>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_I2C_MspInit+0xac>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_I2C_MspInit+0xac>)
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ea:	2312      	movs	r3, #18
 80022ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022f6:	2304      	movs	r3, #4
 80022f8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002304:	f000 fb3c 	bl	8002980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_I2C_MspInit+0xac>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_I2C_MspInit+0xac>)
 800230e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002312:	6593      	str	r3, [r2, #88]	; 0x58
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_I2C_MspInit+0xac>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	3778      	adds	r7, #120	; 0x78
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40005400 	.word	0x40005400
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_TIM_Base_MspInit+0x38>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10b      	bne.n	800235a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_TIM_Base_MspInit+0x3c>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_TIM_Base_MspInit+0x3c>)
 8002348:	f043 0310 	orr.w	r3, r3, #16
 800234c:	6593      	str	r3, [r2, #88]	; 0x58
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_TIM_Base_MspInit+0x3c>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40001000 	.word	0x40001000
 800236c:	40021000 	.word	0x40021000

08002370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b09e      	sub	sp, #120	; 0x78
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	2254      	movs	r2, #84	; 0x54
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f003 ffa4 	bl	80062de <memset>
  if(huart->Instance==USART2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_UART_MspInit+0xcc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d148      	bne.n	8002432 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023a0:	2302      	movs	r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 f933 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023b8:	f7ff ff38 	bl	800222c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <HAL_UART_MspInit+0xd0>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <HAL_UART_MspInit+0xd0>)
 80023c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c6:	6593      	str	r3, [r2, #88]	; 0x58
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_UART_MspInit+0xd0>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_UART_MspInit+0xd0>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_UART_MspInit+0xd0>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_UART_MspInit+0xd0>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80023ec:	2304      	movs	r3, #4
 80023ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023fc:	2307      	movs	r3, #7
 80023fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002404:	4619      	mov	r1, r3
 8002406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240a:	f000 fab9 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800240e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002412:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002420:	2303      	movs	r3, #3
 8002422:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002424:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f000 faa7 	bl	8002980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3778      	adds	r7, #120	; 0x78
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40004400 	.word	0x40004400
 8002440:	40021000 	.word	0x40021000

08002444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <NMI_Handler+0x4>

0800244a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <MemManage_Handler+0x4>

08002456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <BusFault_Handler+0x4>

0800245c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <UsageFault_Handler+0x4>

08002462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002490:	f000 f944 	bl	800271c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800249c:	2010      	movs	r0, #16
 800249e:	f000 fbf1 	bl	8002c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  MPU6050_Interrupt_Routine();
 80024a2:	f7ff fb0f 	bl	8001ac4 <MPU6050_Interrupt_Routine>
  /* USER CODE END EXTI4_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
	return 1;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_kill>:

int _kill(int pid, int sig)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024c4:	f003 ff5e 	bl	8006384 <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2216      	movs	r2, #22
 80024cc:	601a      	str	r2, [r3, #0]
	return -1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_exit>:

void _exit (int status)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffe7 	bl	80024ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ec:	e7fe      	b.n	80024ec <_exit+0x12>

080024ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e00a      	b.n	8002516 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002500:	f3af 8000 	nop.w
 8002504:	4601      	mov	r1, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	60ba      	str	r2, [r7, #8]
 800250c:	b2ca      	uxtb	r2, r1
 800250e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	dbf0      	blt.n	8002500 <_read+0x12>
	}

return len;
 800251e:	687b      	ldr	r3, [r7, #4]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002550:	605a      	str	r2, [r3, #4]
	return 0;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_isatty>:

int _isatty(int file)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	return 1;
 8002568:	2301      	movs	r3, #1
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
	return 0;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <_sbrk+0x5c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <_sbrk+0x60>)
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <_sbrk+0x64>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <_sbrk+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c0:	f003 fee0 	bl	8006384 <__errno>
 80025c4:	4603      	mov	r3, r0
 80025c6:	220c      	movs	r2, #12
 80025c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ce:	e009      	b.n	80025e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <_sbrk+0x64>)
 80025e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20010000 	.word	0x20010000
 80025f0:	00000400 	.word	0x00000400
 80025f4:	20000438 	.word	0x20000438
 80025f8:	20000590 	.word	0x20000590

080025fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <SystemInit+0x20>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <SystemInit+0x20>)
 8002608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800260c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002624:	f7ff ffea 	bl	80025fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002628:	480c      	ldr	r0, [pc, #48]	; (800265c <LoopForever+0x6>)
  ldr r1, =_edata
 800262a:	490d      	ldr	r1, [pc, #52]	; (8002660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800262c:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <LoopForever+0xe>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002640:	4c0a      	ldr	r4, [pc, #40]	; (800266c <LoopForever+0x16>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800264e:	f003 fe9f 	bl	8006390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002652:	f7ff fbb1 	bl	8001db8 <main>

08002656 <LoopForever>:

LoopForever:
    b LoopForever
 8002656:	e7fe      	b.n	8002656 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002658:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800265c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002660:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002664:	080088dc 	.word	0x080088dc
  ldr r2, =_sbss
 8002668:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800266c:	2000058c 	.word	0x2000058c

08002670 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002670:	e7fe      	b.n	8002670 <ADC1_IRQHandler>

08002672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 f93d 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002682:	2000      	movs	r0, #0
 8002684:	f000 f80e 	bl	80026a4 <HAL_InitTick>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	71fb      	strb	r3, [r7, #7]
 8002692:	e001      	b.n	8002698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002694:	f7ff fdd0 	bl	8002238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002698:	79fb      	ldrb	r3, [r7, #7]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026b0:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_InitTick+0x6c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d023      	beq.n	8002700 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_InitTick+0x70>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_InitTick+0x6c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f949 	bl	8002966 <HAL_SYSTICK_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b0f      	cmp	r3, #15
 80026de:	d809      	bhi.n	80026f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e0:	2200      	movs	r2, #0
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e8:	f000 f913 	bl	8002912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026ec:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <HAL_InitTick+0x74>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e007      	b.n	8002704 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e004      	b.n	8002704 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e001      	b.n	8002704 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000040 	.word	0x20000040
 8002714:	20000038 	.word	0x20000038
 8002718:	2000003c 	.word	0x2000003c

0800271c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000040 	.word	0x20000040
 8002740:	2000043c 	.word	0x2000043c

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000043c 	.word	0x2000043c

0800275c <__NVIC_SetPriorityGrouping>:
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_GetPriorityGrouping>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_EnableIRQ>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0b      	blt.n	80027ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <__NVIC_EnableIRQ+0x38>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff29 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff3e 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff31 	bl	80027c0 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffa2 	bl	80028b8 <SysTick_Config>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298e:	e148      	b.n	8002c22 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 813a 	beq.w	8002c1c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d005      	beq.n	80029c0 <HAL_GPIO_Init+0x40>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d130      	bne.n	8002a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029f6:	2201      	movs	r2, #1
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	f003 0201 	and.w	r2, r3, #1
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d017      	beq.n	8002a5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	2203      	movs	r2, #3
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d123      	bne.n	8002ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3208      	adds	r2, #8
 8002aac:	6939      	ldr	r1, [r7, #16]
 8002aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0203 	and.w	r2, r3, #3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8094 	beq.w	8002c1c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af4:	4b52      	ldr	r3, [pc, #328]	; (8002c40 <HAL_GPIO_Init+0x2c0>)
 8002af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af8:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <HAL_GPIO_Init+0x2c0>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6613      	str	r3, [r2, #96]	; 0x60
 8002b00:	4b4f      	ldr	r3, [pc, #316]	; (8002c40 <HAL_GPIO_Init+0x2c0>)
 8002b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b0c:	4a4d      	ldr	r2, [pc, #308]	; (8002c44 <HAL_GPIO_Init+0x2c4>)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b36:	d00d      	beq.n	8002b54 <HAL_GPIO_Init+0x1d4>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a43      	ldr	r2, [pc, #268]	; (8002c48 <HAL_GPIO_Init+0x2c8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d007      	beq.n	8002b50 <HAL_GPIO_Init+0x1d0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a42      	ldr	r2, [pc, #264]	; (8002c4c <HAL_GPIO_Init+0x2cc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_GPIO_Init+0x1cc>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e004      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b4c:	2307      	movs	r3, #7
 8002b4e:	e002      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b54:	2300      	movs	r3, #0
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	f002 0203 	and.w	r2, r2, #3
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	4093      	lsls	r3, r2
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b66:	4937      	ldr	r1, [pc, #220]	; (8002c44 <HAL_GPIO_Init+0x2c4>)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b74:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b98:	4a2d      	ldr	r2, [pc, #180]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bc2:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bec:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f47f aeaf 	bne.w	8002990 <HAL_GPIO_Init+0x10>
  }
}
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40010000 	.word	0x40010000
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	48000800 	.word	0x48000800
 8002c50:	40010400 	.word	0x40010400

08002c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
 8002c60:	4613      	mov	r3, r2
 8002c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c64:	787b      	ldrb	r3, [r7, #1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f806 	bl	8002cb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40010400 	.word	0x40010400

08002cb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e081      	b.n	8002de0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fac5 	bl	8002280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2224      	movs	r2, #36	; 0x24
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	e006      	b.n	8002d52 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d104      	bne.n	8002d64 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d62:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d76:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d86:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69d9      	ldr	r1, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	813b      	strh	r3, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	f040 80f9 	bne.w	8003002 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_I2C_Mem_Write+0x34>
 8002e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d105      	bne.n	8002e28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0ed      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_I2C_Mem_Write+0x4e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0e6      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e3e:	f7ff fc81 	bl	8002744 <HAL_GetTick>
 8002e42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2319      	movs	r3, #25
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fac3 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0d1      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2221      	movs	r2, #33	; 0x21
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a3a      	ldr	r2, [r7, #32]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e88:	88f8      	ldrh	r0, [r7, #6]
 8002e8a:	893a      	ldrh	r2, [r7, #8]
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	4603      	mov	r3, r0
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f9d3 	bl	8003244 <I2C_RequestMemoryWrite>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0a9      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2bff      	cmp	r3, #255	; 0xff
 8002eb8:	d90e      	bls.n	8002ed8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	22ff      	movs	r2, #255	; 0xff
 8002ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	8979      	ldrh	r1, [r7, #10]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fc2b 	bl	800372c <I2C_TransferConfig>
 8002ed6:	e00f      	b.n	8002ef8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	8979      	ldrh	r1, [r7, #10]
 8002eea:	2300      	movs	r3, #0
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fc1a 	bl	800372c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 faad 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e07b      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d034      	beq.n	8002fb0 <HAL_I2C_Mem_Write+0x1c8>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d130      	bne.n	8002fb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	2200      	movs	r2, #0
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fa3f 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e04d      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2bff      	cmp	r3, #255	; 0xff
 8002f70:	d90e      	bls.n	8002f90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	2300      	movs	r3, #0
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fbcf 	bl	800372c <I2C_TransferConfig>
 8002f8e:	e00f      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	8979      	ldrh	r1, [r7, #10]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fbbe 	bl	800372c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d19e      	bne.n	8002ef8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fa8c 	bl	80034dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e01a      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_I2C_Mem_Write+0x224>)
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	fe00e800 	.word	0xfe00e800

08003010 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	4608      	mov	r0, r1
 800301a:	4611      	mov	r1, r2
 800301c:	461a      	mov	r2, r3
 800301e:	4603      	mov	r3, r0
 8003020:	817b      	strh	r3, [r7, #10]
 8003022:	460b      	mov	r3, r1
 8003024:	813b      	strh	r3, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	f040 80fd 	bne.w	8003232 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_I2C_Mem_Read+0x34>
 800303e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0f1      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_I2C_Mem_Read+0x4e>
 800305a:	2302      	movs	r3, #2
 800305c:	e0ea      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003066:	f7ff fb6d 	bl	8002744 <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2319      	movs	r3, #25
 8003072:	2201      	movs	r2, #1
 8003074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f9af 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0d5      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2222      	movs	r2, #34	; 0x22
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b0:	88f8      	ldrh	r0, [r7, #6]
 80030b2:	893a      	ldrh	r2, [r7, #8]
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	4603      	mov	r3, r0
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f913 	bl	80032ec <I2C_RequestMemoryRead>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0ad      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2bff      	cmp	r3, #255	; 0xff
 80030e0:	d90e      	bls.n	8003100 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	22ff      	movs	r2, #255	; 0xff
 80030e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	8979      	ldrh	r1, [r7, #10]
 80030f0:	4b52      	ldr	r3, [pc, #328]	; (800323c <HAL_I2C_Mem_Read+0x22c>)
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fb17 	bl	800372c <I2C_TransferConfig>
 80030fe:	e00f      	b.n	8003120 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310e:	b2da      	uxtb	r2, r3
 8003110:	8979      	ldrh	r1, [r7, #10]
 8003112:	4b4a      	ldr	r3, [pc, #296]	; (800323c <HAL_I2C_Mem_Read+0x22c>)
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fb06 	bl	800372c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	2200      	movs	r2, #0
 8003128:	2104      	movs	r1, #4
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f956 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07c      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d034      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x1d0>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	d130      	bne.n	80031e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f927 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e04d      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2bff      	cmp	r3, #255	; 0xff
 80031a0:	d90e      	bls.n	80031c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	2300      	movs	r3, #0
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fab7 	bl	800372c <I2C_TransferConfig>
 80031be:	e00f      	b.n	80031e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 faa6 	bl	800372c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d19a      	bne.n	8003120 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f974 	bl	80034dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e01a      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2220      	movs	r2, #32
 8003204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_I2C_Mem_Read+0x230>)
 8003212:	400b      	ands	r3, r1
 8003214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	80002400 	.word	0x80002400
 8003240:	fe00e800 	.word	0xfe00e800

08003244 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	4608      	mov	r0, r1
 800324e:	4611      	mov	r1, r2
 8003250:	461a      	mov	r2, r3
 8003252:	4603      	mov	r3, r0
 8003254:	817b      	strh	r3, [r7, #10]
 8003256:	460b      	mov	r3, r1
 8003258:	813b      	strh	r3, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <I2C_RequestMemoryWrite+0xa4>)
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fa5d 	bl	800372c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	69b9      	ldr	r1, [r7, #24]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8f0 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e02c      	b.n	80032e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800328c:	893b      	ldrh	r3, [r7, #8]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
 8003296:	e015      	b.n	80032c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003298:	893b      	ldrh	r3, [r7, #8]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	b29b      	uxth	r3, r3
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f8d6 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e012      	b.n	80032e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ba:	893b      	ldrh	r3, [r7, #8]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f884 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	80002000 	.word	0x80002000

080032ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	817b      	strh	r3, [r7, #10]
 80032fe:	460b      	mov	r3, r1
 8003300:	813b      	strh	r3, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	8979      	ldrh	r1, [r7, #10]
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <I2C_RequestMemoryRead+0xa4>)
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fa0a 	bl	800372c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f89d 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e02c      	b.n	8003386 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003332:	893b      	ldrh	r3, [r7, #8]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
 800333c:	e015      	b.n	800336a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800333e:	893b      	ldrh	r3, [r7, #8]
 8003340:	0a1b      	lsrs	r3, r3, #8
 8003342:	b29b      	uxth	r3, r3
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	69b9      	ldr	r1, [r7, #24]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f883 	bl	800345c <I2C_WaitOnTXISFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e012      	b.n	8003386 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003360:	893b      	ldrh	r3, [r7, #8]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2200      	movs	r2, #0
 8003372:	2140      	movs	r1, #64	; 0x40
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f831 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	80002000 	.word	0x80002000

08003394 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d103      	bne.n	80033b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d007      	beq.n	80033d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	619a      	str	r2, [r3, #24]
  }
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ec:	e022      	b.n	8003434 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f4:	d01e      	beq.n	8003434 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7ff f9a5 	bl	8002744 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d113      	bne.n	8003434 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e00f      	b.n	8003454 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	429a      	cmp	r2, r3
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	429a      	cmp	r2, r3
 8003450:	d0cd      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003468:	e02c      	b.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f870 	bl	8003554 <I2C_IsErrorOccurred>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e02a      	b.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003484:	d01e      	beq.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7ff f95d 	bl	8002744 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d113      	bne.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e007      	b.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d1cb      	bne.n	800346a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e8:	e028      	b.n	800353c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f830 	bl	8003554 <I2C_IsErrorOccurred>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e026      	b.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	f7ff f921 	bl	8002744 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	d302      	bcc.n	8003514 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d113      	bne.n	800353c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e007      	b.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	d1cf      	bne.n	80034ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d075      	beq.n	800366c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2210      	movs	r2, #16
 8003586:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003588:	e056      	b.n	8003638 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003590:	d052      	beq.n	8003638 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7ff f8d7 	bl	8002744 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_IsErrorOccurred+0x54>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d147      	bne.n	8003638 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ca:	d12e      	bne.n	800362a <I2C_IsErrorOccurred+0xd6>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d2:	d02a      	beq.n	800362a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d027      	beq.n	800362a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035ea:	f7ff f8ab 	bl	8002744 <HAL_GetTick>
 80035ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f0:	e01b      	b.n	800362a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035f2:	f7ff f8a7 	bl	8002744 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b19      	cmp	r3, #25
 80035fe:	d914      	bls.n	800362a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b20      	cmp	r3, #32
 8003636:	d1dc      	bne.n	80035f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b20      	cmp	r3, #32
 8003644:	d003      	beq.n	800364e <I2C_IsErrorOccurred+0xfa>
 8003646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800364a:	2b00      	cmp	r3, #0
 800364c:	d09d      	beq.n	800358a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800364e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2220      	movs	r2, #32
 800365c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800368e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f043 0308 	orr.w	r3, r3, #8
 80036a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01c      	beq.n	800371c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff fe56 	bl	8003394 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <I2C_IsErrorOccurred+0x1d4>)
 80036f4:	400b      	ands	r3, r1
 80036f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800371c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003720:	4618      	mov	r0, r3
 8003722:	3728      	adds	r7, #40	; 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	fe00e800 	.word	0xfe00e800

0800372c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	4613      	mov	r3, r2
 800373c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800373e:	897b      	ldrh	r3, [r7, #10]
 8003740:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003744:	7a7b      	ldrb	r3, [r7, #9]
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800374c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	4313      	orrs	r3, r2
 8003756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800375a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	0d5b      	lsrs	r3, r3, #21
 8003766:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <I2C_TransferConfig+0x60>)
 800376c:	430b      	orrs	r3, r1
 800376e:	43db      	mvns	r3, r3
 8003770:	ea02 0103 	and.w	r1, r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	03ff63ff 	.word	0x03ff63ff

08003790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d138      	bne.n	8003818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e032      	b.n	800381a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	d139      	bne.n	80038b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003846:	2302      	movs	r3, #2
 8003848:	e033      	b.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2224      	movs	r2, #36	; 0x24
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e000      	b.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ce:	6013      	str	r3, [r2, #0]
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40007000 	.word	0x40007000

080038e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40007000 	.word	0x40007000

080038fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390a:	d130      	bne.n	800396e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800390c:	4b23      	ldr	r3, [pc, #140]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003918:	d038      	beq.n	800398c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2232      	movs	r2, #50	; 0x32
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0c9b      	lsrs	r3, r3, #18
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003940:	e002      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3b01      	subs	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003954:	d102      	bne.n	800395c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f2      	bne.n	8003942 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003968:	d110      	bne.n	800398c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e00f      	b.n	800398e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397a:	d007      	beq.n	800398c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003984:	4a05      	ldr	r2, [pc, #20]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40007000 	.word	0x40007000
 80039a0:	20000038 	.word	0x20000038
 80039a4:	431bde83 	.word	0x431bde83

080039a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f000 bc02 	b.w	80041c0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039bc:	4b96      	ldr	r3, [pc, #600]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c6:	4b94      	ldr	r3, [pc, #592]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80e4 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <HAL_RCC_OscConfig+0x4c>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	f040 808b 	bne.w	8003b02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	f040 8087 	bne.w	8003b02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039f4:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_OscConfig+0x64>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e3d9      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1a      	ldr	r2, [r3, #32]
 8003a10:	4b81      	ldr	r3, [pc, #516]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <HAL_RCC_OscConfig+0x7e>
 8003a1c:	4b7e      	ldr	r3, [pc, #504]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a24:	e005      	b.n	8003a32 <HAL_RCC_OscConfig+0x8a>
 8003a26:	4b7c      	ldr	r3, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d223      	bcs.n	8003a7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fd8c 	bl	8004558 <RCC_SetFlashLatencyFromMSIRange>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e3ba      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a4a:	4b73      	ldr	r3, [pc, #460]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a72      	ldr	r2, [pc, #456]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a50:	f043 0308 	orr.w	r3, r3, #8
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b70      	ldr	r3, [pc, #448]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	496d      	ldr	r1, [pc, #436]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a68:	4b6b      	ldr	r3, [pc, #428]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	4968      	ldr	r1, [pc, #416]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
 8003a7c:	e025      	b.n	8003aca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a7e:	4b66      	ldr	r3, [pc, #408]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a65      	ldr	r2, [pc, #404]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b63      	ldr	r3, [pc, #396]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	4960      	ldr	r1, [pc, #384]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a9c:	4b5e      	ldr	r3, [pc, #376]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	495b      	ldr	r1, [pc, #364]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fd4c 	bl	8004558 <RCC_SetFlashLatencyFromMSIRange>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e37a      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aca:	f000 fc81 	bl	80043d0 <HAL_RCC_GetSysClockFreq>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	4950      	ldr	r1, [pc, #320]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae6:	4a4e      	ldr	r2, [pc, #312]	; (8003c20 <HAL_RCC_OscConfig+0x278>)
 8003ae8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aea:	4b4e      	ldr	r3, [pc, #312]	; (8003c24 <HAL_RCC_OscConfig+0x27c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fdd8 	bl	80026a4 <HAL_InitTick>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d052      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	e35e      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d032      	beq.n	8003b70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b0a:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a42      	ldr	r2, [pc, #264]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b16:	f7fe fe15 	bl	8002744 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b1e:	f7fe fe11 	bl	8002744 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e347      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b3c:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a35      	ldr	r2, [pc, #212]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b42:	f043 0308 	orr.w	r3, r3, #8
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4930      	ldr	r1, [pc, #192]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b5a:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	492b      	ldr	r1, [pc, #172]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]
 8003b6e:	e01a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b70:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a28      	ldr	r2, [pc, #160]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fde2 	bl	8002744 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b84:	f7fe fdde 	bl	8002744 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e314      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x1dc>
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ba4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d073      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x21c>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d10e      	bne.n	8003bdc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d10b      	bne.n	8003bdc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d063      	beq.n	8003c98 <HAL_RCC_OscConfig+0x2f0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d15f      	bne.n	8003c98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e2f1      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be4:	d106      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x24c>
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a0b      	ldr	r2, [pc, #44]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e025      	b.n	8003c40 <HAL_RCC_OscConfig+0x298>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfc:	d114      	bne.n	8003c28 <HAL_RCC_OscConfig+0x280>
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a05      	ldr	r2, [pc, #20]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a02      	ldr	r2, [pc, #8]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e013      	b.n	8003c40 <HAL_RCC_OscConfig+0x298>
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	08008514 	.word	0x08008514
 8003c20:	20000038 	.word	0x20000038
 8003c24:	2000003c 	.word	0x2000003c
 8003c28:	4ba0      	ldr	r3, [pc, #640]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a9f      	ldr	r2, [pc, #636]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b9d      	ldr	r3, [pc, #628]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a9c      	ldr	r2, [pc, #624]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fe fd7c 	bl	8002744 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fe fd78 	bl	8002744 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e2ae      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c62:	4b92      	ldr	r3, [pc, #584]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x2a8>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fd68 	bl	8002744 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fe fd64 	bl	8002744 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e29a      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8a:	4b88      	ldr	r3, [pc, #544]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x2d0>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d060      	beq.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x310>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d119      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d116      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb8:	4b7c      	ldr	r3, [pc, #496]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x328>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e277      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b76      	ldr	r3, [pc, #472]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	4973      	ldr	r1, [pc, #460]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce4:	e040      	b.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d023      	beq.n	8003d36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cee:	4b6f      	ldr	r3, [pc, #444]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6e      	ldr	r2, [pc, #440]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fe fd23 	bl	8002744 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fe fd1f 	bl	8002744 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e255      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d14:	4b65      	ldr	r3, [pc, #404]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b62      	ldr	r3, [pc, #392]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	495f      	ldr	r1, [pc, #380]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
 8003d34:	e018      	b.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a5c      	ldr	r2, [pc, #368]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fe fcff 	bl	8002744 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4a:	f7fe fcfb 	bl	8002744 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e231      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d03c      	beq.n	8003dee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d82:	4a4a      	ldr	r2, [pc, #296]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fe fcda 	bl	8002744 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fe fcd6 	bl	8002744 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e20c      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ef      	beq.n	8003d94 <HAL_RCC_OscConfig+0x3ec>
 8003db4:	e01b      	b.n	8003dee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dbc:	4a3b      	ldr	r2, [pc, #236]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fe fcbd 	bl	8002744 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dce:	f7fe fcb9 	bl	8002744 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e1ef      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de0:	4b32      	ldr	r3, [pc, #200]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ef      	bne.n	8003dce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80a6 	beq.w	8003f48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e00:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10d      	bne.n	8003e28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b27      	ldr	r3, [pc, #156]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	4a26      	ldr	r2, [pc, #152]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6593      	str	r3, [r2, #88]	; 0x58
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e24:	2301      	movs	r3, #1
 8003e26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e28:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <HAL_RCC_OscConfig+0x508>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d118      	bne.n	8003e66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e34:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <HAL_RCC_OscConfig+0x508>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_RCC_OscConfig+0x508>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e40:	f7fe fc80 	bl	8002744 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fe fc7c 	bl	8002744 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e1b2      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5a:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <HAL_RCC_OscConfig+0x508>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d108      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4d8>
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e7e:	e029      	b.n	8003ed4 <HAL_RCC_OscConfig+0x52c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d115      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x50c>
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	4a07      	ldr	r2, [pc, #28]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	4a03      	ldr	r2, [pc, #12]	; (8003eac <HAL_RCC_OscConfig+0x504>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea8:	e014      	b.n	8003ed4 <HAL_RCC_OscConfig+0x52c>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	4b9a      	ldr	r3, [pc, #616]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	4a99      	ldr	r2, [pc, #612]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec4:	4b96      	ldr	r3, [pc, #600]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	4a95      	ldr	r2, [pc, #596]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d016      	beq.n	8003f0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fe fc32 	bl	8002744 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fe fc2e 	bl	8002744 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e162      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efa:	4b89      	ldr	r3, [pc, #548]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ed      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x53c>
 8003f08:	e015      	b.n	8003f36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0a:	f7fe fc1b 	bl	8002744 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f12:	f7fe fc17 	bl	8002744 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e14b      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f28:	4b7d      	ldr	r3, [pc, #500]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ed      	bne.n	8003f12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f36:	7ffb      	ldrb	r3, [r7, #31]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3c:	4b78      	ldr	r3, [pc, #480]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	4a77      	ldr	r2, [pc, #476]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d03c      	beq.n	8003fce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01c      	beq.n	8003f96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f5c:	4b70      	ldr	r3, [pc, #448]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f62:	4a6f      	ldr	r2, [pc, #444]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6c:	f7fe fbea 	bl	8002744 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f74:	f7fe fbe6 	bl	8002744 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e11c      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f86:	4b66      	ldr	r3, [pc, #408]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ef      	beq.n	8003f74 <HAL_RCC_OscConfig+0x5cc>
 8003f94:	e01b      	b.n	8003fce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f96:	4b62      	ldr	r3, [pc, #392]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f9c:	4a60      	ldr	r2, [pc, #384]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fbcd 	bl	8002744 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fae:	f7fe fbc9 	bl	8002744 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0ff      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fc0:	4b57      	ldr	r3, [pc, #348]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ef      	bne.n	8003fae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80f3 	beq.w	80041be <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	f040 80c9 	bne.w	8004174 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fe2:	4b4f      	ldr	r3, [pc, #316]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 0203 	and.w	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d12c      	bne.n	8004050 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	3b01      	subs	r3, #1
 8004002:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d123      	bne.n	8004050 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d11b      	bne.n	8004050 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d113      	bne.n	8004050 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d109      	bne.n	8004050 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	3b01      	subs	r3, #1
 800404a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d06b      	beq.n	8004128 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d062      	beq.n	800411c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004056:	4b32      	ldr	r3, [pc, #200]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0ac      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2d      	ldr	r2, [pc, #180]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 800406c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004070:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004072:	f7fe fb67 	bl	8002744 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407a:	f7fe fb63 	bl	8002744 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e099      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	4b21      	ldr	r3, [pc, #132]	; (8004124 <HAL_RCC_OscConfig+0x77c>)
 800409e:	4013      	ands	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040a8:	3a01      	subs	r2, #1
 80040aa:	0112      	lsls	r2, r2, #4
 80040ac:	4311      	orrs	r1, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040b2:	0212      	lsls	r2, r2, #8
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040ba:	0852      	lsrs	r2, r2, #1
 80040bc:	3a01      	subs	r2, #1
 80040be:	0552      	lsls	r2, r2, #21
 80040c0:	4311      	orrs	r1, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040c6:	0852      	lsrs	r2, r2, #1
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0652      	lsls	r2, r2, #25
 80040cc:	4311      	orrs	r1, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040d2:	06d2      	lsls	r2, r2, #27
 80040d4:	430a      	orrs	r2, r1
 80040d6:	4912      	ldr	r1, [pc, #72]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0f      	ldr	r2, [pc, #60]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 80040e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 80040ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040f4:	f7fe fb26 	bl	8002744 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fe fb22 	bl	8002744 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e058      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <HAL_RCC_OscConfig+0x778>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800411a:	e050      	b.n	80041be <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e04f      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
 8004120:	40021000 	.word	0x40021000
 8004124:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d144      	bne.n	80041be <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004134:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a23      	ldr	r2, [pc, #140]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 800413a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004140:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 8004146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800414a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800414c:	f7fe fafa 	bl	8002744 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004154:	f7fe faf6 	bl	8002744 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e02c      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004166:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x7ac>
 8004172:	e024      	b.n	80041be <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d01f      	beq.n	80041ba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 8004180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fe fadd 	bl	8002744 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418e:	f7fe fad9 	bl	8002744 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e00f      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	4905      	ldr	r1, [pc, #20]	; (80041c8 <HAL_RCC_OscConfig+0x820>)
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_OscConfig+0x824>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	60cb      	str	r3, [r1, #12]
 80041b8:	e001      	b.n	80041be <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40021000 	.word	0x40021000
 80041cc:	feeefffc 	.word	0xfeeefffc

080041d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0e7      	b.n	80043b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b75      	ldr	r3, [pc, #468]	; (80043bc <HAL_RCC_ClockConfig+0x1ec>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d910      	bls.n	8004214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b72      	ldr	r3, [pc, #456]	; (80043bc <HAL_RCC_ClockConfig+0x1ec>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 0207 	bic.w	r2, r3, #7
 80041fa:	4970      	ldr	r1, [pc, #448]	; (80043bc <HAL_RCC_ClockConfig+0x1ec>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b6e      	ldr	r3, [pc, #440]	; (80043bc <HAL_RCC_ClockConfig+0x1ec>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0cf      	b.n	80043b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	4b66      	ldr	r3, [pc, #408]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422c:	429a      	cmp	r2, r3
 800422e:	d908      	bls.n	8004242 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004230:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4960      	ldr	r1, [pc, #384]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d04c      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b03      	cmp	r3, #3
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004256:	4b5a      	ldr	r3, [pc, #360]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d121      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e0a6      	b.n	80043b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800426e:	4b54      	ldr	r3, [pc, #336]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d115      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e09a      	b.n	80043b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004286:	4b4e      	ldr	r3, [pc, #312]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e08e      	b.n	80043b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004296:	4b4a      	ldr	r3, [pc, #296]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e086      	b.n	80043b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042a6:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f023 0203 	bic.w	r2, r3, #3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4943      	ldr	r1, [pc, #268]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b8:	f7fe fa44 	bl	8002744 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c0:	f7fe fa40 	bl	8002744 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e06e      	b.n	80043b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d6:	4b3a      	ldr	r3, [pc, #232]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 020c 	and.w	r2, r3, #12
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d1eb      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d010      	beq.n	8004316 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004300:	429a      	cmp	r2, r3
 8004302:	d208      	bcs.n	8004316 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	492b      	ldr	r1, [pc, #172]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004316:	4b29      	ldr	r3, [pc, #164]	; (80043bc <HAL_RCC_ClockConfig+0x1ec>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d210      	bcs.n	8004346 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <HAL_RCC_ClockConfig+0x1ec>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 0207 	bic.w	r2, r3, #7
 800432c:	4923      	ldr	r1, [pc, #140]	; (80043bc <HAL_RCC_ClockConfig+0x1ec>)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004334:	4b21      	ldr	r3, [pc, #132]	; (80043bc <HAL_RCC_ClockConfig+0x1ec>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d001      	beq.n	8004346 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e036      	b.n	80043b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	4918      	ldr	r1, [pc, #96]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004360:	4313      	orrs	r3, r2
 8004362:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4910      	ldr	r1, [pc, #64]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004384:	f000 f824 	bl	80043d0 <HAL_RCC_GetSysClockFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <HAL_RCC_ClockConfig+0x1f0>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	490b      	ldr	r1, [pc, #44]	; (80043c4 <HAL_RCC_ClockConfig+0x1f4>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
 80043a0:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <HAL_RCC_ClockConfig+0x1f8>)
 80043a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <HAL_RCC_ClockConfig+0x1fc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe f97b 	bl	80026a4 <HAL_InitTick>
 80043ae:	4603      	mov	r3, r0
 80043b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80043b2:	7afb      	ldrb	r3, [r7, #11]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40022000 	.word	0x40022000
 80043c0:	40021000 	.word	0x40021000
 80043c4:	08008514 	.word	0x08008514
 80043c8:	20000038 	.word	0x20000038
 80043cc:	2000003c 	.word	0x2000003c

080043d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043de:	4b3e      	ldr	r3, [pc, #248]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043e8:	4b3b      	ldr	r3, [pc, #236]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x34>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d121      	bne.n	8004442 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d11e      	bne.n	8004442 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004404:	4b34      	ldr	r3, [pc, #208]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004410:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004416:	0a1b      	lsrs	r3, r3, #8
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e005      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004420:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800442c:	4a2b      	ldr	r2, [pc, #172]	; (80044dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004434:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10d      	bne.n	8004458 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d102      	bne.n	800444e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	e004      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d101      	bne.n	8004458 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004456:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b0c      	cmp	r3, #12
 800445c:	d134      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800445e:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d003      	beq.n	8004476 <HAL_RCC_GetSysClockFreq+0xa6>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d003      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0xac>
 8004474:	e005      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004476:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004478:	617b      	str	r3, [r7, #20]
      break;
 800447a:	e005      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800447c:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800447e:	617b      	str	r3, [r7, #20]
      break;
 8004480:	e002      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	617b      	str	r3, [r7, #20]
      break;
 8004486:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004488:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	3301      	adds	r3, #1
 8004494:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004496:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	fb03 f202 	mul.w	r2, r3, r2
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	0e5b      	lsrs	r3, r3, #25
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	3301      	adds	r3, #1
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044c8:	69bb      	ldr	r3, [r7, #24]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3724      	adds	r7, #36	; 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000
 80044dc:	0800852c 	.word	0x0800852c
 80044e0:	00f42400 	.word	0x00f42400
 80044e4:	007a1200 	.word	0x007a1200

080044e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000038 	.word	0x20000038

08004500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004504:	f7ff fff0 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4904      	ldr	r1, [pc, #16]	; (8004528 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	08008524 	.word	0x08008524

0800452c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004530:	f7ff ffda 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0adb      	lsrs	r3, r3, #11
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4904      	ldr	r1, [pc, #16]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	08008524 	.word	0x08008524

08004558 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004564:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004570:	f7ff f9b6 	bl	80038e0 <HAL_PWREx_GetVoltageRange>
 8004574:	6178      	str	r0, [r7, #20]
 8004576:	e014      	b.n	80045a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	6593      	str	r3, [r2, #88]	; 0x58
 8004584:	4b22      	ldr	r3, [pc, #136]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004590:	f7ff f9a6 	bl	80038e0 <HAL_PWREx_GetVoltageRange>
 8004594:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004596:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800459c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a8:	d10b      	bne.n	80045c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b80      	cmp	r3, #128	; 0x80
 80045ae:	d919      	bls.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2ba0      	cmp	r3, #160	; 0xa0
 80045b4:	d902      	bls.n	80045bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045b6:	2302      	movs	r3, #2
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e013      	b.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045bc:	2301      	movs	r3, #1
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e010      	b.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b80      	cmp	r3, #128	; 0x80
 80045c6:	d902      	bls.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045c8:	2303      	movs	r3, #3
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	e00a      	b.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b80      	cmp	r3, #128	; 0x80
 80045d2:	d102      	bne.n	80045da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045d4:	2302      	movs	r3, #2
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	e004      	b.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b70      	cmp	r3, #112	; 0x70
 80045de:	d101      	bne.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045e0:	2301      	movs	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f023 0207 	bic.w	r2, r3, #7
 80045ec:	4909      	ldr	r1, [pc, #36]	; (8004614 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045f4:	4b07      	ldr	r3, [pc, #28]	; (8004614 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d001      	beq.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40021000 	.word	0x40021000
 8004614:	40022000 	.word	0x40022000

08004618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004620:	2300      	movs	r3, #0
 8004622:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004624:	2300      	movs	r3, #0
 8004626:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004630:	2b00      	cmp	r3, #0
 8004632:	d031      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800463c:	d01a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800463e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004642:	d814      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004648:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800464c:	d10f      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800464e:	4b5d      	ldr	r3, [pc, #372]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4a5c      	ldr	r2, [pc, #368]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800465a:	e00c      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f9de 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800466c:	e003      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	74fb      	strb	r3, [r7, #19]
      break;
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004676:	7cfb      	ldrb	r3, [r7, #19]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800467c:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	494e      	ldr	r1, [pc, #312]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004692:	e001      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 809e 	beq.w	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046aa:	4b46      	ldr	r3, [pc, #280]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c0:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	4a3f      	ldr	r2, [pc, #252]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ca:	6593      	str	r3, [r2, #88]	; 0x58
 80046cc:	4b3d      	ldr	r3, [pc, #244]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d8:	2301      	movs	r3, #1
 80046da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046dc:	4b3a      	ldr	r3, [pc, #232]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a39      	ldr	r2, [pc, #228]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046e8:	f7fe f82c 	bl	8002744 <HAL_GetTick>
 80046ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ee:	e009      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f0:	f7fe f828 	bl	8002744 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d902      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	74fb      	strb	r3, [r7, #19]
        break;
 8004702:	e005      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004704:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ef      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d15a      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004716:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004720:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01e      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	429a      	cmp	r2, r3
 8004730:	d019      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800473e:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004754:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800475e:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d016      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7fd ffe8 	bl	8002744 <HAL_GetTick>
 8004774:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004776:	e00b      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fd ffe4 	bl	8002744 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	; 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d902      	bls.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	74fb      	strb	r3, [r7, #19]
            break;
 800478e:	e006      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0ec      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b2:	4904      	ldr	r1, [pc, #16]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ba:	e009      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	74bb      	strb	r3, [r7, #18]
 80047c0:	e006      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d0:	7c7b      	ldrb	r3, [r7, #17]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d6:	4b8a      	ldr	r3, [pc, #552]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047da:	4a89      	ldr	r2, [pc, #548]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ee:	4b84      	ldr	r3, [pc, #528]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f023 0203 	bic.w	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	4980      	ldr	r1, [pc, #512]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004810:	4b7b      	ldr	r3, [pc, #492]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f023 020c 	bic.w	r2, r3, #12
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	4978      	ldr	r1, [pc, #480]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004832:	4b73      	ldr	r3, [pc, #460]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	496f      	ldr	r1, [pc, #444]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004854:	4b6a      	ldr	r3, [pc, #424]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004862:	4967      	ldr	r1, [pc, #412]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004876:	4b62      	ldr	r3, [pc, #392]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	495e      	ldr	r1, [pc, #376]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004898:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	4956      	ldr	r1, [pc, #344]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ba:	4b51      	ldr	r3, [pc, #324]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	494d      	ldr	r1, [pc, #308]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d028      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048dc:	4b48      	ldr	r3, [pc, #288]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4945      	ldr	r1, [pc, #276]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fa:	d106      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b40      	ldr	r3, [pc, #256]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a3f      	ldr	r2, [pc, #252]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
 8004908:	e011      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004912:	d10c      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f882 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d028      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800493a:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	492d      	ldr	r1, [pc, #180]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004958:	d106      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800495a:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004964:	60d3      	str	r3, [r2, #12]
 8004966:	e011      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004970:	d10c      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	2101      	movs	r1, #1
 8004978:	4618      	mov	r0, r3
 800497a:	f000 f853 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004982:	7cfb      	ldrb	r3, [r7, #19]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004988:	7cfb      	ldrb	r3, [r7, #19]
 800498a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01c      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004998:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a6:	4916      	ldr	r1, [pc, #88]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049b6:	d10c      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	2102      	movs	r1, #2
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f830 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049c8:	7cfb      	ldrb	r3, [r7, #19]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049de:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ec:	4904      	ldr	r1, [pc, #16]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000

08004a04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a0e:	f043 0304 	orr.w	r3, r3, #4
 8004a12:	6013      	str	r3, [r2, #0]
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000

08004a24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a32:	4b74      	ldr	r3, [pc, #464]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d018      	beq.n	8004a70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a3e:	4b71      	ldr	r3, [pc, #452]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0203 	and.w	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d10d      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
       ||
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a56:	4b6b      	ldr	r3, [pc, #428]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
       ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d047      	beq.n	8004afa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
 8004a6e:	e044      	b.n	8004afa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d018      	beq.n	8004aaa <RCCEx_PLLSAI1_Config+0x86>
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d825      	bhi.n	8004ac8 <RCCEx_PLLSAI1_Config+0xa4>
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d002      	beq.n	8004a86 <RCCEx_PLLSAI1_Config+0x62>
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d009      	beq.n	8004a98 <RCCEx_PLLSAI1_Config+0x74>
 8004a84:	e020      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a86:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11d      	bne.n	8004ace <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a96:	e01a      	b.n	8004ace <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a98:	4b5a      	ldr	r3, [pc, #360]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d116      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa8:	e013      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aaa:	4b56      	ldr	r3, [pc, #344]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10f      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ab6:	4b53      	ldr	r3, [pc, #332]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ac6:	e006      	b.n	8004ad6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      break;
 8004acc:	e004      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10d      	bne.n	8004afa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ade:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6819      	ldr	r1, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	430b      	orrs	r3, r1
 8004af4:	4943      	ldr	r1, [pc, #268]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d17c      	bne.n	8004bfa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b00:	4b40      	ldr	r3, [pc, #256]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a3f      	ldr	r2, [pc, #252]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0c:	f7fd fe1a 	bl	8002744 <HAL_GetTick>
 8004b10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b12:	e009      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b14:	f7fd fe16 	bl	8002744 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d902      	bls.n	8004b28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	73fb      	strb	r3, [r7, #15]
        break;
 8004b26:	e005      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b28:	4b36      	ldr	r3, [pc, #216]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ef      	bne.n	8004b14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d15f      	bne.n	8004bfa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d110      	bne.n	8004b62 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b40:	4b30      	ldr	r3, [pc, #192]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6892      	ldr	r2, [r2, #8]
 8004b50:	0211      	lsls	r1, r2, #8
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68d2      	ldr	r2, [r2, #12]
 8004b56:	06d2      	lsls	r2, r2, #27
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	492a      	ldr	r1, [pc, #168]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	610b      	str	r3, [r1, #16]
 8004b60:	e027      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d112      	bne.n	8004b8e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b68:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6892      	ldr	r2, [r2, #8]
 8004b78:	0211      	lsls	r1, r2, #8
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6912      	ldr	r2, [r2, #16]
 8004b7e:	0852      	lsrs	r2, r2, #1
 8004b80:	3a01      	subs	r2, #1
 8004b82:	0552      	lsls	r2, r2, #21
 8004b84:	430a      	orrs	r2, r1
 8004b86:	491f      	ldr	r1, [pc, #124]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	610b      	str	r3, [r1, #16]
 8004b8c:	e011      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6892      	ldr	r2, [r2, #8]
 8004b9e:	0211      	lsls	r1, r2, #8
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6952      	ldr	r2, [r2, #20]
 8004ba4:	0852      	lsrs	r2, r2, #1
 8004ba6:	3a01      	subs	r2, #1
 8004ba8:	0652      	lsls	r2, r2, #25
 8004baa:	430a      	orrs	r2, r1
 8004bac:	4915      	ldr	r1, [pc, #84]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bb2:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbe:	f7fd fdc1 	bl	8002744 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bc4:	e009      	b.n	8004bda <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bc6:	f7fd fdbd 	bl	8002744 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d902      	bls.n	8004bda <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8004bd8:	e005      	b.n	8004be6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0ef      	beq.n	8004bc6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	4903      	ldr	r1, [pc, #12]	; (8004c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000

08004c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e049      	b.n	8004cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fd fb7e 	bl	8002330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f000 f836 	bl	8004cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a2a      	ldr	r2, [pc, #168]	; (8004d74 <TIM_Base_SetConfig+0xbc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_Base_SetConfig+0x20>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d108      	bne.n	8004cea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <TIM_Base_SetConfig+0xbc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <TIM_Base_SetConfig+0x52>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0x52>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <TIM_Base_SetConfig+0xc0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0x52>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <TIM_Base_SetConfig+0xc4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <TIM_Base_SetConfig+0xbc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_Base_SetConfig+0xa0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <TIM_Base_SetConfig+0xc0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xa0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <TIM_Base_SetConfig+0xc4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400

08004d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e04f      	b.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d108      	bne.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e00:	d004      	beq.n	8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a10      	ldr	r2, [pc, #64]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d10c      	bne.n	8004e26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40014000 	.word	0x40014000

08004e4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e040      	b.n	8004ee0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd fa7e 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	; 0x24
 8004e78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0201 	bic.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f8c0 	bl	8005010 <UART_SetConfig>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e022      	b.n	8004ee0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fae0 	bl	8005468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fb67 	bl	80055ac <UART_CheckIdleState>
 8004ede:	4603      	mov	r3, r0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	f040 8082 	bne.w	8005006 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_UART_Transmit+0x26>
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e07a      	b.n	8005008 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Transmit+0x38>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e073      	b.n	8005008 <HAL_UART_Transmit+0x120>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2221      	movs	r2, #33	; 0x21
 8004f34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f36:	f7fd fc05 	bl	8002744 <HAL_GetTick>
 8004f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	88fa      	ldrh	r2, [r7, #6]
 8004f40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f54:	d108      	bne.n	8004f68 <HAL_UART_Transmit+0x80>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d104      	bne.n	8004f68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	e003      	b.n	8004f70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f78:	e02d      	b.n	8004fd6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2200      	movs	r2, #0
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fb5a 	bl	800563e <UART_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e039      	b.n	8005008 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	881a      	ldrh	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa6:	b292      	uxth	r2, r2
 8004fa8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	3302      	adds	r3, #2
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	e008      	b.n	8004fc4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b292      	uxth	r2, r2
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1cb      	bne.n	8004f7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2140      	movs	r1, #64	; 0x40
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fb26 	bl	800563e <UART_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e005      	b.n	8005008 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	e000      	b.n	8005008 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005006:	2302      	movs	r3, #2
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005014:	b08a      	sub	sp, #40	; 0x28
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	431a      	orrs	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	4313      	orrs	r3, r2
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4bb4      	ldr	r3, [pc, #720]	; (8005310 <UART_SetConfig+0x300>)
 8005040:	4013      	ands	r3, r2
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005048:	430b      	orrs	r3, r1
 800504a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4aa9      	ldr	r2, [pc, #676]	; (8005314 <UART_SetConfig+0x304>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	4313      	orrs	r3, r2
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	430a      	orrs	r2, r1
 800508e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4aa0      	ldr	r2, [pc, #640]	; (8005318 <UART_SetConfig+0x308>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d126      	bne.n	80050e8 <UART_SetConfig+0xd8>
 800509a:	4ba0      	ldr	r3, [pc, #640]	; (800531c <UART_SetConfig+0x30c>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d81b      	bhi.n	80050e0 <UART_SetConfig+0xd0>
 80050a8:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <UART_SetConfig+0xa0>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	080050d1 	.word	0x080050d1
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c6:	e080      	b.n	80051ca <UART_SetConfig+0x1ba>
 80050c8:	2302      	movs	r3, #2
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ce:	e07c      	b.n	80051ca <UART_SetConfig+0x1ba>
 80050d0:	2304      	movs	r3, #4
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d6:	e078      	b.n	80051ca <UART_SetConfig+0x1ba>
 80050d8:	2308      	movs	r3, #8
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050de:	e074      	b.n	80051ca <UART_SetConfig+0x1ba>
 80050e0:	2310      	movs	r3, #16
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e6:	e070      	b.n	80051ca <UART_SetConfig+0x1ba>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a8c      	ldr	r2, [pc, #560]	; (8005320 <UART_SetConfig+0x310>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d138      	bne.n	8005164 <UART_SetConfig+0x154>
 80050f2:	4b8a      	ldr	r3, [pc, #552]	; (800531c <UART_SetConfig+0x30c>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	f003 030c 	and.w	r3, r3, #12
 80050fc:	2b0c      	cmp	r3, #12
 80050fe:	d82d      	bhi.n	800515c <UART_SetConfig+0x14c>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0xf8>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	0800513d 	.word	0x0800513d
 800510c:	0800515d 	.word	0x0800515d
 8005110:	0800515d 	.word	0x0800515d
 8005114:	0800515d 	.word	0x0800515d
 8005118:	0800514d 	.word	0x0800514d
 800511c:	0800515d 	.word	0x0800515d
 8005120:	0800515d 	.word	0x0800515d
 8005124:	0800515d 	.word	0x0800515d
 8005128:	08005145 	.word	0x08005145
 800512c:	0800515d 	.word	0x0800515d
 8005130:	0800515d 	.word	0x0800515d
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005155 	.word	0x08005155
 800513c:	2300      	movs	r3, #0
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e042      	b.n	80051ca <UART_SetConfig+0x1ba>
 8005144:	2302      	movs	r3, #2
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e03e      	b.n	80051ca <UART_SetConfig+0x1ba>
 800514c:	2304      	movs	r3, #4
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e03a      	b.n	80051ca <UART_SetConfig+0x1ba>
 8005154:	2308      	movs	r3, #8
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e036      	b.n	80051ca <UART_SetConfig+0x1ba>
 800515c:	2310      	movs	r3, #16
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e032      	b.n	80051ca <UART_SetConfig+0x1ba>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a6a      	ldr	r2, [pc, #424]	; (8005314 <UART_SetConfig+0x304>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d12a      	bne.n	80051c4 <UART_SetConfig+0x1b4>
 800516e:	4b6b      	ldr	r3, [pc, #428]	; (800531c <UART_SetConfig+0x30c>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800517c:	d01a      	beq.n	80051b4 <UART_SetConfig+0x1a4>
 800517e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005182:	d81b      	bhi.n	80051bc <UART_SetConfig+0x1ac>
 8005184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005188:	d00c      	beq.n	80051a4 <UART_SetConfig+0x194>
 800518a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518e:	d815      	bhi.n	80051bc <UART_SetConfig+0x1ac>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <UART_SetConfig+0x18c>
 8005194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005198:	d008      	beq.n	80051ac <UART_SetConfig+0x19c>
 800519a:	e00f      	b.n	80051bc <UART_SetConfig+0x1ac>
 800519c:	2300      	movs	r3, #0
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a2:	e012      	b.n	80051ca <UART_SetConfig+0x1ba>
 80051a4:	2302      	movs	r3, #2
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051aa:	e00e      	b.n	80051ca <UART_SetConfig+0x1ba>
 80051ac:	2304      	movs	r3, #4
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b2:	e00a      	b.n	80051ca <UART_SetConfig+0x1ba>
 80051b4:	2308      	movs	r3, #8
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ba:	e006      	b.n	80051ca <UART_SetConfig+0x1ba>
 80051bc:	2310      	movs	r3, #16
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e002      	b.n	80051ca <UART_SetConfig+0x1ba>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a51      	ldr	r2, [pc, #324]	; (8005314 <UART_SetConfig+0x304>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d17a      	bne.n	80052ca <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d824      	bhi.n	8005226 <UART_SetConfig+0x216>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x1d4>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005227 	.word	0x08005227
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005227 	.word	0x08005227
 80051f4:	08005217 	.word	0x08005217
 80051f8:	08005227 	.word	0x08005227
 80051fc:	08005227 	.word	0x08005227
 8005200:	08005227 	.word	0x08005227
 8005204:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7ff f97a 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e010      	b.n	8005232 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b44      	ldr	r3, [pc, #272]	; (8005324 <UART_SetConfig+0x314>)
 8005212:	61fb      	str	r3, [r7, #28]
        break;
 8005214:	e00d      	b.n	8005232 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7ff f8db 	bl	80043d0 <HAL_RCC_GetSysClockFreq>
 800521a:	61f8      	str	r0, [r7, #28]
        break;
 800521c:	e009      	b.n	8005232 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005222:	61fb      	str	r3, [r7, #28]
        break;
 8005224:	e005      	b.n	8005232 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005230:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8107 	beq.w	8005448 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	429a      	cmp	r2, r3
 8005248:	d305      	bcc.n	8005256 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	429a      	cmp	r2, r3
 8005254:	d903      	bls.n	800525e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800525c:	e0f4      	b.n	8005448 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2200      	movs	r2, #0
 8005262:	461c      	mov	r4, r3
 8005264:	4615      	mov	r5, r2
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	022b      	lsls	r3, r5, #8
 8005270:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005274:	0222      	lsls	r2, r4, #8
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	6849      	ldr	r1, [r1, #4]
 800527a:	0849      	lsrs	r1, r1, #1
 800527c:	2000      	movs	r0, #0
 800527e:	4688      	mov	r8, r1
 8005280:	4681      	mov	r9, r0
 8005282:	eb12 0a08 	adds.w	sl, r2, r8
 8005286:	eb43 0b09 	adc.w	fp, r3, r9
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005298:	4650      	mov	r0, sl
 800529a:	4659      	mov	r1, fp
 800529c:	f7fb fcd4 	bl	8000c48 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4613      	mov	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ae:	d308      	bcc.n	80052c2 <UART_SetConfig+0x2b2>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b6:	d204      	bcs.n	80052c2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	e0c2      	b.n	8005448 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052c8:	e0be      	b.n	8005448 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d2:	d16a      	bne.n	80053aa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80052d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d834      	bhi.n	8005346 <UART_SetConfig+0x336>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x2d4>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005309 	.word	0x08005309
 80052e8:	08005329 	.word	0x08005329
 80052ec:	08005331 	.word	0x08005331
 80052f0:	08005347 	.word	0x08005347
 80052f4:	08005337 	.word	0x08005337
 80052f8:	08005347 	.word	0x08005347
 80052fc:	08005347 	.word	0x08005347
 8005300:	08005347 	.word	0x08005347
 8005304:	0800533f 	.word	0x0800533f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005308:	f7ff f8fa 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 800530c:	61f8      	str	r0, [r7, #28]
        break;
 800530e:	e020      	b.n	8005352 <UART_SetConfig+0x342>
 8005310:	efff69f3 	.word	0xefff69f3
 8005314:	40008000 	.word	0x40008000
 8005318:	40013800 	.word	0x40013800
 800531c:	40021000 	.word	0x40021000
 8005320:	40004400 	.word	0x40004400
 8005324:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005328:	f7ff f900 	bl	800452c <HAL_RCC_GetPCLK2Freq>
 800532c:	61f8      	str	r0, [r7, #28]
        break;
 800532e:	e010      	b.n	8005352 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005330:	4b4c      	ldr	r3, [pc, #304]	; (8005464 <UART_SetConfig+0x454>)
 8005332:	61fb      	str	r3, [r7, #28]
        break;
 8005334:	e00d      	b.n	8005352 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005336:	f7ff f84b 	bl	80043d0 <HAL_RCC_GetSysClockFreq>
 800533a:	61f8      	str	r0, [r7, #28]
        break;
 800533c:	e009      	b.n	8005352 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005342:	61fb      	str	r3, [r7, #28]
        break;
 8005344:	e005      	b.n	8005352 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d077      	beq.n	8005448 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	005a      	lsls	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	441a      	add	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	2b0f      	cmp	r3, #15
 8005372:	d916      	bls.n	80053a2 <UART_SetConfig+0x392>
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537a:	d212      	bcs.n	80053a2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f023 030f 	bic.w	r3, r3, #15
 8005384:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	b29a      	uxth	r2, r3
 8005392:	8afb      	ldrh	r3, [r7, #22]
 8005394:	4313      	orrs	r3, r2
 8005396:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	8afa      	ldrh	r2, [r7, #22]
 800539e:	60da      	str	r2, [r3, #12]
 80053a0:	e052      	b.n	8005448 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053a8:	e04e      	b.n	8005448 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d827      	bhi.n	8005402 <UART_SetConfig+0x3f2>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <UART_SetConfig+0x3a8>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053ed 	.word	0x080053ed
 80053c4:	08005403 	.word	0x08005403
 80053c8:	080053f3 	.word	0x080053f3
 80053cc:	08005403 	.word	0x08005403
 80053d0:	08005403 	.word	0x08005403
 80053d4:	08005403 	.word	0x08005403
 80053d8:	080053fb 	.word	0x080053fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053dc:	f7ff f890 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 80053e0:	61f8      	str	r0, [r7, #28]
        break;
 80053e2:	e014      	b.n	800540e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e4:	f7ff f8a2 	bl	800452c <HAL_RCC_GetPCLK2Freq>
 80053e8:	61f8      	str	r0, [r7, #28]
        break;
 80053ea:	e010      	b.n	800540e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ec:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <UART_SetConfig+0x454>)
 80053ee:	61fb      	str	r3, [r7, #28]
        break;
 80053f0:	e00d      	b.n	800540e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f2:	f7fe ffed 	bl	80043d0 <HAL_RCC_GetSysClockFreq>
 80053f6:	61f8      	str	r0, [r7, #28]
        break;
 80053f8:	e009      	b.n	800540e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fe:	61fb      	str	r3, [r7, #28]
        break;
 8005400:	e005      	b.n	800540e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800540c:	bf00      	nop
    }

    if (pclk != 0U)
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d019      	beq.n	8005448 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	085a      	lsrs	r2, r3, #1
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	441a      	add	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b0f      	cmp	r3, #15
 800542c:	d909      	bls.n	8005442 <UART_SetConfig+0x432>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005434:	d205      	bcs.n	8005442 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
 8005440:	e002      	b.n	8005448 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005454:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005458:	4618      	mov	r0, r3
 800545a:	3728      	adds	r7, #40	; 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005462:	bf00      	nop
 8005464:	00f42400 	.word	0x00f42400

08005468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01a      	beq.n	800557e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005566:	d10a      	bne.n	800557e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055bc:	f7fd f8c2 	bl	8002744 <HAL_GetTick>
 80055c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d10e      	bne.n	80055ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f82d 	bl	800563e <UART_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e023      	b.n	8005636 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d10e      	bne.n	800561a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f817 	bl	800563e <UART_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e00d      	b.n	8005636 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b09c      	sub	sp, #112	; 0x70
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800564e:	e0a5      	b.n	800579c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005656:	f000 80a1 	beq.w	800579c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565a:	f7fd f873 	bl	8002744 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005666:	429a      	cmp	r2, r3
 8005668:	d302      	bcc.n	8005670 <UART_WaitOnFlagUntilTimeout+0x32>
 800566a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800566c:	2b00      	cmp	r3, #0
 800566e:	d13e      	bne.n	80056ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800567e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005684:	667b      	str	r3, [r7, #100]	; 0x64
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800568e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005690:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800569c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e6      	bne.n	8005670 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	663b      	str	r3, [r7, #96]	; 0x60
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e067      	b.n	80057be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d04f      	beq.n	800579c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570a:	d147      	bne.n	800579c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005714:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800572a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
 8005736:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800573a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e6      	bne.n	8005716 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	613b      	str	r3, [r7, #16]
   return(result);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3308      	adds	r3, #8
 8005766:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005768:	623a      	str	r2, [r7, #32]
 800576a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	69f9      	ldr	r1, [r7, #28]
 800576e:	6a3a      	ldr	r2, [r7, #32]
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	61bb      	str	r3, [r7, #24]
   return(result);
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e5      	bne.n	8005748 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e010      	b.n	80057be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4013      	ands	r3, r2
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	bf0c      	ite	eq
 80057ac:	2301      	moveq	r3, #1
 80057ae:	2300      	movne	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	f43f af4a 	beq.w	8005650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3770      	adds	r7, #112	; 0x70
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <__cvt>:
 80057c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ca:	ec55 4b10 	vmov	r4, r5, d0
 80057ce:	2d00      	cmp	r5, #0
 80057d0:	460e      	mov	r6, r1
 80057d2:	4619      	mov	r1, r3
 80057d4:	462b      	mov	r3, r5
 80057d6:	bfbb      	ittet	lt
 80057d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057dc:	461d      	movlt	r5, r3
 80057de:	2300      	movge	r3, #0
 80057e0:	232d      	movlt	r3, #45	; 0x2d
 80057e2:	700b      	strb	r3, [r1, #0]
 80057e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057ea:	4691      	mov	r9, r2
 80057ec:	f023 0820 	bic.w	r8, r3, #32
 80057f0:	bfbc      	itt	lt
 80057f2:	4622      	movlt	r2, r4
 80057f4:	4614      	movlt	r4, r2
 80057f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057fa:	d005      	beq.n	8005808 <__cvt+0x42>
 80057fc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005800:	d100      	bne.n	8005804 <__cvt+0x3e>
 8005802:	3601      	adds	r6, #1
 8005804:	2102      	movs	r1, #2
 8005806:	e000      	b.n	800580a <__cvt+0x44>
 8005808:	2103      	movs	r1, #3
 800580a:	ab03      	add	r3, sp, #12
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	ab02      	add	r3, sp, #8
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	ec45 4b10 	vmov	d0, r4, r5
 8005816:	4653      	mov	r3, sl
 8005818:	4632      	mov	r2, r6
 800581a:	f000 fe69 	bl	80064f0 <_dtoa_r>
 800581e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005822:	4607      	mov	r7, r0
 8005824:	d102      	bne.n	800582c <__cvt+0x66>
 8005826:	f019 0f01 	tst.w	r9, #1
 800582a:	d022      	beq.n	8005872 <__cvt+0xac>
 800582c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005830:	eb07 0906 	add.w	r9, r7, r6
 8005834:	d110      	bne.n	8005858 <__cvt+0x92>
 8005836:	783b      	ldrb	r3, [r7, #0]
 8005838:	2b30      	cmp	r3, #48	; 0x30
 800583a:	d10a      	bne.n	8005852 <__cvt+0x8c>
 800583c:	2200      	movs	r2, #0
 800583e:	2300      	movs	r3, #0
 8005840:	4620      	mov	r0, r4
 8005842:	4629      	mov	r1, r5
 8005844:	f7fb f940 	bl	8000ac8 <__aeabi_dcmpeq>
 8005848:	b918      	cbnz	r0, 8005852 <__cvt+0x8c>
 800584a:	f1c6 0601 	rsb	r6, r6, #1
 800584e:	f8ca 6000 	str.w	r6, [sl]
 8005852:	f8da 3000 	ldr.w	r3, [sl]
 8005856:	4499      	add	r9, r3
 8005858:	2200      	movs	r2, #0
 800585a:	2300      	movs	r3, #0
 800585c:	4620      	mov	r0, r4
 800585e:	4629      	mov	r1, r5
 8005860:	f7fb f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8005864:	b108      	cbz	r0, 800586a <__cvt+0xa4>
 8005866:	f8cd 900c 	str.w	r9, [sp, #12]
 800586a:	2230      	movs	r2, #48	; 0x30
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	454b      	cmp	r3, r9
 8005870:	d307      	bcc.n	8005882 <__cvt+0xbc>
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005876:	1bdb      	subs	r3, r3, r7
 8005878:	4638      	mov	r0, r7
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	b004      	add	sp, #16
 800587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005882:	1c59      	adds	r1, r3, #1
 8005884:	9103      	str	r1, [sp, #12]
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	e7f0      	b.n	800586c <__cvt+0xa6>

0800588a <__exponent>:
 800588a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800588c:	4603      	mov	r3, r0
 800588e:	2900      	cmp	r1, #0
 8005890:	bfb8      	it	lt
 8005892:	4249      	neglt	r1, r1
 8005894:	f803 2b02 	strb.w	r2, [r3], #2
 8005898:	bfb4      	ite	lt
 800589a:	222d      	movlt	r2, #45	; 0x2d
 800589c:	222b      	movge	r2, #43	; 0x2b
 800589e:	2909      	cmp	r1, #9
 80058a0:	7042      	strb	r2, [r0, #1]
 80058a2:	dd2a      	ble.n	80058fa <__exponent+0x70>
 80058a4:	f10d 0207 	add.w	r2, sp, #7
 80058a8:	4617      	mov	r7, r2
 80058aa:	260a      	movs	r6, #10
 80058ac:	4694      	mov	ip, r2
 80058ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80058b2:	fb06 1415 	mls	r4, r6, r5, r1
 80058b6:	3430      	adds	r4, #48	; 0x30
 80058b8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80058bc:	460c      	mov	r4, r1
 80058be:	2c63      	cmp	r4, #99	; 0x63
 80058c0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80058c4:	4629      	mov	r1, r5
 80058c6:	dcf1      	bgt.n	80058ac <__exponent+0x22>
 80058c8:	3130      	adds	r1, #48	; 0x30
 80058ca:	f1ac 0402 	sub.w	r4, ip, #2
 80058ce:	f802 1c01 	strb.w	r1, [r2, #-1]
 80058d2:	1c41      	adds	r1, r0, #1
 80058d4:	4622      	mov	r2, r4
 80058d6:	42ba      	cmp	r2, r7
 80058d8:	d30a      	bcc.n	80058f0 <__exponent+0x66>
 80058da:	f10d 0209 	add.w	r2, sp, #9
 80058de:	eba2 020c 	sub.w	r2, r2, ip
 80058e2:	42bc      	cmp	r4, r7
 80058e4:	bf88      	it	hi
 80058e6:	2200      	movhi	r2, #0
 80058e8:	4413      	add	r3, r2
 80058ea:	1a18      	subs	r0, r3, r0
 80058ec:	b003      	add	sp, #12
 80058ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80058f4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80058f8:	e7ed      	b.n	80058d6 <__exponent+0x4c>
 80058fa:	2330      	movs	r3, #48	; 0x30
 80058fc:	3130      	adds	r1, #48	; 0x30
 80058fe:	7083      	strb	r3, [r0, #2]
 8005900:	70c1      	strb	r1, [r0, #3]
 8005902:	1d03      	adds	r3, r0, #4
 8005904:	e7f1      	b.n	80058ea <__exponent+0x60>
	...

08005908 <_printf_float>:
 8005908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590c:	ed2d 8b02 	vpush	{d8}
 8005910:	b08d      	sub	sp, #52	; 0x34
 8005912:	460c      	mov	r4, r1
 8005914:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005918:	4616      	mov	r6, r2
 800591a:	461f      	mov	r7, r3
 800591c:	4605      	mov	r5, r0
 800591e:	f000 fce7 	bl	80062f0 <_localeconv_r>
 8005922:	f8d0 a000 	ldr.w	sl, [r0]
 8005926:	4650      	mov	r0, sl
 8005928:	f7fa fca2 	bl	8000270 <strlen>
 800592c:	2300      	movs	r3, #0
 800592e:	930a      	str	r3, [sp, #40]	; 0x28
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	9305      	str	r3, [sp, #20]
 8005934:	f8d8 3000 	ldr.w	r3, [r8]
 8005938:	f894 b018 	ldrb.w	fp, [r4, #24]
 800593c:	3307      	adds	r3, #7
 800593e:	f023 0307 	bic.w	r3, r3, #7
 8005942:	f103 0208 	add.w	r2, r3, #8
 8005946:	f8c8 2000 	str.w	r2, [r8]
 800594a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800594e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005952:	9307      	str	r3, [sp, #28]
 8005954:	f8cd 8018 	str.w	r8, [sp, #24]
 8005958:	ee08 0a10 	vmov	s16, r0
 800595c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005960:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005964:	4b9e      	ldr	r3, [pc, #632]	; (8005be0 <_printf_float+0x2d8>)
 8005966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800596a:	f7fb f8df 	bl	8000b2c <__aeabi_dcmpun>
 800596e:	bb88      	cbnz	r0, 80059d4 <_printf_float+0xcc>
 8005970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005974:	4b9a      	ldr	r3, [pc, #616]	; (8005be0 <_printf_float+0x2d8>)
 8005976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800597a:	f7fb f8b9 	bl	8000af0 <__aeabi_dcmple>
 800597e:	bb48      	cbnz	r0, 80059d4 <_printf_float+0xcc>
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fb f8a8 	bl	8000adc <__aeabi_dcmplt>
 800598c:	b110      	cbz	r0, 8005994 <_printf_float+0x8c>
 800598e:	232d      	movs	r3, #45	; 0x2d
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005994:	4a93      	ldr	r2, [pc, #588]	; (8005be4 <_printf_float+0x2dc>)
 8005996:	4b94      	ldr	r3, [pc, #592]	; (8005be8 <_printf_float+0x2e0>)
 8005998:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800599c:	bf94      	ite	ls
 800599e:	4690      	movls	r8, r2
 80059a0:	4698      	movhi	r8, r3
 80059a2:	2303      	movs	r3, #3
 80059a4:	6123      	str	r3, [r4, #16]
 80059a6:	9b05      	ldr	r3, [sp, #20]
 80059a8:	f023 0304 	bic.w	r3, r3, #4
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	f04f 0900 	mov.w	r9, #0
 80059b2:	9700      	str	r7, [sp, #0]
 80059b4:	4633      	mov	r3, r6
 80059b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 f9da 	bl	8005d74 <_printf_common>
 80059c0:	3001      	adds	r0, #1
 80059c2:	f040 8090 	bne.w	8005ae6 <_printf_float+0x1de>
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ca:	b00d      	add	sp, #52	; 0x34
 80059cc:	ecbd 8b02 	vpop	{d8}
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fb f8a6 	bl	8000b2c <__aeabi_dcmpun>
 80059e0:	b140      	cbz	r0, 80059f4 <_printf_float+0xec>
 80059e2:	464b      	mov	r3, r9
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfbc      	itt	lt
 80059e8:	232d      	movlt	r3, #45	; 0x2d
 80059ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059ee:	4a7f      	ldr	r2, [pc, #508]	; (8005bec <_printf_float+0x2e4>)
 80059f0:	4b7f      	ldr	r3, [pc, #508]	; (8005bf0 <_printf_float+0x2e8>)
 80059f2:	e7d1      	b.n	8005998 <_printf_float+0x90>
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059fa:	9206      	str	r2, [sp, #24]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	d13f      	bne.n	8005a80 <_printf_float+0x178>
 8005a00:	2306      	movs	r3, #6
 8005a02:	6063      	str	r3, [r4, #4]
 8005a04:	9b05      	ldr	r3, [sp, #20]
 8005a06:	6861      	ldr	r1, [r4, #4]
 8005a08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	ab0a      	add	r3, sp, #40	; 0x28
 8005a12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a16:	ab09      	add	r3, sp, #36	; 0x24
 8005a18:	ec49 8b10 	vmov	d0, r8, r9
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	6022      	str	r2, [r4, #0]
 8005a20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a24:	4628      	mov	r0, r5
 8005a26:	f7ff fece 	bl	80057c6 <__cvt>
 8005a2a:	9b06      	ldr	r3, [sp, #24]
 8005a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a2e:	2b47      	cmp	r3, #71	; 0x47
 8005a30:	4680      	mov	r8, r0
 8005a32:	d108      	bne.n	8005a46 <_printf_float+0x13e>
 8005a34:	1cc8      	adds	r0, r1, #3
 8005a36:	db02      	blt.n	8005a3e <_printf_float+0x136>
 8005a38:	6863      	ldr	r3, [r4, #4]
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	dd41      	ble.n	8005ac2 <_printf_float+0x1ba>
 8005a3e:	f1ab 0302 	sub.w	r3, fp, #2
 8005a42:	fa5f fb83 	uxtb.w	fp, r3
 8005a46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a4a:	d820      	bhi.n	8005a8e <_printf_float+0x186>
 8005a4c:	3901      	subs	r1, #1
 8005a4e:	465a      	mov	r2, fp
 8005a50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a54:	9109      	str	r1, [sp, #36]	; 0x24
 8005a56:	f7ff ff18 	bl	800588a <__exponent>
 8005a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a5c:	1813      	adds	r3, r2, r0
 8005a5e:	2a01      	cmp	r2, #1
 8005a60:	4681      	mov	r9, r0
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	dc02      	bgt.n	8005a6c <_printf_float+0x164>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	07d2      	lsls	r2, r2, #31
 8005a6a:	d501      	bpl.n	8005a70 <_printf_float+0x168>
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	6123      	str	r3, [r4, #16]
 8005a70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d09c      	beq.n	80059b2 <_printf_float+0xaa>
 8005a78:	232d      	movs	r3, #45	; 0x2d
 8005a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a7e:	e798      	b.n	80059b2 <_printf_float+0xaa>
 8005a80:	9a06      	ldr	r2, [sp, #24]
 8005a82:	2a47      	cmp	r2, #71	; 0x47
 8005a84:	d1be      	bne.n	8005a04 <_printf_float+0xfc>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1bc      	bne.n	8005a04 <_printf_float+0xfc>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e7b9      	b.n	8005a02 <_printf_float+0xfa>
 8005a8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a92:	d118      	bne.n	8005ac6 <_printf_float+0x1be>
 8005a94:	2900      	cmp	r1, #0
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	dd0b      	ble.n	8005ab2 <_printf_float+0x1aa>
 8005a9a:	6121      	str	r1, [r4, #16]
 8005a9c:	b913      	cbnz	r3, 8005aa4 <_printf_float+0x19c>
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	07d0      	lsls	r0, r2, #31
 8005aa2:	d502      	bpl.n	8005aaa <_printf_float+0x1a2>
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	440b      	add	r3, r1
 8005aa8:	6123      	str	r3, [r4, #16]
 8005aaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8005aac:	f04f 0900 	mov.w	r9, #0
 8005ab0:	e7de      	b.n	8005a70 <_printf_float+0x168>
 8005ab2:	b913      	cbnz	r3, 8005aba <_printf_float+0x1b2>
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	07d2      	lsls	r2, r2, #31
 8005ab8:	d501      	bpl.n	8005abe <_printf_float+0x1b6>
 8005aba:	3302      	adds	r3, #2
 8005abc:	e7f4      	b.n	8005aa8 <_printf_float+0x1a0>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e7f2      	b.n	8005aa8 <_printf_float+0x1a0>
 8005ac2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	db05      	blt.n	8005ad8 <_printf_float+0x1d0>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	6121      	str	r1, [r4, #16]
 8005ad0:	07d8      	lsls	r0, r3, #31
 8005ad2:	d5ea      	bpl.n	8005aaa <_printf_float+0x1a2>
 8005ad4:	1c4b      	adds	r3, r1, #1
 8005ad6:	e7e7      	b.n	8005aa8 <_printf_float+0x1a0>
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	bfd4      	ite	le
 8005adc:	f1c1 0202 	rsble	r2, r1, #2
 8005ae0:	2201      	movgt	r2, #1
 8005ae2:	4413      	add	r3, r2
 8005ae4:	e7e0      	b.n	8005aa8 <_printf_float+0x1a0>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	055a      	lsls	r2, r3, #21
 8005aea:	d407      	bmi.n	8005afc <_printf_float+0x1f4>
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	4642      	mov	r2, r8
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	d12c      	bne.n	8005b54 <_printf_float+0x24c>
 8005afa:	e764      	b.n	80059c6 <_printf_float+0xbe>
 8005afc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b00:	f240 80e0 	bls.w	8005cc4 <_printf_float+0x3bc>
 8005b04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f7fa ffdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d034      	beq.n	8005b7e <_printf_float+0x276>
 8005b14:	4a37      	ldr	r2, [pc, #220]	; (8005bf4 <_printf_float+0x2ec>)
 8005b16:	2301      	movs	r3, #1
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f43f af51 	beq.w	80059c6 <_printf_float+0xbe>
 8005b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	db02      	blt.n	8005b32 <_printf_float+0x22a>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	07d8      	lsls	r0, r3, #31
 8005b30:	d510      	bpl.n	8005b54 <_printf_float+0x24c>
 8005b32:	ee18 3a10 	vmov	r3, s16
 8005b36:	4652      	mov	r2, sl
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f43f af41 	beq.w	80059c6 <_printf_float+0xbe>
 8005b44:	f04f 0800 	mov.w	r8, #0
 8005b48:	f104 091a 	add.w	r9, r4, #26
 8005b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	4543      	cmp	r3, r8
 8005b52:	dc09      	bgt.n	8005b68 <_printf_float+0x260>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	079b      	lsls	r3, r3, #30
 8005b58:	f100 8107 	bmi.w	8005d6a <_printf_float+0x462>
 8005b5c:	68e0      	ldr	r0, [r4, #12]
 8005b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b60:	4298      	cmp	r0, r3
 8005b62:	bfb8      	it	lt
 8005b64:	4618      	movlt	r0, r3
 8005b66:	e730      	b.n	80059ca <_printf_float+0xc2>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	464a      	mov	r2, r9
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f af27 	beq.w	80059c6 <_printf_float+0xbe>
 8005b78:	f108 0801 	add.w	r8, r8, #1
 8005b7c:	e7e6      	b.n	8005b4c <_printf_float+0x244>
 8005b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dc39      	bgt.n	8005bf8 <_printf_float+0x2f0>
 8005b84:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <_printf_float+0x2ec>)
 8005b86:	2301      	movs	r3, #1
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f af19 	beq.w	80059c6 <_printf_float+0xbe>
 8005b94:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d102      	bne.n	8005ba2 <_printf_float+0x29a>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	07d9      	lsls	r1, r3, #31
 8005ba0:	d5d8      	bpl.n	8005b54 <_printf_float+0x24c>
 8005ba2:	ee18 3a10 	vmov	r3, s16
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f af09 	beq.w	80059c6 <_printf_float+0xbe>
 8005bb4:	f04f 0900 	mov.w	r9, #0
 8005bb8:	f104 0a1a 	add.w	sl, r4, #26
 8005bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbe:	425b      	negs	r3, r3
 8005bc0:	454b      	cmp	r3, r9
 8005bc2:	dc01      	bgt.n	8005bc8 <_printf_float+0x2c0>
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	e792      	b.n	8005aee <_printf_float+0x1e6>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4652      	mov	r2, sl
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f aef7 	beq.w	80059c6 <_printf_float+0xbe>
 8005bd8:	f109 0901 	add.w	r9, r9, #1
 8005bdc:	e7ee      	b.n	8005bbc <_printf_float+0x2b4>
 8005bde:	bf00      	nop
 8005be0:	7fefffff 	.word	0x7fefffff
 8005be4:	0800855c 	.word	0x0800855c
 8005be8:	08008560 	.word	0x08008560
 8005bec:	08008564 	.word	0x08008564
 8005bf0:	08008568 	.word	0x08008568
 8005bf4:	0800856c 	.word	0x0800856c
 8005bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	bfa8      	it	ge
 8005c00:	461a      	movge	r2, r3
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	4691      	mov	r9, r2
 8005c06:	dc37      	bgt.n	8005c78 <_printf_float+0x370>
 8005c08:	f04f 0b00 	mov.w	fp, #0
 8005c0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c10:	f104 021a 	add.w	r2, r4, #26
 8005c14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c16:	9305      	str	r3, [sp, #20]
 8005c18:	eba3 0309 	sub.w	r3, r3, r9
 8005c1c:	455b      	cmp	r3, fp
 8005c1e:	dc33      	bgt.n	8005c88 <_printf_float+0x380>
 8005c20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c24:	429a      	cmp	r2, r3
 8005c26:	db3b      	blt.n	8005ca0 <_printf_float+0x398>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	07da      	lsls	r2, r3, #31
 8005c2c:	d438      	bmi.n	8005ca0 <_printf_float+0x398>
 8005c2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c32:	eba2 0903 	sub.w	r9, r2, r3
 8005c36:	9b05      	ldr	r3, [sp, #20]
 8005c38:	1ad2      	subs	r2, r2, r3
 8005c3a:	4591      	cmp	r9, r2
 8005c3c:	bfa8      	it	ge
 8005c3e:	4691      	movge	r9, r2
 8005c40:	f1b9 0f00 	cmp.w	r9, #0
 8005c44:	dc35      	bgt.n	8005cb2 <_printf_float+0x3aa>
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c4e:	f104 0a1a 	add.w	sl, r4, #26
 8005c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	eba3 0309 	sub.w	r3, r3, r9
 8005c5c:	4543      	cmp	r3, r8
 8005c5e:	f77f af79 	ble.w	8005b54 <_printf_float+0x24c>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4652      	mov	r2, sl
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f aeaa 	beq.w	80059c6 <_printf_float+0xbe>
 8005c72:	f108 0801 	add.w	r8, r8, #1
 8005c76:	e7ec      	b.n	8005c52 <_printf_float+0x34a>
 8005c78:	4613      	mov	r3, r2
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	d1c0      	bne.n	8005c08 <_printf_float+0x300>
 8005c86:	e69e      	b.n	80059c6 <_printf_float+0xbe>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	9205      	str	r2, [sp, #20]
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	f43f ae97 	beq.w	80059c6 <_printf_float+0xbe>
 8005c98:	9a05      	ldr	r2, [sp, #20]
 8005c9a:	f10b 0b01 	add.w	fp, fp, #1
 8005c9e:	e7b9      	b.n	8005c14 <_printf_float+0x30c>
 8005ca0:	ee18 3a10 	vmov	r3, s16
 8005ca4:	4652      	mov	r2, sl
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	d1be      	bne.n	8005c2e <_printf_float+0x326>
 8005cb0:	e689      	b.n	80059c6 <_printf_float+0xbe>
 8005cb2:	9a05      	ldr	r2, [sp, #20]
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	4442      	add	r2, r8
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d1c1      	bne.n	8005c46 <_printf_float+0x33e>
 8005cc2:	e680      	b.n	80059c6 <_printf_float+0xbe>
 8005cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cc6:	2a01      	cmp	r2, #1
 8005cc8:	dc01      	bgt.n	8005cce <_printf_float+0x3c6>
 8005cca:	07db      	lsls	r3, r3, #31
 8005ccc:	d53a      	bpl.n	8005d44 <_printf_float+0x43c>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b8      	blx	r7
 8005cd8:	3001      	adds	r0, #1
 8005cda:	f43f ae74 	beq.w	80059c6 <_printf_float+0xbe>
 8005cde:	ee18 3a10 	vmov	r3, s16
 8005ce2:	4652      	mov	r2, sl
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	f43f ae6b 	beq.w	80059c6 <_printf_float+0xbe>
 8005cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005cfc:	f7fa fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d00:	b9d8      	cbnz	r0, 8005d3a <_printf_float+0x432>
 8005d02:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005d06:	f108 0201 	add.w	r2, r8, #1
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	d10e      	bne.n	8005d32 <_printf_float+0x42a>
 8005d14:	e657      	b.n	80059c6 <_printf_float+0xbe>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4652      	mov	r2, sl
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	f43f ae50 	beq.w	80059c6 <_printf_float+0xbe>
 8005d26:	f108 0801 	add.w	r8, r8, #1
 8005d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	4543      	cmp	r3, r8
 8005d30:	dcf1      	bgt.n	8005d16 <_printf_float+0x40e>
 8005d32:	464b      	mov	r3, r9
 8005d34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d38:	e6da      	b.n	8005af0 <_printf_float+0x1e8>
 8005d3a:	f04f 0800 	mov.w	r8, #0
 8005d3e:	f104 0a1a 	add.w	sl, r4, #26
 8005d42:	e7f2      	b.n	8005d2a <_printf_float+0x422>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4642      	mov	r2, r8
 8005d48:	e7df      	b.n	8005d0a <_printf_float+0x402>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	464a      	mov	r2, r9
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b8      	blx	r7
 8005d54:	3001      	adds	r0, #1
 8005d56:	f43f ae36 	beq.w	80059c6 <_printf_float+0xbe>
 8005d5a:	f108 0801 	add.w	r8, r8, #1
 8005d5e:	68e3      	ldr	r3, [r4, #12]
 8005d60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d62:	1a5b      	subs	r3, r3, r1
 8005d64:	4543      	cmp	r3, r8
 8005d66:	dcf0      	bgt.n	8005d4a <_printf_float+0x442>
 8005d68:	e6f8      	b.n	8005b5c <_printf_float+0x254>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	f104 0919 	add.w	r9, r4, #25
 8005d72:	e7f4      	b.n	8005d5e <_printf_float+0x456>

08005d74 <_printf_common>:
 8005d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d78:	4616      	mov	r6, r2
 8005d7a:	4699      	mov	r9, r3
 8005d7c:	688a      	ldr	r2, [r1, #8]
 8005d7e:	690b      	ldr	r3, [r1, #16]
 8005d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d84:	4293      	cmp	r3, r2
 8005d86:	bfb8      	it	lt
 8005d88:	4613      	movlt	r3, r2
 8005d8a:	6033      	str	r3, [r6, #0]
 8005d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d90:	4607      	mov	r7, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	b10a      	cbz	r2, 8005d9a <_printf_common+0x26>
 8005d96:	3301      	adds	r3, #1
 8005d98:	6033      	str	r3, [r6, #0]
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	0699      	lsls	r1, r3, #26
 8005d9e:	bf42      	ittt	mi
 8005da0:	6833      	ldrmi	r3, [r6, #0]
 8005da2:	3302      	addmi	r3, #2
 8005da4:	6033      	strmi	r3, [r6, #0]
 8005da6:	6825      	ldr	r5, [r4, #0]
 8005da8:	f015 0506 	ands.w	r5, r5, #6
 8005dac:	d106      	bne.n	8005dbc <_printf_common+0x48>
 8005dae:	f104 0a19 	add.w	sl, r4, #25
 8005db2:	68e3      	ldr	r3, [r4, #12]
 8005db4:	6832      	ldr	r2, [r6, #0]
 8005db6:	1a9b      	subs	r3, r3, r2
 8005db8:	42ab      	cmp	r3, r5
 8005dba:	dc26      	bgt.n	8005e0a <_printf_common+0x96>
 8005dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dc0:	1e13      	subs	r3, r2, #0
 8005dc2:	6822      	ldr	r2, [r4, #0]
 8005dc4:	bf18      	it	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	0692      	lsls	r2, r2, #26
 8005dca:	d42b      	bmi.n	8005e24 <_printf_common+0xb0>
 8005dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	47c0      	blx	r8
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	d01e      	beq.n	8005e18 <_printf_common+0xa4>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	6922      	ldr	r2, [r4, #16]
 8005dde:	f003 0306 	and.w	r3, r3, #6
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	bf02      	ittt	eq
 8005de6:	68e5      	ldreq	r5, [r4, #12]
 8005de8:	6833      	ldreq	r3, [r6, #0]
 8005dea:	1aed      	subeq	r5, r5, r3
 8005dec:	68a3      	ldr	r3, [r4, #8]
 8005dee:	bf0c      	ite	eq
 8005df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df4:	2500      	movne	r5, #0
 8005df6:	4293      	cmp	r3, r2
 8005df8:	bfc4      	itt	gt
 8005dfa:	1a9b      	subgt	r3, r3, r2
 8005dfc:	18ed      	addgt	r5, r5, r3
 8005dfe:	2600      	movs	r6, #0
 8005e00:	341a      	adds	r4, #26
 8005e02:	42b5      	cmp	r5, r6
 8005e04:	d11a      	bne.n	8005e3c <_printf_common+0xc8>
 8005e06:	2000      	movs	r0, #0
 8005e08:	e008      	b.n	8005e1c <_printf_common+0xa8>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	4649      	mov	r1, r9
 8005e10:	4638      	mov	r0, r7
 8005e12:	47c0      	blx	r8
 8005e14:	3001      	adds	r0, #1
 8005e16:	d103      	bne.n	8005e20 <_printf_common+0xac>
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e20:	3501      	adds	r5, #1
 8005e22:	e7c6      	b.n	8005db2 <_printf_common+0x3e>
 8005e24:	18e1      	adds	r1, r4, r3
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	2030      	movs	r0, #48	; 0x30
 8005e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e2e:	4422      	add	r2, r4
 8005e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e38:	3302      	adds	r3, #2
 8005e3a:	e7c7      	b.n	8005dcc <_printf_common+0x58>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	4622      	mov	r2, r4
 8005e40:	4649      	mov	r1, r9
 8005e42:	4638      	mov	r0, r7
 8005e44:	47c0      	blx	r8
 8005e46:	3001      	adds	r0, #1
 8005e48:	d0e6      	beq.n	8005e18 <_printf_common+0xa4>
 8005e4a:	3601      	adds	r6, #1
 8005e4c:	e7d9      	b.n	8005e02 <_printf_common+0x8e>
	...

08005e50 <_printf_i>:
 8005e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	7e0f      	ldrb	r7, [r1, #24]
 8005e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e58:	2f78      	cmp	r7, #120	; 0x78
 8005e5a:	4691      	mov	r9, r2
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	469a      	mov	sl, r3
 8005e62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e66:	d807      	bhi.n	8005e78 <_printf_i+0x28>
 8005e68:	2f62      	cmp	r7, #98	; 0x62
 8005e6a:	d80a      	bhi.n	8005e82 <_printf_i+0x32>
 8005e6c:	2f00      	cmp	r7, #0
 8005e6e:	f000 80d4 	beq.w	800601a <_printf_i+0x1ca>
 8005e72:	2f58      	cmp	r7, #88	; 0x58
 8005e74:	f000 80c0 	beq.w	8005ff8 <_printf_i+0x1a8>
 8005e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e80:	e03a      	b.n	8005ef8 <_printf_i+0xa8>
 8005e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e86:	2b15      	cmp	r3, #21
 8005e88:	d8f6      	bhi.n	8005e78 <_printf_i+0x28>
 8005e8a:	a101      	add	r1, pc, #4	; (adr r1, 8005e90 <_printf_i+0x40>)
 8005e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e90:	08005ee9 	.word	0x08005ee9
 8005e94:	08005efd 	.word	0x08005efd
 8005e98:	08005e79 	.word	0x08005e79
 8005e9c:	08005e79 	.word	0x08005e79
 8005ea0:	08005e79 	.word	0x08005e79
 8005ea4:	08005e79 	.word	0x08005e79
 8005ea8:	08005efd 	.word	0x08005efd
 8005eac:	08005e79 	.word	0x08005e79
 8005eb0:	08005e79 	.word	0x08005e79
 8005eb4:	08005e79 	.word	0x08005e79
 8005eb8:	08005e79 	.word	0x08005e79
 8005ebc:	08006001 	.word	0x08006001
 8005ec0:	08005f29 	.word	0x08005f29
 8005ec4:	08005fbb 	.word	0x08005fbb
 8005ec8:	08005e79 	.word	0x08005e79
 8005ecc:	08005e79 	.word	0x08005e79
 8005ed0:	08006023 	.word	0x08006023
 8005ed4:	08005e79 	.word	0x08005e79
 8005ed8:	08005f29 	.word	0x08005f29
 8005edc:	08005e79 	.word	0x08005e79
 8005ee0:	08005e79 	.word	0x08005e79
 8005ee4:	08005fc3 	.word	0x08005fc3
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	1d1a      	adds	r2, r3, #4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	602a      	str	r2, [r5, #0]
 8005ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e09f      	b.n	800603c <_printf_i+0x1ec>
 8005efc:	6820      	ldr	r0, [r4, #0]
 8005efe:	682b      	ldr	r3, [r5, #0]
 8005f00:	0607      	lsls	r7, r0, #24
 8005f02:	f103 0104 	add.w	r1, r3, #4
 8005f06:	6029      	str	r1, [r5, #0]
 8005f08:	d501      	bpl.n	8005f0e <_printf_i+0xbe>
 8005f0a:	681e      	ldr	r6, [r3, #0]
 8005f0c:	e003      	b.n	8005f16 <_printf_i+0xc6>
 8005f0e:	0646      	lsls	r6, r0, #25
 8005f10:	d5fb      	bpl.n	8005f0a <_printf_i+0xba>
 8005f12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f16:	2e00      	cmp	r6, #0
 8005f18:	da03      	bge.n	8005f22 <_printf_i+0xd2>
 8005f1a:	232d      	movs	r3, #45	; 0x2d
 8005f1c:	4276      	negs	r6, r6
 8005f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f22:	485a      	ldr	r0, [pc, #360]	; (800608c <_printf_i+0x23c>)
 8005f24:	230a      	movs	r3, #10
 8005f26:	e012      	b.n	8005f4e <_printf_i+0xfe>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	6820      	ldr	r0, [r4, #0]
 8005f2c:	1d19      	adds	r1, r3, #4
 8005f2e:	6029      	str	r1, [r5, #0]
 8005f30:	0605      	lsls	r5, r0, #24
 8005f32:	d501      	bpl.n	8005f38 <_printf_i+0xe8>
 8005f34:	681e      	ldr	r6, [r3, #0]
 8005f36:	e002      	b.n	8005f3e <_printf_i+0xee>
 8005f38:	0641      	lsls	r1, r0, #25
 8005f3a:	d5fb      	bpl.n	8005f34 <_printf_i+0xe4>
 8005f3c:	881e      	ldrh	r6, [r3, #0]
 8005f3e:	4853      	ldr	r0, [pc, #332]	; (800608c <_printf_i+0x23c>)
 8005f40:	2f6f      	cmp	r7, #111	; 0x6f
 8005f42:	bf0c      	ite	eq
 8005f44:	2308      	moveq	r3, #8
 8005f46:	230a      	movne	r3, #10
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4e:	6865      	ldr	r5, [r4, #4]
 8005f50:	60a5      	str	r5, [r4, #8]
 8005f52:	2d00      	cmp	r5, #0
 8005f54:	bfa2      	ittt	ge
 8005f56:	6821      	ldrge	r1, [r4, #0]
 8005f58:	f021 0104 	bicge.w	r1, r1, #4
 8005f5c:	6021      	strge	r1, [r4, #0]
 8005f5e:	b90e      	cbnz	r6, 8005f64 <_printf_i+0x114>
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	d04b      	beq.n	8005ffc <_printf_i+0x1ac>
 8005f64:	4615      	mov	r5, r2
 8005f66:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f6a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f6e:	5dc7      	ldrb	r7, [r0, r7]
 8005f70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f74:	4637      	mov	r7, r6
 8005f76:	42bb      	cmp	r3, r7
 8005f78:	460e      	mov	r6, r1
 8005f7a:	d9f4      	bls.n	8005f66 <_printf_i+0x116>
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d10b      	bne.n	8005f98 <_printf_i+0x148>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	07de      	lsls	r6, r3, #31
 8005f84:	d508      	bpl.n	8005f98 <_printf_i+0x148>
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	6861      	ldr	r1, [r4, #4]
 8005f8a:	4299      	cmp	r1, r3
 8005f8c:	bfde      	ittt	le
 8005f8e:	2330      	movle	r3, #48	; 0x30
 8005f90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f98:	1b52      	subs	r2, r2, r5
 8005f9a:	6122      	str	r2, [r4, #16]
 8005f9c:	f8cd a000 	str.w	sl, [sp]
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	aa03      	add	r2, sp, #12
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff fee4 	bl	8005d74 <_printf_common>
 8005fac:	3001      	adds	r0, #1
 8005fae:	d14a      	bne.n	8006046 <_printf_i+0x1f6>
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb4:	b004      	add	sp, #16
 8005fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	f043 0320 	orr.w	r3, r3, #32
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	4833      	ldr	r0, [pc, #204]	; (8006090 <_printf_i+0x240>)
 8005fc4:	2778      	movs	r7, #120	; 0x78
 8005fc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	6829      	ldr	r1, [r5, #0]
 8005fce:	061f      	lsls	r7, r3, #24
 8005fd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fd4:	d402      	bmi.n	8005fdc <_printf_i+0x18c>
 8005fd6:	065f      	lsls	r7, r3, #25
 8005fd8:	bf48      	it	mi
 8005fda:	b2b6      	uxthmi	r6, r6
 8005fdc:	07df      	lsls	r7, r3, #31
 8005fde:	bf48      	it	mi
 8005fe0:	f043 0320 	orrmi.w	r3, r3, #32
 8005fe4:	6029      	str	r1, [r5, #0]
 8005fe6:	bf48      	it	mi
 8005fe8:	6023      	strmi	r3, [r4, #0]
 8005fea:	b91e      	cbnz	r6, 8005ff4 <_printf_i+0x1a4>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	f023 0320 	bic.w	r3, r3, #32
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	e7a7      	b.n	8005f48 <_printf_i+0xf8>
 8005ff8:	4824      	ldr	r0, [pc, #144]	; (800608c <_printf_i+0x23c>)
 8005ffa:	e7e4      	b.n	8005fc6 <_printf_i+0x176>
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	e7bd      	b.n	8005f7c <_printf_i+0x12c>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	6826      	ldr	r6, [r4, #0]
 8006004:	6961      	ldr	r1, [r4, #20]
 8006006:	1d18      	adds	r0, r3, #4
 8006008:	6028      	str	r0, [r5, #0]
 800600a:	0635      	lsls	r5, r6, #24
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	d501      	bpl.n	8006014 <_printf_i+0x1c4>
 8006010:	6019      	str	r1, [r3, #0]
 8006012:	e002      	b.n	800601a <_printf_i+0x1ca>
 8006014:	0670      	lsls	r0, r6, #25
 8006016:	d5fb      	bpl.n	8006010 <_printf_i+0x1c0>
 8006018:	8019      	strh	r1, [r3, #0]
 800601a:	2300      	movs	r3, #0
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	4615      	mov	r5, r2
 8006020:	e7bc      	b.n	8005f9c <_printf_i+0x14c>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	1d1a      	adds	r2, r3, #4
 8006026:	602a      	str	r2, [r5, #0]
 8006028:	681d      	ldr	r5, [r3, #0]
 800602a:	6862      	ldr	r2, [r4, #4]
 800602c:	2100      	movs	r1, #0
 800602e:	4628      	mov	r0, r5
 8006030:	f7fa f8ce 	bl	80001d0 <memchr>
 8006034:	b108      	cbz	r0, 800603a <_printf_i+0x1ea>
 8006036:	1b40      	subs	r0, r0, r5
 8006038:	6060      	str	r0, [r4, #4]
 800603a:	6863      	ldr	r3, [r4, #4]
 800603c:	6123      	str	r3, [r4, #16]
 800603e:	2300      	movs	r3, #0
 8006040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006044:	e7aa      	b.n	8005f9c <_printf_i+0x14c>
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	462a      	mov	r2, r5
 800604a:	4649      	mov	r1, r9
 800604c:	4640      	mov	r0, r8
 800604e:	47d0      	blx	sl
 8006050:	3001      	adds	r0, #1
 8006052:	d0ad      	beq.n	8005fb0 <_printf_i+0x160>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	079b      	lsls	r3, r3, #30
 8006058:	d413      	bmi.n	8006082 <_printf_i+0x232>
 800605a:	68e0      	ldr	r0, [r4, #12]
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	4298      	cmp	r0, r3
 8006060:	bfb8      	it	lt
 8006062:	4618      	movlt	r0, r3
 8006064:	e7a6      	b.n	8005fb4 <_printf_i+0x164>
 8006066:	2301      	movs	r3, #1
 8006068:	4632      	mov	r2, r6
 800606a:	4649      	mov	r1, r9
 800606c:	4640      	mov	r0, r8
 800606e:	47d0      	blx	sl
 8006070:	3001      	adds	r0, #1
 8006072:	d09d      	beq.n	8005fb0 <_printf_i+0x160>
 8006074:	3501      	adds	r5, #1
 8006076:	68e3      	ldr	r3, [r4, #12]
 8006078:	9903      	ldr	r1, [sp, #12]
 800607a:	1a5b      	subs	r3, r3, r1
 800607c:	42ab      	cmp	r3, r5
 800607e:	dcf2      	bgt.n	8006066 <_printf_i+0x216>
 8006080:	e7eb      	b.n	800605a <_printf_i+0x20a>
 8006082:	2500      	movs	r5, #0
 8006084:	f104 0619 	add.w	r6, r4, #25
 8006088:	e7f5      	b.n	8006076 <_printf_i+0x226>
 800608a:	bf00      	nop
 800608c:	0800856e 	.word	0x0800856e
 8006090:	0800857f 	.word	0x0800857f

08006094 <std>:
 8006094:	2300      	movs	r3, #0
 8006096:	b510      	push	{r4, lr}
 8006098:	4604      	mov	r4, r0
 800609a:	e9c0 3300 	strd	r3, r3, [r0]
 800609e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060a2:	6083      	str	r3, [r0, #8]
 80060a4:	8181      	strh	r1, [r0, #12]
 80060a6:	6643      	str	r3, [r0, #100]	; 0x64
 80060a8:	81c2      	strh	r2, [r0, #14]
 80060aa:	6183      	str	r3, [r0, #24]
 80060ac:	4619      	mov	r1, r3
 80060ae:	2208      	movs	r2, #8
 80060b0:	305c      	adds	r0, #92	; 0x5c
 80060b2:	f000 f914 	bl	80062de <memset>
 80060b6:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <std+0x58>)
 80060b8:	6263      	str	r3, [r4, #36]	; 0x24
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <std+0x5c>)
 80060bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80060be:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <std+0x60>)
 80060c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060c2:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <std+0x64>)
 80060c4:	6323      	str	r3, [r4, #48]	; 0x30
 80060c6:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <std+0x68>)
 80060c8:	6224      	str	r4, [r4, #32]
 80060ca:	429c      	cmp	r4, r3
 80060cc:	d006      	beq.n	80060dc <std+0x48>
 80060ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80060d2:	4294      	cmp	r4, r2
 80060d4:	d002      	beq.n	80060dc <std+0x48>
 80060d6:	33d0      	adds	r3, #208	; 0xd0
 80060d8:	429c      	cmp	r4, r3
 80060da:	d105      	bne.n	80060e8 <std+0x54>
 80060dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e4:	f000 b978 	b.w	80063d8 <__retarget_lock_init_recursive>
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	bf00      	nop
 80060ec:	08006259 	.word	0x08006259
 80060f0:	0800627b 	.word	0x0800627b
 80060f4:	080062b3 	.word	0x080062b3
 80060f8:	080062d7 	.word	0x080062d7
 80060fc:	20000440 	.word	0x20000440

08006100 <stdio_exit_handler>:
 8006100:	4a02      	ldr	r2, [pc, #8]	; (800610c <stdio_exit_handler+0xc>)
 8006102:	4903      	ldr	r1, [pc, #12]	; (8006110 <stdio_exit_handler+0x10>)
 8006104:	4803      	ldr	r0, [pc, #12]	; (8006114 <stdio_exit_handler+0x14>)
 8006106:	f000 b869 	b.w	80061dc <_fwalk_sglue>
 800610a:	bf00      	nop
 800610c:	20000044 	.word	0x20000044
 8006110:	08007d89 	.word	0x08007d89
 8006114:	20000050 	.word	0x20000050

08006118 <cleanup_stdio>:
 8006118:	6841      	ldr	r1, [r0, #4]
 800611a:	4b0c      	ldr	r3, [pc, #48]	; (800614c <cleanup_stdio+0x34>)
 800611c:	4299      	cmp	r1, r3
 800611e:	b510      	push	{r4, lr}
 8006120:	4604      	mov	r4, r0
 8006122:	d001      	beq.n	8006128 <cleanup_stdio+0x10>
 8006124:	f001 fe30 	bl	8007d88 <_fflush_r>
 8006128:	68a1      	ldr	r1, [r4, #8]
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <cleanup_stdio+0x38>)
 800612c:	4299      	cmp	r1, r3
 800612e:	d002      	beq.n	8006136 <cleanup_stdio+0x1e>
 8006130:	4620      	mov	r0, r4
 8006132:	f001 fe29 	bl	8007d88 <_fflush_r>
 8006136:	68e1      	ldr	r1, [r4, #12]
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <cleanup_stdio+0x3c>)
 800613a:	4299      	cmp	r1, r3
 800613c:	d004      	beq.n	8006148 <cleanup_stdio+0x30>
 800613e:	4620      	mov	r0, r4
 8006140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006144:	f001 be20 	b.w	8007d88 <_fflush_r>
 8006148:	bd10      	pop	{r4, pc}
 800614a:	bf00      	nop
 800614c:	20000440 	.word	0x20000440
 8006150:	200004a8 	.word	0x200004a8
 8006154:	20000510 	.word	0x20000510

08006158 <global_stdio_init.part.0>:
 8006158:	b510      	push	{r4, lr}
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <global_stdio_init.part.0+0x30>)
 800615c:	4c0b      	ldr	r4, [pc, #44]	; (800618c <global_stdio_init.part.0+0x34>)
 800615e:	4a0c      	ldr	r2, [pc, #48]	; (8006190 <global_stdio_init.part.0+0x38>)
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	4620      	mov	r0, r4
 8006164:	2200      	movs	r2, #0
 8006166:	2104      	movs	r1, #4
 8006168:	f7ff ff94 	bl	8006094 <std>
 800616c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006170:	2201      	movs	r2, #1
 8006172:	2109      	movs	r1, #9
 8006174:	f7ff ff8e 	bl	8006094 <std>
 8006178:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800617c:	2202      	movs	r2, #2
 800617e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006182:	2112      	movs	r1, #18
 8006184:	f7ff bf86 	b.w	8006094 <std>
 8006188:	20000578 	.word	0x20000578
 800618c:	20000440 	.word	0x20000440
 8006190:	08006101 	.word	0x08006101

08006194 <__sfp_lock_acquire>:
 8006194:	4801      	ldr	r0, [pc, #4]	; (800619c <__sfp_lock_acquire+0x8>)
 8006196:	f000 b920 	b.w	80063da <__retarget_lock_acquire_recursive>
 800619a:	bf00      	nop
 800619c:	20000581 	.word	0x20000581

080061a0 <__sfp_lock_release>:
 80061a0:	4801      	ldr	r0, [pc, #4]	; (80061a8 <__sfp_lock_release+0x8>)
 80061a2:	f000 b91b 	b.w	80063dc <__retarget_lock_release_recursive>
 80061a6:	bf00      	nop
 80061a8:	20000581 	.word	0x20000581

080061ac <__sinit>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	4604      	mov	r4, r0
 80061b0:	f7ff fff0 	bl	8006194 <__sfp_lock_acquire>
 80061b4:	6a23      	ldr	r3, [r4, #32]
 80061b6:	b11b      	cbz	r3, 80061c0 <__sinit+0x14>
 80061b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061bc:	f7ff bff0 	b.w	80061a0 <__sfp_lock_release>
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <__sinit+0x28>)
 80061c2:	6223      	str	r3, [r4, #32]
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <__sinit+0x2c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f5      	bne.n	80061b8 <__sinit+0xc>
 80061cc:	f7ff ffc4 	bl	8006158 <global_stdio_init.part.0>
 80061d0:	e7f2      	b.n	80061b8 <__sinit+0xc>
 80061d2:	bf00      	nop
 80061d4:	08006119 	.word	0x08006119
 80061d8:	20000578 	.word	0x20000578

080061dc <_fwalk_sglue>:
 80061dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e0:	4607      	mov	r7, r0
 80061e2:	4688      	mov	r8, r1
 80061e4:	4614      	mov	r4, r2
 80061e6:	2600      	movs	r6, #0
 80061e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ec:	f1b9 0901 	subs.w	r9, r9, #1
 80061f0:	d505      	bpl.n	80061fe <_fwalk_sglue+0x22>
 80061f2:	6824      	ldr	r4, [r4, #0]
 80061f4:	2c00      	cmp	r4, #0
 80061f6:	d1f7      	bne.n	80061e8 <_fwalk_sglue+0xc>
 80061f8:	4630      	mov	r0, r6
 80061fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fe:	89ab      	ldrh	r3, [r5, #12]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d907      	bls.n	8006214 <_fwalk_sglue+0x38>
 8006204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006208:	3301      	adds	r3, #1
 800620a:	d003      	beq.n	8006214 <_fwalk_sglue+0x38>
 800620c:	4629      	mov	r1, r5
 800620e:	4638      	mov	r0, r7
 8006210:	47c0      	blx	r8
 8006212:	4306      	orrs	r6, r0
 8006214:	3568      	adds	r5, #104	; 0x68
 8006216:	e7e9      	b.n	80061ec <_fwalk_sglue+0x10>

08006218 <siprintf>:
 8006218:	b40e      	push	{r1, r2, r3}
 800621a:	b500      	push	{lr}
 800621c:	b09c      	sub	sp, #112	; 0x70
 800621e:	ab1d      	add	r3, sp, #116	; 0x74
 8006220:	9002      	str	r0, [sp, #8]
 8006222:	9006      	str	r0, [sp, #24]
 8006224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006228:	4809      	ldr	r0, [pc, #36]	; (8006250 <siprintf+0x38>)
 800622a:	9107      	str	r1, [sp, #28]
 800622c:	9104      	str	r1, [sp, #16]
 800622e:	4909      	ldr	r1, [pc, #36]	; (8006254 <siprintf+0x3c>)
 8006230:	f853 2b04 	ldr.w	r2, [r3], #4
 8006234:	9105      	str	r1, [sp, #20]
 8006236:	6800      	ldr	r0, [r0, #0]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	a902      	add	r1, sp, #8
 800623c:	f001 fc20 	bl	8007a80 <_svfiprintf_r>
 8006240:	9b02      	ldr	r3, [sp, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	b01c      	add	sp, #112	; 0x70
 8006248:	f85d eb04 	ldr.w	lr, [sp], #4
 800624c:	b003      	add	sp, #12
 800624e:	4770      	bx	lr
 8006250:	2000009c 	.word	0x2000009c
 8006254:	ffff0208 	.word	0xffff0208

08006258 <__sread>:
 8006258:	b510      	push	{r4, lr}
 800625a:	460c      	mov	r4, r1
 800625c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006260:	f000 f86c 	bl	800633c <_read_r>
 8006264:	2800      	cmp	r0, #0
 8006266:	bfab      	itete	ge
 8006268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800626a:	89a3      	ldrhlt	r3, [r4, #12]
 800626c:	181b      	addge	r3, r3, r0
 800626e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006272:	bfac      	ite	ge
 8006274:	6563      	strge	r3, [r4, #84]	; 0x54
 8006276:	81a3      	strhlt	r3, [r4, #12]
 8006278:	bd10      	pop	{r4, pc}

0800627a <__swrite>:
 800627a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800627e:	461f      	mov	r7, r3
 8006280:	898b      	ldrh	r3, [r1, #12]
 8006282:	05db      	lsls	r3, r3, #23
 8006284:	4605      	mov	r5, r0
 8006286:	460c      	mov	r4, r1
 8006288:	4616      	mov	r6, r2
 800628a:	d505      	bpl.n	8006298 <__swrite+0x1e>
 800628c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006290:	2302      	movs	r3, #2
 8006292:	2200      	movs	r2, #0
 8006294:	f000 f840 	bl	8006318 <_lseek_r>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800629e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062a2:	81a3      	strh	r3, [r4, #12]
 80062a4:	4632      	mov	r2, r6
 80062a6:	463b      	mov	r3, r7
 80062a8:	4628      	mov	r0, r5
 80062aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ae:	f000 b857 	b.w	8006360 <_write_r>

080062b2 <__sseek>:
 80062b2:	b510      	push	{r4, lr}
 80062b4:	460c      	mov	r4, r1
 80062b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ba:	f000 f82d 	bl	8006318 <_lseek_r>
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	bf15      	itete	ne
 80062c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80062c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062ce:	81a3      	strheq	r3, [r4, #12]
 80062d0:	bf18      	it	ne
 80062d2:	81a3      	strhne	r3, [r4, #12]
 80062d4:	bd10      	pop	{r4, pc}

080062d6 <__sclose>:
 80062d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062da:	f000 b80d 	b.w	80062f8 <_close_r>

080062de <memset>:
 80062de:	4402      	add	r2, r0
 80062e0:	4603      	mov	r3, r0
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d100      	bne.n	80062e8 <memset+0xa>
 80062e6:	4770      	bx	lr
 80062e8:	f803 1b01 	strb.w	r1, [r3], #1
 80062ec:	e7f9      	b.n	80062e2 <memset+0x4>
	...

080062f0 <_localeconv_r>:
 80062f0:	4800      	ldr	r0, [pc, #0]	; (80062f4 <_localeconv_r+0x4>)
 80062f2:	4770      	bx	lr
 80062f4:	20000190 	.word	0x20000190

080062f8 <_close_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d06      	ldr	r5, [pc, #24]	; (8006314 <_close_r+0x1c>)
 80062fc:	2300      	movs	r3, #0
 80062fe:	4604      	mov	r4, r0
 8006300:	4608      	mov	r0, r1
 8006302:	602b      	str	r3, [r5, #0]
 8006304:	f7fc f910 	bl	8002528 <_close>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_close_r+0x1a>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_close_r+0x1a>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	2000057c 	.word	0x2000057c

08006318 <_lseek_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4d07      	ldr	r5, [pc, #28]	; (8006338 <_lseek_r+0x20>)
 800631c:	4604      	mov	r4, r0
 800631e:	4608      	mov	r0, r1
 8006320:	4611      	mov	r1, r2
 8006322:	2200      	movs	r2, #0
 8006324:	602a      	str	r2, [r5, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	f7fc f925 	bl	8002576 <_lseek>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_lseek_r+0x1e>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b103      	cbz	r3, 8006336 <_lseek_r+0x1e>
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	2000057c 	.word	0x2000057c

0800633c <_read_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4d07      	ldr	r5, [pc, #28]	; (800635c <_read_r+0x20>)
 8006340:	4604      	mov	r4, r0
 8006342:	4608      	mov	r0, r1
 8006344:	4611      	mov	r1, r2
 8006346:	2200      	movs	r2, #0
 8006348:	602a      	str	r2, [r5, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	f7fc f8cf 	bl	80024ee <_read>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_read_r+0x1e>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_read_r+0x1e>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	2000057c 	.word	0x2000057c

08006360 <_write_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4d07      	ldr	r5, [pc, #28]	; (8006380 <_write_r+0x20>)
 8006364:	4604      	mov	r4, r0
 8006366:	4608      	mov	r0, r1
 8006368:	4611      	mov	r1, r2
 800636a:	2200      	movs	r2, #0
 800636c:	602a      	str	r2, [r5, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	f7fb fd01 	bl	8001d76 <_write>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_write_r+0x1e>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_write_r+0x1e>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	2000057c 	.word	0x2000057c

08006384 <__errno>:
 8006384:	4b01      	ldr	r3, [pc, #4]	; (800638c <__errno+0x8>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	2000009c 	.word	0x2000009c

08006390 <__libc_init_array>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	4d0d      	ldr	r5, [pc, #52]	; (80063c8 <__libc_init_array+0x38>)
 8006394:	4c0d      	ldr	r4, [pc, #52]	; (80063cc <__libc_init_array+0x3c>)
 8006396:	1b64      	subs	r4, r4, r5
 8006398:	10a4      	asrs	r4, r4, #2
 800639a:	2600      	movs	r6, #0
 800639c:	42a6      	cmp	r6, r4
 800639e:	d109      	bne.n	80063b4 <__libc_init_array+0x24>
 80063a0:	4d0b      	ldr	r5, [pc, #44]	; (80063d0 <__libc_init_array+0x40>)
 80063a2:	4c0c      	ldr	r4, [pc, #48]	; (80063d4 <__libc_init_array+0x44>)
 80063a4:	f002 f894 	bl	80084d0 <_init>
 80063a8:	1b64      	subs	r4, r4, r5
 80063aa:	10a4      	asrs	r4, r4, #2
 80063ac:	2600      	movs	r6, #0
 80063ae:	42a6      	cmp	r6, r4
 80063b0:	d105      	bne.n	80063be <__libc_init_array+0x2e>
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b8:	4798      	blx	r3
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7ee      	b.n	800639c <__libc_init_array+0xc>
 80063be:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c2:	4798      	blx	r3
 80063c4:	3601      	adds	r6, #1
 80063c6:	e7f2      	b.n	80063ae <__libc_init_array+0x1e>
 80063c8:	080088d4 	.word	0x080088d4
 80063cc:	080088d4 	.word	0x080088d4
 80063d0:	080088d4 	.word	0x080088d4
 80063d4:	080088d8 	.word	0x080088d8

080063d8 <__retarget_lock_init_recursive>:
 80063d8:	4770      	bx	lr

080063da <__retarget_lock_acquire_recursive>:
 80063da:	4770      	bx	lr

080063dc <__retarget_lock_release_recursive>:
 80063dc:	4770      	bx	lr

080063de <quorem>:
 80063de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e2:	6903      	ldr	r3, [r0, #16]
 80063e4:	690c      	ldr	r4, [r1, #16]
 80063e6:	42a3      	cmp	r3, r4
 80063e8:	4607      	mov	r7, r0
 80063ea:	db7e      	blt.n	80064ea <quorem+0x10c>
 80063ec:	3c01      	subs	r4, #1
 80063ee:	f101 0814 	add.w	r8, r1, #20
 80063f2:	f100 0514 	add.w	r5, r0, #20
 80063f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006404:	3301      	adds	r3, #1
 8006406:	429a      	cmp	r2, r3
 8006408:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800640c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006410:	fbb2 f6f3 	udiv	r6, r2, r3
 8006414:	d331      	bcc.n	800647a <quorem+0x9c>
 8006416:	f04f 0e00 	mov.w	lr, #0
 800641a:	4640      	mov	r0, r8
 800641c:	46ac      	mov	ip, r5
 800641e:	46f2      	mov	sl, lr
 8006420:	f850 2b04 	ldr.w	r2, [r0], #4
 8006424:	b293      	uxth	r3, r2
 8006426:	fb06 e303 	mla	r3, r6, r3, lr
 800642a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800642e:	0c1a      	lsrs	r2, r3, #16
 8006430:	b29b      	uxth	r3, r3
 8006432:	ebaa 0303 	sub.w	r3, sl, r3
 8006436:	f8dc a000 	ldr.w	sl, [ip]
 800643a:	fa13 f38a 	uxtah	r3, r3, sl
 800643e:	fb06 220e 	mla	r2, r6, lr, r2
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	9b00      	ldr	r3, [sp, #0]
 8006446:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800644a:	b292      	uxth	r2, r2
 800644c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006454:	f8bd 3000 	ldrh.w	r3, [sp]
 8006458:	4581      	cmp	r9, r0
 800645a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800645e:	f84c 3b04 	str.w	r3, [ip], #4
 8006462:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006466:	d2db      	bcs.n	8006420 <quorem+0x42>
 8006468:	f855 300b 	ldr.w	r3, [r5, fp]
 800646c:	b92b      	cbnz	r3, 800647a <quorem+0x9c>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	3b04      	subs	r3, #4
 8006472:	429d      	cmp	r5, r3
 8006474:	461a      	mov	r2, r3
 8006476:	d32c      	bcc.n	80064d2 <quorem+0xf4>
 8006478:	613c      	str	r4, [r7, #16]
 800647a:	4638      	mov	r0, r7
 800647c:	f001 f9a6 	bl	80077cc <__mcmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	db22      	blt.n	80064ca <quorem+0xec>
 8006484:	3601      	adds	r6, #1
 8006486:	4629      	mov	r1, r5
 8006488:	2000      	movs	r0, #0
 800648a:	f858 2b04 	ldr.w	r2, [r8], #4
 800648e:	f8d1 c000 	ldr.w	ip, [r1]
 8006492:	b293      	uxth	r3, r2
 8006494:	1ac3      	subs	r3, r0, r3
 8006496:	0c12      	lsrs	r2, r2, #16
 8006498:	fa13 f38c 	uxtah	r3, r3, ip
 800649c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80064a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064aa:	45c1      	cmp	r9, r8
 80064ac:	f841 3b04 	str.w	r3, [r1], #4
 80064b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064b4:	d2e9      	bcs.n	800648a <quorem+0xac>
 80064b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064be:	b922      	cbnz	r2, 80064ca <quorem+0xec>
 80064c0:	3b04      	subs	r3, #4
 80064c2:	429d      	cmp	r5, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	d30a      	bcc.n	80064de <quorem+0x100>
 80064c8:	613c      	str	r4, [r7, #16]
 80064ca:	4630      	mov	r0, r6
 80064cc:	b003      	add	sp, #12
 80064ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	3b04      	subs	r3, #4
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	d1ce      	bne.n	8006478 <quorem+0x9a>
 80064da:	3c01      	subs	r4, #1
 80064dc:	e7c9      	b.n	8006472 <quorem+0x94>
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	3b04      	subs	r3, #4
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	d1f0      	bne.n	80064c8 <quorem+0xea>
 80064e6:	3c01      	subs	r4, #1
 80064e8:	e7eb      	b.n	80064c2 <quorem+0xe4>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e7ee      	b.n	80064cc <quorem+0xee>
	...

080064f0 <_dtoa_r>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	ed2d 8b04 	vpush	{d8-d9}
 80064f8:	69c5      	ldr	r5, [r0, #28]
 80064fa:	b093      	sub	sp, #76	; 0x4c
 80064fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006500:	ec57 6b10 	vmov	r6, r7, d0
 8006504:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006508:	9107      	str	r1, [sp, #28]
 800650a:	4604      	mov	r4, r0
 800650c:	920a      	str	r2, [sp, #40]	; 0x28
 800650e:	930d      	str	r3, [sp, #52]	; 0x34
 8006510:	b975      	cbnz	r5, 8006530 <_dtoa_r+0x40>
 8006512:	2010      	movs	r0, #16
 8006514:	f000 fe2a 	bl	800716c <malloc>
 8006518:	4602      	mov	r2, r0
 800651a:	61e0      	str	r0, [r4, #28]
 800651c:	b920      	cbnz	r0, 8006528 <_dtoa_r+0x38>
 800651e:	4bae      	ldr	r3, [pc, #696]	; (80067d8 <_dtoa_r+0x2e8>)
 8006520:	21ef      	movs	r1, #239	; 0xef
 8006522:	48ae      	ldr	r0, [pc, #696]	; (80067dc <_dtoa_r+0x2ec>)
 8006524:	f001 fc90 	bl	8007e48 <__assert_func>
 8006528:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800652c:	6005      	str	r5, [r0, #0]
 800652e:	60c5      	str	r5, [r0, #12]
 8006530:	69e3      	ldr	r3, [r4, #28]
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	b151      	cbz	r1, 800654c <_dtoa_r+0x5c>
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	604a      	str	r2, [r1, #4]
 800653a:	2301      	movs	r3, #1
 800653c:	4093      	lsls	r3, r2
 800653e:	608b      	str	r3, [r1, #8]
 8006540:	4620      	mov	r0, r4
 8006542:	f000 ff07 	bl	8007354 <_Bfree>
 8006546:	69e3      	ldr	r3, [r4, #28]
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	1e3b      	subs	r3, r7, #0
 800654e:	bfbb      	ittet	lt
 8006550:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006554:	9303      	strlt	r3, [sp, #12]
 8006556:	2300      	movge	r3, #0
 8006558:	2201      	movlt	r2, #1
 800655a:	bfac      	ite	ge
 800655c:	f8c8 3000 	strge.w	r3, [r8]
 8006560:	f8c8 2000 	strlt.w	r2, [r8]
 8006564:	4b9e      	ldr	r3, [pc, #632]	; (80067e0 <_dtoa_r+0x2f0>)
 8006566:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800656a:	ea33 0308 	bics.w	r3, r3, r8
 800656e:	d11b      	bne.n	80065a8 <_dtoa_r+0xb8>
 8006570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006572:	f242 730f 	movw	r3, #9999	; 0x270f
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800657c:	4333      	orrs	r3, r6
 800657e:	f000 8593 	beq.w	80070a8 <_dtoa_r+0xbb8>
 8006582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006584:	b963      	cbnz	r3, 80065a0 <_dtoa_r+0xb0>
 8006586:	4b97      	ldr	r3, [pc, #604]	; (80067e4 <_dtoa_r+0x2f4>)
 8006588:	e027      	b.n	80065da <_dtoa_r+0xea>
 800658a:	4b97      	ldr	r3, [pc, #604]	; (80067e8 <_dtoa_r+0x2f8>)
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	3308      	adds	r3, #8
 8006590:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	9800      	ldr	r0, [sp, #0]
 8006596:	b013      	add	sp, #76	; 0x4c
 8006598:	ecbd 8b04 	vpop	{d8-d9}
 800659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a0:	4b90      	ldr	r3, [pc, #576]	; (80067e4 <_dtoa_r+0x2f4>)
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	3303      	adds	r3, #3
 80065a6:	e7f3      	b.n	8006590 <_dtoa_r+0xa0>
 80065a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065ac:	2200      	movs	r2, #0
 80065ae:	ec51 0b17 	vmov	r0, r1, d7
 80065b2:	eeb0 8a47 	vmov.f32	s16, s14
 80065b6:	eef0 8a67 	vmov.f32	s17, s15
 80065ba:	2300      	movs	r3, #0
 80065bc:	f7fa fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 80065c0:	4681      	mov	r9, r0
 80065c2:	b160      	cbz	r0, 80065de <_dtoa_r+0xee>
 80065c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065c6:	2301      	movs	r3, #1
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8568 	beq.w	80070a2 <_dtoa_r+0xbb2>
 80065d2:	4b86      	ldr	r3, [pc, #536]	; (80067ec <_dtoa_r+0x2fc>)
 80065d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	3b01      	subs	r3, #1
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	e7da      	b.n	8006594 <_dtoa_r+0xa4>
 80065de:	aa10      	add	r2, sp, #64	; 0x40
 80065e0:	a911      	add	r1, sp, #68	; 0x44
 80065e2:	4620      	mov	r0, r4
 80065e4:	eeb0 0a48 	vmov.f32	s0, s16
 80065e8:	eef0 0a68 	vmov.f32	s1, s17
 80065ec:	f001 f994 	bl	8007918 <__d2b>
 80065f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80065f4:	4682      	mov	sl, r0
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	d07f      	beq.n	80066fa <_dtoa_r+0x20a>
 80065fa:	ee18 3a90 	vmov	r3, s17
 80065fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006602:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006606:	ec51 0b18 	vmov	r0, r1, d8
 800660a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800660e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006612:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006616:	4619      	mov	r1, r3
 8006618:	2200      	movs	r2, #0
 800661a:	4b75      	ldr	r3, [pc, #468]	; (80067f0 <_dtoa_r+0x300>)
 800661c:	f7f9 fe34 	bl	8000288 <__aeabi_dsub>
 8006620:	a367      	add	r3, pc, #412	; (adr r3, 80067c0 <_dtoa_r+0x2d0>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 ffe7 	bl	80005f8 <__aeabi_dmul>
 800662a:	a367      	add	r3, pc, #412	; (adr r3, 80067c8 <_dtoa_r+0x2d8>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7f9 fe2c 	bl	800028c <__adddf3>
 8006634:	4606      	mov	r6, r0
 8006636:	4628      	mov	r0, r5
 8006638:	460f      	mov	r7, r1
 800663a:	f7f9 ff73 	bl	8000524 <__aeabi_i2d>
 800663e:	a364      	add	r3, pc, #400	; (adr r3, 80067d0 <_dtoa_r+0x2e0>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f7f9 ffd8 	bl	80005f8 <__aeabi_dmul>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4630      	mov	r0, r6
 800664e:	4639      	mov	r1, r7
 8006650:	f7f9 fe1c 	bl	800028c <__adddf3>
 8006654:	4606      	mov	r6, r0
 8006656:	460f      	mov	r7, r1
 8006658:	f7fa fa7e 	bl	8000b58 <__aeabi_d2iz>
 800665c:	2200      	movs	r2, #0
 800665e:	4683      	mov	fp, r0
 8006660:	2300      	movs	r3, #0
 8006662:	4630      	mov	r0, r6
 8006664:	4639      	mov	r1, r7
 8006666:	f7fa fa39 	bl	8000adc <__aeabi_dcmplt>
 800666a:	b148      	cbz	r0, 8006680 <_dtoa_r+0x190>
 800666c:	4658      	mov	r0, fp
 800666e:	f7f9 ff59 	bl	8000524 <__aeabi_i2d>
 8006672:	4632      	mov	r2, r6
 8006674:	463b      	mov	r3, r7
 8006676:	f7fa fa27 	bl	8000ac8 <__aeabi_dcmpeq>
 800667a:	b908      	cbnz	r0, 8006680 <_dtoa_r+0x190>
 800667c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006680:	f1bb 0f16 	cmp.w	fp, #22
 8006684:	d857      	bhi.n	8006736 <_dtoa_r+0x246>
 8006686:	4b5b      	ldr	r3, [pc, #364]	; (80067f4 <_dtoa_r+0x304>)
 8006688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	ec51 0b18 	vmov	r0, r1, d8
 8006694:	f7fa fa22 	bl	8000adc <__aeabi_dcmplt>
 8006698:	2800      	cmp	r0, #0
 800669a:	d04e      	beq.n	800673a <_dtoa_r+0x24a>
 800669c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80066a0:	2300      	movs	r3, #0
 80066a2:	930c      	str	r3, [sp, #48]	; 0x30
 80066a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066a6:	1b5b      	subs	r3, r3, r5
 80066a8:	1e5a      	subs	r2, r3, #1
 80066aa:	bf45      	ittet	mi
 80066ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80066b0:	9305      	strmi	r3, [sp, #20]
 80066b2:	2300      	movpl	r3, #0
 80066b4:	2300      	movmi	r3, #0
 80066b6:	9206      	str	r2, [sp, #24]
 80066b8:	bf54      	ite	pl
 80066ba:	9305      	strpl	r3, [sp, #20]
 80066bc:	9306      	strmi	r3, [sp, #24]
 80066be:	f1bb 0f00 	cmp.w	fp, #0
 80066c2:	db3c      	blt.n	800673e <_dtoa_r+0x24e>
 80066c4:	9b06      	ldr	r3, [sp, #24]
 80066c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80066ca:	445b      	add	r3, fp
 80066cc:	9306      	str	r3, [sp, #24]
 80066ce:	2300      	movs	r3, #0
 80066d0:	9308      	str	r3, [sp, #32]
 80066d2:	9b07      	ldr	r3, [sp, #28]
 80066d4:	2b09      	cmp	r3, #9
 80066d6:	d868      	bhi.n	80067aa <_dtoa_r+0x2ba>
 80066d8:	2b05      	cmp	r3, #5
 80066da:	bfc4      	itt	gt
 80066dc:	3b04      	subgt	r3, #4
 80066de:	9307      	strgt	r3, [sp, #28]
 80066e0:	9b07      	ldr	r3, [sp, #28]
 80066e2:	f1a3 0302 	sub.w	r3, r3, #2
 80066e6:	bfcc      	ite	gt
 80066e8:	2500      	movgt	r5, #0
 80066ea:	2501      	movle	r5, #1
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	f200 8085 	bhi.w	80067fc <_dtoa_r+0x30c>
 80066f2:	e8df f003 	tbb	[pc, r3]
 80066f6:	3b2e      	.short	0x3b2e
 80066f8:	5839      	.short	0x5839
 80066fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066fe:	441d      	add	r5, r3
 8006700:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006704:	2b20      	cmp	r3, #32
 8006706:	bfc1      	itttt	gt
 8006708:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800670c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006710:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006714:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006718:	bfd6      	itet	le
 800671a:	f1c3 0320 	rsble	r3, r3, #32
 800671e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006722:	fa06 f003 	lslle.w	r0, r6, r3
 8006726:	f7f9 feed 	bl	8000504 <__aeabi_ui2d>
 800672a:	2201      	movs	r2, #1
 800672c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006730:	3d01      	subs	r5, #1
 8006732:	920e      	str	r2, [sp, #56]	; 0x38
 8006734:	e76f      	b.n	8006616 <_dtoa_r+0x126>
 8006736:	2301      	movs	r3, #1
 8006738:	e7b3      	b.n	80066a2 <_dtoa_r+0x1b2>
 800673a:	900c      	str	r0, [sp, #48]	; 0x30
 800673c:	e7b2      	b.n	80066a4 <_dtoa_r+0x1b4>
 800673e:	9b05      	ldr	r3, [sp, #20]
 8006740:	eba3 030b 	sub.w	r3, r3, fp
 8006744:	9305      	str	r3, [sp, #20]
 8006746:	f1cb 0300 	rsb	r3, fp, #0
 800674a:	9308      	str	r3, [sp, #32]
 800674c:	2300      	movs	r3, #0
 800674e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006750:	e7bf      	b.n	80066d2 <_dtoa_r+0x1e2>
 8006752:	2300      	movs	r3, #0
 8006754:	9309      	str	r3, [sp, #36]	; 0x24
 8006756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	dc52      	bgt.n	8006802 <_dtoa_r+0x312>
 800675c:	2301      	movs	r3, #1
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	9304      	str	r3, [sp, #16]
 8006762:	461a      	mov	r2, r3
 8006764:	920a      	str	r2, [sp, #40]	; 0x28
 8006766:	e00b      	b.n	8006780 <_dtoa_r+0x290>
 8006768:	2301      	movs	r3, #1
 800676a:	e7f3      	b.n	8006754 <_dtoa_r+0x264>
 800676c:	2300      	movs	r3, #0
 800676e:	9309      	str	r3, [sp, #36]	; 0x24
 8006770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006772:	445b      	add	r3, fp
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	3301      	adds	r3, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	bfb8      	it	lt
 800677e:	2301      	movlt	r3, #1
 8006780:	69e0      	ldr	r0, [r4, #28]
 8006782:	2100      	movs	r1, #0
 8006784:	2204      	movs	r2, #4
 8006786:	f102 0614 	add.w	r6, r2, #20
 800678a:	429e      	cmp	r6, r3
 800678c:	d93d      	bls.n	800680a <_dtoa_r+0x31a>
 800678e:	6041      	str	r1, [r0, #4]
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fd9f 	bl	80072d4 <_Balloc>
 8006796:	9000      	str	r0, [sp, #0]
 8006798:	2800      	cmp	r0, #0
 800679a:	d139      	bne.n	8006810 <_dtoa_r+0x320>
 800679c:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <_dtoa_r+0x308>)
 800679e:	4602      	mov	r2, r0
 80067a0:	f240 11af 	movw	r1, #431	; 0x1af
 80067a4:	e6bd      	b.n	8006522 <_dtoa_r+0x32>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e7e1      	b.n	800676e <_dtoa_r+0x27e>
 80067aa:	2501      	movs	r5, #1
 80067ac:	2300      	movs	r3, #0
 80067ae:	9307      	str	r3, [sp, #28]
 80067b0:	9509      	str	r5, [sp, #36]	; 0x24
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	2200      	movs	r2, #0
 80067bc:	2312      	movs	r3, #18
 80067be:	e7d1      	b.n	8006764 <_dtoa_r+0x274>
 80067c0:	636f4361 	.word	0x636f4361
 80067c4:	3fd287a7 	.word	0x3fd287a7
 80067c8:	8b60c8b3 	.word	0x8b60c8b3
 80067cc:	3fc68a28 	.word	0x3fc68a28
 80067d0:	509f79fb 	.word	0x509f79fb
 80067d4:	3fd34413 	.word	0x3fd34413
 80067d8:	0800859d 	.word	0x0800859d
 80067dc:	080085b4 	.word	0x080085b4
 80067e0:	7ff00000 	.word	0x7ff00000
 80067e4:	08008599 	.word	0x08008599
 80067e8:	08008590 	.word	0x08008590
 80067ec:	0800856d 	.word	0x0800856d
 80067f0:	3ff80000 	.word	0x3ff80000
 80067f4:	080086a0 	.word	0x080086a0
 80067f8:	0800860c 	.word	0x0800860c
 80067fc:	2301      	movs	r3, #1
 80067fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006800:	e7d7      	b.n	80067b2 <_dtoa_r+0x2c2>
 8006802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	9304      	str	r3, [sp, #16]
 8006808:	e7ba      	b.n	8006780 <_dtoa_r+0x290>
 800680a:	3101      	adds	r1, #1
 800680c:	0052      	lsls	r2, r2, #1
 800680e:	e7ba      	b.n	8006786 <_dtoa_r+0x296>
 8006810:	69e3      	ldr	r3, [r4, #28]
 8006812:	9a00      	ldr	r2, [sp, #0]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	9b04      	ldr	r3, [sp, #16]
 8006818:	2b0e      	cmp	r3, #14
 800681a:	f200 80a8 	bhi.w	800696e <_dtoa_r+0x47e>
 800681e:	2d00      	cmp	r5, #0
 8006820:	f000 80a5 	beq.w	800696e <_dtoa_r+0x47e>
 8006824:	f1bb 0f00 	cmp.w	fp, #0
 8006828:	dd38      	ble.n	800689c <_dtoa_r+0x3ac>
 800682a:	4bc0      	ldr	r3, [pc, #768]	; (8006b2c <_dtoa_r+0x63c>)
 800682c:	f00b 020f 	and.w	r2, fp, #15
 8006830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006834:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006838:	e9d3 6700 	ldrd	r6, r7, [r3]
 800683c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006840:	d019      	beq.n	8006876 <_dtoa_r+0x386>
 8006842:	4bbb      	ldr	r3, [pc, #748]	; (8006b30 <_dtoa_r+0x640>)
 8006844:	ec51 0b18 	vmov	r0, r1, d8
 8006848:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800684c:	f7f9 fffe 	bl	800084c <__aeabi_ddiv>
 8006850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006854:	f008 080f 	and.w	r8, r8, #15
 8006858:	2503      	movs	r5, #3
 800685a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006b30 <_dtoa_r+0x640>
 800685e:	f1b8 0f00 	cmp.w	r8, #0
 8006862:	d10a      	bne.n	800687a <_dtoa_r+0x38a>
 8006864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006868:	4632      	mov	r2, r6
 800686a:	463b      	mov	r3, r7
 800686c:	f7f9 ffee 	bl	800084c <__aeabi_ddiv>
 8006870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006874:	e02b      	b.n	80068ce <_dtoa_r+0x3de>
 8006876:	2502      	movs	r5, #2
 8006878:	e7ef      	b.n	800685a <_dtoa_r+0x36a>
 800687a:	f018 0f01 	tst.w	r8, #1
 800687e:	d008      	beq.n	8006892 <_dtoa_r+0x3a2>
 8006880:	4630      	mov	r0, r6
 8006882:	4639      	mov	r1, r7
 8006884:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006888:	f7f9 feb6 	bl	80005f8 <__aeabi_dmul>
 800688c:	3501      	adds	r5, #1
 800688e:	4606      	mov	r6, r0
 8006890:	460f      	mov	r7, r1
 8006892:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006896:	f109 0908 	add.w	r9, r9, #8
 800689a:	e7e0      	b.n	800685e <_dtoa_r+0x36e>
 800689c:	f000 809f 	beq.w	80069de <_dtoa_r+0x4ee>
 80068a0:	f1cb 0600 	rsb	r6, fp, #0
 80068a4:	4ba1      	ldr	r3, [pc, #644]	; (8006b2c <_dtoa_r+0x63c>)
 80068a6:	4fa2      	ldr	r7, [pc, #648]	; (8006b30 <_dtoa_r+0x640>)
 80068a8:	f006 020f 	and.w	r2, r6, #15
 80068ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	ec51 0b18 	vmov	r0, r1, d8
 80068b8:	f7f9 fe9e 	bl	80005f8 <__aeabi_dmul>
 80068bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c0:	1136      	asrs	r6, r6, #4
 80068c2:	2300      	movs	r3, #0
 80068c4:	2502      	movs	r5, #2
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	d17e      	bne.n	80069c8 <_dtoa_r+0x4d8>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1d0      	bne.n	8006870 <_dtoa_r+0x380>
 80068ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8084 	beq.w	80069e2 <_dtoa_r+0x4f2>
 80068da:	4b96      	ldr	r3, [pc, #600]	; (8006b34 <_dtoa_r+0x644>)
 80068dc:	2200      	movs	r2, #0
 80068de:	4640      	mov	r0, r8
 80068e0:	4649      	mov	r1, r9
 80068e2:	f7fa f8fb 	bl	8000adc <__aeabi_dcmplt>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d07b      	beq.n	80069e2 <_dtoa_r+0x4f2>
 80068ea:	9b04      	ldr	r3, [sp, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d078      	beq.n	80069e2 <_dtoa_r+0x4f2>
 80068f0:	9b01      	ldr	r3, [sp, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dd39      	ble.n	800696a <_dtoa_r+0x47a>
 80068f6:	4b90      	ldr	r3, [pc, #576]	; (8006b38 <_dtoa_r+0x648>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	f7f9 fe7b 	bl	80005f8 <__aeabi_dmul>
 8006902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006906:	9e01      	ldr	r6, [sp, #4]
 8006908:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800690c:	3501      	adds	r5, #1
 800690e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006912:	4628      	mov	r0, r5
 8006914:	f7f9 fe06 	bl	8000524 <__aeabi_i2d>
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	f7f9 fe6c 	bl	80005f8 <__aeabi_dmul>
 8006920:	4b86      	ldr	r3, [pc, #536]	; (8006b3c <_dtoa_r+0x64c>)
 8006922:	2200      	movs	r2, #0
 8006924:	f7f9 fcb2 	bl	800028c <__adddf3>
 8006928:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800692c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	2e00      	cmp	r6, #0
 8006934:	d158      	bne.n	80069e8 <_dtoa_r+0x4f8>
 8006936:	4b82      	ldr	r3, [pc, #520]	; (8006b40 <_dtoa_r+0x650>)
 8006938:	2200      	movs	r2, #0
 800693a:	4640      	mov	r0, r8
 800693c:	4649      	mov	r1, r9
 800693e:	f7f9 fca3 	bl	8000288 <__aeabi_dsub>
 8006942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006946:	4680      	mov	r8, r0
 8006948:	4689      	mov	r9, r1
 800694a:	f7fa f8e5 	bl	8000b18 <__aeabi_dcmpgt>
 800694e:	2800      	cmp	r0, #0
 8006950:	f040 8296 	bne.w	8006e80 <_dtoa_r+0x990>
 8006954:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006958:	4640      	mov	r0, r8
 800695a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800695e:	4649      	mov	r1, r9
 8006960:	f7fa f8bc 	bl	8000adc <__aeabi_dcmplt>
 8006964:	2800      	cmp	r0, #0
 8006966:	f040 8289 	bne.w	8006e7c <_dtoa_r+0x98c>
 800696a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800696e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006970:	2b00      	cmp	r3, #0
 8006972:	f2c0 814e 	blt.w	8006c12 <_dtoa_r+0x722>
 8006976:	f1bb 0f0e 	cmp.w	fp, #14
 800697a:	f300 814a 	bgt.w	8006c12 <_dtoa_r+0x722>
 800697e:	4b6b      	ldr	r3, [pc, #428]	; (8006b2c <_dtoa_r+0x63c>)
 8006980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006984:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	f280 80dc 	bge.w	8006b48 <_dtoa_r+0x658>
 8006990:	9b04      	ldr	r3, [sp, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f300 80d8 	bgt.w	8006b48 <_dtoa_r+0x658>
 8006998:	f040 826f 	bne.w	8006e7a <_dtoa_r+0x98a>
 800699c:	4b68      	ldr	r3, [pc, #416]	; (8006b40 <_dtoa_r+0x650>)
 800699e:	2200      	movs	r2, #0
 80069a0:	4640      	mov	r0, r8
 80069a2:	4649      	mov	r1, r9
 80069a4:	f7f9 fe28 	bl	80005f8 <__aeabi_dmul>
 80069a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069ac:	f7fa f8aa 	bl	8000b04 <__aeabi_dcmpge>
 80069b0:	9e04      	ldr	r6, [sp, #16]
 80069b2:	4637      	mov	r7, r6
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f040 8245 	bne.w	8006e44 <_dtoa_r+0x954>
 80069ba:	9d00      	ldr	r5, [sp, #0]
 80069bc:	2331      	movs	r3, #49	; 0x31
 80069be:	f805 3b01 	strb.w	r3, [r5], #1
 80069c2:	f10b 0b01 	add.w	fp, fp, #1
 80069c6:	e241      	b.n	8006e4c <_dtoa_r+0x95c>
 80069c8:	07f2      	lsls	r2, r6, #31
 80069ca:	d505      	bpl.n	80069d8 <_dtoa_r+0x4e8>
 80069cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d0:	f7f9 fe12 	bl	80005f8 <__aeabi_dmul>
 80069d4:	3501      	adds	r5, #1
 80069d6:	2301      	movs	r3, #1
 80069d8:	1076      	asrs	r6, r6, #1
 80069da:	3708      	adds	r7, #8
 80069dc:	e773      	b.n	80068c6 <_dtoa_r+0x3d6>
 80069de:	2502      	movs	r5, #2
 80069e0:	e775      	b.n	80068ce <_dtoa_r+0x3de>
 80069e2:	9e04      	ldr	r6, [sp, #16]
 80069e4:	465f      	mov	r7, fp
 80069e6:	e792      	b.n	800690e <_dtoa_r+0x41e>
 80069e8:	9900      	ldr	r1, [sp, #0]
 80069ea:	4b50      	ldr	r3, [pc, #320]	; (8006b2c <_dtoa_r+0x63c>)
 80069ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069f0:	4431      	add	r1, r6
 80069f2:	9102      	str	r1, [sp, #8]
 80069f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069f6:	eeb0 9a47 	vmov.f32	s18, s14
 80069fa:	eef0 9a67 	vmov.f32	s19, s15
 80069fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a06:	2900      	cmp	r1, #0
 8006a08:	d044      	beq.n	8006a94 <_dtoa_r+0x5a4>
 8006a0a:	494e      	ldr	r1, [pc, #312]	; (8006b44 <_dtoa_r+0x654>)
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f7f9 ff1d 	bl	800084c <__aeabi_ddiv>
 8006a12:	ec53 2b19 	vmov	r2, r3, d9
 8006a16:	f7f9 fc37 	bl	8000288 <__aeabi_dsub>
 8006a1a:	9d00      	ldr	r5, [sp, #0]
 8006a1c:	ec41 0b19 	vmov	d9, r0, r1
 8006a20:	4649      	mov	r1, r9
 8006a22:	4640      	mov	r0, r8
 8006a24:	f7fa f898 	bl	8000b58 <__aeabi_d2iz>
 8006a28:	4606      	mov	r6, r0
 8006a2a:	f7f9 fd7b 	bl	8000524 <__aeabi_i2d>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	f7f9 fc27 	bl	8000288 <__aeabi_dsub>
 8006a3a:	3630      	adds	r6, #48	; 0x30
 8006a3c:	f805 6b01 	strb.w	r6, [r5], #1
 8006a40:	ec53 2b19 	vmov	r2, r3, d9
 8006a44:	4680      	mov	r8, r0
 8006a46:	4689      	mov	r9, r1
 8006a48:	f7fa f848 	bl	8000adc <__aeabi_dcmplt>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d164      	bne.n	8006b1a <_dtoa_r+0x62a>
 8006a50:	4642      	mov	r2, r8
 8006a52:	464b      	mov	r3, r9
 8006a54:	4937      	ldr	r1, [pc, #220]	; (8006b34 <_dtoa_r+0x644>)
 8006a56:	2000      	movs	r0, #0
 8006a58:	f7f9 fc16 	bl	8000288 <__aeabi_dsub>
 8006a5c:	ec53 2b19 	vmov	r2, r3, d9
 8006a60:	f7fa f83c 	bl	8000adc <__aeabi_dcmplt>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f040 80b6 	bne.w	8006bd6 <_dtoa_r+0x6e6>
 8006a6a:	9b02      	ldr	r3, [sp, #8]
 8006a6c:	429d      	cmp	r5, r3
 8006a6e:	f43f af7c 	beq.w	800696a <_dtoa_r+0x47a>
 8006a72:	4b31      	ldr	r3, [pc, #196]	; (8006b38 <_dtoa_r+0x648>)
 8006a74:	ec51 0b19 	vmov	r0, r1, d9
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f7f9 fdbd 	bl	80005f8 <__aeabi_dmul>
 8006a7e:	4b2e      	ldr	r3, [pc, #184]	; (8006b38 <_dtoa_r+0x648>)
 8006a80:	ec41 0b19 	vmov	d9, r0, r1
 8006a84:	2200      	movs	r2, #0
 8006a86:	4640      	mov	r0, r8
 8006a88:	4649      	mov	r1, r9
 8006a8a:	f7f9 fdb5 	bl	80005f8 <__aeabi_dmul>
 8006a8e:	4680      	mov	r8, r0
 8006a90:	4689      	mov	r9, r1
 8006a92:	e7c5      	b.n	8006a20 <_dtoa_r+0x530>
 8006a94:	ec51 0b17 	vmov	r0, r1, d7
 8006a98:	f7f9 fdae 	bl	80005f8 <__aeabi_dmul>
 8006a9c:	9b02      	ldr	r3, [sp, #8]
 8006a9e:	9d00      	ldr	r5, [sp, #0]
 8006aa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aa2:	ec41 0b19 	vmov	d9, r0, r1
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	f7fa f855 	bl	8000b58 <__aeabi_d2iz>
 8006aae:	4606      	mov	r6, r0
 8006ab0:	f7f9 fd38 	bl	8000524 <__aeabi_i2d>
 8006ab4:	3630      	adds	r6, #48	; 0x30
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4640      	mov	r0, r8
 8006abc:	4649      	mov	r1, r9
 8006abe:	f7f9 fbe3 	bl	8000288 <__aeabi_dsub>
 8006ac2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ac6:	9b02      	ldr	r3, [sp, #8]
 8006ac8:	429d      	cmp	r5, r3
 8006aca:	4680      	mov	r8, r0
 8006acc:	4689      	mov	r9, r1
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	d124      	bne.n	8006b1e <_dtoa_r+0x62e>
 8006ad4:	4b1b      	ldr	r3, [pc, #108]	; (8006b44 <_dtoa_r+0x654>)
 8006ad6:	ec51 0b19 	vmov	r0, r1, d9
 8006ada:	f7f9 fbd7 	bl	800028c <__adddf3>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	f7fa f817 	bl	8000b18 <__aeabi_dcmpgt>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d173      	bne.n	8006bd6 <_dtoa_r+0x6e6>
 8006aee:	ec53 2b19 	vmov	r2, r3, d9
 8006af2:	4914      	ldr	r1, [pc, #80]	; (8006b44 <_dtoa_r+0x654>)
 8006af4:	2000      	movs	r0, #0
 8006af6:	f7f9 fbc7 	bl	8000288 <__aeabi_dsub>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	4640      	mov	r0, r8
 8006b00:	4649      	mov	r1, r9
 8006b02:	f7f9 ffeb 	bl	8000adc <__aeabi_dcmplt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f43f af2f 	beq.w	800696a <_dtoa_r+0x47a>
 8006b0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b0e:	1e6b      	subs	r3, r5, #1
 8006b10:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b16:	2b30      	cmp	r3, #48	; 0x30
 8006b18:	d0f8      	beq.n	8006b0c <_dtoa_r+0x61c>
 8006b1a:	46bb      	mov	fp, r7
 8006b1c:	e04a      	b.n	8006bb4 <_dtoa_r+0x6c4>
 8006b1e:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <_dtoa_r+0x648>)
 8006b20:	f7f9 fd6a 	bl	80005f8 <__aeabi_dmul>
 8006b24:	4680      	mov	r8, r0
 8006b26:	4689      	mov	r9, r1
 8006b28:	e7bd      	b.n	8006aa6 <_dtoa_r+0x5b6>
 8006b2a:	bf00      	nop
 8006b2c:	080086a0 	.word	0x080086a0
 8006b30:	08008678 	.word	0x08008678
 8006b34:	3ff00000 	.word	0x3ff00000
 8006b38:	40240000 	.word	0x40240000
 8006b3c:	401c0000 	.word	0x401c0000
 8006b40:	40140000 	.word	0x40140000
 8006b44:	3fe00000 	.word	0x3fe00000
 8006b48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b4c:	9d00      	ldr	r5, [sp, #0]
 8006b4e:	4642      	mov	r2, r8
 8006b50:	464b      	mov	r3, r9
 8006b52:	4630      	mov	r0, r6
 8006b54:	4639      	mov	r1, r7
 8006b56:	f7f9 fe79 	bl	800084c <__aeabi_ddiv>
 8006b5a:	f7f9 fffd 	bl	8000b58 <__aeabi_d2iz>
 8006b5e:	9001      	str	r0, [sp, #4]
 8006b60:	f7f9 fce0 	bl	8000524 <__aeabi_i2d>
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	f7f9 fd46 	bl	80005f8 <__aeabi_dmul>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 fb88 	bl	8000288 <__aeabi_dsub>
 8006b78:	9e01      	ldr	r6, [sp, #4]
 8006b7a:	9f04      	ldr	r7, [sp, #16]
 8006b7c:	3630      	adds	r6, #48	; 0x30
 8006b7e:	f805 6b01 	strb.w	r6, [r5], #1
 8006b82:	9e00      	ldr	r6, [sp, #0]
 8006b84:	1bae      	subs	r6, r5, r6
 8006b86:	42b7      	cmp	r7, r6
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	d134      	bne.n	8006bf8 <_dtoa_r+0x708>
 8006b8e:	f7f9 fb7d 	bl	800028c <__adddf3>
 8006b92:	4642      	mov	r2, r8
 8006b94:	464b      	mov	r3, r9
 8006b96:	4606      	mov	r6, r0
 8006b98:	460f      	mov	r7, r1
 8006b9a:	f7f9 ffbd 	bl	8000b18 <__aeabi_dcmpgt>
 8006b9e:	b9c8      	cbnz	r0, 8006bd4 <_dtoa_r+0x6e4>
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	f7f9 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bac:	b110      	cbz	r0, 8006bb4 <_dtoa_r+0x6c4>
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	07db      	lsls	r3, r3, #31
 8006bb2:	d40f      	bmi.n	8006bd4 <_dtoa_r+0x6e4>
 8006bb4:	4651      	mov	r1, sl
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 fbcc 	bl	8007354 <_Bfree>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bc0:	702b      	strb	r3, [r5, #0]
 8006bc2:	f10b 0301 	add.w	r3, fp, #1
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f43f ace2 	beq.w	8006594 <_dtoa_r+0xa4>
 8006bd0:	601d      	str	r5, [r3, #0]
 8006bd2:	e4df      	b.n	8006594 <_dtoa_r+0xa4>
 8006bd4:	465f      	mov	r7, fp
 8006bd6:	462b      	mov	r3, r5
 8006bd8:	461d      	mov	r5, r3
 8006bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bde:	2a39      	cmp	r2, #57	; 0x39
 8006be0:	d106      	bne.n	8006bf0 <_dtoa_r+0x700>
 8006be2:	9a00      	ldr	r2, [sp, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d1f7      	bne.n	8006bd8 <_dtoa_r+0x6e8>
 8006be8:	9900      	ldr	r1, [sp, #0]
 8006bea:	2230      	movs	r2, #48	; 0x30
 8006bec:	3701      	adds	r7, #1
 8006bee:	700a      	strb	r2, [r1, #0]
 8006bf0:	781a      	ldrb	r2, [r3, #0]
 8006bf2:	3201      	adds	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e790      	b.n	8006b1a <_dtoa_r+0x62a>
 8006bf8:	4ba3      	ldr	r3, [pc, #652]	; (8006e88 <_dtoa_r+0x998>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f7f9 fcfc 	bl	80005f8 <__aeabi_dmul>
 8006c00:	2200      	movs	r2, #0
 8006c02:	2300      	movs	r3, #0
 8006c04:	4606      	mov	r6, r0
 8006c06:	460f      	mov	r7, r1
 8006c08:	f7f9 ff5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d09e      	beq.n	8006b4e <_dtoa_r+0x65e>
 8006c10:	e7d0      	b.n	8006bb4 <_dtoa_r+0x6c4>
 8006c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c14:	2a00      	cmp	r2, #0
 8006c16:	f000 80ca 	beq.w	8006dae <_dtoa_r+0x8be>
 8006c1a:	9a07      	ldr	r2, [sp, #28]
 8006c1c:	2a01      	cmp	r2, #1
 8006c1e:	f300 80ad 	bgt.w	8006d7c <_dtoa_r+0x88c>
 8006c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c24:	2a00      	cmp	r2, #0
 8006c26:	f000 80a5 	beq.w	8006d74 <_dtoa_r+0x884>
 8006c2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c2e:	9e08      	ldr	r6, [sp, #32]
 8006c30:	9d05      	ldr	r5, [sp, #20]
 8006c32:	9a05      	ldr	r2, [sp, #20]
 8006c34:	441a      	add	r2, r3
 8006c36:	9205      	str	r2, [sp, #20]
 8006c38:	9a06      	ldr	r2, [sp, #24]
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	441a      	add	r2, r3
 8006c3e:	4620      	mov	r0, r4
 8006c40:	9206      	str	r2, [sp, #24]
 8006c42:	f000 fc3d 	bl	80074c0 <__i2b>
 8006c46:	4607      	mov	r7, r0
 8006c48:	b165      	cbz	r5, 8006c64 <_dtoa_r+0x774>
 8006c4a:	9b06      	ldr	r3, [sp, #24]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd09      	ble.n	8006c64 <_dtoa_r+0x774>
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	9a05      	ldr	r2, [sp, #20]
 8006c54:	bfa8      	it	ge
 8006c56:	462b      	movge	r3, r5
 8006c58:	1ad2      	subs	r2, r2, r3
 8006c5a:	9205      	str	r2, [sp, #20]
 8006c5c:	9a06      	ldr	r2, [sp, #24]
 8006c5e:	1aed      	subs	r5, r5, r3
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	9306      	str	r3, [sp, #24]
 8006c64:	9b08      	ldr	r3, [sp, #32]
 8006c66:	b1f3      	cbz	r3, 8006ca6 <_dtoa_r+0x7b6>
 8006c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80a3 	beq.w	8006db6 <_dtoa_r+0x8c6>
 8006c70:	2e00      	cmp	r6, #0
 8006c72:	dd10      	ble.n	8006c96 <_dtoa_r+0x7a6>
 8006c74:	4639      	mov	r1, r7
 8006c76:	4632      	mov	r2, r6
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fce1 	bl	8007640 <__pow5mult>
 8006c7e:	4652      	mov	r2, sl
 8006c80:	4601      	mov	r1, r0
 8006c82:	4607      	mov	r7, r0
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 fc31 	bl	80074ec <__multiply>
 8006c8a:	4651      	mov	r1, sl
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 fb60 	bl	8007354 <_Bfree>
 8006c94:	46c2      	mov	sl, r8
 8006c96:	9b08      	ldr	r3, [sp, #32]
 8006c98:	1b9a      	subs	r2, r3, r6
 8006c9a:	d004      	beq.n	8006ca6 <_dtoa_r+0x7b6>
 8006c9c:	4651      	mov	r1, sl
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f000 fcce 	bl	8007640 <__pow5mult>
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 fc09 	bl	80074c0 <__i2b>
 8006cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	f340 8081 	ble.w	8006dba <_dtoa_r+0x8ca>
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4601      	mov	r1, r0
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 fcbf 	bl	8007640 <__pow5mult>
 8006cc2:	9b07      	ldr	r3, [sp, #28]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	dd7a      	ble.n	8006dc0 <_dtoa_r+0x8d0>
 8006cca:	f04f 0800 	mov.w	r8, #0
 8006cce:	6933      	ldr	r3, [r6, #16]
 8006cd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cd4:	6918      	ldr	r0, [r3, #16]
 8006cd6:	f000 fba5 	bl	8007424 <__hi0bits>
 8006cda:	f1c0 0020 	rsb	r0, r0, #32
 8006cde:	9b06      	ldr	r3, [sp, #24]
 8006ce0:	4418      	add	r0, r3
 8006ce2:	f010 001f 	ands.w	r0, r0, #31
 8006ce6:	f000 8094 	beq.w	8006e12 <_dtoa_r+0x922>
 8006cea:	f1c0 0320 	rsb	r3, r0, #32
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	f340 8085 	ble.w	8006dfe <_dtoa_r+0x90e>
 8006cf4:	9b05      	ldr	r3, [sp, #20]
 8006cf6:	f1c0 001c 	rsb	r0, r0, #28
 8006cfa:	4403      	add	r3, r0
 8006cfc:	9305      	str	r3, [sp, #20]
 8006cfe:	9b06      	ldr	r3, [sp, #24]
 8006d00:	4403      	add	r3, r0
 8006d02:	4405      	add	r5, r0
 8006d04:	9306      	str	r3, [sp, #24]
 8006d06:	9b05      	ldr	r3, [sp, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	dd05      	ble.n	8006d18 <_dtoa_r+0x828>
 8006d0c:	4651      	mov	r1, sl
 8006d0e:	461a      	mov	r2, r3
 8006d10:	4620      	mov	r0, r4
 8006d12:	f000 fcef 	bl	80076f4 <__lshift>
 8006d16:	4682      	mov	sl, r0
 8006d18:	9b06      	ldr	r3, [sp, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dd05      	ble.n	8006d2a <_dtoa_r+0x83a>
 8006d1e:	4631      	mov	r1, r6
 8006d20:	461a      	mov	r2, r3
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 fce6 	bl	80076f4 <__lshift>
 8006d28:	4606      	mov	r6, r0
 8006d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d072      	beq.n	8006e16 <_dtoa_r+0x926>
 8006d30:	4631      	mov	r1, r6
 8006d32:	4650      	mov	r0, sl
 8006d34:	f000 fd4a 	bl	80077cc <__mcmp>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	da6c      	bge.n	8006e16 <_dtoa_r+0x926>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4651      	mov	r1, sl
 8006d40:	220a      	movs	r2, #10
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fb28 	bl	8007398 <__multadd>
 8006d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006d4e:	4682      	mov	sl, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 81b0 	beq.w	80070b6 <_dtoa_r+0xbc6>
 8006d56:	2300      	movs	r3, #0
 8006d58:	4639      	mov	r1, r7
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 fb1b 	bl	8007398 <__multadd>
 8006d62:	9b01      	ldr	r3, [sp, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	4607      	mov	r7, r0
 8006d68:	f300 8096 	bgt.w	8006e98 <_dtoa_r+0x9a8>
 8006d6c:	9b07      	ldr	r3, [sp, #28]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	dc59      	bgt.n	8006e26 <_dtoa_r+0x936>
 8006d72:	e091      	b.n	8006e98 <_dtoa_r+0x9a8>
 8006d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d7a:	e758      	b.n	8006c2e <_dtoa_r+0x73e>
 8006d7c:	9b04      	ldr	r3, [sp, #16]
 8006d7e:	1e5e      	subs	r6, r3, #1
 8006d80:	9b08      	ldr	r3, [sp, #32]
 8006d82:	42b3      	cmp	r3, r6
 8006d84:	bfbf      	itttt	lt
 8006d86:	9b08      	ldrlt	r3, [sp, #32]
 8006d88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006d8a:	9608      	strlt	r6, [sp, #32]
 8006d8c:	1af3      	sublt	r3, r6, r3
 8006d8e:	bfb4      	ite	lt
 8006d90:	18d2      	addlt	r2, r2, r3
 8006d92:	1b9e      	subge	r6, r3, r6
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	bfbc      	itt	lt
 8006d98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006d9a:	2600      	movlt	r6, #0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	bfb7      	itett	lt
 8006da0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006da4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006da8:	1a9d      	sublt	r5, r3, r2
 8006daa:	2300      	movlt	r3, #0
 8006dac:	e741      	b.n	8006c32 <_dtoa_r+0x742>
 8006dae:	9e08      	ldr	r6, [sp, #32]
 8006db0:	9d05      	ldr	r5, [sp, #20]
 8006db2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006db4:	e748      	b.n	8006c48 <_dtoa_r+0x758>
 8006db6:	9a08      	ldr	r2, [sp, #32]
 8006db8:	e770      	b.n	8006c9c <_dtoa_r+0x7ac>
 8006dba:	9b07      	ldr	r3, [sp, #28]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	dc19      	bgt.n	8006df4 <_dtoa_r+0x904>
 8006dc0:	9b02      	ldr	r3, [sp, #8]
 8006dc2:	b9bb      	cbnz	r3, 8006df4 <_dtoa_r+0x904>
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dca:	b99b      	cbnz	r3, 8006df4 <_dtoa_r+0x904>
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dd2:	0d1b      	lsrs	r3, r3, #20
 8006dd4:	051b      	lsls	r3, r3, #20
 8006dd6:	b183      	cbz	r3, 8006dfa <_dtoa_r+0x90a>
 8006dd8:	9b05      	ldr	r3, [sp, #20]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	9305      	str	r3, [sp, #20]
 8006dde:	9b06      	ldr	r3, [sp, #24]
 8006de0:	3301      	adds	r3, #1
 8006de2:	9306      	str	r3, [sp, #24]
 8006de4:	f04f 0801 	mov.w	r8, #1
 8006de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f47f af6f 	bne.w	8006cce <_dtoa_r+0x7de>
 8006df0:	2001      	movs	r0, #1
 8006df2:	e774      	b.n	8006cde <_dtoa_r+0x7ee>
 8006df4:	f04f 0800 	mov.w	r8, #0
 8006df8:	e7f6      	b.n	8006de8 <_dtoa_r+0x8f8>
 8006dfa:	4698      	mov	r8, r3
 8006dfc:	e7f4      	b.n	8006de8 <_dtoa_r+0x8f8>
 8006dfe:	d082      	beq.n	8006d06 <_dtoa_r+0x816>
 8006e00:	9a05      	ldr	r2, [sp, #20]
 8006e02:	331c      	adds	r3, #28
 8006e04:	441a      	add	r2, r3
 8006e06:	9205      	str	r2, [sp, #20]
 8006e08:	9a06      	ldr	r2, [sp, #24]
 8006e0a:	441a      	add	r2, r3
 8006e0c:	441d      	add	r5, r3
 8006e0e:	9206      	str	r2, [sp, #24]
 8006e10:	e779      	b.n	8006d06 <_dtoa_r+0x816>
 8006e12:	4603      	mov	r3, r0
 8006e14:	e7f4      	b.n	8006e00 <_dtoa_r+0x910>
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dc37      	bgt.n	8006e8c <_dtoa_r+0x99c>
 8006e1c:	9b07      	ldr	r3, [sp, #28]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	dd34      	ble.n	8006e8c <_dtoa_r+0x99c>
 8006e22:	9b04      	ldr	r3, [sp, #16]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	9b01      	ldr	r3, [sp, #4]
 8006e28:	b963      	cbnz	r3, 8006e44 <_dtoa_r+0x954>
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	2205      	movs	r2, #5
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 fab2 	bl	8007398 <__multadd>
 8006e34:	4601      	mov	r1, r0
 8006e36:	4606      	mov	r6, r0
 8006e38:	4650      	mov	r0, sl
 8006e3a:	f000 fcc7 	bl	80077cc <__mcmp>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f73f adbb 	bgt.w	80069ba <_dtoa_r+0x4ca>
 8006e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e46:	9d00      	ldr	r5, [sp, #0]
 8006e48:	ea6f 0b03 	mvn.w	fp, r3
 8006e4c:	f04f 0800 	mov.w	r8, #0
 8006e50:	4631      	mov	r1, r6
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 fa7e 	bl	8007354 <_Bfree>
 8006e58:	2f00      	cmp	r7, #0
 8006e5a:	f43f aeab 	beq.w	8006bb4 <_dtoa_r+0x6c4>
 8006e5e:	f1b8 0f00 	cmp.w	r8, #0
 8006e62:	d005      	beq.n	8006e70 <_dtoa_r+0x980>
 8006e64:	45b8      	cmp	r8, r7
 8006e66:	d003      	beq.n	8006e70 <_dtoa_r+0x980>
 8006e68:	4641      	mov	r1, r8
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fa72 	bl	8007354 <_Bfree>
 8006e70:	4639      	mov	r1, r7
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 fa6e 	bl	8007354 <_Bfree>
 8006e78:	e69c      	b.n	8006bb4 <_dtoa_r+0x6c4>
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	4637      	mov	r7, r6
 8006e7e:	e7e1      	b.n	8006e44 <_dtoa_r+0x954>
 8006e80:	46bb      	mov	fp, r7
 8006e82:	4637      	mov	r7, r6
 8006e84:	e599      	b.n	80069ba <_dtoa_r+0x4ca>
 8006e86:	bf00      	nop
 8006e88:	40240000 	.word	0x40240000
 8006e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80c8 	beq.w	8007024 <_dtoa_r+0xb34>
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	dd05      	ble.n	8006ea8 <_dtoa_r+0x9b8>
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	462a      	mov	r2, r5
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 fc27 	bl	80076f4 <__lshift>
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	f1b8 0f00 	cmp.w	r8, #0
 8006eac:	d05b      	beq.n	8006f66 <_dtoa_r+0xa76>
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 fa0f 	bl	80072d4 <_Balloc>
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	b928      	cbnz	r0, 8006ec6 <_dtoa_r+0x9d6>
 8006eba:	4b83      	ldr	r3, [pc, #524]	; (80070c8 <_dtoa_r+0xbd8>)
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006ec2:	f7ff bb2e 	b.w	8006522 <_dtoa_r+0x32>
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	3202      	adds	r2, #2
 8006eca:	0092      	lsls	r2, r2, #2
 8006ecc:	f107 010c 	add.w	r1, r7, #12
 8006ed0:	300c      	adds	r0, #12
 8006ed2:	f000 ffab 	bl	8007e2c <memcpy>
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 fc0a 	bl	80076f4 <__lshift>
 8006ee0:	9b00      	ldr	r3, [sp, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	9304      	str	r3, [sp, #16]
 8006ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eea:	4413      	add	r3, r2
 8006eec:	9308      	str	r3, [sp, #32]
 8006eee:	9b02      	ldr	r3, [sp, #8]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	46b8      	mov	r8, r7
 8006ef6:	9306      	str	r3, [sp, #24]
 8006ef8:	4607      	mov	r7, r0
 8006efa:	9b04      	ldr	r3, [sp, #16]
 8006efc:	4631      	mov	r1, r6
 8006efe:	3b01      	subs	r3, #1
 8006f00:	4650      	mov	r0, sl
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	f7ff fa6b 	bl	80063de <quorem>
 8006f08:	4641      	mov	r1, r8
 8006f0a:	9002      	str	r0, [sp, #8]
 8006f0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f10:	4650      	mov	r0, sl
 8006f12:	f000 fc5b 	bl	80077cc <__mcmp>
 8006f16:	463a      	mov	r2, r7
 8006f18:	9005      	str	r0, [sp, #20]
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 fc71 	bl	8007804 <__mdiff>
 8006f22:	68c2      	ldr	r2, [r0, #12]
 8006f24:	4605      	mov	r5, r0
 8006f26:	bb02      	cbnz	r2, 8006f6a <_dtoa_r+0xa7a>
 8006f28:	4601      	mov	r1, r0
 8006f2a:	4650      	mov	r0, sl
 8006f2c:	f000 fc4e 	bl	80077cc <__mcmp>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4629      	mov	r1, r5
 8006f34:	4620      	mov	r0, r4
 8006f36:	9209      	str	r2, [sp, #36]	; 0x24
 8006f38:	f000 fa0c 	bl	8007354 <_Bfree>
 8006f3c:	9b07      	ldr	r3, [sp, #28]
 8006f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f40:	9d04      	ldr	r5, [sp, #16]
 8006f42:	ea43 0102 	orr.w	r1, r3, r2
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	4319      	orrs	r1, r3
 8006f4a:	d110      	bne.n	8006f6e <_dtoa_r+0xa7e>
 8006f4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f50:	d029      	beq.n	8006fa6 <_dtoa_r+0xab6>
 8006f52:	9b05      	ldr	r3, [sp, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	dd02      	ble.n	8006f5e <_dtoa_r+0xa6e>
 8006f58:	9b02      	ldr	r3, [sp, #8]
 8006f5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006f5e:	9b01      	ldr	r3, [sp, #4]
 8006f60:	f883 9000 	strb.w	r9, [r3]
 8006f64:	e774      	b.n	8006e50 <_dtoa_r+0x960>
 8006f66:	4638      	mov	r0, r7
 8006f68:	e7ba      	b.n	8006ee0 <_dtoa_r+0x9f0>
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	e7e1      	b.n	8006f32 <_dtoa_r+0xa42>
 8006f6e:	9b05      	ldr	r3, [sp, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	db04      	blt.n	8006f7e <_dtoa_r+0xa8e>
 8006f74:	9907      	ldr	r1, [sp, #28]
 8006f76:	430b      	orrs	r3, r1
 8006f78:	9906      	ldr	r1, [sp, #24]
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	d120      	bne.n	8006fc0 <_dtoa_r+0xad0>
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	dded      	ble.n	8006f5e <_dtoa_r+0xa6e>
 8006f82:	4651      	mov	r1, sl
 8006f84:	2201      	movs	r2, #1
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 fbb4 	bl	80076f4 <__lshift>
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4682      	mov	sl, r0
 8006f90:	f000 fc1c 	bl	80077cc <__mcmp>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	dc03      	bgt.n	8006fa0 <_dtoa_r+0xab0>
 8006f98:	d1e1      	bne.n	8006f5e <_dtoa_r+0xa6e>
 8006f9a:	f019 0f01 	tst.w	r9, #1
 8006f9e:	d0de      	beq.n	8006f5e <_dtoa_r+0xa6e>
 8006fa0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fa4:	d1d8      	bne.n	8006f58 <_dtoa_r+0xa68>
 8006fa6:	9a01      	ldr	r2, [sp, #4]
 8006fa8:	2339      	movs	r3, #57	; 0x39
 8006faa:	7013      	strb	r3, [r2, #0]
 8006fac:	462b      	mov	r3, r5
 8006fae:	461d      	mov	r5, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fb6:	2a39      	cmp	r2, #57	; 0x39
 8006fb8:	d06c      	beq.n	8007094 <_dtoa_r+0xba4>
 8006fba:	3201      	adds	r2, #1
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e747      	b.n	8006e50 <_dtoa_r+0x960>
 8006fc0:	2a00      	cmp	r2, #0
 8006fc2:	dd07      	ble.n	8006fd4 <_dtoa_r+0xae4>
 8006fc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fc8:	d0ed      	beq.n	8006fa6 <_dtoa_r+0xab6>
 8006fca:	9a01      	ldr	r2, [sp, #4]
 8006fcc:	f109 0301 	add.w	r3, r9, #1
 8006fd0:	7013      	strb	r3, [r2, #0]
 8006fd2:	e73d      	b.n	8006e50 <_dtoa_r+0x960>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	9a08      	ldr	r2, [sp, #32]
 8006fd8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d043      	beq.n	8007068 <_dtoa_r+0xb78>
 8006fe0:	4651      	mov	r1, sl
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	220a      	movs	r2, #10
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f000 f9d6 	bl	8007398 <__multadd>
 8006fec:	45b8      	cmp	r8, r7
 8006fee:	4682      	mov	sl, r0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	f04f 020a 	mov.w	r2, #10
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	d107      	bne.n	800700e <_dtoa_r+0xb1e>
 8006ffe:	f000 f9cb 	bl	8007398 <__multadd>
 8007002:	4680      	mov	r8, r0
 8007004:	4607      	mov	r7, r0
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	3301      	adds	r3, #1
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	e775      	b.n	8006efa <_dtoa_r+0xa0a>
 800700e:	f000 f9c3 	bl	8007398 <__multadd>
 8007012:	4639      	mov	r1, r7
 8007014:	4680      	mov	r8, r0
 8007016:	2300      	movs	r3, #0
 8007018:	220a      	movs	r2, #10
 800701a:	4620      	mov	r0, r4
 800701c:	f000 f9bc 	bl	8007398 <__multadd>
 8007020:	4607      	mov	r7, r0
 8007022:	e7f0      	b.n	8007006 <_dtoa_r+0xb16>
 8007024:	9b04      	ldr	r3, [sp, #16]
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	9d00      	ldr	r5, [sp, #0]
 800702a:	4631      	mov	r1, r6
 800702c:	4650      	mov	r0, sl
 800702e:	f7ff f9d6 	bl	80063de <quorem>
 8007032:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007036:	9b00      	ldr	r3, [sp, #0]
 8007038:	f805 9b01 	strb.w	r9, [r5], #1
 800703c:	1aea      	subs	r2, r5, r3
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	4293      	cmp	r3, r2
 8007042:	dd07      	ble.n	8007054 <_dtoa_r+0xb64>
 8007044:	4651      	mov	r1, sl
 8007046:	2300      	movs	r3, #0
 8007048:	220a      	movs	r2, #10
 800704a:	4620      	mov	r0, r4
 800704c:	f000 f9a4 	bl	8007398 <__multadd>
 8007050:	4682      	mov	sl, r0
 8007052:	e7ea      	b.n	800702a <_dtoa_r+0xb3a>
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	bfc8      	it	gt
 800705a:	461d      	movgt	r5, r3
 800705c:	9b00      	ldr	r3, [sp, #0]
 800705e:	bfd8      	it	le
 8007060:	2501      	movle	r5, #1
 8007062:	441d      	add	r5, r3
 8007064:	f04f 0800 	mov.w	r8, #0
 8007068:	4651      	mov	r1, sl
 800706a:	2201      	movs	r2, #1
 800706c:	4620      	mov	r0, r4
 800706e:	f000 fb41 	bl	80076f4 <__lshift>
 8007072:	4631      	mov	r1, r6
 8007074:	4682      	mov	sl, r0
 8007076:	f000 fba9 	bl	80077cc <__mcmp>
 800707a:	2800      	cmp	r0, #0
 800707c:	dc96      	bgt.n	8006fac <_dtoa_r+0xabc>
 800707e:	d102      	bne.n	8007086 <_dtoa_r+0xb96>
 8007080:	f019 0f01 	tst.w	r9, #1
 8007084:	d192      	bne.n	8006fac <_dtoa_r+0xabc>
 8007086:	462b      	mov	r3, r5
 8007088:	461d      	mov	r5, r3
 800708a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800708e:	2a30      	cmp	r2, #48	; 0x30
 8007090:	d0fa      	beq.n	8007088 <_dtoa_r+0xb98>
 8007092:	e6dd      	b.n	8006e50 <_dtoa_r+0x960>
 8007094:	9a00      	ldr	r2, [sp, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d189      	bne.n	8006fae <_dtoa_r+0xabe>
 800709a:	f10b 0b01 	add.w	fp, fp, #1
 800709e:	2331      	movs	r3, #49	; 0x31
 80070a0:	e796      	b.n	8006fd0 <_dtoa_r+0xae0>
 80070a2:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <_dtoa_r+0xbdc>)
 80070a4:	f7ff ba99 	b.w	80065da <_dtoa_r+0xea>
 80070a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f47f aa6d 	bne.w	800658a <_dtoa_r+0x9a>
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <_dtoa_r+0xbe0>)
 80070b2:	f7ff ba92 	b.w	80065da <_dtoa_r+0xea>
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	dcb5      	bgt.n	8007028 <_dtoa_r+0xb38>
 80070bc:	9b07      	ldr	r3, [sp, #28]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	f73f aeb1 	bgt.w	8006e26 <_dtoa_r+0x936>
 80070c4:	e7b0      	b.n	8007028 <_dtoa_r+0xb38>
 80070c6:	bf00      	nop
 80070c8:	0800860c 	.word	0x0800860c
 80070cc:	0800856c 	.word	0x0800856c
 80070d0:	08008590 	.word	0x08008590

080070d4 <_free_r>:
 80070d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070d6:	2900      	cmp	r1, #0
 80070d8:	d044      	beq.n	8007164 <_free_r+0x90>
 80070da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070de:	9001      	str	r0, [sp, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f1a1 0404 	sub.w	r4, r1, #4
 80070e6:	bfb8      	it	lt
 80070e8:	18e4      	addlt	r4, r4, r3
 80070ea:	f000 f8e7 	bl	80072bc <__malloc_lock>
 80070ee:	4a1e      	ldr	r2, [pc, #120]	; (8007168 <_free_r+0x94>)
 80070f0:	9801      	ldr	r0, [sp, #4]
 80070f2:	6813      	ldr	r3, [r2, #0]
 80070f4:	b933      	cbnz	r3, 8007104 <_free_r+0x30>
 80070f6:	6063      	str	r3, [r4, #4]
 80070f8:	6014      	str	r4, [r2, #0]
 80070fa:	b003      	add	sp, #12
 80070fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007100:	f000 b8e2 	b.w	80072c8 <__malloc_unlock>
 8007104:	42a3      	cmp	r3, r4
 8007106:	d908      	bls.n	800711a <_free_r+0x46>
 8007108:	6825      	ldr	r5, [r4, #0]
 800710a:	1961      	adds	r1, r4, r5
 800710c:	428b      	cmp	r3, r1
 800710e:	bf01      	itttt	eq
 8007110:	6819      	ldreq	r1, [r3, #0]
 8007112:	685b      	ldreq	r3, [r3, #4]
 8007114:	1949      	addeq	r1, r1, r5
 8007116:	6021      	streq	r1, [r4, #0]
 8007118:	e7ed      	b.n	80070f6 <_free_r+0x22>
 800711a:	461a      	mov	r2, r3
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	b10b      	cbz	r3, 8007124 <_free_r+0x50>
 8007120:	42a3      	cmp	r3, r4
 8007122:	d9fa      	bls.n	800711a <_free_r+0x46>
 8007124:	6811      	ldr	r1, [r2, #0]
 8007126:	1855      	adds	r5, r2, r1
 8007128:	42a5      	cmp	r5, r4
 800712a:	d10b      	bne.n	8007144 <_free_r+0x70>
 800712c:	6824      	ldr	r4, [r4, #0]
 800712e:	4421      	add	r1, r4
 8007130:	1854      	adds	r4, r2, r1
 8007132:	42a3      	cmp	r3, r4
 8007134:	6011      	str	r1, [r2, #0]
 8007136:	d1e0      	bne.n	80070fa <_free_r+0x26>
 8007138:	681c      	ldr	r4, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	6053      	str	r3, [r2, #4]
 800713e:	440c      	add	r4, r1
 8007140:	6014      	str	r4, [r2, #0]
 8007142:	e7da      	b.n	80070fa <_free_r+0x26>
 8007144:	d902      	bls.n	800714c <_free_r+0x78>
 8007146:	230c      	movs	r3, #12
 8007148:	6003      	str	r3, [r0, #0]
 800714a:	e7d6      	b.n	80070fa <_free_r+0x26>
 800714c:	6825      	ldr	r5, [r4, #0]
 800714e:	1961      	adds	r1, r4, r5
 8007150:	428b      	cmp	r3, r1
 8007152:	bf04      	itt	eq
 8007154:	6819      	ldreq	r1, [r3, #0]
 8007156:	685b      	ldreq	r3, [r3, #4]
 8007158:	6063      	str	r3, [r4, #4]
 800715a:	bf04      	itt	eq
 800715c:	1949      	addeq	r1, r1, r5
 800715e:	6021      	streq	r1, [r4, #0]
 8007160:	6054      	str	r4, [r2, #4]
 8007162:	e7ca      	b.n	80070fa <_free_r+0x26>
 8007164:	b003      	add	sp, #12
 8007166:	bd30      	pop	{r4, r5, pc}
 8007168:	20000584 	.word	0x20000584

0800716c <malloc>:
 800716c:	4b02      	ldr	r3, [pc, #8]	; (8007178 <malloc+0xc>)
 800716e:	4601      	mov	r1, r0
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f000 b823 	b.w	80071bc <_malloc_r>
 8007176:	bf00      	nop
 8007178:	2000009c 	.word	0x2000009c

0800717c <sbrk_aligned>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4e0e      	ldr	r6, [pc, #56]	; (80071b8 <sbrk_aligned+0x3c>)
 8007180:	460c      	mov	r4, r1
 8007182:	6831      	ldr	r1, [r6, #0]
 8007184:	4605      	mov	r5, r0
 8007186:	b911      	cbnz	r1, 800718e <sbrk_aligned+0x12>
 8007188:	f000 fe40 	bl	8007e0c <_sbrk_r>
 800718c:	6030      	str	r0, [r6, #0]
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f000 fe3b 	bl	8007e0c <_sbrk_r>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d00a      	beq.n	80071b0 <sbrk_aligned+0x34>
 800719a:	1cc4      	adds	r4, r0, #3
 800719c:	f024 0403 	bic.w	r4, r4, #3
 80071a0:	42a0      	cmp	r0, r4
 80071a2:	d007      	beq.n	80071b4 <sbrk_aligned+0x38>
 80071a4:	1a21      	subs	r1, r4, r0
 80071a6:	4628      	mov	r0, r5
 80071a8:	f000 fe30 	bl	8007e0c <_sbrk_r>
 80071ac:	3001      	adds	r0, #1
 80071ae:	d101      	bne.n	80071b4 <sbrk_aligned+0x38>
 80071b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80071b4:	4620      	mov	r0, r4
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	20000588 	.word	0x20000588

080071bc <_malloc_r>:
 80071bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c0:	1ccd      	adds	r5, r1, #3
 80071c2:	f025 0503 	bic.w	r5, r5, #3
 80071c6:	3508      	adds	r5, #8
 80071c8:	2d0c      	cmp	r5, #12
 80071ca:	bf38      	it	cc
 80071cc:	250c      	movcc	r5, #12
 80071ce:	2d00      	cmp	r5, #0
 80071d0:	4607      	mov	r7, r0
 80071d2:	db01      	blt.n	80071d8 <_malloc_r+0x1c>
 80071d4:	42a9      	cmp	r1, r5
 80071d6:	d905      	bls.n	80071e4 <_malloc_r+0x28>
 80071d8:	230c      	movs	r3, #12
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	2600      	movs	r6, #0
 80071de:	4630      	mov	r0, r6
 80071e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80072b8 <_malloc_r+0xfc>
 80071e8:	f000 f868 	bl	80072bc <__malloc_lock>
 80071ec:	f8d8 3000 	ldr.w	r3, [r8]
 80071f0:	461c      	mov	r4, r3
 80071f2:	bb5c      	cbnz	r4, 800724c <_malloc_r+0x90>
 80071f4:	4629      	mov	r1, r5
 80071f6:	4638      	mov	r0, r7
 80071f8:	f7ff ffc0 	bl	800717c <sbrk_aligned>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	4604      	mov	r4, r0
 8007200:	d155      	bne.n	80072ae <_malloc_r+0xf2>
 8007202:	f8d8 4000 	ldr.w	r4, [r8]
 8007206:	4626      	mov	r6, r4
 8007208:	2e00      	cmp	r6, #0
 800720a:	d145      	bne.n	8007298 <_malloc_r+0xdc>
 800720c:	2c00      	cmp	r4, #0
 800720e:	d048      	beq.n	80072a2 <_malloc_r+0xe6>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	4631      	mov	r1, r6
 8007214:	4638      	mov	r0, r7
 8007216:	eb04 0903 	add.w	r9, r4, r3
 800721a:	f000 fdf7 	bl	8007e0c <_sbrk_r>
 800721e:	4581      	cmp	r9, r0
 8007220:	d13f      	bne.n	80072a2 <_malloc_r+0xe6>
 8007222:	6821      	ldr	r1, [r4, #0]
 8007224:	1a6d      	subs	r5, r5, r1
 8007226:	4629      	mov	r1, r5
 8007228:	4638      	mov	r0, r7
 800722a:	f7ff ffa7 	bl	800717c <sbrk_aligned>
 800722e:	3001      	adds	r0, #1
 8007230:	d037      	beq.n	80072a2 <_malloc_r+0xe6>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	442b      	add	r3, r5
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	f8d8 3000 	ldr.w	r3, [r8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d038      	beq.n	80072b2 <_malloc_r+0xf6>
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	42a2      	cmp	r2, r4
 8007244:	d12b      	bne.n	800729e <_malloc_r+0xe2>
 8007246:	2200      	movs	r2, #0
 8007248:	605a      	str	r2, [r3, #4]
 800724a:	e00f      	b.n	800726c <_malloc_r+0xb0>
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	1b52      	subs	r2, r2, r5
 8007250:	d41f      	bmi.n	8007292 <_malloc_r+0xd6>
 8007252:	2a0b      	cmp	r2, #11
 8007254:	d917      	bls.n	8007286 <_malloc_r+0xca>
 8007256:	1961      	adds	r1, r4, r5
 8007258:	42a3      	cmp	r3, r4
 800725a:	6025      	str	r5, [r4, #0]
 800725c:	bf18      	it	ne
 800725e:	6059      	strne	r1, [r3, #4]
 8007260:	6863      	ldr	r3, [r4, #4]
 8007262:	bf08      	it	eq
 8007264:	f8c8 1000 	streq.w	r1, [r8]
 8007268:	5162      	str	r2, [r4, r5]
 800726a:	604b      	str	r3, [r1, #4]
 800726c:	4638      	mov	r0, r7
 800726e:	f104 060b 	add.w	r6, r4, #11
 8007272:	f000 f829 	bl	80072c8 <__malloc_unlock>
 8007276:	f026 0607 	bic.w	r6, r6, #7
 800727a:	1d23      	adds	r3, r4, #4
 800727c:	1af2      	subs	r2, r6, r3
 800727e:	d0ae      	beq.n	80071de <_malloc_r+0x22>
 8007280:	1b9b      	subs	r3, r3, r6
 8007282:	50a3      	str	r3, [r4, r2]
 8007284:	e7ab      	b.n	80071de <_malloc_r+0x22>
 8007286:	42a3      	cmp	r3, r4
 8007288:	6862      	ldr	r2, [r4, #4]
 800728a:	d1dd      	bne.n	8007248 <_malloc_r+0x8c>
 800728c:	f8c8 2000 	str.w	r2, [r8]
 8007290:	e7ec      	b.n	800726c <_malloc_r+0xb0>
 8007292:	4623      	mov	r3, r4
 8007294:	6864      	ldr	r4, [r4, #4]
 8007296:	e7ac      	b.n	80071f2 <_malloc_r+0x36>
 8007298:	4634      	mov	r4, r6
 800729a:	6876      	ldr	r6, [r6, #4]
 800729c:	e7b4      	b.n	8007208 <_malloc_r+0x4c>
 800729e:	4613      	mov	r3, r2
 80072a0:	e7cc      	b.n	800723c <_malloc_r+0x80>
 80072a2:	230c      	movs	r3, #12
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	4638      	mov	r0, r7
 80072a8:	f000 f80e 	bl	80072c8 <__malloc_unlock>
 80072ac:	e797      	b.n	80071de <_malloc_r+0x22>
 80072ae:	6025      	str	r5, [r4, #0]
 80072b0:	e7dc      	b.n	800726c <_malloc_r+0xb0>
 80072b2:	605b      	str	r3, [r3, #4]
 80072b4:	deff      	udf	#255	; 0xff
 80072b6:	bf00      	nop
 80072b8:	20000584 	.word	0x20000584

080072bc <__malloc_lock>:
 80072bc:	4801      	ldr	r0, [pc, #4]	; (80072c4 <__malloc_lock+0x8>)
 80072be:	f7ff b88c 	b.w	80063da <__retarget_lock_acquire_recursive>
 80072c2:	bf00      	nop
 80072c4:	20000580 	.word	0x20000580

080072c8 <__malloc_unlock>:
 80072c8:	4801      	ldr	r0, [pc, #4]	; (80072d0 <__malloc_unlock+0x8>)
 80072ca:	f7ff b887 	b.w	80063dc <__retarget_lock_release_recursive>
 80072ce:	bf00      	nop
 80072d0:	20000580 	.word	0x20000580

080072d4 <_Balloc>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	69c6      	ldr	r6, [r0, #28]
 80072d8:	4604      	mov	r4, r0
 80072da:	460d      	mov	r5, r1
 80072dc:	b976      	cbnz	r6, 80072fc <_Balloc+0x28>
 80072de:	2010      	movs	r0, #16
 80072e0:	f7ff ff44 	bl	800716c <malloc>
 80072e4:	4602      	mov	r2, r0
 80072e6:	61e0      	str	r0, [r4, #28]
 80072e8:	b920      	cbnz	r0, 80072f4 <_Balloc+0x20>
 80072ea:	4b18      	ldr	r3, [pc, #96]	; (800734c <_Balloc+0x78>)
 80072ec:	4818      	ldr	r0, [pc, #96]	; (8007350 <_Balloc+0x7c>)
 80072ee:	216b      	movs	r1, #107	; 0x6b
 80072f0:	f000 fdaa 	bl	8007e48 <__assert_func>
 80072f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072f8:	6006      	str	r6, [r0, #0]
 80072fa:	60c6      	str	r6, [r0, #12]
 80072fc:	69e6      	ldr	r6, [r4, #28]
 80072fe:	68f3      	ldr	r3, [r6, #12]
 8007300:	b183      	cbz	r3, 8007324 <_Balloc+0x50>
 8007302:	69e3      	ldr	r3, [r4, #28]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800730a:	b9b8      	cbnz	r0, 800733c <_Balloc+0x68>
 800730c:	2101      	movs	r1, #1
 800730e:	fa01 f605 	lsl.w	r6, r1, r5
 8007312:	1d72      	adds	r2, r6, #5
 8007314:	0092      	lsls	r2, r2, #2
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fdb4 	bl	8007e84 <_calloc_r>
 800731c:	b160      	cbz	r0, 8007338 <_Balloc+0x64>
 800731e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007322:	e00e      	b.n	8007342 <_Balloc+0x6e>
 8007324:	2221      	movs	r2, #33	; 0x21
 8007326:	2104      	movs	r1, #4
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fdab 	bl	8007e84 <_calloc_r>
 800732e:	69e3      	ldr	r3, [r4, #28]
 8007330:	60f0      	str	r0, [r6, #12]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e4      	bne.n	8007302 <_Balloc+0x2e>
 8007338:	2000      	movs	r0, #0
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	6802      	ldr	r2, [r0, #0]
 800733e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007342:	2300      	movs	r3, #0
 8007344:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007348:	e7f7      	b.n	800733a <_Balloc+0x66>
 800734a:	bf00      	nop
 800734c:	0800859d 	.word	0x0800859d
 8007350:	0800861d 	.word	0x0800861d

08007354 <_Bfree>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	69c6      	ldr	r6, [r0, #28]
 8007358:	4605      	mov	r5, r0
 800735a:	460c      	mov	r4, r1
 800735c:	b976      	cbnz	r6, 800737c <_Bfree+0x28>
 800735e:	2010      	movs	r0, #16
 8007360:	f7ff ff04 	bl	800716c <malloc>
 8007364:	4602      	mov	r2, r0
 8007366:	61e8      	str	r0, [r5, #28]
 8007368:	b920      	cbnz	r0, 8007374 <_Bfree+0x20>
 800736a:	4b09      	ldr	r3, [pc, #36]	; (8007390 <_Bfree+0x3c>)
 800736c:	4809      	ldr	r0, [pc, #36]	; (8007394 <_Bfree+0x40>)
 800736e:	218f      	movs	r1, #143	; 0x8f
 8007370:	f000 fd6a 	bl	8007e48 <__assert_func>
 8007374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007378:	6006      	str	r6, [r0, #0]
 800737a:	60c6      	str	r6, [r0, #12]
 800737c:	b13c      	cbz	r4, 800738e <_Bfree+0x3a>
 800737e:	69eb      	ldr	r3, [r5, #28]
 8007380:	6862      	ldr	r2, [r4, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007388:	6021      	str	r1, [r4, #0]
 800738a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	0800859d 	.word	0x0800859d
 8007394:	0800861d 	.word	0x0800861d

08007398 <__multadd>:
 8007398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739c:	690d      	ldr	r5, [r1, #16]
 800739e:	4607      	mov	r7, r0
 80073a0:	460c      	mov	r4, r1
 80073a2:	461e      	mov	r6, r3
 80073a4:	f101 0c14 	add.w	ip, r1, #20
 80073a8:	2000      	movs	r0, #0
 80073aa:	f8dc 3000 	ldr.w	r3, [ip]
 80073ae:	b299      	uxth	r1, r3
 80073b0:	fb02 6101 	mla	r1, r2, r1, r6
 80073b4:	0c1e      	lsrs	r6, r3, #16
 80073b6:	0c0b      	lsrs	r3, r1, #16
 80073b8:	fb02 3306 	mla	r3, r2, r6, r3
 80073bc:	b289      	uxth	r1, r1
 80073be:	3001      	adds	r0, #1
 80073c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073c4:	4285      	cmp	r5, r0
 80073c6:	f84c 1b04 	str.w	r1, [ip], #4
 80073ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073ce:	dcec      	bgt.n	80073aa <__multadd+0x12>
 80073d0:	b30e      	cbz	r6, 8007416 <__multadd+0x7e>
 80073d2:	68a3      	ldr	r3, [r4, #8]
 80073d4:	42ab      	cmp	r3, r5
 80073d6:	dc19      	bgt.n	800740c <__multadd+0x74>
 80073d8:	6861      	ldr	r1, [r4, #4]
 80073da:	4638      	mov	r0, r7
 80073dc:	3101      	adds	r1, #1
 80073de:	f7ff ff79 	bl	80072d4 <_Balloc>
 80073e2:	4680      	mov	r8, r0
 80073e4:	b928      	cbnz	r0, 80073f2 <__multadd+0x5a>
 80073e6:	4602      	mov	r2, r0
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <__multadd+0x84>)
 80073ea:	480d      	ldr	r0, [pc, #52]	; (8007420 <__multadd+0x88>)
 80073ec:	21ba      	movs	r1, #186	; 0xba
 80073ee:	f000 fd2b 	bl	8007e48 <__assert_func>
 80073f2:	6922      	ldr	r2, [r4, #16]
 80073f4:	3202      	adds	r2, #2
 80073f6:	f104 010c 	add.w	r1, r4, #12
 80073fa:	0092      	lsls	r2, r2, #2
 80073fc:	300c      	adds	r0, #12
 80073fe:	f000 fd15 	bl	8007e2c <memcpy>
 8007402:	4621      	mov	r1, r4
 8007404:	4638      	mov	r0, r7
 8007406:	f7ff ffa5 	bl	8007354 <_Bfree>
 800740a:	4644      	mov	r4, r8
 800740c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007410:	3501      	adds	r5, #1
 8007412:	615e      	str	r6, [r3, #20]
 8007414:	6125      	str	r5, [r4, #16]
 8007416:	4620      	mov	r0, r4
 8007418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800741c:	0800860c 	.word	0x0800860c
 8007420:	0800861d 	.word	0x0800861d

08007424 <__hi0bits>:
 8007424:	0c03      	lsrs	r3, r0, #16
 8007426:	041b      	lsls	r3, r3, #16
 8007428:	b9d3      	cbnz	r3, 8007460 <__hi0bits+0x3c>
 800742a:	0400      	lsls	r0, r0, #16
 800742c:	2310      	movs	r3, #16
 800742e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007432:	bf04      	itt	eq
 8007434:	0200      	lsleq	r0, r0, #8
 8007436:	3308      	addeq	r3, #8
 8007438:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800743c:	bf04      	itt	eq
 800743e:	0100      	lsleq	r0, r0, #4
 8007440:	3304      	addeq	r3, #4
 8007442:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007446:	bf04      	itt	eq
 8007448:	0080      	lsleq	r0, r0, #2
 800744a:	3302      	addeq	r3, #2
 800744c:	2800      	cmp	r0, #0
 800744e:	db05      	blt.n	800745c <__hi0bits+0x38>
 8007450:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007454:	f103 0301 	add.w	r3, r3, #1
 8007458:	bf08      	it	eq
 800745a:	2320      	moveq	r3, #32
 800745c:	4618      	mov	r0, r3
 800745e:	4770      	bx	lr
 8007460:	2300      	movs	r3, #0
 8007462:	e7e4      	b.n	800742e <__hi0bits+0xa>

08007464 <__lo0bits>:
 8007464:	6803      	ldr	r3, [r0, #0]
 8007466:	f013 0207 	ands.w	r2, r3, #7
 800746a:	d00c      	beq.n	8007486 <__lo0bits+0x22>
 800746c:	07d9      	lsls	r1, r3, #31
 800746e:	d422      	bmi.n	80074b6 <__lo0bits+0x52>
 8007470:	079a      	lsls	r2, r3, #30
 8007472:	bf49      	itett	mi
 8007474:	085b      	lsrmi	r3, r3, #1
 8007476:	089b      	lsrpl	r3, r3, #2
 8007478:	6003      	strmi	r3, [r0, #0]
 800747a:	2201      	movmi	r2, #1
 800747c:	bf5c      	itt	pl
 800747e:	6003      	strpl	r3, [r0, #0]
 8007480:	2202      	movpl	r2, #2
 8007482:	4610      	mov	r0, r2
 8007484:	4770      	bx	lr
 8007486:	b299      	uxth	r1, r3
 8007488:	b909      	cbnz	r1, 800748e <__lo0bits+0x2a>
 800748a:	0c1b      	lsrs	r3, r3, #16
 800748c:	2210      	movs	r2, #16
 800748e:	b2d9      	uxtb	r1, r3
 8007490:	b909      	cbnz	r1, 8007496 <__lo0bits+0x32>
 8007492:	3208      	adds	r2, #8
 8007494:	0a1b      	lsrs	r3, r3, #8
 8007496:	0719      	lsls	r1, r3, #28
 8007498:	bf04      	itt	eq
 800749a:	091b      	lsreq	r3, r3, #4
 800749c:	3204      	addeq	r2, #4
 800749e:	0799      	lsls	r1, r3, #30
 80074a0:	bf04      	itt	eq
 80074a2:	089b      	lsreq	r3, r3, #2
 80074a4:	3202      	addeq	r2, #2
 80074a6:	07d9      	lsls	r1, r3, #31
 80074a8:	d403      	bmi.n	80074b2 <__lo0bits+0x4e>
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	f102 0201 	add.w	r2, r2, #1
 80074b0:	d003      	beq.n	80074ba <__lo0bits+0x56>
 80074b2:	6003      	str	r3, [r0, #0]
 80074b4:	e7e5      	b.n	8007482 <__lo0bits+0x1e>
 80074b6:	2200      	movs	r2, #0
 80074b8:	e7e3      	b.n	8007482 <__lo0bits+0x1e>
 80074ba:	2220      	movs	r2, #32
 80074bc:	e7e1      	b.n	8007482 <__lo0bits+0x1e>
	...

080074c0 <__i2b>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	460c      	mov	r4, r1
 80074c4:	2101      	movs	r1, #1
 80074c6:	f7ff ff05 	bl	80072d4 <_Balloc>
 80074ca:	4602      	mov	r2, r0
 80074cc:	b928      	cbnz	r0, 80074da <__i2b+0x1a>
 80074ce:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <__i2b+0x24>)
 80074d0:	4805      	ldr	r0, [pc, #20]	; (80074e8 <__i2b+0x28>)
 80074d2:	f240 1145 	movw	r1, #325	; 0x145
 80074d6:	f000 fcb7 	bl	8007e48 <__assert_func>
 80074da:	2301      	movs	r3, #1
 80074dc:	6144      	str	r4, [r0, #20]
 80074de:	6103      	str	r3, [r0, #16]
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	bf00      	nop
 80074e4:	0800860c 	.word	0x0800860c
 80074e8:	0800861d 	.word	0x0800861d

080074ec <__multiply>:
 80074ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	4691      	mov	r9, r2
 80074f2:	690a      	ldr	r2, [r1, #16]
 80074f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	bfb8      	it	lt
 80074fc:	460b      	movlt	r3, r1
 80074fe:	460c      	mov	r4, r1
 8007500:	bfbc      	itt	lt
 8007502:	464c      	movlt	r4, r9
 8007504:	4699      	movlt	r9, r3
 8007506:	6927      	ldr	r7, [r4, #16]
 8007508:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800750c:	68a3      	ldr	r3, [r4, #8]
 800750e:	6861      	ldr	r1, [r4, #4]
 8007510:	eb07 060a 	add.w	r6, r7, sl
 8007514:	42b3      	cmp	r3, r6
 8007516:	b085      	sub	sp, #20
 8007518:	bfb8      	it	lt
 800751a:	3101      	addlt	r1, #1
 800751c:	f7ff feda 	bl	80072d4 <_Balloc>
 8007520:	b930      	cbnz	r0, 8007530 <__multiply+0x44>
 8007522:	4602      	mov	r2, r0
 8007524:	4b44      	ldr	r3, [pc, #272]	; (8007638 <__multiply+0x14c>)
 8007526:	4845      	ldr	r0, [pc, #276]	; (800763c <__multiply+0x150>)
 8007528:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800752c:	f000 fc8c 	bl	8007e48 <__assert_func>
 8007530:	f100 0514 	add.w	r5, r0, #20
 8007534:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007538:	462b      	mov	r3, r5
 800753a:	2200      	movs	r2, #0
 800753c:	4543      	cmp	r3, r8
 800753e:	d321      	bcc.n	8007584 <__multiply+0x98>
 8007540:	f104 0314 	add.w	r3, r4, #20
 8007544:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007548:	f109 0314 	add.w	r3, r9, #20
 800754c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007550:	9202      	str	r2, [sp, #8]
 8007552:	1b3a      	subs	r2, r7, r4
 8007554:	3a15      	subs	r2, #21
 8007556:	f022 0203 	bic.w	r2, r2, #3
 800755a:	3204      	adds	r2, #4
 800755c:	f104 0115 	add.w	r1, r4, #21
 8007560:	428f      	cmp	r7, r1
 8007562:	bf38      	it	cc
 8007564:	2204      	movcc	r2, #4
 8007566:	9201      	str	r2, [sp, #4]
 8007568:	9a02      	ldr	r2, [sp, #8]
 800756a:	9303      	str	r3, [sp, #12]
 800756c:	429a      	cmp	r2, r3
 800756e:	d80c      	bhi.n	800758a <__multiply+0x9e>
 8007570:	2e00      	cmp	r6, #0
 8007572:	dd03      	ble.n	800757c <__multiply+0x90>
 8007574:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007578:	2b00      	cmp	r3, #0
 800757a:	d05b      	beq.n	8007634 <__multiply+0x148>
 800757c:	6106      	str	r6, [r0, #16]
 800757e:	b005      	add	sp, #20
 8007580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007584:	f843 2b04 	str.w	r2, [r3], #4
 8007588:	e7d8      	b.n	800753c <__multiply+0x50>
 800758a:	f8b3 a000 	ldrh.w	sl, [r3]
 800758e:	f1ba 0f00 	cmp.w	sl, #0
 8007592:	d024      	beq.n	80075de <__multiply+0xf2>
 8007594:	f104 0e14 	add.w	lr, r4, #20
 8007598:	46a9      	mov	r9, r5
 800759a:	f04f 0c00 	mov.w	ip, #0
 800759e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075a2:	f8d9 1000 	ldr.w	r1, [r9]
 80075a6:	fa1f fb82 	uxth.w	fp, r2
 80075aa:	b289      	uxth	r1, r1
 80075ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80075b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075b4:	f8d9 2000 	ldr.w	r2, [r9]
 80075b8:	4461      	add	r1, ip
 80075ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075be:	fb0a c20b 	mla	r2, sl, fp, ip
 80075c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075c6:	b289      	uxth	r1, r1
 80075c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075cc:	4577      	cmp	r7, lr
 80075ce:	f849 1b04 	str.w	r1, [r9], #4
 80075d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075d6:	d8e2      	bhi.n	800759e <__multiply+0xb2>
 80075d8:	9a01      	ldr	r2, [sp, #4]
 80075da:	f845 c002 	str.w	ip, [r5, r2]
 80075de:	9a03      	ldr	r2, [sp, #12]
 80075e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075e4:	3304      	adds	r3, #4
 80075e6:	f1b9 0f00 	cmp.w	r9, #0
 80075ea:	d021      	beq.n	8007630 <__multiply+0x144>
 80075ec:	6829      	ldr	r1, [r5, #0]
 80075ee:	f104 0c14 	add.w	ip, r4, #20
 80075f2:	46ae      	mov	lr, r5
 80075f4:	f04f 0a00 	mov.w	sl, #0
 80075f8:	f8bc b000 	ldrh.w	fp, [ip]
 80075fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007600:	fb09 220b 	mla	r2, r9, fp, r2
 8007604:	4452      	add	r2, sl
 8007606:	b289      	uxth	r1, r1
 8007608:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800760c:	f84e 1b04 	str.w	r1, [lr], #4
 8007610:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007618:	f8be 1000 	ldrh.w	r1, [lr]
 800761c:	fb09 110a 	mla	r1, r9, sl, r1
 8007620:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007624:	4567      	cmp	r7, ip
 8007626:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800762a:	d8e5      	bhi.n	80075f8 <__multiply+0x10c>
 800762c:	9a01      	ldr	r2, [sp, #4]
 800762e:	50a9      	str	r1, [r5, r2]
 8007630:	3504      	adds	r5, #4
 8007632:	e799      	b.n	8007568 <__multiply+0x7c>
 8007634:	3e01      	subs	r6, #1
 8007636:	e79b      	b.n	8007570 <__multiply+0x84>
 8007638:	0800860c 	.word	0x0800860c
 800763c:	0800861d 	.word	0x0800861d

08007640 <__pow5mult>:
 8007640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007644:	4615      	mov	r5, r2
 8007646:	f012 0203 	ands.w	r2, r2, #3
 800764a:	4606      	mov	r6, r0
 800764c:	460f      	mov	r7, r1
 800764e:	d007      	beq.n	8007660 <__pow5mult+0x20>
 8007650:	4c25      	ldr	r4, [pc, #148]	; (80076e8 <__pow5mult+0xa8>)
 8007652:	3a01      	subs	r2, #1
 8007654:	2300      	movs	r3, #0
 8007656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800765a:	f7ff fe9d 	bl	8007398 <__multadd>
 800765e:	4607      	mov	r7, r0
 8007660:	10ad      	asrs	r5, r5, #2
 8007662:	d03d      	beq.n	80076e0 <__pow5mult+0xa0>
 8007664:	69f4      	ldr	r4, [r6, #28]
 8007666:	b97c      	cbnz	r4, 8007688 <__pow5mult+0x48>
 8007668:	2010      	movs	r0, #16
 800766a:	f7ff fd7f 	bl	800716c <malloc>
 800766e:	4602      	mov	r2, r0
 8007670:	61f0      	str	r0, [r6, #28]
 8007672:	b928      	cbnz	r0, 8007680 <__pow5mult+0x40>
 8007674:	4b1d      	ldr	r3, [pc, #116]	; (80076ec <__pow5mult+0xac>)
 8007676:	481e      	ldr	r0, [pc, #120]	; (80076f0 <__pow5mult+0xb0>)
 8007678:	f240 11b3 	movw	r1, #435	; 0x1b3
 800767c:	f000 fbe4 	bl	8007e48 <__assert_func>
 8007680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007684:	6004      	str	r4, [r0, #0]
 8007686:	60c4      	str	r4, [r0, #12]
 8007688:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800768c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007690:	b94c      	cbnz	r4, 80076a6 <__pow5mult+0x66>
 8007692:	f240 2171 	movw	r1, #625	; 0x271
 8007696:	4630      	mov	r0, r6
 8007698:	f7ff ff12 	bl	80074c0 <__i2b>
 800769c:	2300      	movs	r3, #0
 800769e:	f8c8 0008 	str.w	r0, [r8, #8]
 80076a2:	4604      	mov	r4, r0
 80076a4:	6003      	str	r3, [r0, #0]
 80076a6:	f04f 0900 	mov.w	r9, #0
 80076aa:	07eb      	lsls	r3, r5, #31
 80076ac:	d50a      	bpl.n	80076c4 <__pow5mult+0x84>
 80076ae:	4639      	mov	r1, r7
 80076b0:	4622      	mov	r2, r4
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ff1a 	bl	80074ec <__multiply>
 80076b8:	4639      	mov	r1, r7
 80076ba:	4680      	mov	r8, r0
 80076bc:	4630      	mov	r0, r6
 80076be:	f7ff fe49 	bl	8007354 <_Bfree>
 80076c2:	4647      	mov	r7, r8
 80076c4:	106d      	asrs	r5, r5, #1
 80076c6:	d00b      	beq.n	80076e0 <__pow5mult+0xa0>
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	b938      	cbnz	r0, 80076dc <__pow5mult+0x9c>
 80076cc:	4622      	mov	r2, r4
 80076ce:	4621      	mov	r1, r4
 80076d0:	4630      	mov	r0, r6
 80076d2:	f7ff ff0b 	bl	80074ec <__multiply>
 80076d6:	6020      	str	r0, [r4, #0]
 80076d8:	f8c0 9000 	str.w	r9, [r0]
 80076dc:	4604      	mov	r4, r0
 80076de:	e7e4      	b.n	80076aa <__pow5mult+0x6a>
 80076e0:	4638      	mov	r0, r7
 80076e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e6:	bf00      	nop
 80076e8:	08008768 	.word	0x08008768
 80076ec:	0800859d 	.word	0x0800859d
 80076f0:	0800861d 	.word	0x0800861d

080076f4 <__lshift>:
 80076f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	460c      	mov	r4, r1
 80076fa:	6849      	ldr	r1, [r1, #4]
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007702:	68a3      	ldr	r3, [r4, #8]
 8007704:	4607      	mov	r7, r0
 8007706:	4691      	mov	r9, r2
 8007708:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800770c:	f108 0601 	add.w	r6, r8, #1
 8007710:	42b3      	cmp	r3, r6
 8007712:	db0b      	blt.n	800772c <__lshift+0x38>
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff fddd 	bl	80072d4 <_Balloc>
 800771a:	4605      	mov	r5, r0
 800771c:	b948      	cbnz	r0, 8007732 <__lshift+0x3e>
 800771e:	4602      	mov	r2, r0
 8007720:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <__lshift+0xd0>)
 8007722:	4829      	ldr	r0, [pc, #164]	; (80077c8 <__lshift+0xd4>)
 8007724:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007728:	f000 fb8e 	bl	8007e48 <__assert_func>
 800772c:	3101      	adds	r1, #1
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	e7ee      	b.n	8007710 <__lshift+0x1c>
 8007732:	2300      	movs	r3, #0
 8007734:	f100 0114 	add.w	r1, r0, #20
 8007738:	f100 0210 	add.w	r2, r0, #16
 800773c:	4618      	mov	r0, r3
 800773e:	4553      	cmp	r3, sl
 8007740:	db33      	blt.n	80077aa <__lshift+0xb6>
 8007742:	6920      	ldr	r0, [r4, #16]
 8007744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007748:	f104 0314 	add.w	r3, r4, #20
 800774c:	f019 091f 	ands.w	r9, r9, #31
 8007750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007754:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007758:	d02b      	beq.n	80077b2 <__lshift+0xbe>
 800775a:	f1c9 0e20 	rsb	lr, r9, #32
 800775e:	468a      	mov	sl, r1
 8007760:	2200      	movs	r2, #0
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	fa00 f009 	lsl.w	r0, r0, r9
 8007768:	4310      	orrs	r0, r2
 800776a:	f84a 0b04 	str.w	r0, [sl], #4
 800776e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007772:	459c      	cmp	ip, r3
 8007774:	fa22 f20e 	lsr.w	r2, r2, lr
 8007778:	d8f3      	bhi.n	8007762 <__lshift+0x6e>
 800777a:	ebac 0304 	sub.w	r3, ip, r4
 800777e:	3b15      	subs	r3, #21
 8007780:	f023 0303 	bic.w	r3, r3, #3
 8007784:	3304      	adds	r3, #4
 8007786:	f104 0015 	add.w	r0, r4, #21
 800778a:	4584      	cmp	ip, r0
 800778c:	bf38      	it	cc
 800778e:	2304      	movcc	r3, #4
 8007790:	50ca      	str	r2, [r1, r3]
 8007792:	b10a      	cbz	r2, 8007798 <__lshift+0xa4>
 8007794:	f108 0602 	add.w	r6, r8, #2
 8007798:	3e01      	subs	r6, #1
 800779a:	4638      	mov	r0, r7
 800779c:	612e      	str	r6, [r5, #16]
 800779e:	4621      	mov	r1, r4
 80077a0:	f7ff fdd8 	bl	8007354 <_Bfree>
 80077a4:	4628      	mov	r0, r5
 80077a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80077ae:	3301      	adds	r3, #1
 80077b0:	e7c5      	b.n	800773e <__lshift+0x4a>
 80077b2:	3904      	subs	r1, #4
 80077b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80077bc:	459c      	cmp	ip, r3
 80077be:	d8f9      	bhi.n	80077b4 <__lshift+0xc0>
 80077c0:	e7ea      	b.n	8007798 <__lshift+0xa4>
 80077c2:	bf00      	nop
 80077c4:	0800860c 	.word	0x0800860c
 80077c8:	0800861d 	.word	0x0800861d

080077cc <__mcmp>:
 80077cc:	b530      	push	{r4, r5, lr}
 80077ce:	6902      	ldr	r2, [r0, #16]
 80077d0:	690c      	ldr	r4, [r1, #16]
 80077d2:	1b12      	subs	r2, r2, r4
 80077d4:	d10e      	bne.n	80077f4 <__mcmp+0x28>
 80077d6:	f100 0314 	add.w	r3, r0, #20
 80077da:	3114      	adds	r1, #20
 80077dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077ec:	42a5      	cmp	r5, r4
 80077ee:	d003      	beq.n	80077f8 <__mcmp+0x2c>
 80077f0:	d305      	bcc.n	80077fe <__mcmp+0x32>
 80077f2:	2201      	movs	r2, #1
 80077f4:	4610      	mov	r0, r2
 80077f6:	bd30      	pop	{r4, r5, pc}
 80077f8:	4283      	cmp	r3, r0
 80077fa:	d3f3      	bcc.n	80077e4 <__mcmp+0x18>
 80077fc:	e7fa      	b.n	80077f4 <__mcmp+0x28>
 80077fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007802:	e7f7      	b.n	80077f4 <__mcmp+0x28>

08007804 <__mdiff>:
 8007804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	460c      	mov	r4, r1
 800780a:	4606      	mov	r6, r0
 800780c:	4611      	mov	r1, r2
 800780e:	4620      	mov	r0, r4
 8007810:	4690      	mov	r8, r2
 8007812:	f7ff ffdb 	bl	80077cc <__mcmp>
 8007816:	1e05      	subs	r5, r0, #0
 8007818:	d110      	bne.n	800783c <__mdiff+0x38>
 800781a:	4629      	mov	r1, r5
 800781c:	4630      	mov	r0, r6
 800781e:	f7ff fd59 	bl	80072d4 <_Balloc>
 8007822:	b930      	cbnz	r0, 8007832 <__mdiff+0x2e>
 8007824:	4b3a      	ldr	r3, [pc, #232]	; (8007910 <__mdiff+0x10c>)
 8007826:	4602      	mov	r2, r0
 8007828:	f240 2137 	movw	r1, #567	; 0x237
 800782c:	4839      	ldr	r0, [pc, #228]	; (8007914 <__mdiff+0x110>)
 800782e:	f000 fb0b 	bl	8007e48 <__assert_func>
 8007832:	2301      	movs	r3, #1
 8007834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	bfa4      	itt	ge
 800783e:	4643      	movge	r3, r8
 8007840:	46a0      	movge	r8, r4
 8007842:	4630      	mov	r0, r6
 8007844:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007848:	bfa6      	itte	ge
 800784a:	461c      	movge	r4, r3
 800784c:	2500      	movge	r5, #0
 800784e:	2501      	movlt	r5, #1
 8007850:	f7ff fd40 	bl	80072d4 <_Balloc>
 8007854:	b920      	cbnz	r0, 8007860 <__mdiff+0x5c>
 8007856:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <__mdiff+0x10c>)
 8007858:	4602      	mov	r2, r0
 800785a:	f240 2145 	movw	r1, #581	; 0x245
 800785e:	e7e5      	b.n	800782c <__mdiff+0x28>
 8007860:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007864:	6926      	ldr	r6, [r4, #16]
 8007866:	60c5      	str	r5, [r0, #12]
 8007868:	f104 0914 	add.w	r9, r4, #20
 800786c:	f108 0514 	add.w	r5, r8, #20
 8007870:	f100 0e14 	add.w	lr, r0, #20
 8007874:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007878:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800787c:	f108 0210 	add.w	r2, r8, #16
 8007880:	46f2      	mov	sl, lr
 8007882:	2100      	movs	r1, #0
 8007884:	f859 3b04 	ldr.w	r3, [r9], #4
 8007888:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800788c:	fa11 f88b 	uxtah	r8, r1, fp
 8007890:	b299      	uxth	r1, r3
 8007892:	0c1b      	lsrs	r3, r3, #16
 8007894:	eba8 0801 	sub.w	r8, r8, r1
 8007898:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800789c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078a0:	fa1f f888 	uxth.w	r8, r8
 80078a4:	1419      	asrs	r1, r3, #16
 80078a6:	454e      	cmp	r6, r9
 80078a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078ac:	f84a 3b04 	str.w	r3, [sl], #4
 80078b0:	d8e8      	bhi.n	8007884 <__mdiff+0x80>
 80078b2:	1b33      	subs	r3, r6, r4
 80078b4:	3b15      	subs	r3, #21
 80078b6:	f023 0303 	bic.w	r3, r3, #3
 80078ba:	3304      	adds	r3, #4
 80078bc:	3415      	adds	r4, #21
 80078be:	42a6      	cmp	r6, r4
 80078c0:	bf38      	it	cc
 80078c2:	2304      	movcc	r3, #4
 80078c4:	441d      	add	r5, r3
 80078c6:	4473      	add	r3, lr
 80078c8:	469e      	mov	lr, r3
 80078ca:	462e      	mov	r6, r5
 80078cc:	4566      	cmp	r6, ip
 80078ce:	d30e      	bcc.n	80078ee <__mdiff+0xea>
 80078d0:	f10c 0203 	add.w	r2, ip, #3
 80078d4:	1b52      	subs	r2, r2, r5
 80078d6:	f022 0203 	bic.w	r2, r2, #3
 80078da:	3d03      	subs	r5, #3
 80078dc:	45ac      	cmp	ip, r5
 80078de:	bf38      	it	cc
 80078e0:	2200      	movcc	r2, #0
 80078e2:	4413      	add	r3, r2
 80078e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80078e8:	b17a      	cbz	r2, 800790a <__mdiff+0x106>
 80078ea:	6107      	str	r7, [r0, #16]
 80078ec:	e7a4      	b.n	8007838 <__mdiff+0x34>
 80078ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80078f2:	fa11 f288 	uxtah	r2, r1, r8
 80078f6:	1414      	asrs	r4, r2, #16
 80078f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078fc:	b292      	uxth	r2, r2
 80078fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007902:	f84e 2b04 	str.w	r2, [lr], #4
 8007906:	1421      	asrs	r1, r4, #16
 8007908:	e7e0      	b.n	80078cc <__mdiff+0xc8>
 800790a:	3f01      	subs	r7, #1
 800790c:	e7ea      	b.n	80078e4 <__mdiff+0xe0>
 800790e:	bf00      	nop
 8007910:	0800860c 	.word	0x0800860c
 8007914:	0800861d 	.word	0x0800861d

08007918 <__d2b>:
 8007918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800791c:	460f      	mov	r7, r1
 800791e:	2101      	movs	r1, #1
 8007920:	ec59 8b10 	vmov	r8, r9, d0
 8007924:	4616      	mov	r6, r2
 8007926:	f7ff fcd5 	bl	80072d4 <_Balloc>
 800792a:	4604      	mov	r4, r0
 800792c:	b930      	cbnz	r0, 800793c <__d2b+0x24>
 800792e:	4602      	mov	r2, r0
 8007930:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <__d2b+0xac>)
 8007932:	4825      	ldr	r0, [pc, #148]	; (80079c8 <__d2b+0xb0>)
 8007934:	f240 310f 	movw	r1, #783	; 0x30f
 8007938:	f000 fa86 	bl	8007e48 <__assert_func>
 800793c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007944:	bb2d      	cbnz	r5, 8007992 <__d2b+0x7a>
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	f1b8 0300 	subs.w	r3, r8, #0
 800794c:	d026      	beq.n	800799c <__d2b+0x84>
 800794e:	4668      	mov	r0, sp
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	f7ff fd87 	bl	8007464 <__lo0bits>
 8007956:	e9dd 1200 	ldrd	r1, r2, [sp]
 800795a:	b1e8      	cbz	r0, 8007998 <__d2b+0x80>
 800795c:	f1c0 0320 	rsb	r3, r0, #32
 8007960:	fa02 f303 	lsl.w	r3, r2, r3
 8007964:	430b      	orrs	r3, r1
 8007966:	40c2      	lsrs	r2, r0
 8007968:	6163      	str	r3, [r4, #20]
 800796a:	9201      	str	r2, [sp, #4]
 800796c:	9b01      	ldr	r3, [sp, #4]
 800796e:	61a3      	str	r3, [r4, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	bf14      	ite	ne
 8007974:	2202      	movne	r2, #2
 8007976:	2201      	moveq	r2, #1
 8007978:	6122      	str	r2, [r4, #16]
 800797a:	b1bd      	cbz	r5, 80079ac <__d2b+0x94>
 800797c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007980:	4405      	add	r5, r0
 8007982:	603d      	str	r5, [r7, #0]
 8007984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007988:	6030      	str	r0, [r6, #0]
 800798a:	4620      	mov	r0, r4
 800798c:	b003      	add	sp, #12
 800798e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007996:	e7d6      	b.n	8007946 <__d2b+0x2e>
 8007998:	6161      	str	r1, [r4, #20]
 800799a:	e7e7      	b.n	800796c <__d2b+0x54>
 800799c:	a801      	add	r0, sp, #4
 800799e:	f7ff fd61 	bl	8007464 <__lo0bits>
 80079a2:	9b01      	ldr	r3, [sp, #4]
 80079a4:	6163      	str	r3, [r4, #20]
 80079a6:	3020      	adds	r0, #32
 80079a8:	2201      	movs	r2, #1
 80079aa:	e7e5      	b.n	8007978 <__d2b+0x60>
 80079ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079b4:	6038      	str	r0, [r7, #0]
 80079b6:	6918      	ldr	r0, [r3, #16]
 80079b8:	f7ff fd34 	bl	8007424 <__hi0bits>
 80079bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079c0:	e7e2      	b.n	8007988 <__d2b+0x70>
 80079c2:	bf00      	nop
 80079c4:	0800860c 	.word	0x0800860c
 80079c8:	0800861d 	.word	0x0800861d

080079cc <__ssputs_r>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	688e      	ldr	r6, [r1, #8]
 80079d2:	461f      	mov	r7, r3
 80079d4:	42be      	cmp	r6, r7
 80079d6:	680b      	ldr	r3, [r1, #0]
 80079d8:	4682      	mov	sl, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	4690      	mov	r8, r2
 80079de:	d82c      	bhi.n	8007a3a <__ssputs_r+0x6e>
 80079e0:	898a      	ldrh	r2, [r1, #12]
 80079e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079e6:	d026      	beq.n	8007a36 <__ssputs_r+0x6a>
 80079e8:	6965      	ldr	r5, [r4, #20]
 80079ea:	6909      	ldr	r1, [r1, #16]
 80079ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079f0:	eba3 0901 	sub.w	r9, r3, r1
 80079f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079f8:	1c7b      	adds	r3, r7, #1
 80079fa:	444b      	add	r3, r9
 80079fc:	106d      	asrs	r5, r5, #1
 80079fe:	429d      	cmp	r5, r3
 8007a00:	bf38      	it	cc
 8007a02:	461d      	movcc	r5, r3
 8007a04:	0553      	lsls	r3, r2, #21
 8007a06:	d527      	bpl.n	8007a58 <__ssputs_r+0x8c>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f7ff fbd7 	bl	80071bc <_malloc_r>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	b360      	cbz	r0, 8007a6c <__ssputs_r+0xa0>
 8007a12:	6921      	ldr	r1, [r4, #16]
 8007a14:	464a      	mov	r2, r9
 8007a16:	f000 fa09 	bl	8007e2c <memcpy>
 8007a1a:	89a3      	ldrh	r3, [r4, #12]
 8007a1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a24:	81a3      	strh	r3, [r4, #12]
 8007a26:	6126      	str	r6, [r4, #16]
 8007a28:	6165      	str	r5, [r4, #20]
 8007a2a:	444e      	add	r6, r9
 8007a2c:	eba5 0509 	sub.w	r5, r5, r9
 8007a30:	6026      	str	r6, [r4, #0]
 8007a32:	60a5      	str	r5, [r4, #8]
 8007a34:	463e      	mov	r6, r7
 8007a36:	42be      	cmp	r6, r7
 8007a38:	d900      	bls.n	8007a3c <__ssputs_r+0x70>
 8007a3a:	463e      	mov	r6, r7
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	4632      	mov	r2, r6
 8007a40:	4641      	mov	r1, r8
 8007a42:	f000 f9c9 	bl	8007dd8 <memmove>
 8007a46:	68a3      	ldr	r3, [r4, #8]
 8007a48:	1b9b      	subs	r3, r3, r6
 8007a4a:	60a3      	str	r3, [r4, #8]
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	4433      	add	r3, r6
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	2000      	movs	r0, #0
 8007a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a58:	462a      	mov	r2, r5
 8007a5a:	f000 fa3b 	bl	8007ed4 <_realloc_r>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d1e0      	bne.n	8007a26 <__ssputs_r+0x5a>
 8007a64:	6921      	ldr	r1, [r4, #16]
 8007a66:	4650      	mov	r0, sl
 8007a68:	f7ff fb34 	bl	80070d4 <_free_r>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	f8ca 3000 	str.w	r3, [sl]
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a78:	81a3      	strh	r3, [r4, #12]
 8007a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a7e:	e7e9      	b.n	8007a54 <__ssputs_r+0x88>

08007a80 <_svfiprintf_r>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	4698      	mov	r8, r3
 8007a86:	898b      	ldrh	r3, [r1, #12]
 8007a88:	061b      	lsls	r3, r3, #24
 8007a8a:	b09d      	sub	sp, #116	; 0x74
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	460d      	mov	r5, r1
 8007a90:	4614      	mov	r4, r2
 8007a92:	d50e      	bpl.n	8007ab2 <_svfiprintf_r+0x32>
 8007a94:	690b      	ldr	r3, [r1, #16]
 8007a96:	b963      	cbnz	r3, 8007ab2 <_svfiprintf_r+0x32>
 8007a98:	2140      	movs	r1, #64	; 0x40
 8007a9a:	f7ff fb8f 	bl	80071bc <_malloc_r>
 8007a9e:	6028      	str	r0, [r5, #0]
 8007aa0:	6128      	str	r0, [r5, #16]
 8007aa2:	b920      	cbnz	r0, 8007aae <_svfiprintf_r+0x2e>
 8007aa4:	230c      	movs	r3, #12
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aac:	e0d0      	b.n	8007c50 <_svfiprintf_r+0x1d0>
 8007aae:	2340      	movs	r3, #64	; 0x40
 8007ab0:	616b      	str	r3, [r5, #20]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab6:	2320      	movs	r3, #32
 8007ab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007abc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac0:	2330      	movs	r3, #48	; 0x30
 8007ac2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c68 <_svfiprintf_r+0x1e8>
 8007ac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aca:	f04f 0901 	mov.w	r9, #1
 8007ace:	4623      	mov	r3, r4
 8007ad0:	469a      	mov	sl, r3
 8007ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ad6:	b10a      	cbz	r2, 8007adc <_svfiprintf_r+0x5c>
 8007ad8:	2a25      	cmp	r2, #37	; 0x25
 8007ada:	d1f9      	bne.n	8007ad0 <_svfiprintf_r+0x50>
 8007adc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae0:	d00b      	beq.n	8007afa <_svfiprintf_r+0x7a>
 8007ae2:	465b      	mov	r3, fp
 8007ae4:	4622      	mov	r2, r4
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7ff ff6f 	bl	80079cc <__ssputs_r>
 8007aee:	3001      	adds	r0, #1
 8007af0:	f000 80a9 	beq.w	8007c46 <_svfiprintf_r+0x1c6>
 8007af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af6:	445a      	add	r2, fp
 8007af8:	9209      	str	r2, [sp, #36]	; 0x24
 8007afa:	f89a 3000 	ldrb.w	r3, [sl]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 80a1 	beq.w	8007c46 <_svfiprintf_r+0x1c6>
 8007b04:	2300      	movs	r3, #0
 8007b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b0e:	f10a 0a01 	add.w	sl, sl, #1
 8007b12:	9304      	str	r3, [sp, #16]
 8007b14:	9307      	str	r3, [sp, #28]
 8007b16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b1a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b1c:	4654      	mov	r4, sl
 8007b1e:	2205      	movs	r2, #5
 8007b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b24:	4850      	ldr	r0, [pc, #320]	; (8007c68 <_svfiprintf_r+0x1e8>)
 8007b26:	f7f8 fb53 	bl	80001d0 <memchr>
 8007b2a:	9a04      	ldr	r2, [sp, #16]
 8007b2c:	b9d8      	cbnz	r0, 8007b66 <_svfiprintf_r+0xe6>
 8007b2e:	06d0      	lsls	r0, r2, #27
 8007b30:	bf44      	itt	mi
 8007b32:	2320      	movmi	r3, #32
 8007b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b38:	0711      	lsls	r1, r2, #28
 8007b3a:	bf44      	itt	mi
 8007b3c:	232b      	movmi	r3, #43	; 0x2b
 8007b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b42:	f89a 3000 	ldrb.w	r3, [sl]
 8007b46:	2b2a      	cmp	r3, #42	; 0x2a
 8007b48:	d015      	beq.n	8007b76 <_svfiprintf_r+0xf6>
 8007b4a:	9a07      	ldr	r2, [sp, #28]
 8007b4c:	4654      	mov	r4, sl
 8007b4e:	2000      	movs	r0, #0
 8007b50:	f04f 0c0a 	mov.w	ip, #10
 8007b54:	4621      	mov	r1, r4
 8007b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b5a:	3b30      	subs	r3, #48	; 0x30
 8007b5c:	2b09      	cmp	r3, #9
 8007b5e:	d94d      	bls.n	8007bfc <_svfiprintf_r+0x17c>
 8007b60:	b1b0      	cbz	r0, 8007b90 <_svfiprintf_r+0x110>
 8007b62:	9207      	str	r2, [sp, #28]
 8007b64:	e014      	b.n	8007b90 <_svfiprintf_r+0x110>
 8007b66:	eba0 0308 	sub.w	r3, r0, r8
 8007b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	9304      	str	r3, [sp, #16]
 8007b72:	46a2      	mov	sl, r4
 8007b74:	e7d2      	b.n	8007b1c <_svfiprintf_r+0x9c>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	1d19      	adds	r1, r3, #4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	9103      	str	r1, [sp, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfbb      	ittet	lt
 8007b82:	425b      	neglt	r3, r3
 8007b84:	f042 0202 	orrlt.w	r2, r2, #2
 8007b88:	9307      	strge	r3, [sp, #28]
 8007b8a:	9307      	strlt	r3, [sp, #28]
 8007b8c:	bfb8      	it	lt
 8007b8e:	9204      	strlt	r2, [sp, #16]
 8007b90:	7823      	ldrb	r3, [r4, #0]
 8007b92:	2b2e      	cmp	r3, #46	; 0x2e
 8007b94:	d10c      	bne.n	8007bb0 <_svfiprintf_r+0x130>
 8007b96:	7863      	ldrb	r3, [r4, #1]
 8007b98:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9a:	d134      	bne.n	8007c06 <_svfiprintf_r+0x186>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	1d1a      	adds	r2, r3, #4
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	9203      	str	r2, [sp, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bfb8      	it	lt
 8007ba8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bac:	3402      	adds	r4, #2
 8007bae:	9305      	str	r3, [sp, #20]
 8007bb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c78 <_svfiprintf_r+0x1f8>
 8007bb4:	7821      	ldrb	r1, [r4, #0]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	4650      	mov	r0, sl
 8007bba:	f7f8 fb09 	bl	80001d0 <memchr>
 8007bbe:	b138      	cbz	r0, 8007bd0 <_svfiprintf_r+0x150>
 8007bc0:	9b04      	ldr	r3, [sp, #16]
 8007bc2:	eba0 000a 	sub.w	r0, r0, sl
 8007bc6:	2240      	movs	r2, #64	; 0x40
 8007bc8:	4082      	lsls	r2, r0
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	3401      	adds	r4, #1
 8007bce:	9304      	str	r3, [sp, #16]
 8007bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd4:	4825      	ldr	r0, [pc, #148]	; (8007c6c <_svfiprintf_r+0x1ec>)
 8007bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bda:	2206      	movs	r2, #6
 8007bdc:	f7f8 faf8 	bl	80001d0 <memchr>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d038      	beq.n	8007c56 <_svfiprintf_r+0x1d6>
 8007be4:	4b22      	ldr	r3, [pc, #136]	; (8007c70 <_svfiprintf_r+0x1f0>)
 8007be6:	bb1b      	cbnz	r3, 8007c30 <_svfiprintf_r+0x1b0>
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	3307      	adds	r3, #7
 8007bec:	f023 0307 	bic.w	r3, r3, #7
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	9303      	str	r3, [sp, #12]
 8007bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf6:	4433      	add	r3, r6
 8007bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfa:	e768      	b.n	8007ace <_svfiprintf_r+0x4e>
 8007bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c00:	460c      	mov	r4, r1
 8007c02:	2001      	movs	r0, #1
 8007c04:	e7a6      	b.n	8007b54 <_svfiprintf_r+0xd4>
 8007c06:	2300      	movs	r3, #0
 8007c08:	3401      	adds	r4, #1
 8007c0a:	9305      	str	r3, [sp, #20]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f04f 0c0a 	mov.w	ip, #10
 8007c12:	4620      	mov	r0, r4
 8007c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c18:	3a30      	subs	r2, #48	; 0x30
 8007c1a:	2a09      	cmp	r2, #9
 8007c1c:	d903      	bls.n	8007c26 <_svfiprintf_r+0x1a6>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0c6      	beq.n	8007bb0 <_svfiprintf_r+0x130>
 8007c22:	9105      	str	r1, [sp, #20]
 8007c24:	e7c4      	b.n	8007bb0 <_svfiprintf_r+0x130>
 8007c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e7f0      	b.n	8007c12 <_svfiprintf_r+0x192>
 8007c30:	ab03      	add	r3, sp, #12
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	462a      	mov	r2, r5
 8007c36:	4b0f      	ldr	r3, [pc, #60]	; (8007c74 <_svfiprintf_r+0x1f4>)
 8007c38:	a904      	add	r1, sp, #16
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	f7fd fe64 	bl	8005908 <_printf_float>
 8007c40:	1c42      	adds	r2, r0, #1
 8007c42:	4606      	mov	r6, r0
 8007c44:	d1d6      	bne.n	8007bf4 <_svfiprintf_r+0x174>
 8007c46:	89ab      	ldrh	r3, [r5, #12]
 8007c48:	065b      	lsls	r3, r3, #25
 8007c4a:	f53f af2d 	bmi.w	8007aa8 <_svfiprintf_r+0x28>
 8007c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c50:	b01d      	add	sp, #116	; 0x74
 8007c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c56:	ab03      	add	r3, sp, #12
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	462a      	mov	r2, r5
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <_svfiprintf_r+0x1f4>)
 8007c5e:	a904      	add	r1, sp, #16
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7fe f8f5 	bl	8005e50 <_printf_i>
 8007c66:	e7eb      	b.n	8007c40 <_svfiprintf_r+0x1c0>
 8007c68:	08008774 	.word	0x08008774
 8007c6c:	0800877e 	.word	0x0800877e
 8007c70:	08005909 	.word	0x08005909
 8007c74:	080079cd 	.word	0x080079cd
 8007c78:	0800877a 	.word	0x0800877a

08007c7c <__sflush_r>:
 8007c7c:	898a      	ldrh	r2, [r1, #12]
 8007c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c82:	4605      	mov	r5, r0
 8007c84:	0710      	lsls	r0, r2, #28
 8007c86:	460c      	mov	r4, r1
 8007c88:	d458      	bmi.n	8007d3c <__sflush_r+0xc0>
 8007c8a:	684b      	ldr	r3, [r1, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dc05      	bgt.n	8007c9c <__sflush_r+0x20>
 8007c90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dc02      	bgt.n	8007c9c <__sflush_r+0x20>
 8007c96:	2000      	movs	r0, #0
 8007c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	d0f9      	beq.n	8007c96 <__sflush_r+0x1a>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ca8:	682f      	ldr	r7, [r5, #0]
 8007caa:	6a21      	ldr	r1, [r4, #32]
 8007cac:	602b      	str	r3, [r5, #0]
 8007cae:	d032      	beq.n	8007d16 <__sflush_r+0x9a>
 8007cb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	075a      	lsls	r2, r3, #29
 8007cb6:	d505      	bpl.n	8007cc4 <__sflush_r+0x48>
 8007cb8:	6863      	ldr	r3, [r4, #4]
 8007cba:	1ac0      	subs	r0, r0, r3
 8007cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cbe:	b10b      	cbz	r3, 8007cc4 <__sflush_r+0x48>
 8007cc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cc2:	1ac0      	subs	r0, r0, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cca:	6a21      	ldr	r1, [r4, #32]
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b0      	blx	r6
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	d106      	bne.n	8007ce4 <__sflush_r+0x68>
 8007cd6:	6829      	ldr	r1, [r5, #0]
 8007cd8:	291d      	cmp	r1, #29
 8007cda:	d82b      	bhi.n	8007d34 <__sflush_r+0xb8>
 8007cdc:	4a29      	ldr	r2, [pc, #164]	; (8007d84 <__sflush_r+0x108>)
 8007cde:	410a      	asrs	r2, r1
 8007ce0:	07d6      	lsls	r6, r2, #31
 8007ce2:	d427      	bmi.n	8007d34 <__sflush_r+0xb8>
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	6062      	str	r2, [r4, #4]
 8007ce8:	04d9      	lsls	r1, r3, #19
 8007cea:	6922      	ldr	r2, [r4, #16]
 8007cec:	6022      	str	r2, [r4, #0]
 8007cee:	d504      	bpl.n	8007cfa <__sflush_r+0x7e>
 8007cf0:	1c42      	adds	r2, r0, #1
 8007cf2:	d101      	bne.n	8007cf8 <__sflush_r+0x7c>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b903      	cbnz	r3, 8007cfa <__sflush_r+0x7e>
 8007cf8:	6560      	str	r0, [r4, #84]	; 0x54
 8007cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cfc:	602f      	str	r7, [r5, #0]
 8007cfe:	2900      	cmp	r1, #0
 8007d00:	d0c9      	beq.n	8007c96 <__sflush_r+0x1a>
 8007d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d06:	4299      	cmp	r1, r3
 8007d08:	d002      	beq.n	8007d10 <__sflush_r+0x94>
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f7ff f9e2 	bl	80070d4 <_free_r>
 8007d10:	2000      	movs	r0, #0
 8007d12:	6360      	str	r0, [r4, #52]	; 0x34
 8007d14:	e7c0      	b.n	8007c98 <__sflush_r+0x1c>
 8007d16:	2301      	movs	r3, #1
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b0      	blx	r6
 8007d1c:	1c41      	adds	r1, r0, #1
 8007d1e:	d1c8      	bne.n	8007cb2 <__sflush_r+0x36>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0c5      	beq.n	8007cb2 <__sflush_r+0x36>
 8007d26:	2b1d      	cmp	r3, #29
 8007d28:	d001      	beq.n	8007d2e <__sflush_r+0xb2>
 8007d2a:	2b16      	cmp	r3, #22
 8007d2c:	d101      	bne.n	8007d32 <__sflush_r+0xb6>
 8007d2e:	602f      	str	r7, [r5, #0]
 8007d30:	e7b1      	b.n	8007c96 <__sflush_r+0x1a>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d38:	81a3      	strh	r3, [r4, #12]
 8007d3a:	e7ad      	b.n	8007c98 <__sflush_r+0x1c>
 8007d3c:	690f      	ldr	r7, [r1, #16]
 8007d3e:	2f00      	cmp	r7, #0
 8007d40:	d0a9      	beq.n	8007c96 <__sflush_r+0x1a>
 8007d42:	0793      	lsls	r3, r2, #30
 8007d44:	680e      	ldr	r6, [r1, #0]
 8007d46:	bf08      	it	eq
 8007d48:	694b      	ldreq	r3, [r1, #20]
 8007d4a:	600f      	str	r7, [r1, #0]
 8007d4c:	bf18      	it	ne
 8007d4e:	2300      	movne	r3, #0
 8007d50:	eba6 0807 	sub.w	r8, r6, r7
 8007d54:	608b      	str	r3, [r1, #8]
 8007d56:	f1b8 0f00 	cmp.w	r8, #0
 8007d5a:	dd9c      	ble.n	8007c96 <__sflush_r+0x1a>
 8007d5c:	6a21      	ldr	r1, [r4, #32]
 8007d5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d60:	4643      	mov	r3, r8
 8007d62:	463a      	mov	r2, r7
 8007d64:	4628      	mov	r0, r5
 8007d66:	47b0      	blx	r6
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	dc06      	bgt.n	8007d7a <__sflush_r+0xfe>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d72:	81a3      	strh	r3, [r4, #12]
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d78:	e78e      	b.n	8007c98 <__sflush_r+0x1c>
 8007d7a:	4407      	add	r7, r0
 8007d7c:	eba8 0800 	sub.w	r8, r8, r0
 8007d80:	e7e9      	b.n	8007d56 <__sflush_r+0xda>
 8007d82:	bf00      	nop
 8007d84:	dfbffffe 	.word	0xdfbffffe

08007d88 <_fflush_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	690b      	ldr	r3, [r1, #16]
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	b913      	cbnz	r3, 8007d98 <_fflush_r+0x10>
 8007d92:	2500      	movs	r5, #0
 8007d94:	4628      	mov	r0, r5
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	b118      	cbz	r0, 8007da2 <_fflush_r+0x1a>
 8007d9a:	6a03      	ldr	r3, [r0, #32]
 8007d9c:	b90b      	cbnz	r3, 8007da2 <_fflush_r+0x1a>
 8007d9e:	f7fe fa05 	bl	80061ac <__sinit>
 8007da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0f3      	beq.n	8007d92 <_fflush_r+0xa>
 8007daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dac:	07d0      	lsls	r0, r2, #31
 8007dae:	d404      	bmi.n	8007dba <_fflush_r+0x32>
 8007db0:	0599      	lsls	r1, r3, #22
 8007db2:	d402      	bmi.n	8007dba <_fflush_r+0x32>
 8007db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db6:	f7fe fb10 	bl	80063da <__retarget_lock_acquire_recursive>
 8007dba:	4628      	mov	r0, r5
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	f7ff ff5d 	bl	8007c7c <__sflush_r>
 8007dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dc4:	07da      	lsls	r2, r3, #31
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	d4e4      	bmi.n	8007d94 <_fflush_r+0xc>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	059b      	lsls	r3, r3, #22
 8007dce:	d4e1      	bmi.n	8007d94 <_fflush_r+0xc>
 8007dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dd2:	f7fe fb03 	bl	80063dc <__retarget_lock_release_recursive>
 8007dd6:	e7dd      	b.n	8007d94 <_fflush_r+0xc>

08007dd8 <memmove>:
 8007dd8:	4288      	cmp	r0, r1
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	eb01 0402 	add.w	r4, r1, r2
 8007de0:	d902      	bls.n	8007de8 <memmove+0x10>
 8007de2:	4284      	cmp	r4, r0
 8007de4:	4623      	mov	r3, r4
 8007de6:	d807      	bhi.n	8007df8 <memmove+0x20>
 8007de8:	1e43      	subs	r3, r0, #1
 8007dea:	42a1      	cmp	r1, r4
 8007dec:	d008      	beq.n	8007e00 <memmove+0x28>
 8007dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007df6:	e7f8      	b.n	8007dea <memmove+0x12>
 8007df8:	4402      	add	r2, r0
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	428a      	cmp	r2, r1
 8007dfe:	d100      	bne.n	8007e02 <memmove+0x2a>
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e0a:	e7f7      	b.n	8007dfc <memmove+0x24>

08007e0c <_sbrk_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	; (8007e28 <_sbrk_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7fa fbba 	bl	8002590 <_sbrk>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_sbrk_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_sbrk_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	2000057c 	.word	0x2000057c

08007e2c <memcpy>:
 8007e2c:	440a      	add	r2, r1
 8007e2e:	4291      	cmp	r1, r2
 8007e30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e34:	d100      	bne.n	8007e38 <memcpy+0xc>
 8007e36:	4770      	bx	lr
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e42:	4291      	cmp	r1, r2
 8007e44:	d1f9      	bne.n	8007e3a <memcpy+0xe>
 8007e46:	bd10      	pop	{r4, pc}

08007e48 <__assert_func>:
 8007e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e4a:	4614      	mov	r4, r2
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <__assert_func+0x2c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4605      	mov	r5, r0
 8007e54:	68d8      	ldr	r0, [r3, #12]
 8007e56:	b14c      	cbz	r4, 8007e6c <__assert_func+0x24>
 8007e58:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <__assert_func+0x30>)
 8007e5a:	9100      	str	r1, [sp, #0]
 8007e5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e60:	4906      	ldr	r1, [pc, #24]	; (8007e7c <__assert_func+0x34>)
 8007e62:	462b      	mov	r3, r5
 8007e64:	f000 f872 	bl	8007f4c <fiprintf>
 8007e68:	f000 f882 	bl	8007f70 <abort>
 8007e6c:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <__assert_func+0x38>)
 8007e6e:	461c      	mov	r4, r3
 8007e70:	e7f3      	b.n	8007e5a <__assert_func+0x12>
 8007e72:	bf00      	nop
 8007e74:	2000009c 	.word	0x2000009c
 8007e78:	0800878f 	.word	0x0800878f
 8007e7c:	0800879c 	.word	0x0800879c
 8007e80:	080087ca 	.word	0x080087ca

08007e84 <_calloc_r>:
 8007e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e86:	fba1 2402 	umull	r2, r4, r1, r2
 8007e8a:	b94c      	cbnz	r4, 8007ea0 <_calloc_r+0x1c>
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	9201      	str	r2, [sp, #4]
 8007e90:	f7ff f994 	bl	80071bc <_malloc_r>
 8007e94:	9a01      	ldr	r2, [sp, #4]
 8007e96:	4605      	mov	r5, r0
 8007e98:	b930      	cbnz	r0, 8007ea8 <_calloc_r+0x24>
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	b003      	add	sp, #12
 8007e9e:	bd30      	pop	{r4, r5, pc}
 8007ea0:	220c      	movs	r2, #12
 8007ea2:	6002      	str	r2, [r0, #0]
 8007ea4:	2500      	movs	r5, #0
 8007ea6:	e7f8      	b.n	8007e9a <_calloc_r+0x16>
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	f7fe fa18 	bl	80062de <memset>
 8007eae:	e7f4      	b.n	8007e9a <_calloc_r+0x16>

08007eb0 <__ascii_mbtowc>:
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	b901      	cbnz	r1, 8007eb6 <__ascii_mbtowc+0x6>
 8007eb4:	a901      	add	r1, sp, #4
 8007eb6:	b142      	cbz	r2, 8007eca <__ascii_mbtowc+0x1a>
 8007eb8:	b14b      	cbz	r3, 8007ece <__ascii_mbtowc+0x1e>
 8007eba:	7813      	ldrb	r3, [r2, #0]
 8007ebc:	600b      	str	r3, [r1, #0]
 8007ebe:	7812      	ldrb	r2, [r2, #0]
 8007ec0:	1e10      	subs	r0, r2, #0
 8007ec2:	bf18      	it	ne
 8007ec4:	2001      	movne	r0, #1
 8007ec6:	b002      	add	sp, #8
 8007ec8:	4770      	bx	lr
 8007eca:	4610      	mov	r0, r2
 8007ecc:	e7fb      	b.n	8007ec6 <__ascii_mbtowc+0x16>
 8007ece:	f06f 0001 	mvn.w	r0, #1
 8007ed2:	e7f8      	b.n	8007ec6 <__ascii_mbtowc+0x16>

08007ed4 <_realloc_r>:
 8007ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed8:	4680      	mov	r8, r0
 8007eda:	4614      	mov	r4, r2
 8007edc:	460e      	mov	r6, r1
 8007ede:	b921      	cbnz	r1, 8007eea <_realloc_r+0x16>
 8007ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	f7ff b969 	b.w	80071bc <_malloc_r>
 8007eea:	b92a      	cbnz	r2, 8007ef8 <_realloc_r+0x24>
 8007eec:	f7ff f8f2 	bl	80070d4 <_free_r>
 8007ef0:	4625      	mov	r5, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	f000 f841 	bl	8007f7e <_malloc_usable_size_r>
 8007efc:	4284      	cmp	r4, r0
 8007efe:	4607      	mov	r7, r0
 8007f00:	d802      	bhi.n	8007f08 <_realloc_r+0x34>
 8007f02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f06:	d812      	bhi.n	8007f2e <_realloc_r+0x5a>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff f956 	bl	80071bc <_malloc_r>
 8007f10:	4605      	mov	r5, r0
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d0ed      	beq.n	8007ef2 <_realloc_r+0x1e>
 8007f16:	42bc      	cmp	r4, r7
 8007f18:	4622      	mov	r2, r4
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	bf28      	it	cs
 8007f1e:	463a      	movcs	r2, r7
 8007f20:	f7ff ff84 	bl	8007e2c <memcpy>
 8007f24:	4631      	mov	r1, r6
 8007f26:	4640      	mov	r0, r8
 8007f28:	f7ff f8d4 	bl	80070d4 <_free_r>
 8007f2c:	e7e1      	b.n	8007ef2 <_realloc_r+0x1e>
 8007f2e:	4635      	mov	r5, r6
 8007f30:	e7df      	b.n	8007ef2 <_realloc_r+0x1e>

08007f32 <__ascii_wctomb>:
 8007f32:	b149      	cbz	r1, 8007f48 <__ascii_wctomb+0x16>
 8007f34:	2aff      	cmp	r2, #255	; 0xff
 8007f36:	bf85      	ittet	hi
 8007f38:	238a      	movhi	r3, #138	; 0x8a
 8007f3a:	6003      	strhi	r3, [r0, #0]
 8007f3c:	700a      	strbls	r2, [r1, #0]
 8007f3e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007f42:	bf98      	it	ls
 8007f44:	2001      	movls	r0, #1
 8007f46:	4770      	bx	lr
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4770      	bx	lr

08007f4c <fiprintf>:
 8007f4c:	b40e      	push	{r1, r2, r3}
 8007f4e:	b503      	push	{r0, r1, lr}
 8007f50:	4601      	mov	r1, r0
 8007f52:	ab03      	add	r3, sp, #12
 8007f54:	4805      	ldr	r0, [pc, #20]	; (8007f6c <fiprintf+0x20>)
 8007f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	f000 f83f 	bl	8007fe0 <_vfiprintf_r>
 8007f62:	b002      	add	sp, #8
 8007f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f68:	b003      	add	sp, #12
 8007f6a:	4770      	bx	lr
 8007f6c:	2000009c 	.word	0x2000009c

08007f70 <abort>:
 8007f70:	b508      	push	{r3, lr}
 8007f72:	2006      	movs	r0, #6
 8007f74:	f000 fa0c 	bl	8008390 <raise>
 8007f78:	2001      	movs	r0, #1
 8007f7a:	f7fa faae 	bl	80024da <_exit>

08007f7e <_malloc_usable_size_r>:
 8007f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f82:	1f18      	subs	r0, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bfbc      	itt	lt
 8007f88:	580b      	ldrlt	r3, [r1, r0]
 8007f8a:	18c0      	addlt	r0, r0, r3
 8007f8c:	4770      	bx	lr

08007f8e <__sfputc_r>:
 8007f8e:	6893      	ldr	r3, [r2, #8]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	b410      	push	{r4}
 8007f96:	6093      	str	r3, [r2, #8]
 8007f98:	da08      	bge.n	8007fac <__sfputc_r+0x1e>
 8007f9a:	6994      	ldr	r4, [r2, #24]
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	db01      	blt.n	8007fa4 <__sfputc_r+0x16>
 8007fa0:	290a      	cmp	r1, #10
 8007fa2:	d103      	bne.n	8007fac <__sfputc_r+0x1e>
 8007fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa8:	f000 b934 	b.w	8008214 <__swbuf_r>
 8007fac:	6813      	ldr	r3, [r2, #0]
 8007fae:	1c58      	adds	r0, r3, #1
 8007fb0:	6010      	str	r0, [r2, #0]
 8007fb2:	7019      	strb	r1, [r3, #0]
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <__sfputs_r>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	4614      	mov	r4, r2
 8007fc4:	18d5      	adds	r5, r2, r3
 8007fc6:	42ac      	cmp	r4, r5
 8007fc8:	d101      	bne.n	8007fce <__sfputs_r+0x12>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	e007      	b.n	8007fde <__sfputs_r+0x22>
 8007fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd2:	463a      	mov	r2, r7
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff ffda 	bl	8007f8e <__sfputc_r>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d1f3      	bne.n	8007fc6 <__sfputs_r+0xa>
 8007fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fe0 <_vfiprintf_r>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	b09d      	sub	sp, #116	; 0x74
 8007fe8:	4614      	mov	r4, r2
 8007fea:	4698      	mov	r8, r3
 8007fec:	4606      	mov	r6, r0
 8007fee:	b118      	cbz	r0, 8007ff8 <_vfiprintf_r+0x18>
 8007ff0:	6a03      	ldr	r3, [r0, #32]
 8007ff2:	b90b      	cbnz	r3, 8007ff8 <_vfiprintf_r+0x18>
 8007ff4:	f7fe f8da 	bl	80061ac <__sinit>
 8007ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ffa:	07d9      	lsls	r1, r3, #31
 8007ffc:	d405      	bmi.n	800800a <_vfiprintf_r+0x2a>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	059a      	lsls	r2, r3, #22
 8008002:	d402      	bmi.n	800800a <_vfiprintf_r+0x2a>
 8008004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008006:	f7fe f9e8 	bl	80063da <__retarget_lock_acquire_recursive>
 800800a:	89ab      	ldrh	r3, [r5, #12]
 800800c:	071b      	lsls	r3, r3, #28
 800800e:	d501      	bpl.n	8008014 <_vfiprintf_r+0x34>
 8008010:	692b      	ldr	r3, [r5, #16]
 8008012:	b99b      	cbnz	r3, 800803c <_vfiprintf_r+0x5c>
 8008014:	4629      	mov	r1, r5
 8008016:	4630      	mov	r0, r6
 8008018:	f000 f93a 	bl	8008290 <__swsetup_r>
 800801c:	b170      	cbz	r0, 800803c <_vfiprintf_r+0x5c>
 800801e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008020:	07dc      	lsls	r4, r3, #31
 8008022:	d504      	bpl.n	800802e <_vfiprintf_r+0x4e>
 8008024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008028:	b01d      	add	sp, #116	; 0x74
 800802a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	0598      	lsls	r0, r3, #22
 8008032:	d4f7      	bmi.n	8008024 <_vfiprintf_r+0x44>
 8008034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008036:	f7fe f9d1 	bl	80063dc <__retarget_lock_release_recursive>
 800803a:	e7f3      	b.n	8008024 <_vfiprintf_r+0x44>
 800803c:	2300      	movs	r3, #0
 800803e:	9309      	str	r3, [sp, #36]	; 0x24
 8008040:	2320      	movs	r3, #32
 8008042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008046:	f8cd 800c 	str.w	r8, [sp, #12]
 800804a:	2330      	movs	r3, #48	; 0x30
 800804c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008200 <_vfiprintf_r+0x220>
 8008050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008054:	f04f 0901 	mov.w	r9, #1
 8008058:	4623      	mov	r3, r4
 800805a:	469a      	mov	sl, r3
 800805c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008060:	b10a      	cbz	r2, 8008066 <_vfiprintf_r+0x86>
 8008062:	2a25      	cmp	r2, #37	; 0x25
 8008064:	d1f9      	bne.n	800805a <_vfiprintf_r+0x7a>
 8008066:	ebba 0b04 	subs.w	fp, sl, r4
 800806a:	d00b      	beq.n	8008084 <_vfiprintf_r+0xa4>
 800806c:	465b      	mov	r3, fp
 800806e:	4622      	mov	r2, r4
 8008070:	4629      	mov	r1, r5
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff ffa2 	bl	8007fbc <__sfputs_r>
 8008078:	3001      	adds	r0, #1
 800807a:	f000 80a9 	beq.w	80081d0 <_vfiprintf_r+0x1f0>
 800807e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008080:	445a      	add	r2, fp
 8008082:	9209      	str	r2, [sp, #36]	; 0x24
 8008084:	f89a 3000 	ldrb.w	r3, [sl]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80a1 	beq.w	80081d0 <_vfiprintf_r+0x1f0>
 800808e:	2300      	movs	r3, #0
 8008090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008098:	f10a 0a01 	add.w	sl, sl, #1
 800809c:	9304      	str	r3, [sp, #16]
 800809e:	9307      	str	r3, [sp, #28]
 80080a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080a4:	931a      	str	r3, [sp, #104]	; 0x68
 80080a6:	4654      	mov	r4, sl
 80080a8:	2205      	movs	r2, #5
 80080aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ae:	4854      	ldr	r0, [pc, #336]	; (8008200 <_vfiprintf_r+0x220>)
 80080b0:	f7f8 f88e 	bl	80001d0 <memchr>
 80080b4:	9a04      	ldr	r2, [sp, #16]
 80080b6:	b9d8      	cbnz	r0, 80080f0 <_vfiprintf_r+0x110>
 80080b8:	06d1      	lsls	r1, r2, #27
 80080ba:	bf44      	itt	mi
 80080bc:	2320      	movmi	r3, #32
 80080be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080c2:	0713      	lsls	r3, r2, #28
 80080c4:	bf44      	itt	mi
 80080c6:	232b      	movmi	r3, #43	; 0x2b
 80080c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080cc:	f89a 3000 	ldrb.w	r3, [sl]
 80080d0:	2b2a      	cmp	r3, #42	; 0x2a
 80080d2:	d015      	beq.n	8008100 <_vfiprintf_r+0x120>
 80080d4:	9a07      	ldr	r2, [sp, #28]
 80080d6:	4654      	mov	r4, sl
 80080d8:	2000      	movs	r0, #0
 80080da:	f04f 0c0a 	mov.w	ip, #10
 80080de:	4621      	mov	r1, r4
 80080e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e4:	3b30      	subs	r3, #48	; 0x30
 80080e6:	2b09      	cmp	r3, #9
 80080e8:	d94d      	bls.n	8008186 <_vfiprintf_r+0x1a6>
 80080ea:	b1b0      	cbz	r0, 800811a <_vfiprintf_r+0x13a>
 80080ec:	9207      	str	r2, [sp, #28]
 80080ee:	e014      	b.n	800811a <_vfiprintf_r+0x13a>
 80080f0:	eba0 0308 	sub.w	r3, r0, r8
 80080f4:	fa09 f303 	lsl.w	r3, r9, r3
 80080f8:	4313      	orrs	r3, r2
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	46a2      	mov	sl, r4
 80080fe:	e7d2      	b.n	80080a6 <_vfiprintf_r+0xc6>
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	1d19      	adds	r1, r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	9103      	str	r1, [sp, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	bfbb      	ittet	lt
 800810c:	425b      	neglt	r3, r3
 800810e:	f042 0202 	orrlt.w	r2, r2, #2
 8008112:	9307      	strge	r3, [sp, #28]
 8008114:	9307      	strlt	r3, [sp, #28]
 8008116:	bfb8      	it	lt
 8008118:	9204      	strlt	r2, [sp, #16]
 800811a:	7823      	ldrb	r3, [r4, #0]
 800811c:	2b2e      	cmp	r3, #46	; 0x2e
 800811e:	d10c      	bne.n	800813a <_vfiprintf_r+0x15a>
 8008120:	7863      	ldrb	r3, [r4, #1]
 8008122:	2b2a      	cmp	r3, #42	; 0x2a
 8008124:	d134      	bne.n	8008190 <_vfiprintf_r+0x1b0>
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	1d1a      	adds	r2, r3, #4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	9203      	str	r2, [sp, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	bfb8      	it	lt
 8008132:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008136:	3402      	adds	r4, #2
 8008138:	9305      	str	r3, [sp, #20]
 800813a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008210 <_vfiprintf_r+0x230>
 800813e:	7821      	ldrb	r1, [r4, #0]
 8008140:	2203      	movs	r2, #3
 8008142:	4650      	mov	r0, sl
 8008144:	f7f8 f844 	bl	80001d0 <memchr>
 8008148:	b138      	cbz	r0, 800815a <_vfiprintf_r+0x17a>
 800814a:	9b04      	ldr	r3, [sp, #16]
 800814c:	eba0 000a 	sub.w	r0, r0, sl
 8008150:	2240      	movs	r2, #64	; 0x40
 8008152:	4082      	lsls	r2, r0
 8008154:	4313      	orrs	r3, r2
 8008156:	3401      	adds	r4, #1
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815e:	4829      	ldr	r0, [pc, #164]	; (8008204 <_vfiprintf_r+0x224>)
 8008160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008164:	2206      	movs	r2, #6
 8008166:	f7f8 f833 	bl	80001d0 <memchr>
 800816a:	2800      	cmp	r0, #0
 800816c:	d03f      	beq.n	80081ee <_vfiprintf_r+0x20e>
 800816e:	4b26      	ldr	r3, [pc, #152]	; (8008208 <_vfiprintf_r+0x228>)
 8008170:	bb1b      	cbnz	r3, 80081ba <_vfiprintf_r+0x1da>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	3307      	adds	r3, #7
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	3308      	adds	r3, #8
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008180:	443b      	add	r3, r7
 8008182:	9309      	str	r3, [sp, #36]	; 0x24
 8008184:	e768      	b.n	8008058 <_vfiprintf_r+0x78>
 8008186:	fb0c 3202 	mla	r2, ip, r2, r3
 800818a:	460c      	mov	r4, r1
 800818c:	2001      	movs	r0, #1
 800818e:	e7a6      	b.n	80080de <_vfiprintf_r+0xfe>
 8008190:	2300      	movs	r3, #0
 8008192:	3401      	adds	r4, #1
 8008194:	9305      	str	r3, [sp, #20]
 8008196:	4619      	mov	r1, r3
 8008198:	f04f 0c0a 	mov.w	ip, #10
 800819c:	4620      	mov	r0, r4
 800819e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a2:	3a30      	subs	r2, #48	; 0x30
 80081a4:	2a09      	cmp	r2, #9
 80081a6:	d903      	bls.n	80081b0 <_vfiprintf_r+0x1d0>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0c6      	beq.n	800813a <_vfiprintf_r+0x15a>
 80081ac:	9105      	str	r1, [sp, #20]
 80081ae:	e7c4      	b.n	800813a <_vfiprintf_r+0x15a>
 80081b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b4:	4604      	mov	r4, r0
 80081b6:	2301      	movs	r3, #1
 80081b8:	e7f0      	b.n	800819c <_vfiprintf_r+0x1bc>
 80081ba:	ab03      	add	r3, sp, #12
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	462a      	mov	r2, r5
 80081c0:	4b12      	ldr	r3, [pc, #72]	; (800820c <_vfiprintf_r+0x22c>)
 80081c2:	a904      	add	r1, sp, #16
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7fd fb9f 	bl	8005908 <_printf_float>
 80081ca:	4607      	mov	r7, r0
 80081cc:	1c78      	adds	r0, r7, #1
 80081ce:	d1d6      	bne.n	800817e <_vfiprintf_r+0x19e>
 80081d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081d2:	07d9      	lsls	r1, r3, #31
 80081d4:	d405      	bmi.n	80081e2 <_vfiprintf_r+0x202>
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	059a      	lsls	r2, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_vfiprintf_r+0x202>
 80081dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081de:	f7fe f8fd 	bl	80063dc <__retarget_lock_release_recursive>
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	065b      	lsls	r3, r3, #25
 80081e6:	f53f af1d 	bmi.w	8008024 <_vfiprintf_r+0x44>
 80081ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ec:	e71c      	b.n	8008028 <_vfiprintf_r+0x48>
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	462a      	mov	r2, r5
 80081f4:	4b05      	ldr	r3, [pc, #20]	; (800820c <_vfiprintf_r+0x22c>)
 80081f6:	a904      	add	r1, sp, #16
 80081f8:	4630      	mov	r0, r6
 80081fa:	f7fd fe29 	bl	8005e50 <_printf_i>
 80081fe:	e7e4      	b.n	80081ca <_vfiprintf_r+0x1ea>
 8008200:	08008774 	.word	0x08008774
 8008204:	0800877e 	.word	0x0800877e
 8008208:	08005909 	.word	0x08005909
 800820c:	08007fbd 	.word	0x08007fbd
 8008210:	0800877a 	.word	0x0800877a

08008214 <__swbuf_r>:
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	460e      	mov	r6, r1
 8008218:	4614      	mov	r4, r2
 800821a:	4605      	mov	r5, r0
 800821c:	b118      	cbz	r0, 8008226 <__swbuf_r+0x12>
 800821e:	6a03      	ldr	r3, [r0, #32]
 8008220:	b90b      	cbnz	r3, 8008226 <__swbuf_r+0x12>
 8008222:	f7fd ffc3 	bl	80061ac <__sinit>
 8008226:	69a3      	ldr	r3, [r4, #24]
 8008228:	60a3      	str	r3, [r4, #8]
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	071a      	lsls	r2, r3, #28
 800822e:	d525      	bpl.n	800827c <__swbuf_r+0x68>
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	b31b      	cbz	r3, 800827c <__swbuf_r+0x68>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	6922      	ldr	r2, [r4, #16]
 8008238:	1a98      	subs	r0, r3, r2
 800823a:	6963      	ldr	r3, [r4, #20]
 800823c:	b2f6      	uxtb	r6, r6
 800823e:	4283      	cmp	r3, r0
 8008240:	4637      	mov	r7, r6
 8008242:	dc04      	bgt.n	800824e <__swbuf_r+0x3a>
 8008244:	4621      	mov	r1, r4
 8008246:	4628      	mov	r0, r5
 8008248:	f7ff fd9e 	bl	8007d88 <_fflush_r>
 800824c:	b9e0      	cbnz	r0, 8008288 <__swbuf_r+0x74>
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	3b01      	subs	r3, #1
 8008252:	60a3      	str	r3, [r4, #8]
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	6022      	str	r2, [r4, #0]
 800825a:	701e      	strb	r6, [r3, #0]
 800825c:	6962      	ldr	r2, [r4, #20]
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	429a      	cmp	r2, r3
 8008262:	d004      	beq.n	800826e <__swbuf_r+0x5a>
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	07db      	lsls	r3, r3, #31
 8008268:	d506      	bpl.n	8008278 <__swbuf_r+0x64>
 800826a:	2e0a      	cmp	r6, #10
 800826c:	d104      	bne.n	8008278 <__swbuf_r+0x64>
 800826e:	4621      	mov	r1, r4
 8008270:	4628      	mov	r0, r5
 8008272:	f7ff fd89 	bl	8007d88 <_fflush_r>
 8008276:	b938      	cbnz	r0, 8008288 <__swbuf_r+0x74>
 8008278:	4638      	mov	r0, r7
 800827a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800827c:	4621      	mov	r1, r4
 800827e:	4628      	mov	r0, r5
 8008280:	f000 f806 	bl	8008290 <__swsetup_r>
 8008284:	2800      	cmp	r0, #0
 8008286:	d0d5      	beq.n	8008234 <__swbuf_r+0x20>
 8008288:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800828c:	e7f4      	b.n	8008278 <__swbuf_r+0x64>
	...

08008290 <__swsetup_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4b2a      	ldr	r3, [pc, #168]	; (800833c <__swsetup_r+0xac>)
 8008294:	4605      	mov	r5, r0
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	460c      	mov	r4, r1
 800829a:	b118      	cbz	r0, 80082a4 <__swsetup_r+0x14>
 800829c:	6a03      	ldr	r3, [r0, #32]
 800829e:	b90b      	cbnz	r3, 80082a4 <__swsetup_r+0x14>
 80082a0:	f7fd ff84 	bl	80061ac <__sinit>
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082aa:	0718      	lsls	r0, r3, #28
 80082ac:	d422      	bmi.n	80082f4 <__swsetup_r+0x64>
 80082ae:	06d9      	lsls	r1, r3, #27
 80082b0:	d407      	bmi.n	80082c2 <__swsetup_r+0x32>
 80082b2:	2309      	movs	r3, #9
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082c0:	e034      	b.n	800832c <__swsetup_r+0x9c>
 80082c2:	0758      	lsls	r0, r3, #29
 80082c4:	d512      	bpl.n	80082ec <__swsetup_r+0x5c>
 80082c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082c8:	b141      	cbz	r1, 80082dc <__swsetup_r+0x4c>
 80082ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082ce:	4299      	cmp	r1, r3
 80082d0:	d002      	beq.n	80082d8 <__swsetup_r+0x48>
 80082d2:	4628      	mov	r0, r5
 80082d4:	f7fe fefe 	bl	80070d4 <_free_r>
 80082d8:	2300      	movs	r3, #0
 80082da:	6363      	str	r3, [r4, #52]	; 0x34
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	2300      	movs	r3, #0
 80082e6:	6063      	str	r3, [r4, #4]
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	f043 0308 	orr.w	r3, r3, #8
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	b94b      	cbnz	r3, 800830c <__swsetup_r+0x7c>
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008302:	d003      	beq.n	800830c <__swsetup_r+0x7c>
 8008304:	4621      	mov	r1, r4
 8008306:	4628      	mov	r0, r5
 8008308:	f000 f884 	bl	8008414 <__smakebuf_r>
 800830c:	89a0      	ldrh	r0, [r4, #12]
 800830e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008312:	f010 0301 	ands.w	r3, r0, #1
 8008316:	d00a      	beq.n	800832e <__swsetup_r+0x9e>
 8008318:	2300      	movs	r3, #0
 800831a:	60a3      	str	r3, [r4, #8]
 800831c:	6963      	ldr	r3, [r4, #20]
 800831e:	425b      	negs	r3, r3
 8008320:	61a3      	str	r3, [r4, #24]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	b943      	cbnz	r3, 8008338 <__swsetup_r+0xa8>
 8008326:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800832a:	d1c4      	bne.n	80082b6 <__swsetup_r+0x26>
 800832c:	bd38      	pop	{r3, r4, r5, pc}
 800832e:	0781      	lsls	r1, r0, #30
 8008330:	bf58      	it	pl
 8008332:	6963      	ldrpl	r3, [r4, #20]
 8008334:	60a3      	str	r3, [r4, #8]
 8008336:	e7f4      	b.n	8008322 <__swsetup_r+0x92>
 8008338:	2000      	movs	r0, #0
 800833a:	e7f7      	b.n	800832c <__swsetup_r+0x9c>
 800833c:	2000009c 	.word	0x2000009c

08008340 <_raise_r>:
 8008340:	291f      	cmp	r1, #31
 8008342:	b538      	push	{r3, r4, r5, lr}
 8008344:	4604      	mov	r4, r0
 8008346:	460d      	mov	r5, r1
 8008348:	d904      	bls.n	8008354 <_raise_r+0x14>
 800834a:	2316      	movs	r3, #22
 800834c:	6003      	str	r3, [r0, #0]
 800834e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008356:	b112      	cbz	r2, 800835e <_raise_r+0x1e>
 8008358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800835c:	b94b      	cbnz	r3, 8008372 <_raise_r+0x32>
 800835e:	4620      	mov	r0, r4
 8008360:	f000 f830 	bl	80083c4 <_getpid_r>
 8008364:	462a      	mov	r2, r5
 8008366:	4601      	mov	r1, r0
 8008368:	4620      	mov	r0, r4
 800836a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800836e:	f000 b817 	b.w	80083a0 <_kill_r>
 8008372:	2b01      	cmp	r3, #1
 8008374:	d00a      	beq.n	800838c <_raise_r+0x4c>
 8008376:	1c59      	adds	r1, r3, #1
 8008378:	d103      	bne.n	8008382 <_raise_r+0x42>
 800837a:	2316      	movs	r3, #22
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	2001      	movs	r0, #1
 8008380:	e7e7      	b.n	8008352 <_raise_r+0x12>
 8008382:	2400      	movs	r4, #0
 8008384:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008388:	4628      	mov	r0, r5
 800838a:	4798      	blx	r3
 800838c:	2000      	movs	r0, #0
 800838e:	e7e0      	b.n	8008352 <_raise_r+0x12>

08008390 <raise>:
 8008390:	4b02      	ldr	r3, [pc, #8]	; (800839c <raise+0xc>)
 8008392:	4601      	mov	r1, r0
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	f7ff bfd3 	b.w	8008340 <_raise_r>
 800839a:	bf00      	nop
 800839c:	2000009c 	.word	0x2000009c

080083a0 <_kill_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4d07      	ldr	r5, [pc, #28]	; (80083c0 <_kill_r+0x20>)
 80083a4:	2300      	movs	r3, #0
 80083a6:	4604      	mov	r4, r0
 80083a8:	4608      	mov	r0, r1
 80083aa:	4611      	mov	r1, r2
 80083ac:	602b      	str	r3, [r5, #0]
 80083ae:	f7fa f884 	bl	80024ba <_kill>
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	d102      	bne.n	80083bc <_kill_r+0x1c>
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	b103      	cbz	r3, 80083bc <_kill_r+0x1c>
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
 80083be:	bf00      	nop
 80083c0:	2000057c 	.word	0x2000057c

080083c4 <_getpid_r>:
 80083c4:	f7fa b871 	b.w	80024aa <_getpid>

080083c8 <__swhatbuf_r>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	460c      	mov	r4, r1
 80083cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d0:	2900      	cmp	r1, #0
 80083d2:	b096      	sub	sp, #88	; 0x58
 80083d4:	4615      	mov	r5, r2
 80083d6:	461e      	mov	r6, r3
 80083d8:	da0d      	bge.n	80083f6 <__swhatbuf_r+0x2e>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083e0:	f04f 0100 	mov.w	r1, #0
 80083e4:	bf0c      	ite	eq
 80083e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80083ea:	2340      	movne	r3, #64	; 0x40
 80083ec:	2000      	movs	r0, #0
 80083ee:	6031      	str	r1, [r6, #0]
 80083f0:	602b      	str	r3, [r5, #0]
 80083f2:	b016      	add	sp, #88	; 0x58
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	466a      	mov	r2, sp
 80083f8:	f000 f848 	bl	800848c <_fstat_r>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	dbec      	blt.n	80083da <__swhatbuf_r+0x12>
 8008400:	9901      	ldr	r1, [sp, #4]
 8008402:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008406:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800840a:	4259      	negs	r1, r3
 800840c:	4159      	adcs	r1, r3
 800840e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008412:	e7eb      	b.n	80083ec <__swhatbuf_r+0x24>

08008414 <__smakebuf_r>:
 8008414:	898b      	ldrh	r3, [r1, #12]
 8008416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008418:	079d      	lsls	r5, r3, #30
 800841a:	4606      	mov	r6, r0
 800841c:	460c      	mov	r4, r1
 800841e:	d507      	bpl.n	8008430 <__smakebuf_r+0x1c>
 8008420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	2301      	movs	r3, #1
 800842a:	6163      	str	r3, [r4, #20]
 800842c:	b002      	add	sp, #8
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	ab01      	add	r3, sp, #4
 8008432:	466a      	mov	r2, sp
 8008434:	f7ff ffc8 	bl	80083c8 <__swhatbuf_r>
 8008438:	9900      	ldr	r1, [sp, #0]
 800843a:	4605      	mov	r5, r0
 800843c:	4630      	mov	r0, r6
 800843e:	f7fe febd 	bl	80071bc <_malloc_r>
 8008442:	b948      	cbnz	r0, 8008458 <__smakebuf_r+0x44>
 8008444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008448:	059a      	lsls	r2, r3, #22
 800844a:	d4ef      	bmi.n	800842c <__smakebuf_r+0x18>
 800844c:	f023 0303 	bic.w	r3, r3, #3
 8008450:	f043 0302 	orr.w	r3, r3, #2
 8008454:	81a3      	strh	r3, [r4, #12]
 8008456:	e7e3      	b.n	8008420 <__smakebuf_r+0xc>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	6020      	str	r0, [r4, #0]
 800845c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	9b00      	ldr	r3, [sp, #0]
 8008464:	6163      	str	r3, [r4, #20]
 8008466:	9b01      	ldr	r3, [sp, #4]
 8008468:	6120      	str	r0, [r4, #16]
 800846a:	b15b      	cbz	r3, 8008484 <__smakebuf_r+0x70>
 800846c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008470:	4630      	mov	r0, r6
 8008472:	f000 f81d 	bl	80084b0 <_isatty_r>
 8008476:	b128      	cbz	r0, 8008484 <__smakebuf_r+0x70>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	431d      	orrs	r5, r3
 8008488:	81a5      	strh	r5, [r4, #12]
 800848a:	e7cf      	b.n	800842c <__smakebuf_r+0x18>

0800848c <_fstat_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d07      	ldr	r5, [pc, #28]	; (80084ac <_fstat_r+0x20>)
 8008490:	2300      	movs	r3, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	4611      	mov	r1, r2
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	f7fa f851 	bl	8002540 <_fstat>
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	d102      	bne.n	80084a8 <_fstat_r+0x1c>
 80084a2:	682b      	ldr	r3, [r5, #0]
 80084a4:	b103      	cbz	r3, 80084a8 <_fstat_r+0x1c>
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	bd38      	pop	{r3, r4, r5, pc}
 80084aa:	bf00      	nop
 80084ac:	2000057c 	.word	0x2000057c

080084b0 <_isatty_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d06      	ldr	r5, [pc, #24]	; (80084cc <_isatty_r+0x1c>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	f7fa f850 	bl	8002560 <_isatty>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_isatty_r+0x1a>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_isatty_r+0x1a>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	2000057c 	.word	0x2000057c

080084d0 <_init>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr

080084dc <_fini>:
 80084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084de:	bf00      	nop
 80084e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e2:	bc08      	pop	{r3}
 80084e4:	469e      	mov	lr, r3
 80084e6:	4770      	bx	lr
