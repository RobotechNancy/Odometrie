
GYRO_ACC_Yann.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008480  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008610  08008610  00018610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a5c  08008a5c  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a64  08008a64  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a64  08008a64  00018a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a68  08008a68  00018a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08008a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000218  08008c80  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08008c80  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015af7  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b53  00000000  00000000  00035d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00038890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  00039cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022708  00000000  00000000  0003afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e46  00000000  00000000  0005d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf664  00000000  00000000  00074516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006644  00000000  00000000  00143bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085f8 	.word	0x080085f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	080085f8 	.word	0x080085f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <Accelero_GetData_X>:

// private functions


void Accelero_GetData_X(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	Accelero_Data.Accelerorate = MPU6050_GetData_CF_Accelero(0) - Accelero_Data.offset_x;
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 fea5 	bl	8001ca0 <MPU6050_GetData_CF_Accelero>
 8000f56:	ee10 3a10 	vmov	r3, s0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff faf4 	bl	8000548 <__aeabi_f2d>
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <Accelero_GetData_X+0x2c>)
 8000f62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f66:	f7ff f98f 	bl	8000288 <__aeabi_dsub>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4902      	ldr	r1, [pc, #8]	; (8000f78 <Accelero_GetData_X+0x2c>)
 8000f70:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000238 	.word	0x20000238

08000f7c <Accelero_GetData_Y>:
void Accelero_GetData_Y(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	Accelero_Data.Accelerorate = MPU6050_GetData_CF_Accelero(1) - Accelero_Data.offset_y;
 8000f80:	2001      	movs	r0, #1
 8000f82:	f000 fe8d 	bl	8001ca0 <MPU6050_GetData_CF_Accelero>
 8000f86:	ee10 3a10 	vmov	r3, s0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fadc 	bl	8000548 <__aeabi_f2d>
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <Accelero_GetData_Y+0x2c>)
 8000f92:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f96:	f7ff f977 	bl	8000288 <__aeabi_dsub>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4902      	ldr	r1, [pc, #8]	; (8000fa8 <Accelero_GetData_Y+0x2c>)
 8000fa0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000238 	.word	0x20000238

08000fac <Accelero_NewData>:

Accelero_NewData_t Accelero_NewData(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	return (Accelero_NewData_t)MPU6050_NewData();
 8000fb0:	f000 fd98 	bl	8001ae4 <MPU6050_NewData>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <Accelero_ResetAccumulator>:

void Accelero_ResetAccumulator(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	Accelero_Data.accumulator = 0.0;
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <Accelero_ResetAccumulator+0x24>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	e9c1 2300 	strd	r2, r3, [r1]
	Accelero_Data.counter = 0;
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <Accelero_ResetAccumulator+0x24>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	811a      	strh	r2, [r3, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000238 	.word	0x20000238

08000fe4 <Accelero_Accumulate_X>:

void Accelero_Accumulate_X(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	if(Accelero_NewData()==ACCEL_DATA_AVAILABLE)
 8000fe8:	f7ff ffe0 	bl	8000fac <Accelero_NewData>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d114      	bne.n	800101c <Accelero_Accumulate_X+0x38>
	{
		Accelero_GetData_X();
 8000ff2:	f7ff ffab 	bl	8000f4c <Accelero_GetData_X>
		Accelero_Data.accumulator += Accelero_Data.Accelerorate;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <Accelero_Accumulate_X+0x3c>)
 8000ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <Accelero_Accumulate_X+0x3c>)
 8000ffe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001002:	f7ff f943 	bl	800028c <__adddf3>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4905      	ldr	r1, [pc, #20]	; (8001020 <Accelero_Accumulate_X+0x3c>)
 800100c:	e9c1 2300 	strd	r2, r3, [r1]
		Accelero_Data.counter++;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <Accelero_Accumulate_X+0x3c>)
 8001012:	891b      	ldrh	r3, [r3, #8]
 8001014:	3301      	adds	r3, #1
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b01      	ldr	r3, [pc, #4]	; (8001020 <Accelero_Accumulate_X+0x3c>)
 800101a:	811a      	strh	r2, [r3, #8]
	}
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000238 	.word	0x20000238

08001024 <Accelero_Accumulate_Y>:

void Accelero_Accumulate_Y(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	if(Accelero_NewData()==ACCEL_DATA_AVAILABLE)
 8001028:	f7ff ffc0 	bl	8000fac <Accelero_NewData>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d114      	bne.n	800105c <Accelero_Accumulate_Y+0x38>
	{
		Accelero_GetData_Y();
 8001032:	f7ff ffa3 	bl	8000f7c <Accelero_GetData_Y>
		Accelero_Data.accumulator += Accelero_Data.Accelerorate;
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <Accelero_Accumulate_Y+0x3c>)
 8001038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <Accelero_Accumulate_Y+0x3c>)
 800103e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001042:	f7ff f923 	bl	800028c <__adddf3>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4905      	ldr	r1, [pc, #20]	; (8001060 <Accelero_Accumulate_Y+0x3c>)
 800104c:	e9c1 2300 	strd	r2, r3, [r1]
		Accelero_Data.counter++;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <Accelero_Accumulate_Y+0x3c>)
 8001052:	891b      	ldrh	r3, [r3, #8]
 8001054:	3301      	adds	r3, #1
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b01      	ldr	r3, [pc, #4]	; (8001060 <Accelero_Accumulate_Y+0x3c>)
 800105a:	811a      	strh	r2, [r3, #8]
	}
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000238 	.word	0x20000238

08001064 <Accelero_SetOffset_X>:

void Accelero_SetOffset_X(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	af00      	add	r7, sp, #0
	Accelero_Data.offset_x = Accelero_Data.accumulator / Accelero_Data.counter;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <Accelero_SetOffset_X+0x30>)
 800106a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <Accelero_SetOffset_X+0x30>)
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa56 	bl	8000524 <__aeabi_i2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4620      	mov	r0, r4
 800107e:	4629      	mov	r1, r5
 8001080:	f7ff fbe4 	bl	800084c <__aeabi_ddiv>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4902      	ldr	r1, [pc, #8]	; (8001094 <Accelero_SetOffset_X+0x30>)
 800108a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800108e:	bf00      	nop
 8001090:	bdb0      	pop	{r4, r5, r7, pc}
 8001092:	bf00      	nop
 8001094:	20000238 	.word	0x20000238

08001098 <Accelero_SetOffset_Y>:

void Accelero_SetOffset_Y(void)
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	af00      	add	r7, sp, #0
	Accelero_Data.offset_y = Accelero_Data.accumulator / Accelero_Data.counter;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <Accelero_SetOffset_Y+0x30>)
 800109e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <Accelero_SetOffset_Y+0x30>)
 80010a4:	891b      	ldrh	r3, [r3, #8]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa3c 	bl	8000524 <__aeabi_i2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff fbca 	bl	800084c <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4902      	ldr	r1, [pc, #8]	; (80010c8 <Accelero_SetOffset_Y+0x30>)
 80010be:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80010c2:	bf00      	nop
 80010c4:	bdb0      	pop	{r4, r5, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000238 	.word	0x20000238

080010cc <Accelero_Estimate_X>:

void Accelero_Estimate_X(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	if(Accelero_NewData()==ACCEL_DATA_AVAILABLE)
 80010d0:	f7ff ff6c 	bl	8000fac <Accelero_NewData>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <Accelero_Estimate_X+0x12>
	{
		Accelero_GetData_X();
 80010da:	f7ff ff37 	bl	8000f4c <Accelero_GetData_X>
	}
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <Accelero_Estimate_Y>:

void Accelero_Estimate_Y(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
	if(Accelero_NewData()==ACCEL_DATA_AVAILABLE)
 80010e6:	f7ff ff61 	bl	8000fac <Accelero_NewData>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <Accelero_Estimate_Y+0x12>
	{
		Accelero_GetData_Y();
 80010f0:	f7ff ff44 	bl	8000f7c <Accelero_GetData_Y>
	}
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <Accelero_FSM>:

void Accelero_FSM(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	// actions
	switch(State_Acc)
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <Accelero_FSM+0xbc>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b04      	cmp	r3, #4
 8001102:	d81f      	bhi.n	8001144 <Accelero_FSM+0x4c>
 8001104:	a201      	add	r2, pc, #4	; (adr r2, 800110c <Accelero_FSM+0x14>)
 8001106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110a:	bf00      	nop
 800110c:	08001145 	.word	0x08001145
 8001110:	08001121 	.word	0x08001121
 8001114:	08001127 	.word	0x08001127
 8001118:	08001131 	.word	0x08001131
 800111c:	0800113b 	.word	0x0800113b
	case ACCEL_STATE_NOT_INIT :
		// NOP
		break;

	case ACCEL_STATE_INIT :
		Accelero_ResetAccumulator();
 8001120:	f7ff ff4c 	bl	8000fbc <Accelero_ResetAccumulator>
		break;
 8001124:	e00f      	b.n	8001146 <Accelero_FSM+0x4e>

	case ACCEL_STATE_CALIBRATION :
		Accelero_Accumulate_X();
 8001126:	f7ff ff5d 	bl	8000fe4 <Accelero_Accumulate_X>
		Accelero_Accumulate_Y();
 800112a:	f7ff ff7b 	bl	8001024 <Accelero_Accumulate_Y>
		break;
 800112e:	e00a      	b.n	8001146 <Accelero_FSM+0x4e>

	case ACCEL_STATE_APPLY_CALIBRATION :
		Accelero_SetOffset_X();
 8001130:	f7ff ff98 	bl	8001064 <Accelero_SetOffset_X>
		Accelero_SetOffset_Y();
 8001134:	f7ff ffb0 	bl	8001098 <Accelero_SetOffset_Y>
		break;
 8001138:	e005      	b.n	8001146 <Accelero_FSM+0x4e>

	case ACCEL_STATE_READY:
		Accelero_Estimate_X();
 800113a:	f7ff ffc7 	bl	80010cc <Accelero_Estimate_X>
		Accelero_Estimate_Y();
 800113e:	f7ff ffd0 	bl	80010e2 <Accelero_Estimate_Y>
		break;
 8001142:	e000      	b.n	8001146 <Accelero_FSM+0x4e>

	default :
		break;
 8001144:	bf00      	nop
	}

	// transitions
	switch(State_Acc)
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <Accelero_FSM+0xbc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d82c      	bhi.n	80011a8 <Accelero_FSM+0xb0>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <Accelero_FSM+0x5c>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	080011a9 	.word	0x080011a9
 8001158:	08001169 	.word	0x08001169
 800115c:	08001185 	.word	0x08001185
 8001160:	080011a1 	.word	0x080011a1
 8001164:	080011a9 	.word	0x080011a9
	case ACCEL_STATE_NOT_INIT :
		// NOP
		break;

	case ACCEL_STATE_INIT :
		if( Descriptor_Acc->Config->skip_calibration )
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <Accelero_FSM+0xc0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	789b      	ldrb	r3, [r3, #2]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <Accelero_FSM+0x84>
			State_Acc = ACCEL_STATE_READY;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <Accelero_FSM+0xbc>)
 8001176:	2204      	movs	r2, #4
 8001178:	701a      	strb	r2, [r3, #0]
		else
			State_Acc = ACCEL_STATE_CALIBRATION;
		break;
 800117a:	e018      	b.n	80011ae <Accelero_FSM+0xb6>
			State_Acc = ACCEL_STATE_CALIBRATION;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <Accelero_FSM+0xbc>)
 800117e:	2202      	movs	r2, #2
 8001180:	701a      	strb	r2, [r3, #0]
		break;
 8001182:	e014      	b.n	80011ae <Accelero_FSM+0xb6>

	case ACCEL_STATE_CALIBRATION :
		if( Accelero_Data.counter >= Descriptor_Acc->Config->mean_etimation_samples_number - 1 )
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <Accelero_FSM+0xc4>)
 8001186:	891b      	ldrh	r3, [r3, #8]
 8001188:	461a      	mov	r2, r3
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <Accelero_FSM+0xc0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	429a      	cmp	r2, r3
 8001196:	db09      	blt.n	80011ac <Accelero_FSM+0xb4>
			State_Acc = ACCEL_STATE_APPLY_CALIBRATION;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <Accelero_FSM+0xbc>)
 800119a:	2203      	movs	r2, #3
 800119c:	701a      	strb	r2, [r3, #0]
		break;
 800119e:	e005      	b.n	80011ac <Accelero_FSM+0xb4>

	case ACCEL_STATE_APPLY_CALIBRATION :
		State_Acc = ACCEL_STATE_READY;
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <Accelero_FSM+0xbc>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	701a      	strb	r2, [r3, #0]
		break;
 80011a6:	e002      	b.n	80011ae <Accelero_FSM+0xb6>
	case ACCEL_STATE_READY:
		// NOP
		break;

	default :
		break;
 80011a8:	bf00      	nop
 80011aa:	e000      	b.n	80011ae <Accelero_FSM+0xb6>
		break;
 80011ac:	bf00      	nop
	}
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000268 	.word	0x20000268
 80011b8:	20000234 	.word	0x20000234
 80011bc:	20000238 	.word	0x20000238

080011c0 <Accelero_Init>:

// public functions implementations

void Accelero_Init(Accelero_Desciptor_t * _Descriptor)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	Descriptor_Acc = _Descriptor;
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <Accelero_Init+0x48>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
	Accelero_Data.datarate = MPU6050_GetSampleRate();
 80011ce:	f000 fd7d 	bl	8001ccc <MPU6050_GetSampleRate>
 80011d2:	ee10 3a10 	vmov	r3, s0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9b6 	bl	8000548 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	490a      	ldr	r1, [pc, #40]	; (800120c <Accelero_Init+0x4c>)
 80011e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Accelero_ResetAccumulator();
 80011e6:	f7ff fee9 	bl	8000fbc <Accelero_ResetAccumulator>
	Accelero_SetAccX(0);
 80011ea:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001210 <Accelero_Init+0x50>
 80011ee:	f000 f847 	bl	8001280 <Accelero_SetAccX>
	Accelero_SetAccX(0);
 80011f2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001210 <Accelero_Init+0x50>
 80011f6:	f000 f843 	bl	8001280 <Accelero_SetAccX>
	State_Acc = ACCEL_STATE_INIT;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <Accelero_Init+0x54>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000234 	.word	0x20000234
 800120c:	20000238 	.word	0x20000238
 8001210:	00000000 	.word	0x00000000
 8001214:	20000268 	.word	0x20000268

08001218 <Accelero_Process>:

void Accelero_Process(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	Accelero_FSM();
 800121c:	f7ff ff6c 	bl	80010f8 <Accelero_FSM>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <Accelero_isReady>:
	Accelero_ResetAccumulator();
	State_Acc = ACCEL_STATE_CALIBRATION;
}

bool Accelero_isReady(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	return State_Acc == ACCEL_STATE_READY;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <Accelero_isReady+0x1c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b04      	cmp	r3, #4
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	20000268 	.word	0x20000268

08001244 <Accelero_GetAccX>:

float Accelero_GetAccX(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	return MPU6050_GetData_CF_Accelero(0)- Accelero_Data.offset_x;
 8001248:	2000      	movs	r0, #0
 800124a:	f000 fd29 	bl	8001ca0 <MPU6050_GetData_CF_Accelero>
 800124e:	ee10 3a10 	vmov	r3, s0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f978 	bl	8000548 <__aeabi_f2d>
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <Accelero_GetAccX+0x38>)
 800125a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800125e:	f7ff f813 	bl	8000288 <__aeabi_dsub>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fc9d 	bl	8000ba8 <__aeabi_d2f>
 800126e:	4603      	mov	r3, r0
 8001270:	ee07 3a90 	vmov	s15, r3
}
 8001274:	eeb0 0a67 	vmov.f32	s0, s15
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000238 	.word	0x20000238

08001280 <Accelero_SetAccX>:

void Accelero_SetAccX(float newValue)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a01 	vstr	s0, [r7, #4]
	Accelero_Data.Accelerorate = newValue;
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff f95c 	bl	8000548 <__aeabi_f2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4903      	ldr	r1, [pc, #12]	; (80012a4 <Accelero_SetAccX+0x24>)
 8001296:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000238 	.word	0x20000238

080012a8 <Accelero_GetAccY>:

float Accelero_GetAccY(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	return MPU6050_GetData_CF_Accelero(1)- Accelero_Data.offset_y;
 80012ac:	2001      	movs	r0, #1
 80012ae:	f000 fcf7 	bl	8001ca0 <MPU6050_GetData_CF_Accelero>
 80012b2:	ee10 3a10 	vmov	r3, s0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f946 	bl	8000548 <__aeabi_f2d>
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <Accelero_GetAccY+0x38>)
 80012be:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012c2:	f7fe ffe1 	bl	8000288 <__aeabi_dsub>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc6b 	bl	8000ba8 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	ee07 3a90 	vmov	s15, r3
}
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000238 	.word	0x20000238

080012e4 <Accelero_GetCalibrationAdvancement>:
//{
//	Accelero_Data = newValue;
//}

float Accelero_GetCalibrationAdvancement(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	return (float)(Accelero_Data.counter) * 100 / (float)(Descriptor_Acc->Config->mean_etimation_samples_number);
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <Accelero_GetCalibrationAdvancement+0x3c>)
 80012ea:	891b      	ldrh	r3, [r3, #8]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001324 <Accelero_GetCalibrationAdvancement+0x40>
 80012f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <Accelero_GetCalibrationAdvancement+0x44>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800130c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001310:	eef0 7a66 	vmov.f32	s15, s13
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20000238 	.word	0x20000238
 8001324:	42c80000 	.word	0x42c80000
 8001328:	20000234 	.word	0x20000234

0800132c <Gyro_Modulo>:
Gyro_State_t State = GYRO_STATE_NOT_INIT;

// private functions

void Gyro_Modulo(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	 while ( Gyro_Data.integral < 0.0f || Gyro_Data.integral > 180.0f ){
 8001330:	e032      	b.n	8001398 <Gyro_Modulo+0x6c>
		 if(Gyro_Data.integral > 180.0f)
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <Gyro_Modulo+0xa0>)
 8001334:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <Gyro_Modulo+0xa4>)
 800133e:	f7ff fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00d      	beq.n	8001364 <Gyro_Modulo+0x38>
			 Gyro_Data.integral -= 180.0f;
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <Gyro_Modulo+0xa0>)
 800134a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Gyro_Modulo+0xa4>)
 8001354:	f7fe ff98 	bl	8000288 <__aeabi_dsub>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	491b      	ldr	r1, [pc, #108]	; (80013cc <Gyro_Modulo+0xa0>)
 800135e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001362:	e019      	b.n	8001398 <Gyro_Modulo+0x6c>
		 else if (Gyro_Data.integral < 0.0f)
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <Gyro_Modulo+0xa0>)
 8001366:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	f7ff fbb3 	bl	8000adc <__aeabi_dcmplt>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d100      	bne.n	800137e <Gyro_Modulo+0x52>
 800137c:	e00c      	b.n	8001398 <Gyro_Modulo+0x6c>
			 Gyro_Data.integral += 180.0f;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <Gyro_Modulo+0xa0>)
 8001380:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Gyro_Modulo+0xa4>)
 800138a:	f7fe ff7f 	bl	800028c <__adddf3>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	490e      	ldr	r1, [pc, #56]	; (80013cc <Gyro_Modulo+0xa0>)
 8001394:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 while ( Gyro_Data.integral < 0.0f || Gyro_Data.integral > 180.0f ){
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <Gyro_Modulo+0xa0>)
 800139a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f7ff fb99 	bl	8000adc <__aeabi_dcmplt>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1c0      	bne.n	8001332 <Gyro_Modulo+0x6>
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <Gyro_Modulo+0xa0>)
 80013b2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <Gyro_Modulo+0xa4>)
 80013bc:	f7ff fbac 	bl	8000b18 <__aeabi_dcmpgt>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1b5      	bne.n	8001332 <Gyro_Modulo+0x6>
	 }
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000270 	.word	0x20000270
 80013d0:	40668000 	.word	0x40668000

080013d4 <Gyro_GetData>:

void Gyro_GetData(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	 Gyro_Data.gyrorate = MPU6050_GetData_CF() - Gyro_Data.offset;
 80013d8:	f000 fbe4 	bl	8001ba4 <MPU6050_GetData_CF>
 80013dc:	ee10 3a10 	vmov	r3, s0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8b1 	bl	8000548 <__aeabi_f2d>
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <Gyro_GetData+0x2c>)
 80013e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013ec:	f7fe ff4c 	bl	8000288 <__aeabi_dsub>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4902      	ldr	r1, [pc, #8]	; (8001400 <Gyro_GetData+0x2c>)
 80013f6:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000270 	.word	0x20000270

08001404 <Gyro_NewData>:

Gyro_NewData_t Gyro_NewData(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	return (Gyro_NewData_t)MPU6050_NewData();
 8001408:	f000 fb6c 	bl	8001ae4 <MPU6050_NewData>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <Gyro_ResetAccumulator>:

void Gyro_ResetAccumulator(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	 Gyro_Data.accumulator = 0.0;
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <Gyro_ResetAccumulator+0x24>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
	 Gyro_Data.counter = 0;
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <Gyro_ResetAccumulator+0x24>)
 8001428:	2200      	movs	r2, #0
 800142a:	811a      	strh	r2, [r3, #8]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000270 	.word	0x20000270

0800143c <Gyro_Accumulate>:

void Gyro_Accumulate(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	if(Gyro_NewData()==GYRO_DATA_AVAILABLE)
 8001440:	f7ff ffe0 	bl	8001404 <Gyro_NewData>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d114      	bne.n	8001474 <Gyro_Accumulate+0x38>
	{
		Gyro_GetData();
 800144a:	f7ff ffc3 	bl	80013d4 <Gyro_GetData>
		Gyro_Data.accumulator += Gyro_Data.gyrorate;
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <Gyro_Accumulate+0x3c>)
 8001450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <Gyro_Accumulate+0x3c>)
 8001456:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800145a:	f7fe ff17 	bl	800028c <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4905      	ldr	r1, [pc, #20]	; (8001478 <Gyro_Accumulate+0x3c>)
 8001464:	e9c1 2300 	strd	r2, r3, [r1]
		Gyro_Data.counter++;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <Gyro_Accumulate+0x3c>)
 800146a:	891b      	ldrh	r3, [r3, #8]
 800146c:	3301      	adds	r3, #1
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b01      	ldr	r3, [pc, #4]	; (8001478 <Gyro_Accumulate+0x3c>)
 8001472:	811a      	strh	r2, [r3, #8]
	}
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000270 	.word	0x20000270

0800147c <Gyro_SetOffset>:

void Gyro_SetOffset(void)
{
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	af00      	add	r7, sp, #0
	Gyro_Data.offset = Gyro_Data.accumulator / Gyro_Data.counter;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <Gyro_SetOffset+0x30>)
 8001482:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <Gyro_SetOffset+0x30>)
 8001488:	891b      	ldrh	r3, [r3, #8]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f84a 	bl	8000524 <__aeabi_i2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4620      	mov	r0, r4
 8001496:	4629      	mov	r1, r5
 8001498:	f7ff f9d8 	bl	800084c <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4902      	ldr	r1, [pc, #8]	; (80014ac <Gyro_SetOffset+0x30>)
 80014a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80014a6:	bf00      	nop
 80014a8:	bdb0      	pop	{r4, r5, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000270 	.word	0x20000270

080014b0 <Gyro_Estimate>:

void Gyro_Estimate(void)
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	if(Gyro_NewData()==GYRO_DATA_AVAILABLE)
 80014b4:	f7ff ffa6 	bl	8001404 <Gyro_NewData>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d117      	bne.n	80014ee <Gyro_Estimate+0x3e>
	{
		 Gyro_GetData();
 80014be:	f7ff ff89 	bl	80013d4 <Gyro_GetData>
		 Gyro_Data.integral += Gyro_Data.gyrorate / Gyro_Data.datarate;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <Gyro_Estimate+0x44>)
 80014c4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <Gyro_Estimate+0x44>)
 80014ca:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <Gyro_Estimate+0x44>)
 80014d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014d4:	f7ff f9ba 	bl	800084c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7fe fed4 	bl	800028c <__adddf3>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4902      	ldr	r1, [pc, #8]	; (80014f4 <Gyro_Estimate+0x44>)
 80014ea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	}
}
 80014ee:	bf00      	nop
 80014f0:	bdb0      	pop	{r4, r5, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000270 	.word	0x20000270

080014f8 <Gyro_FSM>:

void Gyro_FSM(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	// actions
	switch(State)
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <Gyro_FSM+0xc4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d821      	bhi.n	8001548 <Gyro_FSM+0x50>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <Gyro_FSM+0x14>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	08001549 	.word	0x08001549
 8001510:	08001521 	.word	0x08001521
 8001514:	08001527 	.word	0x08001527
 8001518:	0800152d 	.word	0x0800152d
 800151c:	08001533 	.word	0x08001533
	case GYRO_STATE_NOT_INIT :
		// NOP
		break;

	case GYRO_STATE_INIT :
		Gyro_ResetAccumulator();
 8001520:	f7ff ff78 	bl	8001414 <Gyro_ResetAccumulator>
		break;
 8001524:	e013      	b.n	800154e <Gyro_FSM+0x56>

	case GYRO_STATE_CALIBRATION :
		Gyro_Accumulate();
 8001526:	f7ff ff89 	bl	800143c <Gyro_Accumulate>
		break;
 800152a:	e010      	b.n	800154e <Gyro_FSM+0x56>

	case GYRO_STATE_APPLY_CALIBRATION :
		Gyro_SetOffset();
 800152c:	f7ff ffa6 	bl	800147c <Gyro_SetOffset>
		break;
 8001530:	e00d      	b.n	800154e <Gyro_FSM+0x56>

	case GYRO_STATE_READY:
		Gyro_Estimate();
 8001532:	f7ff ffbd 	bl	80014b0 <Gyro_Estimate>
		if( Descriptor->Config->use_modulo )
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <Gyro_FSM+0xc8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <Gyro_FSM+0x54>
			Gyro_Modulo();
 8001542:	f7ff fef3 	bl	800132c <Gyro_Modulo>
		break;
 8001546:	e001      	b.n	800154c <Gyro_FSM+0x54>

	default :
		break;
 8001548:	bf00      	nop
 800154a:	e000      	b.n	800154e <Gyro_FSM+0x56>
		break;
 800154c:	bf00      	nop
	}

	// transitions
	switch(State)
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <Gyro_FSM+0xc4>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d82c      	bhi.n	80015b0 <Gyro_FSM+0xb8>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <Gyro_FSM+0x64>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	080015b1 	.word	0x080015b1
 8001560:	08001571 	.word	0x08001571
 8001564:	0800158d 	.word	0x0800158d
 8001568:	080015a9 	.word	0x080015a9
 800156c:	080015b1 	.word	0x080015b1
	case GYRO_STATE_NOT_INIT :
		// NOP
		break;

	case GYRO_STATE_INIT :
		if( Descriptor->Config->skip_calibration )
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <Gyro_FSM+0xc8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	791b      	ldrb	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <Gyro_FSM+0x8c>
			State = GYRO_STATE_READY;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <Gyro_FSM+0xc4>)
 800157e:	2204      	movs	r2, #4
 8001580:	701a      	strb	r2, [r3, #0]
		else
			State = GYRO_STATE_CALIBRATION;
		break;
 8001582:	e018      	b.n	80015b6 <Gyro_FSM+0xbe>
			State = GYRO_STATE_CALIBRATION;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <Gyro_FSM+0xc4>)
 8001586:	2202      	movs	r2, #2
 8001588:	701a      	strb	r2, [r3, #0]
		break;
 800158a:	e014      	b.n	80015b6 <Gyro_FSM+0xbe>

	case GYRO_STATE_CALIBRATION :
		if( Gyro_Data.counter >= Descriptor->Config->mean_etimation_samples_number - 1 )
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <Gyro_FSM+0xcc>)
 800158e:	891b      	ldrh	r3, [r3, #8]
 8001590:	461a      	mov	r2, r3
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <Gyro_FSM+0xc8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	885b      	ldrh	r3, [r3, #2]
 800159a:	3b01      	subs	r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	db09      	blt.n	80015b4 <Gyro_FSM+0xbc>
			State = GYRO_STATE_APPLY_CALIBRATION;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <Gyro_FSM+0xc4>)
 80015a2:	2203      	movs	r2, #3
 80015a4:	701a      	strb	r2, [r3, #0]
		break;
 80015a6:	e005      	b.n	80015b4 <Gyro_FSM+0xbc>

	case GYRO_STATE_APPLY_CALIBRATION :
		State = GYRO_STATE_READY;
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <Gyro_FSM+0xc4>)
 80015aa:	2204      	movs	r2, #4
 80015ac:	701a      	strb	r2, [r3, #0]
		break;
 80015ae:	e002      	b.n	80015b6 <Gyro_FSM+0xbe>
	case GYRO_STATE_READY:
		// NOP
		break;

	default :
		break;
 80015b0:	bf00      	nop
 80015b2:	e000      	b.n	80015b6 <Gyro_FSM+0xbe>
		break;
 80015b4:	bf00      	nop
	}
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200002a0 	.word	0x200002a0
 80015c0:	2000026c 	.word	0x2000026c
 80015c4:	20000270 	.word	0x20000270

080015c8 <Gyro_Init>:

// public functions implementations

void Gyro_Init(Gyro_Desciptor_t * _Descriptor)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	Descriptor = _Descriptor;
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <Gyro_Init+0x40>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
	Gyro_Data.datarate = MPU6050_GetSampleRate();
 80015d6:	f000 fb79 	bl	8001ccc <MPU6050_GetSampleRate>
 80015da:	ee10 3a10 	vmov	r3, s0
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffb2 	bl	8000548 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4908      	ldr	r1, [pc, #32]	; (800160c <Gyro_Init+0x44>)
 80015ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Gyro_ResetAccumulator();
 80015ee:	f7ff ff11 	bl	8001414 <Gyro_ResetAccumulator>
	Gyro_SetRot(0);
 80015f2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001610 <Gyro_Init+0x48>
 80015f6:	f000 f837 	bl	8001668 <Gyro_SetRot>
	State = GYRO_STATE_INIT;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <Gyro_Init+0x4c>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000026c 	.word	0x2000026c
 800160c:	20000270 	.word	0x20000270
 8001610:	00000000 	.word	0x00000000
 8001614:	200002a0 	.word	0x200002a0

08001618 <Gyro_Process>:

void Gyro_Process(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	Gyro_FSM();
 800161c:	f7ff ff6c 	bl	80014f8 <Gyro_FSM>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <Gyro_isReady>:
	Gyro_ResetAccumulator();
	State = GYRO_STATE_CALIBRATION;
}

bool Gyro_isReady(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	return State == GYRO_STATE_READY;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <Gyro_isReady+0x1c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b04      	cmp	r3, #4
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	200002a0 	.word	0x200002a0

08001644 <Gyro_GetRot>:

float Gyro_GetRot(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	return Gyro_Data.integral;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <Gyro_GetRot+0x20>)
 800164a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff faa9 	bl	8000ba8 <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	ee07 3a90 	vmov	s15, r3
}
 800165c:	eeb0 0a67 	vmov.f32	s0, s15
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000270 	.word	0x20000270

08001668 <Gyro_SetRot>:

void Gyro_SetRot(float newValue)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0a01 	vstr	s0, [r7, #4]
	 Gyro_Data.integral = newValue;
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7fe ff68 	bl	8000548 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4903      	ldr	r1, [pc, #12]	; (800168c <Gyro_SetRot+0x24>)
 800167e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000270 	.word	0x20000270

08001690 <Gyro_GetCalibrationAdvancement>:

float Gyro_GetCalibrationAdvancement(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
	return (float)(Gyro_Data.counter) * 100 / (float)(Descriptor->Config->mean_etimation_samples_number);
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <Gyro_GetCalibrationAdvancement+0x3c>)
 8001696:	891b      	ldrh	r3, [r3, #8]
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016d0 <Gyro_GetCalibrationAdvancement+0x40>
 80016a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <Gyro_GetCalibrationAdvancement+0x44>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	885b      	ldrh	r3, [r3, #2]
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016bc:	eef0 7a66 	vmov.f32	s15, s13
}
 80016c0:	eeb0 0a67 	vmov.f32	s0, s15
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	20000270 	.word	0x20000270
 80016d0:	42c80000 	.word	0x42c80000
 80016d4:	2000026c 	.word	0x2000026c

080016d8 <MPU6050_Write_Reg>:
{
	return HAL_I2C_Mem_Read(__Descriptor->hi2c, (__Descriptor->I2C_Addr)<<1|0x01, addr, 1, dest, 1, MPU6050_TIMEOUT);
}

HAL_StatusTypeDef MPU6050_Write_Reg(MPU6050_REG_ADDR_t addr, uint8_t value)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af04      	add	r7, sp, #16
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Write(__Descriptor->hi2c, __Descriptor->I2C_Addr<<1, addr, 1, &value, 1, MPU6050_TIMEOUT);
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MPU6050_Write_Reg+0x44>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MPU6050_Write_Reg+0x44>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	791b      	ldrb	r3, [r3, #4]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	b299      	uxth	r1, r3
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	2301      	movs	r3, #1
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	1dbb      	adds	r3, r7, #6
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2301      	movs	r3, #1
 800170e:	f001 fb6f 	bl	8002df0 <HAL_I2C_Mem_Write>
 8001712:	4603      	mov	r3, r0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002a4 	.word	0x200002a4

08001720 <MPU6050_Read_Gyro>:

HAL_StatusTypeDef MPU6050_Read_Gyro(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af04      	add	r7, sp, #16
	return HAL_I2C_Mem_Read(__Descriptor->hi2c, (__Descriptor->I2C_Addr)<<1|0x01, MPU6050_REG_G_Z_H, 1, MPU6050_Data.raw, 2, MPU6050_TIMEOUT);
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <MPU6050_Read_Gyro+0x3c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MPU6050_Read_Gyro+0x3c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	791b      	ldrb	r3, [r3, #4]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	b21b      	sxth	r3, r3
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	b21b      	sxth	r3, r3
 800173c:	b299      	uxth	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2302      	movs	r3, #2
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <MPU6050_Read_Gyro+0x40>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	2247      	movs	r2, #71	; 0x47
 8001750:	f001 fc62 	bl	8003018 <HAL_I2C_Mem_Read>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200002a4 	.word	0x200002a4
 8001760:	200002a8 	.word	0x200002a8

08001764 <MPU6050_Read_Accelero_X>:

HAL_StatusTypeDef MPU6050_Read_Accelero_X(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af04      	add	r7, sp, #16
	return HAL_I2C_Mem_Read(__Descriptor->hi2c, (__Descriptor->I2C_Addr)<<1|0x01, MPU6050_REG_A_X_H, 1, MPU6050_Data.raw_acc, 4, MPU6050_TIMEOUT);
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <MPU6050_Read_Accelero_X+0x3c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <MPU6050_Read_Accelero_X+0x3c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	b21b      	sxth	r3, r3
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	b21b      	sxth	r3, r3
 8001780:	b299      	uxth	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	2304      	movs	r3, #4
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <MPU6050_Read_Accelero_X+0x40>)
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2301      	movs	r3, #1
 8001792:	223b      	movs	r2, #59	; 0x3b
 8001794:	f001 fc40 	bl	8003018 <HAL_I2C_Mem_Read>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200002a4 	.word	0x200002a4
 80017a4:	200002b0 	.word	0x200002b0

080017a8 <MPU6050_Configure>:

HAL_StatusTypeDef MPU6050_Configure(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef error;
	uint8_t dtw;

	// clock configuration
	dtw = __Descriptor->Config->Clock_Config & 0x07;
 80017ae:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <MPU6050_Configure+0x20c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	799b      	ldrb	r3, [r3, #6]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_PWR_MGMT_1, dtw))
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4619      	mov	r1, r3
 80017c0:	206b      	movs	r0, #107	; 0x6b
 80017c2:	f7ff ff89 	bl	80016d8 <MPU6050_Write_Reg>
 80017c6:	4603      	mov	r3, r0
 80017c8:	71bb      	strb	r3, [r7, #6]
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MPU6050_Configure+0x2c>
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	e0ea      	b.n	80019aa <MPU6050_Configure+0x202>

	// sample rate divider
	dtw = __Descriptor->Config->SampleRateDivider;
 80017d4:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <MPU6050_Configure+0x20c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_SMPLRT_DIV, dtw))
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	4619      	mov	r1, r3
 80017e2:	2019      	movs	r0, #25
 80017e4:	f7ff ff78 	bl	80016d8 <MPU6050_Write_Reg>
 80017e8:	4603      	mov	r3, r0
 80017ea:	71bb      	strb	r3, [r7, #6]
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MPU6050_Configure+0x4e>
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	e0d9      	b.n	80019aa <MPU6050_Configure+0x202>

	//general config
	dtw = __Descriptor->Config->DLPF_Frequency & 0x07;
 80017f6:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <MPU6050_Configure+0x20c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Ext_Sync_Set << 3 & 0x38;
 8001804:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <MPU6050_Configure+0x20c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	b25b      	sxtb	r3, r3
 8001810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001814:	b25a      	sxtb	r2, r3
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_CONFIG, dtw))
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4619      	mov	r1, r3
 8001824:	201a      	movs	r0, #26
 8001826:	f7ff ff57 	bl	80016d8 <MPU6050_Write_Reg>
 800182a:	4603      	mov	r3, r0
 800182c:	71bb      	strb	r3, [r7, #6]
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MPU6050_Configure+0x90>
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	e0b8      	b.n	80019aa <MPU6050_Configure+0x202>

	// gyro config
	dtw = __Descriptor->Config->Gyro_Sensitivity << 3 & 0x18;
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <MPU6050_Configure+0x20c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	78db      	ldrb	r3, [r3, #3]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f003 0318 	and.w	r3, r3, #24
 8001848:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_GYRO_CONFIG, dtw))
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	4619      	mov	r1, r3
 800184e:	201b      	movs	r0, #27
 8001850:	f7ff ff42 	bl	80016d8 <MPU6050_Write_Reg>
 8001854:	4603      	mov	r3, r0
 8001856:	71bb      	strb	r3, [r7, #6]
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MPU6050_Configure+0xba>
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	e0a3      	b.n	80019aa <MPU6050_Configure+0x202>

	// accelero config
	dtw = __Descriptor->Config->Accelero_Sensitivity << 3 & 0x18;
 8001862:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <MPU6050_Configure+0x20c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	791b      	ldrb	r3, [r3, #4]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f003 0318 	and.w	r3, r3, #24
 8001872:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_ACCEL_CONFIG, dtw))
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4619      	mov	r1, r3
 8001878:	201c      	movs	r0, #28
 800187a:	f7ff ff2d 	bl	80016d8 <MPU6050_Write_Reg>
 800187e:	4603      	mov	r3, r0
 8001880:	71bb      	strb	r3, [r7, #6]
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MPU6050_Configure+0xe4>
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	e08e      	b.n	80019aa <MPU6050_Configure+0x202>

	// FIFO enable
	dtw = __Descriptor->Config->Use_FIFO << 4 & 0x10;
 800188c:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <MPU6050_Configure+0x20c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	795b      	ldrb	r3, [r3, #5]
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_FIFO_EN, dtw))
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4619      	mov	r1, r3
 80018a2:	2023      	movs	r0, #35	; 0x23
 80018a4:	f7ff ff18 	bl	80016d8 <MPU6050_Write_Reg>
 80018a8:	4603      	mov	r3, r0
 80018aa:	71bb      	strb	r3, [r7, #6]
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MPU6050_Configure+0x10e>
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	e079      	b.n	80019aa <MPU6050_Configure+0x202>

	// INT Pin config
	dtw = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->FSYNC_en 		<< 2;
 80018ba:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <MPU6050_Configure+0x20c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	795b      	ldrb	r3, [r3, #5]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->FSYNC_level 	<< 3;
 80018d2:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <MPU6050_Configure+0x20c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	b25a      	sxtb	r2, r3
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->clear_type		<< 4;
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <MPU6050_Configure+0x20c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	78db      	ldrb	r3, [r3, #3]
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	b25a      	sxtb	r2, r3
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->latch_en 		<< 5;
 8001902:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <MPU6050_Configure+0x20c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	789b      	ldrb	r3, [r3, #2]
 800190c:	015b      	lsls	r3, r3, #5
 800190e:	b25a      	sxtb	r2, r3
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4313      	orrs	r3, r2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->output_type	<< 6;
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <MPU6050_Configure+0x20c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	785b      	ldrb	r3, [r3, #1]
 8001924:	019b      	lsls	r3, r3, #6
 8001926:	b25a      	sxtb	r2, r3
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4313      	orrs	r3, r2
 800192e:	b25b      	sxtb	r3, r3
 8001930:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->level	 		<< 7;
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <MPU6050_Configure+0x20c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	01db      	lsls	r3, r3, #7
 800193e:	b25a      	sxtb	r2, r3
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4313      	orrs	r3, r2
 8001946:	b25b      	sxtb	r3, r3
 8001948:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_INT_PIN_CFG, dtw))
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4619      	mov	r1, r3
 800194e:	2037      	movs	r0, #55	; 0x37
 8001950:	f7ff fec2 	bl	80016d8 <MPU6050_Write_Reg>
 8001954:	4603      	mov	r3, r0
 8001956:	71bb      	strb	r3, [r7, #6]
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MPU6050_Configure+0x1ba>
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	e023      	b.n	80019aa <MPU6050_Configure+0x202>

	// INT Enable
	dtw = __Descriptor->Config->Interrupt_Config->Mask_DRDY;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MPU6050_Configure+0x20c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	7a1b      	ldrb	r3, [r3, #8]
 800196c:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->Mask_MST_INT << 3;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MPU6050_Configure+0x20c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	79db      	ldrb	r3, [r3, #7]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	b25a      	sxtb	r2, r3
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4313      	orrs	r3, r2
 8001982:	b25b      	sxtb	r3, r3
 8001984:	71fb      	strb	r3, [r7, #7]
	dtw |= __Descriptor->Config->Interrupt_Config->Mask_FIFO << 4;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MPU6050_Configure+0x20c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	799b      	ldrb	r3, [r3, #6]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	b25a      	sxtb	r2, r3
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4313      	orrs	r3, r2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	71fb      	strb	r3, [r7, #7]
	return MPU6050_Write_Reg(MPU6050_REG_INT_ENABLE, dtw);
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	4619      	mov	r1, r3
 80019a2:	2038      	movs	r0, #56	; 0x38
 80019a4:	f7ff fe98 	bl	80016d8 <MPU6050_Write_Reg>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200002a4 	.word	0x200002a4

080019b8 <MPU6050_FSM>:

void MPU6050_FSM(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef error;

	switch(state)
 80019be:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <MPU6050_FSM+0xc4>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d82b      	bhi.n	8001a1e <MPU6050_FSM+0x66>
 80019c6:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <MPU6050_FSM+0x14>)
 80019c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019cc:	08001a1f 	.word	0x08001a1f
 80019d0:	080019dd 	.word	0x080019dd
 80019d4:	080019ed 	.word	0x080019ed
 80019d8:	08001a1f 	.word	0x08001a1f
	{
	case MPU6050_STATE_NOT_INIT :
		//NOP
		break;
	case MPU6050_STATE_INIT :
		error = MPU6050_Configure();
 80019dc:	f7ff fee4 	bl	80017a8 <MPU6050_Configure>
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
		error_count = 0;
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <MPU6050_FSM+0xc8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
		break;
 80019ea:	e01b      	b.n	8001a24 <MPU6050_FSM+0x6c>
	case MPU6050_STATE_READY :
		if(Flags.int_triggered)
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <MPU6050_FSM+0xcc>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d016      	beq.n	8001a22 <MPU6050_FSM+0x6a>
		{
			// read accelero : no error handling
			// TODO : if needed, handle the error of accelero read
			MPU6050_Read_Accelero_X();
 80019f4:	f7ff feb6 	bl	8001764 <MPU6050_Read_Accelero_X>

			error = MPU6050_Read_Gyro();
 80019f8:	f7ff fe92 	bl	8001720 <MPU6050_Read_Gyro>
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]

			if(error!=HAL_OK) error_count++;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <MPU6050_FSM+0x58>
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <MPU6050_FSM+0xc8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <MPU6050_FSM+0xc8>)
 8001a0e:	6013      	str	r3, [r2, #0]

			Flags.new_data = TRUE;
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MPU6050_FSM+0xcc>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	705a      	strb	r2, [r3, #1]

			Flags.int_triggered = FALSE;
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MPU6050_FSM+0xcc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001a1c:	e001      	b.n	8001a22 <MPU6050_FSM+0x6a>
	case MPU6050_STATE_ERROR :
		//NOP
		break;
	default :
		//NOP
		break;
 8001a1e:	bf00      	nop
 8001a20:	e000      	b.n	8001a24 <MPU6050_FSM+0x6c>
		break;
 8001a22:	bf00      	nop
	}

	switch(state)
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MPU6050_FSM+0xc4>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d820      	bhi.n	8001a6e <MPU6050_FSM+0xb6>
 8001a2c:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <MPU6050_FSM+0x7c>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a6f 	.word	0x08001a6f
 8001a38:	08001a45 	.word	0x08001a45
 8001a3c:	08001a5b 	.word	0x08001a5b
 8001a40:	08001a6f 	.word	0x08001a6f
	{
	case MPU6050_STATE_NOT_INIT :
		//NOP
		break;
	case MPU6050_STATE_INIT :
		if(error==HAL_OK)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <MPU6050_FSM+0x9a>
			state = MPU6050_STATE_READY;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MPU6050_FSM+0xc4>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]
		else
			state = MPU6050_STATE_ERROR;
		break;
 8001a50:	e010      	b.n	8001a74 <MPU6050_FSM+0xbc>
			state = MPU6050_STATE_ERROR;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <MPU6050_FSM+0xc4>)
 8001a54:	2203      	movs	r2, #3
 8001a56:	701a      	strb	r2, [r3, #0]
		break;
 8001a58:	e00c      	b.n	8001a74 <MPU6050_FSM+0xbc>
	case MPU6050_STATE_READY :
		if(error_count>MPU6050_ERROR_LIMIT)
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MPU6050_FSM+0xc8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f647 7238 	movw	r2, #32568	; 0x7f38
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d905      	bls.n	8001a72 <MPU6050_FSM+0xba>
			state = MPU6050_STATE_ERROR;
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <MPU6050_FSM+0xc4>)
 8001a68:	2203      	movs	r2, #3
 8001a6a:	701a      	strb	r2, [r3, #0]
		break;
 8001a6c:	e001      	b.n	8001a72 <MPU6050_FSM+0xba>
	case MPU6050_STATE_ERROR :
		//NOP
		break;
	default :
		//NOP
		break;
 8001a6e:	bf00      	nop
 8001a70:	e000      	b.n	8001a74 <MPU6050_FSM+0xbc>
		break;
 8001a72:	bf00      	nop
	}
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200002c3 	.word	0x200002c3
 8001a80:	200002c4 	.word	0x200002c4
 8001a84:	200002c0 	.word	0x200002c0

08001a88 <MPU6050_Init>:


// public functions implementations

void MPU6050_Init(MPU6050_Descriptor_t * _Descriptor)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	Flags.int_triggered = 0;
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MPU6050_Init+0x2c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
	Flags.new_data = 0;
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MPU6050_Init+0x2c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	705a      	strb	r2, [r3, #1]

	__Descriptor = _Descriptor;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <MPU6050_Init+0x30>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]

	state = MPU6050_STATE_INIT;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MPU6050_Init+0x34>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	200002c0 	.word	0x200002c0
 8001ab8:	200002a4 	.word	0x200002a4
 8001abc:	200002c3 	.word	0x200002c3

08001ac0 <MPU6050_Process>:

void MPU6050_Process(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	MPU6050_FSM();
 8001ac4:	f7ff ff78 	bl	80019b8 <MPU6050_FSM>
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <MPU6050_Interrupt_Routine>:

void MPU6050_Interrupt_Routine(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	Flags.int_triggered = TRUE;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <MPU6050_Interrupt_Routine+0x14>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	200002c0 	.word	0x200002c0

08001ae4 <MPU6050_NewData>:

bool MPU6050_NewData(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
	return Flags.new_data;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <MPU6050_NewData+0x14>)
 8001aea:	785b      	ldrb	r3, [r3, #1]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200002c0 	.word	0x200002c0

08001afc <MPU6050_GetData>:

float MPU6050_GetData(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
	float LSB_Scale;
	MPU6050_Data.unified = (int16_t)( (MPU6050_Data.raw[0] << 8) | MPU6050_Data.raw[1]);
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <MPU6050_GetData+0x90>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <MPU6050_GetData+0x90>)
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MPU6050_GetData+0x90>)
 8001b16:	805a      	strh	r2, [r3, #2]
	switch(__Descriptor->Config->Gyro_Sensitivity)
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MPU6050_GetData+0x94>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	78db      	ldrb	r3, [r3, #3]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d817      	bhi.n	8001b54 <MPU6050_GetData+0x58>
 8001b24:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <MPU6050_GetData+0x30>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b3d 	.word	0x08001b3d
 8001b30:	08001b43 	.word	0x08001b43
 8001b34:	08001b49 	.word	0x08001b49
 8001b38:	08001b4f 	.word	0x08001b4f
	{
	case MPU6050_GYRO_SENSITIVITY_250:
		LSB_Scale = 131.0f;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MPU6050_GetData+0x98>)
 8001b3e:	607b      	str	r3, [r7, #4]
		break;
 8001b40:	e00b      	b.n	8001b5a <MPU6050_GetData+0x5e>
	case MPU6050_GYRO_SENSITIVITY_500:
		LSB_Scale = 65.5f;
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MPU6050_GetData+0x9c>)
 8001b44:	607b      	str	r3, [r7, #4]
		break;
 8001b46:	e008      	b.n	8001b5a <MPU6050_GetData+0x5e>
	case MPU6050_GYRO_SENSITIVITY_1000:
		LSB_Scale = 32.8f;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MPU6050_GetData+0xa0>)
 8001b4a:	607b      	str	r3, [r7, #4]
		break;
 8001b4c:	e005      	b.n	8001b5a <MPU6050_GetData+0x5e>
	case MPU6050_GYRO_SENSITIVITY_2000:
		LSB_Scale = 16.4f;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MPU6050_GetData+0xa4>)
 8001b50:	607b      	str	r3, [r7, #4]
		break;
 8001b52:	e002      	b.n	8001b5a <MPU6050_GetData+0x5e>
	default :
		LSB_Scale = 131.0f;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MPU6050_GetData+0x98>)
 8001b56:	607b      	str	r3, [r7, #4]
		break;
 8001b58:	bf00      	nop
	}
	MPU6050_Data.scaled = (float)(MPU6050_Data.unified) / LSB_Scale;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MPU6050_GetData+0x90>)
 8001b5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b68:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MPU6050_GetData+0x90>)
 8001b72:	edc3 7a01 	vstr	s15, [r3, #4]
	return MPU6050_Data.scaled;
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <MPU6050_GetData+0x90>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	ee07 3a90 	vmov	s15, r3
}
 8001b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	200002a8 	.word	0x200002a8
 8001b90:	200002a4 	.word	0x200002a4
 8001b94:	43030000 	.word	0x43030000
 8001b98:	42830000 	.word	0x42830000
 8001b9c:	42033333 	.word	0x42033333
 8001ba0:	41833333 	.word	0x41833333

08001ba4 <MPU6050_GetData_CF>:

float MPU6050_GetData_CF(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	Flags.new_data = FALSE;
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <MPU6050_GetData_CF+0x18>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	705a      	strb	r2, [r3, #1]
	return MPU6050_GetData();
 8001bae:	f7ff ffa5 	bl	8001afc <MPU6050_GetData>
 8001bb2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200002c0 	.word	0x200002c0

08001bc0 <MPU6050_GetData_Accelero>:

// TODO : replicate the get_data and get_data_cf functions for accelerometers
float MPU6050_GetData_Accelero(short idx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
	float AFS_Scale;
	MPU6050_Data.unified_acc[0] = (int16_t)((MPU6050_Data.raw_acc[0] << 8) | MPU6050_Data.raw_acc[1]);
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001bcc:	7a1b      	ldrb	r3, [r3, #8]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001bd4:	7a5b      	ldrb	r3, [r3, #9]
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001bde:	819a      	strh	r2, [r3, #12]
	MPU6050_Data.unified_acc[1] = (int16_t)((MPU6050_Data.raw_acc[2] << 8) | MPU6050_Data.raw_acc[3]);
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001be2:	7a9b      	ldrb	r3, [r3, #10]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001bea:	7adb      	ldrb	r3, [r3, #11]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001bf4:	81da      	strh	r2, [r3, #14]
	switch(__Descriptor->Config->Accelero_Sensitivity)
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <MPU6050_GetData_Accelero+0xdc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	791b      	ldrb	r3, [r3, #4]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d81a      	bhi.n	8001c38 <MPU6050_GetData_Accelero+0x78>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <MPU6050_GetData_Accelero+0x48>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c19 	.word	0x08001c19
 8001c0c:	08001c21 	.word	0x08001c21
 8001c10:	08001c29 	.word	0x08001c29
 8001c14:	08001c31 	.word	0x08001c31
	{
	case MPU6050_ACCELERO_SENSITIVITY_2:
		AFS_Scale = 16384.0f;
 8001c18:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001c1c:	60fb      	str	r3, [r7, #12]
		break;
 8001c1e:	e00f      	b.n	8001c40 <MPU6050_GetData_Accelero+0x80>
	case MPU6050_ACCELERO_SENSITIVITY_4:
		AFS_Scale = 8192.0f;
 8001c20:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001c24:	60fb      	str	r3, [r7, #12]
		break;
 8001c26:	e00b      	b.n	8001c40 <MPU6050_GetData_Accelero+0x80>
	case MPU6050_ACCELERO_SENSITIVITY_8:
		AFS_Scale = 4096.0f;
 8001c28:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001c2c:	60fb      	str	r3, [r7, #12]
		break;
 8001c2e:	e007      	b.n	8001c40 <MPU6050_GetData_Accelero+0x80>
	case MPU6050_ACCELERO_SENSITIVITY_16:
		AFS_Scale = 2048.0f;
 8001c30:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8001c34:	60fb      	str	r3, [r7, #12]
		break;
 8001c36:	e003      	b.n	8001c40 <MPU6050_GetData_Accelero+0x80>
	default :
		AFS_Scale = 16384.0f;
 8001c38:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001c3c:	60fb      	str	r3, [r7, #12]
		break;
 8001c3e:	bf00      	nop
	}
	MPU6050_Data.scaled_acc[0] = (float)(MPU6050_Data.unified_acc[0]) / AFS_Scale;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001c42:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001c58:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050_Data.scaled_acc[1] = (float)(MPU6050_Data.unified_acc[1]) / AFS_Scale;
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001c5e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001c74:	edc3 7a05 	vstr	s15, [r3, #20]
	return MPU6050_Data.scaled_acc[idx];
 8001c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <MPU6050_GetData_Accelero+0xd8>)
 8001c7e:	3304      	adds	r3, #4
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	ee07 3a90 	vmov	s15, r3
}
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	200002a8 	.word	0x200002a8
 8001c9c:	200002a4 	.word	0x200002a4

08001ca0 <MPU6050_GetData_CF_Accelero>:

float MPU6050_GetData_CF_Accelero(short idx)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
	Flags.new_data = FALSE;
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <MPU6050_GetData_CF_Accelero+0x28>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	705a      	strb	r2, [r3, #1]
	return MPU6050_GetData_Accelero(idx);
 8001cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff83 	bl	8001bc0 <MPU6050_GetData_Accelero>
 8001cba:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200002c0 	.word	0x200002c0

08001ccc <MPU6050_GetSampleRate>:
//	return MPU6050_GetData_Accelero_Z();
//}


float MPU6050_GetSampleRate(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
	float SRD = (float)(__Descriptor->Config->SampleRateDivider);
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MPU6050_GetSampleRate+0x58>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce2:	edc7 7a00 	vstr	s15, [r7]

	float GOR;

	if(__Descriptor->Config->DLPF_Frequency == MPU6050_DLPF_256Hz)
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MPU6050_GetSampleRate+0x58>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d102      	bne.n	8001cf8 <MPU6050_GetSampleRate+0x2c>
		GOR = MPU6050_BASE_SAMPLERATE_DLPF_OFF;
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <MPU6050_GetSampleRate+0x5c>)
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	e001      	b.n	8001cfc <MPU6050_GetSampleRate+0x30>
	else
		GOR = MPU6050_BASE_SAMPLERATE_DLPF_ON;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MPU6050_GetSampleRate+0x60>)
 8001cfa:	607b      	str	r3, [r7, #4]

	return GOR/(1+SRD);
 8001cfc:	edd7 7a00 	vldr	s15, [r7]
 8001d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d08:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d10:	eef0 7a66 	vmov.f32	s15, s13
}
 8001d14:	eeb0 0a67 	vmov.f32	s0, s15
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200002a4 	.word	0x200002a4
 8001d28:	45fa0000 	.word	0x45fa0000
 8001d2c:	447a0000 	.word	0x447a0000

08001d30 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d3c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d4c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001d50:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00b      	beq.n	8001d70 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d58:	e000      	b.n	8001d5c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d5a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f9      	beq.n	8001d5a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e009      	b.n	8001da8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	60ba      	str	r2, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ffc7 	bl	8001d30 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf1      	blt.n	8001d94 <_write+0x16>
	return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	0000      	movs	r0, r0
 8001dbc:	0000      	movs	r0, r0
	...

08001dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc8:	f000 fc57 	bl	800267a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dcc:	f000 f8ca 	bl	8001f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd0:	f000 f9d0 	bl	8002174 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dd4:	f000 f99e 	bl	8002114 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001dd8:	f000 f926 	bl	8002028 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001ddc:	f000 f964 	bl	80020a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim6, TIM_CHANNEL_1);

  MPU6050_Init(&MPU6050_Descriptor);
 8001de0:	4855      	ldr	r0, [pc, #340]	; (8001f38 <main+0x178>)
 8001de2:	f7ff fe51 	bl	8001a88 <MPU6050_Init>
  Gyro_Init(&Gyro_Descriptor);
 8001de6:	4855      	ldr	r0, [pc, #340]	; (8001f3c <main+0x17c>)
 8001de8:	f7ff fbee 	bl	80015c8 <Gyro_Init>
  Accelero_Init(&Accelero_Descriptor);
 8001dec:	4854      	ldr	r0, [pc, #336]	; (8001f40 <main+0x180>)
 8001dee:	f7ff f9e7 	bl	80011c0 <Accelero_Init>

  t=HAL_GetTick();
 8001df2:	f000 fcab 	bl	800274c <HAL_GetTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <main+0x184>)
 8001dfa:	6013      	str	r3, [r2, #0]

    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  MPU6050_Process();
 8001dfc:	f7ff fe60 	bl	8001ac0 <MPU6050_Process>
	  Gyro_Process();
 8001e00:	f7ff fc0a 	bl	8001618 <Gyro_Process>
	  Accelero_Process();
 8001e04:	f7ff fa08 	bl	8001218 <Accelero_Process>
	  if(HAL_GetTick()>t+100)
 8001e08:	f000 fca0 	bl	800274c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <main+0x184>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3364      	adds	r3, #100	; 0x64
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d9f1      	bls.n	8001dfc <main+0x3c>
	  {
		  t = HAL_GetTick();
 8001e18:	f000 fc98 	bl	800274c <HAL_GetTick>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a49      	ldr	r2, [pc, #292]	; (8001f44 <main+0x184>)
 8001e20:	6013      	str	r3, [r2, #0]

		  if(Gyro_isReady()){
 8001e22:	f7ff fbff 	bl	8001624 <Gyro_isReady>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d009      	beq.n	8001e40 <main+0x80>
			  GZ_Data = 2 * Gyro_GetRot();
 8001e2c:	f7ff fc0a 	bl	8001644 <Gyro_GetRot>
 8001e30:	eef0 7a40 	vmov.f32	s15, s0
 8001e34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e38:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <main+0x188>)
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
 8001e3e:	e006      	b.n	8001e4e <main+0x8e>

		  }
		  else{
			  GZ_Data = Gyro_GetCalibrationAdvancement();
 8001e40:	f7ff fc26 	bl	8001690 <Gyro_GetCalibrationAdvancement>
 8001e44:	eef0 7a40 	vmov.f32	s15, s0
 8001e48:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <main+0x188>)
 8001e4a:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(Accelero_isReady()){
 8001e4e:	f7ff f9e9 	bl	8001224 <Accelero_isReady>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d02a      	beq.n	8001eae <main+0xee>
			  Acc_Data_X = Accelero_GetAccX() - 0.11;
 8001e58:	f7ff f9f4 	bl	8001244 <Accelero_GetAccX>
 8001e5c:	ee10 3a10 	vmov	r3, s0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb71 	bl	8000548 <__aeabi_f2d>
 8001e66:	a330      	add	r3, pc, #192	; (adr r3, 8001f28 <main+0x168>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fa0c 	bl	8000288 <__aeabi_dsub>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fe96 	bl	8000ba8 <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a33      	ldr	r2, [pc, #204]	; (8001f4c <main+0x18c>)
 8001e80:	6013      	str	r3, [r2, #0]
			  Acc_Data_Y = Accelero_GetAccY() + 0.02 ;
 8001e82:	f7ff fa11 	bl	80012a8 <Accelero_GetAccY>
 8001e86:	ee10 3a10 	vmov	r3, s0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb5c 	bl	8000548 <__aeabi_f2d>
 8001e90:	a327      	add	r3, pc, #156	; (adr r3, 8001f30 <main+0x170>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe f9f9 	bl	800028c <__adddf3>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fe81 	bl	8000ba8 <__aeabi_d2f>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <main+0x190>)
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e00d      	b.n	8001eca <main+0x10a>
		  }
		  else{
		  	  Acc_Data_X = Accelero_GetCalibrationAdvancement();
 8001eae:	f7ff fa19 	bl	80012e4 <Accelero_GetCalibrationAdvancement>
 8001eb2:	eef0 7a40 	vmov.f32	s15, s0
 8001eb6:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <main+0x18c>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
		  	  Acc_Data_Y = Accelero_GetCalibrationAdvancement();
 8001ebc:	f7ff fa12 	bl	80012e4 <Accelero_GetCalibrationAdvancement>
 8001ec0:	eef0 7a40 	vmov.f32	s15, s0
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <main+0x190>)
 8001ec6:	edc3 7a00 	vstr	s15, [r3]
		  }



		txlen = sprintf((char*)txbuffer, "RotZ: %0.02f AccX: %0.03f AccY: %0.03f\n\r", GZ_Data, Acc_Data_X, Acc_Data_Y);
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <main+0x188>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb3a 	bl	8000548 <__aeabi_f2d>
 8001ed4:	4680      	mov	r8, r0
 8001ed6:	4689      	mov	r9, r1
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <main+0x18c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb33 	bl	8000548 <__aeabi_f2d>
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	460d      	mov	r5, r1
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <main+0x190>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fb2c 	bl	8000548 <__aeabi_f2d>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ef8:	e9cd 4500 	strd	r4, r5, [sp]
 8001efc:	4642      	mov	r2, r8
 8001efe:	464b      	mov	r3, r9
 8001f00:	4914      	ldr	r1, [pc, #80]	; (8001f54 <main+0x194>)
 8001f02:	4815      	ldr	r0, [pc, #84]	; (8001f58 <main+0x198>)
 8001f04:	f004 f900 	bl	8006108 <siprintf>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <main+0x19c>)
 8001f0e:	801a      	strh	r2, [r3, #0]
//		txlen = sprintf((char*)txbuffer, "%0.02f %0.03f %0.03f \n\r", GZ_Data, Acc_Data_X, Acc_Data_Y);
		HAL_UART_Transmit(&huart2, txbuffer, txlen, HAL_MAX_DELAY);
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <main+0x19c>)
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <main+0x198>)
 8001f1a:	4811      	ldr	r0, [pc, #68]	; (8001f60 <main+0x1a0>)
 8001f1c:	f002 ffe8 	bl	8004ef0 <HAL_UART_Transmit>
	  MPU6050_Process();
 8001f20:	e76c      	b.n	8001dfc <main+0x3c>
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	c28f5c29 	.word	0xc28f5c29
 8001f2c:	3fbc28f5 	.word	0x3fbc28f5
 8001f30:	47ae147b 	.word	0x47ae147b
 8001f34:	3f947ae1 	.word	0x3f947ae1
 8001f38:	20000018 	.word	0x20000018
 8001f3c:	2000002c 	.word	0x2000002c
 8001f40:	20000034 	.word	0x20000034
 8001f44:	2000043c 	.word	0x2000043c
 8001f48:	20000430 	.word	0x20000430
 8001f4c:	20000434 	.word	0x20000434
 8001f50:	20000438 	.word	0x20000438
 8001f54:	08008610 	.word	0x08008610
 8001f58:	200003ec 	.word	0x200003ec
 8001f5c:	2000042c 	.word	0x2000042c
 8001f60:	20000368 	.word	0x20000368

08001f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b096      	sub	sp, #88	; 0x58
 8001f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	2244      	movs	r2, #68	; 0x44
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fc56 	bl	8005824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f8a:	f001 fcbb 	bl	8003904 <HAL_PWREx_ControlVoltageScaling>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f94:	f000 f94e 	bl	8002234 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f98:	f001 fc96 	bl	80038c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <SystemClock_Config+0xc0>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	4a20      	ldr	r2, [pc, #128]	; (8002024 <SystemClock_Config+0xc0>)
 8001fa4:	f023 0318 	bic.w	r3, r3, #24
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001fac:	2314      	movs	r3, #20
 8001fae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fbc:	2360      	movs	r3, #96	; 0x60
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001fcc:	2310      	movs	r3, #16
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fce5 	bl	80039b0 <HAL_RCC_OscConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001fec:	f000 f922 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002004:	463b      	mov	r3, r7
 8002006:	2101      	movs	r1, #1
 8002008:	4618      	mov	r0, r3
 800200a:	f002 f8e5 	bl	80041d8 <HAL_RCC_ClockConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002014:	f000 f90e 	bl	8002234 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002018:	f002 fcf8 	bl	8004a0c <HAL_RCCEx_EnableMSIPLLMode>
}
 800201c:	bf00      	nop
 800201e:	3758      	adds	r7, #88	; 0x58
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000

08002028 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <MX_I2C1_Init+0x74>)
 800202e:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <MX_I2C1_Init+0x78>)
 8002030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6010C7FF;
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_I2C1_Init+0x74>)
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <MX_I2C1_Init+0x7c>)
 8002036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <MX_I2C1_Init+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <MX_I2C1_Init+0x74>)
 8002040:	2201      	movs	r2, #1
 8002042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <MX_I2C1_Init+0x74>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <MX_I2C1_Init+0x74>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_I2C1_Init+0x74>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_I2C1_Init+0x74>)
 8002058:	2200      	movs	r2, #0
 800205a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_I2C1_Init+0x74>)
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <MX_I2C1_Init+0x74>)
 8002064:	f000 fe35 	bl	8002cd2 <HAL_I2C_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800206e:	f000 f8e1 	bl	8002234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002072:	2100      	movs	r1, #0
 8002074:	4809      	ldr	r0, [pc, #36]	; (800209c <MX_I2C1_Init+0x74>)
 8002076:	f001 fb8f 	bl	8003798 <HAL_I2CEx_ConfigAnalogFilter>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002080:	f000 f8d8 	bl	8002234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002084:	2100      	movs	r1, #0
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_I2C1_Init+0x74>)
 8002088:	f001 fbd1 	bl	800382e <HAL_I2CEx_ConfigDigitalFilter>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002092:	f000 f8cf 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200002c8 	.word	0x200002c8
 80020a0:	40005400 	.word	0x40005400
 80020a4:	6010c7ff 	.word	0x6010c7ff

080020a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <MX_TIM6_Init+0x64>)
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <MX_TIM6_Init+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <MX_TIM6_Init+0x64>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_TIM6_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_TIM6_Init+0x64>)
 80020cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_TIM6_Init+0x64>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <MX_TIM6_Init+0x64>)
 80020da:	f002 fd99 	bl	8004c10 <HAL_TIM_Base_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80020e4:	f000 f8a6 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_TIM6_Init+0x64>)
 80020f6:	f002 fe47 	bl	8004d88 <HAL_TIMEx_MasterConfigSynchronization>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002100:	f000 f898 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2000031c 	.word	0x2000031c
 8002110:	40001000 	.word	0x40001000

08002114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <MX_USART2_UART_Init+0x58>)
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <MX_USART2_UART_Init+0x5c>)
 800211c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <MX_USART2_UART_Init+0x58>)
 8002120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <MX_USART2_UART_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <MX_USART2_UART_Init+0x58>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <MX_USART2_UART_Init+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_USART2_UART_Init+0x58>)
 800213a:	220c      	movs	r2, #12
 800213c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <MX_USART2_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_USART2_UART_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <MX_USART2_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_USART2_UART_Init+0x58>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_USART2_UART_Init+0x58>)
 8002158:	f002 fe7c 	bl	8004e54 <HAL_UART_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002162:	f000 f867 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000368 	.word	0x20000368
 8002170:	40004400 	.word	0x40004400

08002174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	4b28      	ldr	r3, [pc, #160]	; (800222c <MX_GPIO_Init+0xb8>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	4a27      	ldr	r2, [pc, #156]	; (800222c <MX_GPIO_Init+0xb8>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <MX_GPIO_Init+0xb8>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <MX_GPIO_Init+0xb8>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	4a21      	ldr	r2, [pc, #132]	; (800222c <MX_GPIO_Init+0xb8>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <MX_GPIO_Init+0xb8>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <MX_GPIO_Init+0xb8>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	4a1b      	ldr	r2, [pc, #108]	; (800222c <MX_GPIO_Init+0xb8>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <MX_GPIO_Init+0xb8>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2108      	movs	r1, #8
 80021d6:	4816      	ldr	r0, [pc, #88]	; (8002230 <MX_GPIO_Init+0xbc>)
 80021d8:	f000 fd40 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021dc:	2340      	movs	r3, #64	; 0x40
 80021de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	4619      	mov	r1, r3
 80021f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f4:	f000 fbc8 	bl	8002988 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80021f8:	2308      	movs	r3, #8
 80021fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fc:	2301      	movs	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	4619      	mov	r1, r3
 800220e:	4808      	ldr	r0, [pc, #32]	; (8002230 <MX_GPIO_Init+0xbc>)
 8002210:	f000 fbba 	bl	8002988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2101      	movs	r1, #1
 8002218:	2017      	movs	r0, #23
 800221a:	f000 fb7e 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800221e:	2017      	movs	r0, #23
 8002220:	f000 fb97 	bl	8002952 <HAL_NVIC_EnableIRQ>

}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	48000400 	.word	0x48000400

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223c:	e7fe      	b.n	800223c <Error_Handler+0x8>
	...

08002240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_MspInit+0x44>)
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <HAL_MspInit+0x44>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6613      	str	r3, [r2, #96]	; 0x60
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <HAL_MspInit+0x44>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_MspInit+0x44>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_MspInit+0x44>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	6593      	str	r3, [r2, #88]	; 0x58
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_MspInit+0x44>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b09e      	sub	sp, #120	; 0x78
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	2254      	movs	r2, #84	; 0x54
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fabb 	bl	8005824 <memset>
  if(hi2c->Instance==I2C1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_I2C_MspInit+0xa8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d137      	bne.n	8002328 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022b8:	2340      	movs	r3, #64	; 0x40
 80022ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022bc:	2300      	movs	r3, #0
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 f9ab 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80022d0:	f7ff ffb0 	bl	8002234 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_I2C_MspInit+0xac>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_I2C_MspInit+0xac>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_I2C_MspInit+0xac>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022f0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f2:	2312      	movs	r3, #18
 80022f4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f6:	2301      	movs	r3, #1
 80022f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022fe:	2304      	movs	r3, #4
 8002300:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002306:	4619      	mov	r1, r3
 8002308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230c:	f000 fb3c 	bl	8002988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_I2C_MspInit+0xac>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_I2C_MspInit+0xac>)
 8002316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800231a:	6593      	str	r3, [r2, #88]	; 0x58
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_I2C_MspInit+0xac>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002328:	bf00      	nop
 800232a:	3778      	adds	r7, #120	; 0x78
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40005400 	.word	0x40005400
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <HAL_TIM_Base_MspInit+0x38>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d10b      	bne.n	8002362 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_TIM_Base_MspInit+0x3c>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_TIM_Base_MspInit+0x3c>)
 8002350:	f043 0310 	orr.w	r3, r3, #16
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_TIM_Base_MspInit+0x3c>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40001000 	.word	0x40001000
 8002374:	40021000 	.word	0x40021000

08002378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b09e      	sub	sp, #120	; 0x78
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	2254      	movs	r2, #84	; 0x54
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f003 fa43 	bl	8005824 <memset>
  if(huart->Instance==USART2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a28      	ldr	r2, [pc, #160]	; (8002444 <HAL_UART_MspInit+0xcc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d148      	bne.n	800243a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 f933 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023c0:	f7ff ff38 	bl	8002234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c4:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_UART_MspInit+0xd0>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <HAL_UART_MspInit+0xd0>)
 80023ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
 80023d0:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_UART_MspInit+0xd0>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_UART_MspInit+0xd0>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_UART_MspInit+0xd0>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_UART_MspInit+0xd0>)
 80023ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80023f4:	2304      	movs	r3, #4
 80023f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002404:	2307      	movs	r3, #7
 8002406:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002408:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800240c:	4619      	mov	r1, r3
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f000 fab9 	bl	8002988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800241a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002428:	2303      	movs	r3, #3
 800242a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800242c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002436:	f000 faa7 	bl	8002988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800243a:	bf00      	nop
 800243c:	3778      	adds	r7, #120	; 0x78
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40004400 	.word	0x40004400
 8002448:	40021000 	.word	0x40021000

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <NMI_Handler+0x4>

08002452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <MemManage_Handler+0x4>

0800245e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <BusFault_Handler+0x4>

08002464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <UsageFault_Handler+0x4>

0800246a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002498:	f000 f944 	bl	8002724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80024a4:	2040      	movs	r0, #64	; 0x40
 80024a6:	f000 fbf1 	bl	8002c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  MPU6050_Interrupt_Routine();
 80024aa:	f7ff fb0f 	bl	8001acc <MPU6050_Interrupt_Routine>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
	return 1;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_kill>:

int _kill(int pid, int sig)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024cc:	f003 f980 	bl	80057d0 <__errno>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2216      	movs	r2, #22
 80024d4:	601a      	str	r2, [r3, #0]
	return -1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_exit>:

void _exit (int status)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024ea:	f04f 31ff 	mov.w	r1, #4294967295
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffe7 	bl	80024c2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024f4:	e7fe      	b.n	80024f4 <_exit+0x12>

080024f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e00a      	b.n	800251e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002508:	f3af 8000 	nop.w
 800250c:	4601      	mov	r1, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	60ba      	str	r2, [r7, #8]
 8002514:	b2ca      	uxtb	r2, r1
 8002516:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf0      	blt.n	8002508 <_read+0x12>
	}

return len;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	return -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002558:	605a      	str	r2, [r3, #4]
	return 0;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_isatty>:

int _isatty(int file)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	return 1;
 8002570:	2301      	movs	r3, #1
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
	return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f003 f902 	bl	80057d0 <__errno>
 80025cc:	4603      	mov	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20010000 	.word	0x20010000
 80025f8:	00000400 	.word	0x00000400
 80025fc:	20000440 	.word	0x20000440
 8002600:	20000458 	.word	0x20000458

08002604 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <SystemInit+0x20>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <SystemInit+0x20>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002660 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800262c:	f7ff ffea 	bl	8002604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002630:	480c      	ldr	r0, [pc, #48]	; (8002664 <LoopForever+0x6>)
  ldr r1, =_edata
 8002632:	490d      	ldr	r1, [pc, #52]	; (8002668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <LoopForever+0xe>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002648:	4c0a      	ldr	r4, [pc, #40]	; (8002674 <LoopForever+0x16>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002656:	f003 f8c1 	bl	80057dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800265a:	f7ff fbb1 	bl	8001dc0 <main>

0800265e <LoopForever>:

LoopForever:
    b LoopForever
 800265e:	e7fe      	b.n	800265e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002660:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 800266c:	08008a6c 	.word	0x08008a6c
  ldr r2, =_sbss
 8002670:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002674:	20000458 	.word	0x20000458

08002678 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <ADC1_IRQHandler>

0800267a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002684:	2003      	movs	r0, #3
 8002686:	f000 f93d 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800268a:	2000      	movs	r0, #0
 800268c:	f000 f80e 	bl	80026ac <HAL_InitTick>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	71fb      	strb	r3, [r7, #7]
 800269a:	e001      	b.n	80026a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800269c:	f7ff fdd0 	bl	8002240 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026a0:	79fb      	ldrb	r3, [r7, #7]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <HAL_InitTick+0x6c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d023      	beq.n	8002708 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <HAL_InitTick+0x70>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <HAL_InitTick+0x6c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f949 	bl	800296e <HAL_SYSTICK_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d809      	bhi.n	80026fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e8:	2200      	movs	r2, #0
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f000 f913 	bl	800291a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026f4:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <HAL_InitTick+0x74>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e007      	b.n	800270c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e004      	b.n	800270c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e001      	b.n	800270c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000040 	.word	0x20000040
 800271c:	20000038 	.word	0x20000038
 8002720:	2000003c 	.word	0x2000003c

08002724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x20>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_IncTick+0x24>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4413      	add	r3, r2
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <HAL_IncTick+0x24>)
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000040 	.word	0x20000040
 8002748:	20000444 	.word	0x20000444

0800274c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return uwTick;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_GetTick+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000444 	.word	0x20000444

08002764 <__NVIC_SetPriorityGrouping>:
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800278c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_GetPriorityGrouping>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	; (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	; (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	; (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SysTick_Config>:
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f7ff ff8e 	bl	8002804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff29 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff3e 	bl	80027ac <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff8e 	bl	8002858 <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5d 	bl	8002804 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff31 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa2 	bl	80028c0 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002996:	e148      	b.n	8002c2a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 813a 	beq.w	8002c24 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d005      	beq.n	80029c8 <HAL_GPIO_Init+0x40>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d130      	bne.n	8002a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029fe:	2201      	movs	r2, #1
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f003 0201 	and.w	r2, r3, #1
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d017      	beq.n	8002a66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d123      	bne.n	8002aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	6939      	ldr	r1, [r7, #16]
 8002ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0203 	and.w	r2, r3, #3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8094 	beq.w	8002c24 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afc:	4b52      	ldr	r3, [pc, #328]	; (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b00:	4a51      	ldr	r2, [pc, #324]	; (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6613      	str	r3, [r2, #96]	; 0x60
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b14:	4a4d      	ldr	r2, [pc, #308]	; (8002c4c <HAL_GPIO_Init+0x2c4>)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b3e:	d00d      	beq.n	8002b5c <HAL_GPIO_Init+0x1d4>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a43      	ldr	r2, [pc, #268]	; (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <HAL_GPIO_Init+0x1d0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a42      	ldr	r2, [pc, #264]	; (8002c54 <HAL_GPIO_Init+0x2cc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_GPIO_Init+0x1cc>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e004      	b.n	8002b5e <HAL_GPIO_Init+0x1d6>
 8002b54:	2307      	movs	r3, #7
 8002b56:	e002      	b.n	8002b5e <HAL_GPIO_Init+0x1d6>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_GPIO_Init+0x1d6>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	f002 0203 	and.w	r2, r2, #3
 8002b64:	0092      	lsls	r2, r2, #2
 8002b66:	4093      	lsls	r3, r2
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b6e:	4937      	ldr	r1, [pc, #220]	; (8002c4c <HAL_GPIO_Init+0x2c4>)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3302      	adds	r3, #2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba0:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ba6:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <HAL_GPIO_Init+0x2d0>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bca:	4a23      	ldr	r2, [pc, #140]	; (8002c58 <HAL_GPIO_Init+0x2d0>)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bf4:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <HAL_GPIO_Init+0x2d0>)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_GPIO_Init+0x2d0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	; (8002c58 <HAL_GPIO_Init+0x2d0>)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3301      	adds	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f aeaf 	bne.w	8002998 <HAL_GPIO_Init+0x10>
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	48000400 	.word	0x48000400
 8002c54:	48000800 	.word	0x48000800
 8002c58:	40010400 	.word	0x40010400

08002c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c6c:	787b      	ldrb	r3, [r7, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c78:	e002      	b.n	8002c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d006      	beq.n	8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f806 	bl	8002cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40010400 	.word	0x40010400

08002cbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e081      	b.n	8002de8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fac5 	bl	8002288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2224      	movs	r2, #36	; 0x24
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d107      	bne.n	8002d4c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	e006      	b.n	8002d5a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d104      	bne.n	8002d6c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69d9      	ldr	r1, [r3, #28]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1a      	ldr	r2, [r3, #32]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	460b      	mov	r3, r1
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	f040 80f9 	bne.w	800300a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x34>
 8002e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0ed      	b.n	800300c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_I2C_Mem_Write+0x4e>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e0e6      	b.n	800300c <HAL_I2C_Mem_Write+0x21c>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e46:	f7ff fc81 	bl	800274c <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2319      	movs	r3, #25
 8002e52:	2201      	movs	r2, #1
 8002e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fac3 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0d1      	b.n	800300c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2221      	movs	r2, #33	; 0x21
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2240      	movs	r2, #64	; 0x40
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e90:	88f8      	ldrh	r0, [r7, #6]
 8002e92:	893a      	ldrh	r2, [r7, #8]
 8002e94:	8979      	ldrh	r1, [r7, #10]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f9d3 	bl	800324c <I2C_RequestMemoryWrite>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0a9      	b.n	800300c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2bff      	cmp	r3, #255	; 0xff
 8002ec0:	d90e      	bls.n	8002ee0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	8979      	ldrh	r1, [r7, #10]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fc2b 	bl	8003734 <I2C_TransferConfig>
 8002ede:	e00f      	b.n	8002f00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	8979      	ldrh	r1, [r7, #10]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fc1a 	bl	8003734 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 faad 	bl	8003464 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e07b      	b.n	800300c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d034      	beq.n	8002fb8 <HAL_I2C_Mem_Write+0x1c8>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d130      	bne.n	8002fb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fa3f 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e04d      	b.n	800300c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	d90e      	bls.n	8002f98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	22ff      	movs	r2, #255	; 0xff
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	8979      	ldrh	r1, [r7, #10]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fbcf 	bl	8003734 <I2C_TransferConfig>
 8002f96:	e00f      	b.n	8002fb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	8979      	ldrh	r1, [r7, #10]
 8002faa:	2300      	movs	r3, #0
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fbbe 	bl	8003734 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d19e      	bne.n	8002f00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fa8c 	bl	80034e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e01a      	b.n	800300c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_I2C_Mem_Write+0x224>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
  }
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	fe00e800 	.word	0xfe00e800

08003018 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4603      	mov	r3, r0
 8003028:	817b      	strh	r3, [r7, #10]
 800302a:	460b      	mov	r3, r1
 800302c:	813b      	strh	r3, [r7, #8]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 80fd 	bne.w	800323a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_I2C_Mem_Read+0x34>
 8003046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0f1      	b.n	800323c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_I2C_Mem_Read+0x4e>
 8003062:	2302      	movs	r3, #2
 8003064:	e0ea      	b.n	800323c <HAL_I2C_Mem_Read+0x224>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800306e:	f7ff fb6d 	bl	800274c <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2319      	movs	r3, #25
 800307a:	2201      	movs	r2, #1
 800307c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f9af 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0d5      	b.n	800323c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2222      	movs	r2, #34	; 0x22
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b8:	88f8      	ldrh	r0, [r7, #6]
 80030ba:	893a      	ldrh	r2, [r7, #8]
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4603      	mov	r3, r0
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f913 	bl	80032f4 <I2C_RequestMemoryRead>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0ad      	b.n	800323c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2bff      	cmp	r3, #255	; 0xff
 80030e8:	d90e      	bls.n	8003108 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	8979      	ldrh	r1, [r7, #10]
 80030f8:	4b52      	ldr	r3, [pc, #328]	; (8003244 <HAL_I2C_Mem_Read+0x22c>)
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fb17 	bl	8003734 <I2C_TransferConfig>
 8003106:	e00f      	b.n	8003128 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	b2da      	uxtb	r2, r3
 8003118:	8979      	ldrh	r1, [r7, #10]
 800311a:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_I2C_Mem_Read+0x22c>)
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fb06 	bl	8003734 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2200      	movs	r2, #0
 8003130:	2104      	movs	r1, #4
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f956 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07c      	b.n	800323c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d034      	beq.n	80031e8 <HAL_I2C_Mem_Read+0x1d0>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d130      	bne.n	80031e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2200      	movs	r2, #0
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f927 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e04d      	b.n	800323c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2bff      	cmp	r3, #255	; 0xff
 80031a8:	d90e      	bls.n	80031c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	8979      	ldrh	r1, [r7, #10]
 80031b8:	2300      	movs	r3, #0
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fab7 	bl	8003734 <I2C_TransferConfig>
 80031c6:	e00f      	b.n	80031e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	8979      	ldrh	r1, [r7, #10]
 80031da:	2300      	movs	r3, #0
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 faa6 	bl	8003734 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d19a      	bne.n	8003128 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f974 	bl	80034e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e01a      	b.n	800323c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2220      	movs	r2, #32
 800320c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_I2C_Mem_Read+0x230>)
 800321a:	400b      	ands	r3, r1
 800321c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e000      	b.n	800323c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800323a:	2302      	movs	r3, #2
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	80002400 	.word	0x80002400
 8003248:	fe00e800 	.word	0xfe00e800

0800324c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4603      	mov	r3, r0
 800325c:	817b      	strh	r3, [r7, #10]
 800325e:	460b      	mov	r3, r1
 8003260:	813b      	strh	r3, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	8979      	ldrh	r1, [r7, #10]
 800326c:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <I2C_RequestMemoryWrite+0xa4>)
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fa5d 	bl	8003734 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	69b9      	ldr	r1, [r7, #24]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f8f0 	bl	8003464 <I2C_WaitOnTXISFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e02c      	b.n	80032e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003294:	893b      	ldrh	r3, [r7, #8]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	629a      	str	r2, [r3, #40]	; 0x28
 800329e:	e015      	b.n	80032cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032a0:	893b      	ldrh	r3, [r7, #8]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f8d6 	bl	8003464 <I2C_WaitOnTXISFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e012      	b.n	80032e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032c2:	893b      	ldrh	r3, [r7, #8]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f884 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	80002000 	.word	0x80002000

080032f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	4608      	mov	r0, r1
 80032fe:	4611      	mov	r1, r2
 8003300:	461a      	mov	r2, r3
 8003302:	4603      	mov	r3, r0
 8003304:	817b      	strh	r3, [r7, #10]
 8003306:	460b      	mov	r3, r1
 8003308:	813b      	strh	r3, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	8979      	ldrh	r1, [r7, #10]
 8003314:	4b20      	ldr	r3, [pc, #128]	; (8003398 <I2C_RequestMemoryRead+0xa4>)
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa0a 	bl	8003734 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f89d 	bl	8003464 <I2C_WaitOnTXISFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e02c      	b.n	800338e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800333a:	893b      	ldrh	r3, [r7, #8]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
 8003344:	e015      	b.n	8003372 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003346:	893b      	ldrh	r3, [r7, #8]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	b29b      	uxth	r3, r3
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f883 	bl	8003464 <I2C_WaitOnTXISFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e012      	b.n	800338e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003368:	893b      	ldrh	r3, [r7, #8]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2200      	movs	r2, #0
 800337a:	2140      	movs	r1, #64	; 0x40
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f831 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	80002000 	.word	0x80002000

0800339c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d103      	bne.n	80033ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d007      	beq.n	80033d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	619a      	str	r2, [r3, #24]
  }
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f4:	e022      	b.n	800343c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d01e      	beq.n	800343c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fe:	f7ff f9a5 	bl	800274c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d113      	bne.n	800343c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e00f      	b.n	800345c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	429a      	cmp	r2, r3
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	429a      	cmp	r2, r3
 8003458:	d0cd      	beq.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003470:	e02c      	b.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f870 	bl	800355c <I2C_IsErrorOccurred>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e02a      	b.n	80034dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d01e      	beq.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348e:	f7ff f95d 	bl	800274c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	d302      	bcc.n	80034a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d113      	bne.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e007      	b.n	80034dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d1cb      	bne.n	8003472 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f0:	e028      	b.n	8003544 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f830 	bl	800355c <I2C_IsErrorOccurred>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e026      	b.n	8003554 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7ff f921 	bl	800274c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d113      	bne.n	8003544 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e007      	b.n	8003554 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b20      	cmp	r3, #32
 8003550:	d1cf      	bne.n	80034f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d075      	beq.n	8003674 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2210      	movs	r2, #16
 800358e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003590:	e056      	b.n	8003640 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d052      	beq.n	8003640 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7ff f8d7 	bl	800274c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_IsErrorOccurred+0x54>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d147      	bne.n	8003640 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d2:	d12e      	bne.n	8003632 <I2C_IsErrorOccurred+0xd6>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035da:	d02a      	beq.n	8003632 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d027      	beq.n	8003632 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035f2:	f7ff f8ab 	bl	800274c <HAL_GetTick>
 80035f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f8:	e01b      	b.n	8003632 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035fa:	f7ff f8a7 	bl	800274c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b19      	cmp	r3, #25
 8003606:	d914      	bls.n	8003632 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b20      	cmp	r3, #32
 800363e:	d1dc      	bne.n	80035fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b20      	cmp	r3, #32
 800364c:	d003      	beq.n	8003656 <I2C_IsErrorOccurred+0xfa>
 800364e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003652:	2b00      	cmp	r3, #0
 8003654:	d09d      	beq.n	8003592 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2220      	movs	r2, #32
 8003664:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003696:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00b      	beq.n	80036c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	f043 0308 	orr.w	r3, r3, #8
 80036ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01c      	beq.n	8003724 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff fe56 	bl	800339c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <I2C_IsErrorOccurred+0x1d4>)
 80036fc:	400b      	ands	r3, r1
 80036fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	431a      	orrs	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003728:	4618      	mov	r0, r3
 800372a:	3728      	adds	r7, #40	; 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	fe00e800 	.word	0xfe00e800

08003734 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	817b      	strh	r3, [r7, #10]
 8003742:	4613      	mov	r3, r2
 8003744:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003746:	897b      	ldrh	r3, [r7, #10]
 8003748:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800374c:	7a7b      	ldrb	r3, [r7, #9]
 800374e:	041b      	lsls	r3, r3, #16
 8003750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003754:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	4313      	orrs	r3, r2
 800375e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003762:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	0d5b      	lsrs	r3, r3, #21
 800376e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <I2C_TransferConfig+0x60>)
 8003774:	430b      	orrs	r3, r1
 8003776:	43db      	mvns	r3, r3
 8003778:	ea02 0103 	and.w	r1, r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	03ff63ff 	.word	0x03ff63ff

08003798 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d138      	bne.n	8003820 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e032      	b.n	8003822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b20      	cmp	r3, #32
 8003842:	d139      	bne.n	80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800384e:	2302      	movs	r3, #2
 8003850:	e033      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2224      	movs	r2, #36	; 0x24
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003880:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40007000 	.word	0x40007000

080038e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <HAL_PWREx_GetVoltageRange+0x18>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40007000 	.word	0x40007000

08003904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003912:	d130      	bne.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003914:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800391c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003920:	d038      	beq.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003930:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2232      	movs	r2, #50	; 0x32
 8003938:	fb02 f303 	mul.w	r3, r2, r3
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	0c9b      	lsrs	r3, r3, #18
 8003944:	3301      	adds	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003948:	e002      	b.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3b01      	subs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d102      	bne.n	8003964 <HAL_PWREx_ControlVoltageScaling+0x60>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f2      	bne.n	800394a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003970:	d110      	bne.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e00f      	b.n	8003996 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003976:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d007      	beq.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800398c:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003992:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40007000 	.word	0x40007000
 80039a8:	20000038 	.word	0x20000038
 80039ac:	431bde83 	.word	0x431bde83

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f000 bc02 	b.w	80041c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c4:	4b96      	ldr	r3, [pc, #600]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ce:	4b94      	ldr	r3, [pc, #592]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80e4 	beq.w	8003bae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_RCC_OscConfig+0x4c>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	f040 808b 	bne.w	8003b0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	f040 8087 	bne.w	8003b0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039fc:	4b88      	ldr	r3, [pc, #544]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_OscConfig+0x64>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e3d9      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	4b81      	ldr	r3, [pc, #516]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_RCC_OscConfig+0x7e>
 8003a24:	4b7e      	ldr	r3, [pc, #504]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2c:	e005      	b.n	8003a3a <HAL_RCC_OscConfig+0x8a>
 8003a2e:	4b7c      	ldr	r3, [pc, #496]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d223      	bcs.n	8003a86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fd8c 	bl	8004560 <RCC_SetFlashLatencyFromMSIRange>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e3ba      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a52:	4b73      	ldr	r3, [pc, #460]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a72      	ldr	r2, [pc, #456]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b70      	ldr	r3, [pc, #448]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	496d      	ldr	r1, [pc, #436]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a70:	4b6b      	ldr	r3, [pc, #428]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	4968      	ldr	r1, [pc, #416]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
 8003a84:	e025      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a86:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a65      	ldr	r2, [pc, #404]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b63      	ldr	r3, [pc, #396]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4960      	ldr	r1, [pc, #384]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa4:	4b5e      	ldr	r3, [pc, #376]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	495b      	ldr	r1, [pc, #364]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fd4c 	bl	8004560 <RCC_SetFlashLatencyFromMSIRange>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e37a      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ad2:	f000 fc81 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b51      	ldr	r3, [pc, #324]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	4950      	ldr	r1, [pc, #320]	; (8003c24 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	5ccb      	ldrb	r3, [r1, r3]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	4a4e      	ldr	r2, [pc, #312]	; (8003c28 <HAL_RCC_OscConfig+0x278>)
 8003af0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fdd8 	bl	80026ac <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d052      	beq.n	8003bac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	e35e      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d032      	beq.n	8003b78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a42      	ldr	r2, [pc, #264]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b1e:	f7fe fe15 	bl	800274c <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b26:	f7fe fe11 	bl	800274c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e347      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b38:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b44:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a35      	ldr	r2, [pc, #212]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	f043 0308 	orr.w	r3, r3, #8
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b33      	ldr	r3, [pc, #204]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4930      	ldr	r1, [pc, #192]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b62:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	492b      	ldr	r1, [pc, #172]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	604b      	str	r3, [r1, #4]
 8003b76:	e01a      	b.n	8003bae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b84:	f7fe fde2 	bl	800274c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b8c:	f7fe fdde 	bl	800274c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e314      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1dc>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d073      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_OscConfig+0x21c>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d10e      	bne.n	8003be4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d063      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d15f      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e2f1      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bec:	d106      	bne.n	8003bfc <HAL_RCC_OscConfig+0x24c>
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e025      	b.n	8003c48 <HAL_RCC_OscConfig+0x298>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d114      	bne.n	8003c30 <HAL_RCC_OscConfig+0x280>
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a05      	ldr	r2, [pc, #20]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a02      	ldr	r2, [pc, #8]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e013      	b.n	8003c48 <HAL_RCC_OscConfig+0x298>
 8003c20:	40021000 	.word	0x40021000
 8003c24:	0800863c 	.word	0x0800863c
 8003c28:	20000038 	.word	0x20000038
 8003c2c:	2000003c 	.word	0x2000003c
 8003c30:	4ba0      	ldr	r3, [pc, #640]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a9f      	ldr	r2, [pc, #636]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b9d      	ldr	r3, [pc, #628]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a9c      	ldr	r2, [pc, #624]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe fd7c 	bl	800274c <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe fd78 	bl	800274c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e2ae      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6a:	4b92      	ldr	r3, [pc, #584]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2a8>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe fd68 	bl	800274c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe fd64 	bl	800274c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e29a      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c92:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x2d0>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d060      	beq.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x310>
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d119      	bne.n	8003cee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d116      	bne.n	8003cee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc0:	4b7c      	ldr	r3, [pc, #496]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x328>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e277      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b76      	ldr	r3, [pc, #472]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	4973      	ldr	r1, [pc, #460]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cec:	e040      	b.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d023      	beq.n	8003d3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf6:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6e      	ldr	r2, [pc, #440]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fe fd23 	bl	800274c <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7fe fd1f 	bl	800274c <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e255      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d1c:	4b65      	ldr	r3, [pc, #404]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d28:	4b62      	ldr	r3, [pc, #392]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	495f      	ldr	r1, [pc, #380]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
 8003d3c:	e018      	b.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5c      	ldr	r2, [pc, #368]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fcff 	bl	800274c <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fe fcfb 	bl	800274c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e231      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d64:	4b53      	ldr	r3, [pc, #332]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d03c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d84:	4b4b      	ldr	r3, [pc, #300]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8a:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fe fcda 	bl	800274c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fe fcd6 	bl	800274c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e20c      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dae:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ef      	beq.n	8003d9c <HAL_RCC_OscConfig+0x3ec>
 8003dbc:	e01b      	b.n	8003df6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbe:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc4:	4a3b      	ldr	r2, [pc, #236]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fe fcbd 	bl	800274c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7fe fcb9 	bl	800274c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1ef      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de8:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ef      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80a6 	beq.w	8003f50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e08:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d118      	bne.n	8003e6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e48:	f7fe fc80 	bl	800274c <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fe fc7c 	bl	800274c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e1b2      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d108      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4d8>
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e86:	e029      	b.n	8003edc <HAL_RCC_OscConfig+0x52c>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d115      	bne.n	8003ebc <HAL_RCC_OscConfig+0x50c>
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eb0:	e014      	b.n	8003edc <HAL_RCC_OscConfig+0x52c>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	4b9a      	ldr	r3, [pc, #616]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	4a99      	ldr	r2, [pc, #612]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ecc:	4b96      	ldr	r3, [pc, #600]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	4a95      	ldr	r2, [pc, #596]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d016      	beq.n	8003f12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fe fc32 	bl	800274c <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fe fc2e 	bl	800274c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e162      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f02:	4b89      	ldr	r3, [pc, #548]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ed      	beq.n	8003eec <HAL_RCC_OscConfig+0x53c>
 8003f10:	e015      	b.n	8003f3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fe fc1b 	bl	800274c <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fe fc17 	bl	800274c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e14b      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f30:	4b7d      	ldr	r3, [pc, #500]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ed      	bne.n	8003f1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f44:	4b78      	ldr	r3, [pc, #480]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	4a77      	ldr	r2, [pc, #476]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f64:	4b70      	ldr	r3, [pc, #448]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6a:	4a6f      	ldr	r2, [pc, #444]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fe fbea 	bl	800274c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7c:	f7fe fbe6 	bl	800274c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e11c      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f8e:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <HAL_RCC_OscConfig+0x5cc>
 8003f9c:	e01b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f9e:	4b62      	ldr	r3, [pc, #392]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa4:	4a60      	ldr	r2, [pc, #384]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fe fbcd 	bl	800274c <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb6:	f7fe fbc9 	bl	800274c <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e0ff      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fc8:	4b57      	ldr	r3, [pc, #348]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ef      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80f3 	beq.w	80041c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	f040 80c9 	bne.w	800417c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fea:	4b4f      	ldr	r3, [pc, #316]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f003 0203 	and.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d12c      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	3b01      	subs	r3, #1
 800400a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d123      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d11b      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d113      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d109      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	3b01      	subs	r3, #1
 8004052:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d06b      	beq.n	8004130 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d062      	beq.n	8004124 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800405e:	4b32      	ldr	r3, [pc, #200]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0ac      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004078:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800407a:	f7fe fb67 	bl	800274c <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004082:	f7fe fb63 	bl	800274c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e099      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x77c>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040b0:	3a01      	subs	r2, #1
 80040b2:	0112      	lsls	r2, r2, #4
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040ba:	0212      	lsls	r2, r2, #8
 80040bc:	4311      	orrs	r1, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040c2:	0852      	lsrs	r2, r2, #1
 80040c4:	3a01      	subs	r2, #1
 80040c6:	0552      	lsls	r2, r2, #21
 80040c8:	4311      	orrs	r1, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040ce:	0852      	lsrs	r2, r2, #1
 80040d0:	3a01      	subs	r2, #1
 80040d2:	0652      	lsls	r2, r2, #25
 80040d4:	4311      	orrs	r1, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040da:	06d2      	lsls	r2, r2, #27
 80040dc:	430a      	orrs	r2, r1
 80040de:	4912      	ldr	r1, [pc, #72]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a0f      	ldr	r2, [pc, #60]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040fc:	f7fe fb26 	bl	800274c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe fb22 	bl	800274c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e058      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004122:	e050      	b.n	80041c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e04f      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
 8004128:	40021000 	.word	0x40021000
 800412c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004130:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d144      	bne.n	80041c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004146:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 800414e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004152:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004154:	f7fe fafa 	bl	800274c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415c:	f7fe faf6 	bl	800274c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e02c      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416e:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x7ac>
 800417a:	e024      	b.n	80041c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d01f      	beq.n	80041c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fe fadd 	bl	800274c <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004196:	f7fe fad9 	bl	800274c <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e00f      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	4905      	ldr	r1, [pc, #20]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCC_OscConfig+0x824>)
 80041bc:	4013      	ands	r3, r2
 80041be:	60cb      	str	r3, [r1, #12]
 80041c0:	e001      	b.n	80041c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40021000 	.word	0x40021000
 80041d4:	feeefffc 	.word	0xfeeefffc

080041d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0e7      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b75      	ldr	r3, [pc, #468]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d910      	bls.n	800421c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b72      	ldr	r3, [pc, #456]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 0207 	bic.w	r2, r3, #7
 8004202:	4970      	ldr	r1, [pc, #448]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b6e      	ldr	r3, [pc, #440]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0cf      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004234:	429a      	cmp	r2, r3
 8004236:	d908      	bls.n	800424a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4960      	ldr	r1, [pc, #384]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d04c      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425e:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d121      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0a6      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004276:	4b54      	ldr	r3, [pc, #336]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d115      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e09a      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800428e:	4b4e      	ldr	r3, [pc, #312]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e08e      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800429e:	4b4a      	ldr	r3, [pc, #296]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e086      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ae:	4b46      	ldr	r3, [pc, #280]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4943      	ldr	r1, [pc, #268]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c0:	f7fe fa44 	bl	800274c <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	e00a      	b.n	80042de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f7fe fa40 	bl	800274c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e06e      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b3a      	ldr	r3, [pc, #232]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 020c 	and.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1eb      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004308:	429a      	cmp	r2, r3
 800430a:	d208      	bcs.n	800431e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800430c:	4b2e      	ldr	r3, [pc, #184]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	492b      	ldr	r1, [pc, #172]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d210      	bcs.n	800434e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 0207 	bic.w	r2, r3, #7
 8004334:	4923      	ldr	r1, [pc, #140]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433c:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d001      	beq.n	800434e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e036      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	4918      	ldr	r1, [pc, #96]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004378:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4910      	ldr	r1, [pc, #64]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800438c:	f000 f824 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	091b      	lsrs	r3, r3, #4
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	490b      	ldr	r1, [pc, #44]	; (80043cc <HAL_RCC_ClockConfig+0x1f4>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1f8>)
 80043aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1fc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe f97b 	bl	80026ac <HAL_InitTick>
 80043b6:	4603      	mov	r3, r0
 80043b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80043ba:	7afb      	ldrb	r3, [r7, #11]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40022000 	.word	0x40022000
 80043c8:	40021000 	.word	0x40021000
 80043cc:	0800863c 	.word	0x0800863c
 80043d0:	20000038 	.word	0x20000038
 80043d4:	2000003c 	.word	0x2000003c

080043d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	2300      	movs	r3, #0
 80043e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e6:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f0:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x34>
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d121      	bne.n	800444a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d11e      	bne.n	800444a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800440c:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d107      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004418:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	e005      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004428:	4b2d      	ldr	r3, [pc, #180]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004434:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800443c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004448:	e00a      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d102      	bne.n	8004456 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	e004      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b08      	cmp	r3, #8
 800445a:	d101      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <HAL_RCC_GetSysClockFreq+0x114>)
 800445e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b0c      	cmp	r3, #12
 8004464:	d134      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004466:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d003      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0xa6>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d003      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0xac>
 800447c:	e005      	b.n	800448a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800447e:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004480:	617b      	str	r3, [r7, #20]
      break;
 8004482:	e005      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004484:	4b19      	ldr	r3, [pc, #100]	; (80044ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004486:	617b      	str	r3, [r7, #20]
      break;
 8004488:	e002      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	617b      	str	r3, [r7, #20]
      break;
 800448e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	3301      	adds	r3, #1
 800449c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	fb03 f202 	mul.w	r2, r3, r2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	0e5b      	lsrs	r3, r3, #25
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	3301      	adds	r3, #1
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044d0:	69bb      	ldr	r3, [r7, #24]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	08008654 	.word	0x08008654
 80044e8:	00f42400 	.word	0x00f42400
 80044ec:	007a1200 	.word	0x007a1200

080044f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000038 	.word	0x20000038

08004508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800450c:	f7ff fff0 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4904      	ldr	r1, [pc, #16]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000
 8004530:	0800864c 	.word	0x0800864c

08004534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004538:	f7ff ffda 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	0adb      	lsrs	r3, r3, #11
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4904      	ldr	r1, [pc, #16]	; (800455c <HAL_RCC_GetPCLK2Freq+0x28>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	0800864c 	.word	0x0800864c

08004560 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004578:	f7ff f9b6 	bl	80038e8 <HAL_PWREx_GetVoltageRange>
 800457c:	6178      	str	r0, [r7, #20]
 800457e:	e014      	b.n	80045aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	4a24      	ldr	r2, [pc, #144]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458a:	6593      	str	r3, [r2, #88]	; 0x58
 800458c:	4b22      	ldr	r3, [pc, #136]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004598:	f7ff f9a6 	bl	80038e8 <HAL_PWREx_GetVoltageRange>
 800459c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b0:	d10b      	bne.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d919      	bls.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2ba0      	cmp	r3, #160	; 0xa0
 80045bc:	d902      	bls.n	80045c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045be:	2302      	movs	r3, #2
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e013      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045c4:	2301      	movs	r3, #1
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e010      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b80      	cmp	r3, #128	; 0x80
 80045ce:	d902      	bls.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045d0:	2303      	movs	r3, #3
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	e00a      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b80      	cmp	r3, #128	; 0x80
 80045da:	d102      	bne.n	80045e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045dc:	2302      	movs	r3, #2
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	e004      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b70      	cmp	r3, #112	; 0x70
 80045e6:	d101      	bne.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045e8:	2301      	movs	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 0207 	bic.w	r2, r3, #7
 80045f4:	4909      	ldr	r1, [pc, #36]	; (800461c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	429a      	cmp	r2, r3
 8004608:	d001      	beq.n	800460e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	40022000 	.word	0x40022000

08004620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004628:	2300      	movs	r3, #0
 800462a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800462c:	2300      	movs	r3, #0
 800462e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004638:	2b00      	cmp	r3, #0
 800463a:	d031      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004644:	d01a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004646:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800464a:	d814      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d009      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004650:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004654:	d10f      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004656:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4a5c      	ldr	r2, [pc, #368]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004662:	e00c      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f9de 	bl	8004a2c <RCCEx_PLLSAI1_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	74fb      	strb	r3, [r7, #19]
      break;
 800467a:	e000      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800467c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10b      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004684:	4b51      	ldr	r3, [pc, #324]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	494e      	ldr	r1, [pc, #312]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800469a:	e001      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 809e 	beq.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ae:	2300      	movs	r3, #0
 80046b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046b2:	4b46      	ldr	r3, [pc, #280]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c8:	4b40      	ldr	r3, [pc, #256]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	4a3f      	ldr	r2, [pc, #252]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d2:	6593      	str	r3, [r2, #88]	; 0x58
 80046d4:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e0:	2301      	movs	r3, #1
 80046e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e4:	4b3a      	ldr	r3, [pc, #232]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a39      	ldr	r2, [pc, #228]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046f0:	f7fe f82c 	bl	800274c <HAL_GetTick>
 80046f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046f6:	e009      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7fe f828 	bl	800274c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d902      	bls.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	74fb      	strb	r3, [r7, #19]
        break;
 800470a:	e005      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800470c:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ef      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d15a      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800471e:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004728:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01e      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	429a      	cmp	r2, r3
 8004738:	d019      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004744:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004746:	4b21      	ldr	r3, [pc, #132]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800475e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004766:	4a19      	ldr	r2, [pc, #100]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d016      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd ffe8 	bl	800274c <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800477e:	e00b      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004780:	f7fd ffe4 	bl	800274c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d902      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	74fb      	strb	r3, [r7, #19]
            break;
 8004796:	e006      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0ec      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	4904      	ldr	r1, [pc, #16]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047c2:	e009      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
 80047c8:	e006      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d8:	7c7b      	ldrb	r3, [r7, #17]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	4b8a      	ldr	r3, [pc, #552]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	4a89      	ldr	r2, [pc, #548]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047f6:	4b84      	ldr	r3, [pc, #528]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f023 0203 	bic.w	r2, r3, #3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4980      	ldr	r1, [pc, #512]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004818:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f023 020c 	bic.w	r2, r3, #12
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	4978      	ldr	r1, [pc, #480]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800483a:	4b73      	ldr	r3, [pc, #460]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	496f      	ldr	r1, [pc, #444]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800485c:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	4967      	ldr	r1, [pc, #412]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800487e:	4b62      	ldr	r3, [pc, #392]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	495e      	ldr	r1, [pc, #376]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	4956      	ldr	r1, [pc, #344]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	494d      	ldr	r1, [pc, #308]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d028      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048e4:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	4945      	ldr	r1, [pc, #276]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004902:	d106      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004904:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a3f      	ldr	r2, [pc, #252]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490e:	60d3      	str	r3, [r2, #12]
 8004910:	e011      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800491a:	d10c      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2101      	movs	r1, #1
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f882 	bl	8004a2c <RCCEx_PLLSAI1_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d028      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004942:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004950:	492d      	ldr	r1, [pc, #180]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004960:	d106      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004962:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4a28      	ldr	r2, [pc, #160]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496c:	60d3      	str	r3, [r2, #12]
 800496e:	e011      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004978:	d10c      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	2101      	movs	r1, #1
 8004980:	4618      	mov	r0, r3
 8004982:	f000 f853 	bl	8004a2c <RCCEx_PLLSAI1_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800498a:	7cfb      	ldrb	r3, [r7, #19]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01c      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ae:	4916      	ldr	r1, [pc, #88]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049be:	d10c      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	2102      	movs	r1, #2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f830 	bl	8004a2c <RCCEx_PLLSAI1_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	4904      	ldr	r1, [pc, #16]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000

08004a0c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	6013      	str	r3, [r2, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000

08004a2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a3a:	4b74      	ldr	r3, [pc, #464]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d018      	beq.n	8004a78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a46:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0203 	and.w	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d10d      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
       ||
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a5e:	4b6b      	ldr	r3, [pc, #428]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d047      	beq.n	8004b02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
 8004a76:	e044      	b.n	8004b02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d018      	beq.n	8004ab2 <RCCEx_PLLSAI1_Config+0x86>
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d825      	bhi.n	8004ad0 <RCCEx_PLLSAI1_Config+0xa4>
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d002      	beq.n	8004a8e <RCCEx_PLLSAI1_Config+0x62>
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d009      	beq.n	8004aa0 <RCCEx_PLLSAI1_Config+0x74>
 8004a8c:	e020      	b.n	8004ad0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d11d      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9e:	e01a      	b.n	8004ad6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004aa0:	4b5a      	ldr	r3, [pc, #360]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d116      	bne.n	8004ada <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab0:	e013      	b.n	8004ada <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ab2:	4b56      	ldr	r3, [pc, #344]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10f      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004abe:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ace:	e006      	b.n	8004ade <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad4:	e004      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ad6:	bf00      	nop
 8004ad8:	e002      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ade:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6819      	ldr	r1, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	430b      	orrs	r3, r1
 8004afc:	4943      	ldr	r1, [pc, #268]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d17c      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b08:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b14:	f7fd fe1a 	bl	800274c <HAL_GetTick>
 8004b18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b1a:	e009      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b1c:	f7fd fe16 	bl	800274c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d902      	bls.n	8004b30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b2e:	e005      	b.n	8004b3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b30:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1ef      	bne.n	8004b1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d15f      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d110      	bne.n	8004b6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b48:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6892      	ldr	r2, [r2, #8]
 8004b58:	0211      	lsls	r1, r2, #8
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	06d2      	lsls	r2, r2, #27
 8004b60:	430a      	orrs	r2, r1
 8004b62:	492a      	ldr	r1, [pc, #168]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]
 8004b68:	e027      	b.n	8004bba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d112      	bne.n	8004b96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b70:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6892      	ldr	r2, [r2, #8]
 8004b80:	0211      	lsls	r1, r2, #8
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6912      	ldr	r2, [r2, #16]
 8004b86:	0852      	lsrs	r2, r2, #1
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	0552      	lsls	r2, r2, #21
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	491f      	ldr	r1, [pc, #124]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	610b      	str	r3, [r1, #16]
 8004b94:	e011      	b.n	8004bba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	0211      	lsls	r1, r2, #8
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6952      	ldr	r2, [r2, #20]
 8004bac:	0852      	lsrs	r2, r2, #1
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	0652      	lsls	r2, r2, #25
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	4915      	ldr	r1, [pc, #84]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fd fdc1 	bl	800274c <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bcc:	e009      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bce:	f7fd fdbd 	bl	800274c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d902      	bls.n	8004be2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	73fb      	strb	r3, [r7, #15]
          break;
 8004be0:	e005      	b.n	8004bee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ef      	beq.n	8004bce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4903      	ldr	r1, [pc, #12]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000

08004c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e049      	b.n	8004cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fd fb7e 	bl	8002338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f000 f836 	bl	8004cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <TIM_Base_SetConfig+0xbc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_Base_SetConfig+0x20>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cde:	d108      	bne.n	8004cf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <TIM_Base_SetConfig+0xbc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0x52>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0x52>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <TIM_Base_SetConfig+0xc0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0x52>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <TIM_Base_SetConfig+0xc4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <TIM_Base_SetConfig+0xbc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <TIM_Base_SetConfig+0xa0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <TIM_Base_SetConfig+0xc0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <TIM_Base_SetConfig+0xa0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <TIM_Base_SetConfig+0xc4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d103      	bne.n	8004d68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	615a      	str	r2, [r3, #20]
}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400

08004d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e04f      	b.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d108      	bne.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e08:	d004      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a10      	ldr	r2, [pc, #64]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d10c      	bne.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40014000 	.word	0x40014000

08004e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e040      	b.n	8004ee8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd fa7e 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	; 0x24
 8004e80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f8c0 	bl	8005018 <UART_SetConfig>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e022      	b.n	8004ee8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fae0 	bl	8005470 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fb67 	bl	80055b4 <UART_CheckIdleState>
 8004ee6:	4603      	mov	r3, r0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	f040 8082 	bne.w	800500e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_UART_Transmit+0x26>
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e07a      	b.n	8005010 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_UART_Transmit+0x38>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e073      	b.n	8005010 <HAL_UART_Transmit+0x120>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2221      	movs	r2, #33	; 0x21
 8004f3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f3e:	f7fd fc05 	bl	800274c <HAL_GetTick>
 8004f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	88fa      	ldrh	r2, [r7, #6]
 8004f50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5c:	d108      	bne.n	8004f70 <HAL_UART_Transmit+0x80>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d104      	bne.n	8004f70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	e003      	b.n	8004f78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f80:	e02d      	b.n	8004fde <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fb5a 	bl	8005646 <UART_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e039      	b.n	8005010 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fae:	b292      	uxth	r2, r2
 8004fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	e008      	b.n	8004fcc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	781a      	ldrb	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	b292      	uxth	r2, r2
 8004fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1cb      	bne.n	8004f82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2140      	movs	r1, #64	; 0x40
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fb26 	bl	8005646 <UART_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e005      	b.n	8005010 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	e000      	b.n	8005010 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800500e:	2302      	movs	r3, #2
  }
}
 8005010:	4618      	mov	r0, r3
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800501c:	b08a      	sub	sp, #40	; 0x28
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	431a      	orrs	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	431a      	orrs	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	4313      	orrs	r3, r2
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4bb4      	ldr	r3, [pc, #720]	; (8005318 <UART_SetConfig+0x300>)
 8005048:	4013      	ands	r3, r2
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	6812      	ldr	r2, [r2, #0]
 800504e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005050:	430b      	orrs	r3, r1
 8005052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4aa9      	ldr	r2, [pc, #676]	; (800531c <UART_SetConfig+0x304>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005080:	4313      	orrs	r3, r2
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005094:	430a      	orrs	r2, r1
 8005096:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4aa0      	ldr	r2, [pc, #640]	; (8005320 <UART_SetConfig+0x308>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d126      	bne.n	80050f0 <UART_SetConfig+0xd8>
 80050a2:	4ba0      	ldr	r3, [pc, #640]	; (8005324 <UART_SetConfig+0x30c>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d81b      	bhi.n	80050e8 <UART_SetConfig+0xd0>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0xa0>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ce:	e080      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d6:	e07c      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050de:	e078      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e6:	e074      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ee:	e070      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a8c      	ldr	r2, [pc, #560]	; (8005328 <UART_SetConfig+0x310>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d138      	bne.n	800516c <UART_SetConfig+0x154>
 80050fa:	4b8a      	ldr	r3, [pc, #552]	; (8005324 <UART_SetConfig+0x30c>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b0c      	cmp	r3, #12
 8005106:	d82d      	bhi.n	8005164 <UART_SetConfig+0x14c>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0xf8>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005145 	.word	0x08005145
 8005114:	08005165 	.word	0x08005165
 8005118:	08005165 	.word	0x08005165
 800511c:	08005165 	.word	0x08005165
 8005120:	08005155 	.word	0x08005155
 8005124:	08005165 	.word	0x08005165
 8005128:	08005165 	.word	0x08005165
 800512c:	08005165 	.word	0x08005165
 8005130:	0800514d 	.word	0x0800514d
 8005134:	08005165 	.word	0x08005165
 8005138:	08005165 	.word	0x08005165
 800513c:	08005165 	.word	0x08005165
 8005140:	0800515d 	.word	0x0800515d
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e042      	b.n	80051d2 <UART_SetConfig+0x1ba>
 800514c:	2302      	movs	r3, #2
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e03e      	b.n	80051d2 <UART_SetConfig+0x1ba>
 8005154:	2304      	movs	r3, #4
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e03a      	b.n	80051d2 <UART_SetConfig+0x1ba>
 800515c:	2308      	movs	r3, #8
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e036      	b.n	80051d2 <UART_SetConfig+0x1ba>
 8005164:	2310      	movs	r3, #16
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e032      	b.n	80051d2 <UART_SetConfig+0x1ba>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a6a      	ldr	r2, [pc, #424]	; (800531c <UART_SetConfig+0x304>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d12a      	bne.n	80051cc <UART_SetConfig+0x1b4>
 8005176:	4b6b      	ldr	r3, [pc, #428]	; (8005324 <UART_SetConfig+0x30c>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005180:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005184:	d01a      	beq.n	80051bc <UART_SetConfig+0x1a4>
 8005186:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800518a:	d81b      	bhi.n	80051c4 <UART_SetConfig+0x1ac>
 800518c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005190:	d00c      	beq.n	80051ac <UART_SetConfig+0x194>
 8005192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005196:	d815      	bhi.n	80051c4 <UART_SetConfig+0x1ac>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <UART_SetConfig+0x18c>
 800519c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a0:	d008      	beq.n	80051b4 <UART_SetConfig+0x19c>
 80051a2:	e00f      	b.n	80051c4 <UART_SetConfig+0x1ac>
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051aa:	e012      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80051ac:	2302      	movs	r3, #2
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b2:	e00e      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80051b4:	2304      	movs	r3, #4
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ba:	e00a      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80051bc:	2308      	movs	r3, #8
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e006      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e002      	b.n	80051d2 <UART_SetConfig+0x1ba>
 80051cc:	2310      	movs	r3, #16
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a51      	ldr	r2, [pc, #324]	; (800531c <UART_SetConfig+0x304>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d17a      	bne.n	80052d2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d824      	bhi.n	800522e <UART_SetConfig+0x216>
 80051e4:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0x1d4>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005211 	.word	0x08005211
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	08005219 	.word	0x08005219
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800521f 	.word	0x0800521f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	0800522f 	.word	0x0800522f
 8005208:	0800522f 	.word	0x0800522f
 800520c:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f7ff f97a 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 8005214:	61f8      	str	r0, [r7, #28]
        break;
 8005216:	e010      	b.n	800523a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b44      	ldr	r3, [pc, #272]	; (800532c <UART_SetConfig+0x314>)
 800521a:	61fb      	str	r3, [r7, #28]
        break;
 800521c:	e00d      	b.n	800523a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7ff f8db 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8005222:	61f8      	str	r0, [r7, #28]
        break;
 8005224:	e009      	b.n	800523a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	61fb      	str	r3, [r7, #28]
        break;
 800522c:	e005      	b.n	800523a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8107 	beq.w	8005450 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4413      	add	r3, r2
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	429a      	cmp	r2, r3
 8005250:	d305      	bcc.n	800525e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	429a      	cmp	r2, r3
 800525c:	d903      	bls.n	8005266 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005264:	e0f4      	b.n	8005450 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2200      	movs	r2, #0
 800526a:	461c      	mov	r4, r3
 800526c:	4615      	mov	r5, r2
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	022b      	lsls	r3, r5, #8
 8005278:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800527c:	0222      	lsls	r2, r4, #8
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	6849      	ldr	r1, [r1, #4]
 8005282:	0849      	lsrs	r1, r1, #1
 8005284:	2000      	movs	r0, #0
 8005286:	4688      	mov	r8, r1
 8005288:	4681      	mov	r9, r0
 800528a:	eb12 0a08 	adds.w	sl, r2, r8
 800528e:	eb43 0b09 	adc.w	fp, r3, r9
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a0:	4650      	mov	r0, sl
 80052a2:	4659      	mov	r1, fp
 80052a4:	f7fb fcd0 	bl	8000c48 <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4613      	mov	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b6:	d308      	bcc.n	80052ca <UART_SetConfig+0x2b2>
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052be:	d204      	bcs.n	80052ca <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	60da      	str	r2, [r3, #12]
 80052c8:	e0c2      	b.n	8005450 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052d0:	e0be      	b.n	8005450 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052da:	d16a      	bne.n	80053b2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80052dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d834      	bhi.n	800534e <UART_SetConfig+0x336>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <UART_SetConfig+0x2d4>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005331 	.word	0x08005331
 80052f4:	08005339 	.word	0x08005339
 80052f8:	0800534f 	.word	0x0800534f
 80052fc:	0800533f 	.word	0x0800533f
 8005300:	0800534f 	.word	0x0800534f
 8005304:	0800534f 	.word	0x0800534f
 8005308:	0800534f 	.word	0x0800534f
 800530c:	08005347 	.word	0x08005347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005310:	f7ff f8fa 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 8005314:	61f8      	str	r0, [r7, #28]
        break;
 8005316:	e020      	b.n	800535a <UART_SetConfig+0x342>
 8005318:	efff69f3 	.word	0xefff69f3
 800531c:	40008000 	.word	0x40008000
 8005320:	40013800 	.word	0x40013800
 8005324:	40021000 	.word	0x40021000
 8005328:	40004400 	.word	0x40004400
 800532c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005330:	f7ff f900 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 8005334:	61f8      	str	r0, [r7, #28]
        break;
 8005336:	e010      	b.n	800535a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005338:	4b4c      	ldr	r3, [pc, #304]	; (800546c <UART_SetConfig+0x454>)
 800533a:	61fb      	str	r3, [r7, #28]
        break;
 800533c:	e00d      	b.n	800535a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533e:	f7ff f84b 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8005342:	61f8      	str	r0, [r7, #28]
        break;
 8005344:	e009      	b.n	800535a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534a:	61fb      	str	r3, [r7, #28]
        break;
 800534c:	e005      	b.n	800535a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d077      	beq.n	8005450 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	005a      	lsls	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	085b      	lsrs	r3, r3, #1
 800536a:	441a      	add	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b0f      	cmp	r3, #15
 800537a:	d916      	bls.n	80053aa <UART_SetConfig+0x392>
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005382:	d212      	bcs.n	80053aa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f023 030f 	bic.w	r3, r3, #15
 800538c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	b29b      	uxth	r3, r3
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	b29a      	uxth	r2, r3
 800539a:	8afb      	ldrh	r3, [r7, #22]
 800539c:	4313      	orrs	r3, r2
 800539e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	8afa      	ldrh	r2, [r7, #22]
 80053a6:	60da      	str	r2, [r3, #12]
 80053a8:	e052      	b.n	8005450 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053b0:	e04e      	b.n	8005450 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d827      	bhi.n	800540a <UART_SetConfig+0x3f2>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <UART_SetConfig+0x3a8>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	080053ed 	.word	0x080053ed
 80053c8:	080053f5 	.word	0x080053f5
 80053cc:	0800540b 	.word	0x0800540b
 80053d0:	080053fb 	.word	0x080053fb
 80053d4:	0800540b 	.word	0x0800540b
 80053d8:	0800540b 	.word	0x0800540b
 80053dc:	0800540b 	.word	0x0800540b
 80053e0:	08005403 	.word	0x08005403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e4:	f7ff f890 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 80053e8:	61f8      	str	r0, [r7, #28]
        break;
 80053ea:	e014      	b.n	8005416 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ec:	f7ff f8a2 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 80053f0:	61f8      	str	r0, [r7, #28]
        break;
 80053f2:	e010      	b.n	8005416 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <UART_SetConfig+0x454>)
 80053f6:	61fb      	str	r3, [r7, #28]
        break;
 80053f8:	e00d      	b.n	8005416 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053fa:	f7fe ffed 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 80053fe:	61f8      	str	r0, [r7, #28]
        break;
 8005400:	e009      	b.n	8005416 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005406:	61fb      	str	r3, [r7, #28]
        break;
 8005408:	e005      	b.n	8005416 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005414:	bf00      	nop
    }

    if (pclk != 0U)
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d019      	beq.n	8005450 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	085a      	lsrs	r2, r3, #1
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	441a      	add	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	fbb2 f3f3 	udiv	r3, r2, r3
 800542e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b0f      	cmp	r3, #15
 8005434:	d909      	bls.n	800544a <UART_SetConfig+0x432>
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543c:	d205      	bcs.n	800544a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	e002      	b.n	8005450 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800545c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005460:	4618      	mov	r0, r3
 8005462:	3728      	adds	r7, #40	; 0x28
 8005464:	46bd      	mov	sp, r7
 8005466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800546a:	bf00      	nop
 800546c:	00f42400 	.word	0x00f42400

08005470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01a      	beq.n	8005586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800556e:	d10a      	bne.n	8005586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
  }
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055c4:	f7fd f8c2 	bl	800274c <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d10e      	bne.n	80055f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f82d 	bl	8005646 <UART_WaitOnFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e023      	b.n	800563e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d10e      	bne.n	8005622 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f817 	bl	8005646 <UART_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e00d      	b.n	800563e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b09c      	sub	sp, #112	; 0x70
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	4613      	mov	r3, r2
 8005654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005656:	e0a5      	b.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	f000 80a1 	beq.w	80057a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005662:	f7fd f873 	bl	800274c <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800566e:	429a      	cmp	r2, r3
 8005670:	d302      	bcc.n	8005678 <UART_WaitOnFlagUntilTimeout+0x32>
 8005672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005674:	2b00      	cmp	r3, #0
 8005676:	d13e      	bne.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800568c:	667b      	str	r3, [r7, #100]	; 0x64
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005696:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005698:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800569c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e6      	bne.n	8005678 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	663b      	str	r3, [r7, #96]	; 0x60
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3308      	adds	r3, #8
 80056c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80056cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e5      	bne.n	80056aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e067      	b.n	80057c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d04f      	beq.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800570e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005712:	d147      	bne.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800571c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
 800573e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e6      	bne.n	800571e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	613b      	str	r3, [r7, #16]
   return(result);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	66bb      	str	r3, [r7, #104]	; 0x68
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005770:	623a      	str	r2, [r7, #32]
 8005772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	69f9      	ldr	r1, [r7, #28]
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	61bb      	str	r3, [r7, #24]
   return(result);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e5      	bne.n	8005750 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e010      	b.n	80057c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	bf0c      	ite	eq
 80057b4:	2301      	moveq	r3, #1
 80057b6:	2300      	movne	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	429a      	cmp	r2, r3
 80057c0:	f43f af4a 	beq.w	8005658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3770      	adds	r7, #112	; 0x70
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <__errno>:
 80057d0:	4b01      	ldr	r3, [pc, #4]	; (80057d8 <__errno+0x8>)
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000044 	.word	0x20000044

080057dc <__libc_init_array>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	4d0d      	ldr	r5, [pc, #52]	; (8005814 <__libc_init_array+0x38>)
 80057e0:	4c0d      	ldr	r4, [pc, #52]	; (8005818 <__libc_init_array+0x3c>)
 80057e2:	1b64      	subs	r4, r4, r5
 80057e4:	10a4      	asrs	r4, r4, #2
 80057e6:	2600      	movs	r6, #0
 80057e8:	42a6      	cmp	r6, r4
 80057ea:	d109      	bne.n	8005800 <__libc_init_array+0x24>
 80057ec:	4d0b      	ldr	r5, [pc, #44]	; (800581c <__libc_init_array+0x40>)
 80057ee:	4c0c      	ldr	r4, [pc, #48]	; (8005820 <__libc_init_array+0x44>)
 80057f0:	f002 ff02 	bl	80085f8 <_init>
 80057f4:	1b64      	subs	r4, r4, r5
 80057f6:	10a4      	asrs	r4, r4, #2
 80057f8:	2600      	movs	r6, #0
 80057fa:	42a6      	cmp	r6, r4
 80057fc:	d105      	bne.n	800580a <__libc_init_array+0x2e>
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	f855 3b04 	ldr.w	r3, [r5], #4
 8005804:	4798      	blx	r3
 8005806:	3601      	adds	r6, #1
 8005808:	e7ee      	b.n	80057e8 <__libc_init_array+0xc>
 800580a:	f855 3b04 	ldr.w	r3, [r5], #4
 800580e:	4798      	blx	r3
 8005810:	3601      	adds	r6, #1
 8005812:	e7f2      	b.n	80057fa <__libc_init_array+0x1e>
 8005814:	08008a64 	.word	0x08008a64
 8005818:	08008a64 	.word	0x08008a64
 800581c:	08008a64 	.word	0x08008a64
 8005820:	08008a68 	.word	0x08008a68

08005824 <memset>:
 8005824:	4402      	add	r2, r0
 8005826:	4603      	mov	r3, r0
 8005828:	4293      	cmp	r3, r2
 800582a:	d100      	bne.n	800582e <memset+0xa>
 800582c:	4770      	bx	lr
 800582e:	f803 1b01 	strb.w	r1, [r3], #1
 8005832:	e7f9      	b.n	8005828 <memset+0x4>

08005834 <__cvt>:
 8005834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	ec55 4b10 	vmov	r4, r5, d0
 800583c:	2d00      	cmp	r5, #0
 800583e:	460e      	mov	r6, r1
 8005840:	4619      	mov	r1, r3
 8005842:	462b      	mov	r3, r5
 8005844:	bfbb      	ittet	lt
 8005846:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800584a:	461d      	movlt	r5, r3
 800584c:	2300      	movge	r3, #0
 800584e:	232d      	movlt	r3, #45	; 0x2d
 8005850:	700b      	strb	r3, [r1, #0]
 8005852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005854:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005858:	4691      	mov	r9, r2
 800585a:	f023 0820 	bic.w	r8, r3, #32
 800585e:	bfbc      	itt	lt
 8005860:	4622      	movlt	r2, r4
 8005862:	4614      	movlt	r4, r2
 8005864:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005868:	d005      	beq.n	8005876 <__cvt+0x42>
 800586a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800586e:	d100      	bne.n	8005872 <__cvt+0x3e>
 8005870:	3601      	adds	r6, #1
 8005872:	2102      	movs	r1, #2
 8005874:	e000      	b.n	8005878 <__cvt+0x44>
 8005876:	2103      	movs	r1, #3
 8005878:	ab03      	add	r3, sp, #12
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	ab02      	add	r3, sp, #8
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	ec45 4b10 	vmov	d0, r4, r5
 8005884:	4653      	mov	r3, sl
 8005886:	4632      	mov	r2, r6
 8005888:	f000 fcea 	bl	8006260 <_dtoa_r>
 800588c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005890:	4607      	mov	r7, r0
 8005892:	d102      	bne.n	800589a <__cvt+0x66>
 8005894:	f019 0f01 	tst.w	r9, #1
 8005898:	d022      	beq.n	80058e0 <__cvt+0xac>
 800589a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800589e:	eb07 0906 	add.w	r9, r7, r6
 80058a2:	d110      	bne.n	80058c6 <__cvt+0x92>
 80058a4:	783b      	ldrb	r3, [r7, #0]
 80058a6:	2b30      	cmp	r3, #48	; 0x30
 80058a8:	d10a      	bne.n	80058c0 <__cvt+0x8c>
 80058aa:	2200      	movs	r2, #0
 80058ac:	2300      	movs	r3, #0
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fb f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80058b6:	b918      	cbnz	r0, 80058c0 <__cvt+0x8c>
 80058b8:	f1c6 0601 	rsb	r6, r6, #1
 80058bc:	f8ca 6000 	str.w	r6, [sl]
 80058c0:	f8da 3000 	ldr.w	r3, [sl]
 80058c4:	4499      	add	r9, r3
 80058c6:	2200      	movs	r2, #0
 80058c8:	2300      	movs	r3, #0
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fb f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80058d2:	b108      	cbz	r0, 80058d8 <__cvt+0xa4>
 80058d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80058d8:	2230      	movs	r2, #48	; 0x30
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	454b      	cmp	r3, r9
 80058de:	d307      	bcc.n	80058f0 <__cvt+0xbc>
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058e4:	1bdb      	subs	r3, r3, r7
 80058e6:	4638      	mov	r0, r7
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	b004      	add	sp, #16
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	9103      	str	r1, [sp, #12]
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e7f0      	b.n	80058da <__cvt+0xa6>

080058f8 <__exponent>:
 80058f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058fa:	4603      	mov	r3, r0
 80058fc:	2900      	cmp	r1, #0
 80058fe:	bfb8      	it	lt
 8005900:	4249      	neglt	r1, r1
 8005902:	f803 2b02 	strb.w	r2, [r3], #2
 8005906:	bfb4      	ite	lt
 8005908:	222d      	movlt	r2, #45	; 0x2d
 800590a:	222b      	movge	r2, #43	; 0x2b
 800590c:	2909      	cmp	r1, #9
 800590e:	7042      	strb	r2, [r0, #1]
 8005910:	dd2a      	ble.n	8005968 <__exponent+0x70>
 8005912:	f10d 0407 	add.w	r4, sp, #7
 8005916:	46a4      	mov	ip, r4
 8005918:	270a      	movs	r7, #10
 800591a:	46a6      	mov	lr, r4
 800591c:	460a      	mov	r2, r1
 800591e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005922:	fb07 1516 	mls	r5, r7, r6, r1
 8005926:	3530      	adds	r5, #48	; 0x30
 8005928:	2a63      	cmp	r2, #99	; 0x63
 800592a:	f104 34ff 	add.w	r4, r4, #4294967295
 800592e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005932:	4631      	mov	r1, r6
 8005934:	dcf1      	bgt.n	800591a <__exponent+0x22>
 8005936:	3130      	adds	r1, #48	; 0x30
 8005938:	f1ae 0502 	sub.w	r5, lr, #2
 800593c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005940:	1c44      	adds	r4, r0, #1
 8005942:	4629      	mov	r1, r5
 8005944:	4561      	cmp	r1, ip
 8005946:	d30a      	bcc.n	800595e <__exponent+0x66>
 8005948:	f10d 0209 	add.w	r2, sp, #9
 800594c:	eba2 020e 	sub.w	r2, r2, lr
 8005950:	4565      	cmp	r5, ip
 8005952:	bf88      	it	hi
 8005954:	2200      	movhi	r2, #0
 8005956:	4413      	add	r3, r2
 8005958:	1a18      	subs	r0, r3, r0
 800595a:	b003      	add	sp, #12
 800595c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005962:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005966:	e7ed      	b.n	8005944 <__exponent+0x4c>
 8005968:	2330      	movs	r3, #48	; 0x30
 800596a:	3130      	adds	r1, #48	; 0x30
 800596c:	7083      	strb	r3, [r0, #2]
 800596e:	70c1      	strb	r1, [r0, #3]
 8005970:	1d03      	adds	r3, r0, #4
 8005972:	e7f1      	b.n	8005958 <__exponent+0x60>

08005974 <_printf_float>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	ed2d 8b02 	vpush	{d8}
 800597c:	b08d      	sub	sp, #52	; 0x34
 800597e:	460c      	mov	r4, r1
 8005980:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005984:	4616      	mov	r6, r2
 8005986:	461f      	mov	r7, r3
 8005988:	4605      	mov	r5, r0
 800598a:	f001 fa57 	bl	8006e3c <_localeconv_r>
 800598e:	f8d0 a000 	ldr.w	sl, [r0]
 8005992:	4650      	mov	r0, sl
 8005994:	f7fa fc1c 	bl	80001d0 <strlen>
 8005998:	2300      	movs	r3, #0
 800599a:	930a      	str	r3, [sp, #40]	; 0x28
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	9305      	str	r3, [sp, #20]
 80059a0:	f8d8 3000 	ldr.w	r3, [r8]
 80059a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059a8:	3307      	adds	r3, #7
 80059aa:	f023 0307 	bic.w	r3, r3, #7
 80059ae:	f103 0208 	add.w	r2, r3, #8
 80059b2:	f8c8 2000 	str.w	r2, [r8]
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059c6:	9307      	str	r3, [sp, #28]
 80059c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80059cc:	ee08 0a10 	vmov	s16, r0
 80059d0:	4b9f      	ldr	r3, [pc, #636]	; (8005c50 <_printf_float+0x2dc>)
 80059d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059d6:	f04f 32ff 	mov.w	r2, #4294967295
 80059da:	f7fb f8a7 	bl	8000b2c <__aeabi_dcmpun>
 80059de:	bb88      	cbnz	r0, 8005a44 <_printf_float+0xd0>
 80059e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059e4:	4b9a      	ldr	r3, [pc, #616]	; (8005c50 <_printf_float+0x2dc>)
 80059e6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ea:	f7fb f881 	bl	8000af0 <__aeabi_dcmple>
 80059ee:	bb48      	cbnz	r0, 8005a44 <_printf_float+0xd0>
 80059f0:	2200      	movs	r2, #0
 80059f2:	2300      	movs	r3, #0
 80059f4:	4640      	mov	r0, r8
 80059f6:	4649      	mov	r1, r9
 80059f8:	f7fb f870 	bl	8000adc <__aeabi_dcmplt>
 80059fc:	b110      	cbz	r0, 8005a04 <_printf_float+0x90>
 80059fe:	232d      	movs	r3, #45	; 0x2d
 8005a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a04:	4b93      	ldr	r3, [pc, #588]	; (8005c54 <_printf_float+0x2e0>)
 8005a06:	4894      	ldr	r0, [pc, #592]	; (8005c58 <_printf_float+0x2e4>)
 8005a08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a0c:	bf94      	ite	ls
 8005a0e:	4698      	movls	r8, r3
 8005a10:	4680      	movhi	r8, r0
 8005a12:	2303      	movs	r3, #3
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	9b05      	ldr	r3, [sp, #20]
 8005a18:	f023 0204 	bic.w	r2, r3, #4
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	f04f 0900 	mov.w	r9, #0
 8005a22:	9700      	str	r7, [sp, #0]
 8005a24:	4633      	mov	r3, r6
 8005a26:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f9d8 	bl	8005de0 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	f040 8090 	bne.w	8005b56 <_printf_float+0x1e2>
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3a:	b00d      	add	sp, #52	; 0x34
 8005a3c:	ecbd 8b02 	vpop	{d8}
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	4640      	mov	r0, r8
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	f7fb f86e 	bl	8000b2c <__aeabi_dcmpun>
 8005a50:	b140      	cbz	r0, 8005a64 <_printf_float+0xf0>
 8005a52:	464b      	mov	r3, r9
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bfbc      	itt	lt
 8005a58:	232d      	movlt	r3, #45	; 0x2d
 8005a5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a5e:	487f      	ldr	r0, [pc, #508]	; (8005c5c <_printf_float+0x2e8>)
 8005a60:	4b7f      	ldr	r3, [pc, #508]	; (8005c60 <_printf_float+0x2ec>)
 8005a62:	e7d1      	b.n	8005a08 <_printf_float+0x94>
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a6a:	9206      	str	r2, [sp, #24]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	d13f      	bne.n	8005af0 <_printf_float+0x17c>
 8005a70:	2306      	movs	r3, #6
 8005a72:	6063      	str	r3, [r4, #4]
 8005a74:	9b05      	ldr	r3, [sp, #20]
 8005a76:	6861      	ldr	r1, [r4, #4]
 8005a78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9303      	str	r3, [sp, #12]
 8005a80:	ab0a      	add	r3, sp, #40	; 0x28
 8005a82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a86:	ab09      	add	r3, sp, #36	; 0x24
 8005a88:	ec49 8b10 	vmov	d0, r8, r9
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	6022      	str	r2, [r4, #0]
 8005a90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a94:	4628      	mov	r0, r5
 8005a96:	f7ff fecd 	bl	8005834 <__cvt>
 8005a9a:	9b06      	ldr	r3, [sp, #24]
 8005a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a9e:	2b47      	cmp	r3, #71	; 0x47
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	d108      	bne.n	8005ab6 <_printf_float+0x142>
 8005aa4:	1cc8      	adds	r0, r1, #3
 8005aa6:	db02      	blt.n	8005aae <_printf_float+0x13a>
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	dd41      	ble.n	8005b32 <_printf_float+0x1be>
 8005aae:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ab2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ab6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aba:	d820      	bhi.n	8005afe <_printf_float+0x18a>
 8005abc:	3901      	subs	r1, #1
 8005abe:	465a      	mov	r2, fp
 8005ac0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ac4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ac6:	f7ff ff17 	bl	80058f8 <__exponent>
 8005aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005acc:	1813      	adds	r3, r2, r0
 8005ace:	2a01      	cmp	r2, #1
 8005ad0:	4681      	mov	r9, r0
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	dc02      	bgt.n	8005adc <_printf_float+0x168>
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	07d2      	lsls	r2, r2, #31
 8005ada:	d501      	bpl.n	8005ae0 <_printf_float+0x16c>
 8005adc:	3301      	adds	r3, #1
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d09c      	beq.n	8005a22 <_printf_float+0xae>
 8005ae8:	232d      	movs	r3, #45	; 0x2d
 8005aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aee:	e798      	b.n	8005a22 <_printf_float+0xae>
 8005af0:	9a06      	ldr	r2, [sp, #24]
 8005af2:	2a47      	cmp	r2, #71	; 0x47
 8005af4:	d1be      	bne.n	8005a74 <_printf_float+0x100>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1bc      	bne.n	8005a74 <_printf_float+0x100>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e7b9      	b.n	8005a72 <_printf_float+0xfe>
 8005afe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b02:	d118      	bne.n	8005b36 <_printf_float+0x1c2>
 8005b04:	2900      	cmp	r1, #0
 8005b06:	6863      	ldr	r3, [r4, #4]
 8005b08:	dd0b      	ble.n	8005b22 <_printf_float+0x1ae>
 8005b0a:	6121      	str	r1, [r4, #16]
 8005b0c:	b913      	cbnz	r3, 8005b14 <_printf_float+0x1a0>
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	07d0      	lsls	r0, r2, #31
 8005b12:	d502      	bpl.n	8005b1a <_printf_float+0x1a6>
 8005b14:	3301      	adds	r3, #1
 8005b16:	440b      	add	r3, r1
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b1c:	f04f 0900 	mov.w	r9, #0
 8005b20:	e7de      	b.n	8005ae0 <_printf_float+0x16c>
 8005b22:	b913      	cbnz	r3, 8005b2a <_printf_float+0x1b6>
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	07d2      	lsls	r2, r2, #31
 8005b28:	d501      	bpl.n	8005b2e <_printf_float+0x1ba>
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	e7f4      	b.n	8005b18 <_printf_float+0x1a4>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e7f2      	b.n	8005b18 <_printf_float+0x1a4>
 8005b32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	db05      	blt.n	8005b48 <_printf_float+0x1d4>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	6121      	str	r1, [r4, #16]
 8005b40:	07d8      	lsls	r0, r3, #31
 8005b42:	d5ea      	bpl.n	8005b1a <_printf_float+0x1a6>
 8005b44:	1c4b      	adds	r3, r1, #1
 8005b46:	e7e7      	b.n	8005b18 <_printf_float+0x1a4>
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	bfd4      	ite	le
 8005b4c:	f1c1 0202 	rsble	r2, r1, #2
 8005b50:	2201      	movgt	r2, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	e7e0      	b.n	8005b18 <_printf_float+0x1a4>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	055a      	lsls	r2, r3, #21
 8005b5a:	d407      	bmi.n	8005b6c <_printf_float+0x1f8>
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	4642      	mov	r2, r8
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	d12c      	bne.n	8005bc4 <_printf_float+0x250>
 8005b6a:	e764      	b.n	8005a36 <_printf_float+0xc2>
 8005b6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b70:	f240 80e0 	bls.w	8005d34 <_printf_float+0x3c0>
 8005b74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f7fa ffa4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d034      	beq.n	8005bee <_printf_float+0x27a>
 8005b84:	4a37      	ldr	r2, [pc, #220]	; (8005c64 <_printf_float+0x2f0>)
 8005b86:	2301      	movs	r3, #1
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f af51 	beq.w	8005a36 <_printf_float+0xc2>
 8005b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	db02      	blt.n	8005ba2 <_printf_float+0x22e>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	07d8      	lsls	r0, r3, #31
 8005ba0:	d510      	bpl.n	8005bc4 <_printf_float+0x250>
 8005ba2:	ee18 3a10 	vmov	r3, s16
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f af41 	beq.w	8005a36 <_printf_float+0xc2>
 8005bb4:	f04f 0800 	mov.w	r8, #0
 8005bb8:	f104 091a 	add.w	r9, r4, #26
 8005bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4543      	cmp	r3, r8
 8005bc2:	dc09      	bgt.n	8005bd8 <_printf_float+0x264>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	079b      	lsls	r3, r3, #30
 8005bc8:	f100 8105 	bmi.w	8005dd6 <_printf_float+0x462>
 8005bcc:	68e0      	ldr	r0, [r4, #12]
 8005bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd0:	4298      	cmp	r0, r3
 8005bd2:	bfb8      	it	lt
 8005bd4:	4618      	movlt	r0, r3
 8005bd6:	e730      	b.n	8005a3a <_printf_float+0xc6>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	464a      	mov	r2, r9
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f af27 	beq.w	8005a36 <_printf_float+0xc2>
 8005be8:	f108 0801 	add.w	r8, r8, #1
 8005bec:	e7e6      	b.n	8005bbc <_printf_float+0x248>
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc39      	bgt.n	8005c68 <_printf_float+0x2f4>
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <_printf_float+0x2f0>)
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f af19 	beq.w	8005a36 <_printf_float+0xc2>
 8005c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	d102      	bne.n	8005c12 <_printf_float+0x29e>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	07d9      	lsls	r1, r3, #31
 8005c10:	d5d8      	bpl.n	8005bc4 <_printf_float+0x250>
 8005c12:	ee18 3a10 	vmov	r3, s16
 8005c16:	4652      	mov	r2, sl
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	f43f af09 	beq.w	8005a36 <_printf_float+0xc2>
 8005c24:	f04f 0900 	mov.w	r9, #0
 8005c28:	f104 0a1a 	add.w	sl, r4, #26
 8005c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2e:	425b      	negs	r3, r3
 8005c30:	454b      	cmp	r3, r9
 8005c32:	dc01      	bgt.n	8005c38 <_printf_float+0x2c4>
 8005c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c36:	e792      	b.n	8005b5e <_printf_float+0x1ea>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4652      	mov	r2, sl
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f aef7 	beq.w	8005a36 <_printf_float+0xc2>
 8005c48:	f109 0901 	add.w	r9, r9, #1
 8005c4c:	e7ee      	b.n	8005c2c <_printf_float+0x2b8>
 8005c4e:	bf00      	nop
 8005c50:	7fefffff 	.word	0x7fefffff
 8005c54:	08008688 	.word	0x08008688
 8005c58:	0800868c 	.word	0x0800868c
 8005c5c:	08008694 	.word	0x08008694
 8005c60:	08008690 	.word	0x08008690
 8005c64:	08008698 	.word	0x08008698
 8005c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	bfa8      	it	ge
 8005c70:	461a      	movge	r2, r3
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	4691      	mov	r9, r2
 8005c76:	dc37      	bgt.n	8005ce8 <_printf_float+0x374>
 8005c78:	f04f 0b00 	mov.w	fp, #0
 8005c7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c80:	f104 021a 	add.w	r2, r4, #26
 8005c84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c86:	9305      	str	r3, [sp, #20]
 8005c88:	eba3 0309 	sub.w	r3, r3, r9
 8005c8c:	455b      	cmp	r3, fp
 8005c8e:	dc33      	bgt.n	8005cf8 <_printf_float+0x384>
 8005c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c94:	429a      	cmp	r2, r3
 8005c96:	db3b      	blt.n	8005d10 <_printf_float+0x39c>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	07da      	lsls	r2, r3, #31
 8005c9c:	d438      	bmi.n	8005d10 <_printf_float+0x39c>
 8005c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca0:	9a05      	ldr	r2, [sp, #20]
 8005ca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ca4:	1a9a      	subs	r2, r3, r2
 8005ca6:	eba3 0901 	sub.w	r9, r3, r1
 8005caa:	4591      	cmp	r9, r2
 8005cac:	bfa8      	it	ge
 8005cae:	4691      	movge	r9, r2
 8005cb0:	f1b9 0f00 	cmp.w	r9, #0
 8005cb4:	dc35      	bgt.n	8005d22 <_printf_float+0x3ae>
 8005cb6:	f04f 0800 	mov.w	r8, #0
 8005cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cbe:	f104 0a1a 	add.w	sl, r4, #26
 8005cc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	eba3 0309 	sub.w	r3, r3, r9
 8005ccc:	4543      	cmp	r3, r8
 8005cce:	f77f af79 	ble.w	8005bc4 <_printf_float+0x250>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f aeaa 	beq.w	8005a36 <_printf_float+0xc2>
 8005ce2:	f108 0801 	add.w	r8, r8, #1
 8005ce6:	e7ec      	b.n	8005cc2 <_printf_float+0x34e>
 8005ce8:	4613      	mov	r3, r2
 8005cea:	4631      	mov	r1, r6
 8005cec:	4642      	mov	r2, r8
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d1c0      	bne.n	8005c78 <_printf_float+0x304>
 8005cf6:	e69e      	b.n	8005a36 <_printf_float+0xc2>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	9205      	str	r2, [sp, #20]
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f ae97 	beq.w	8005a36 <_printf_float+0xc2>
 8005d08:	9a05      	ldr	r2, [sp, #20]
 8005d0a:	f10b 0b01 	add.w	fp, fp, #1
 8005d0e:	e7b9      	b.n	8005c84 <_printf_float+0x310>
 8005d10:	ee18 3a10 	vmov	r3, s16
 8005d14:	4652      	mov	r2, sl
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d1be      	bne.n	8005c9e <_printf_float+0x32a>
 8005d20:	e689      	b.n	8005a36 <_printf_float+0xc2>
 8005d22:	9a05      	ldr	r2, [sp, #20]
 8005d24:	464b      	mov	r3, r9
 8005d26:	4442      	add	r2, r8
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d1c1      	bne.n	8005cb6 <_printf_float+0x342>
 8005d32:	e680      	b.n	8005a36 <_printf_float+0xc2>
 8005d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d36:	2a01      	cmp	r2, #1
 8005d38:	dc01      	bgt.n	8005d3e <_printf_float+0x3ca>
 8005d3a:	07db      	lsls	r3, r3, #31
 8005d3c:	d538      	bpl.n	8005db0 <_printf_float+0x43c>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4642      	mov	r2, r8
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f ae74 	beq.w	8005a36 <_printf_float+0xc2>
 8005d4e:	ee18 3a10 	vmov	r3, s16
 8005d52:	4652      	mov	r2, sl
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f ae6b 	beq.w	8005a36 <_printf_float+0xc2>
 8005d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	f7fa feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d6c:	b9d8      	cbnz	r0, 8005da6 <_printf_float+0x432>
 8005d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d70:	f108 0201 	add.w	r2, r8, #1
 8005d74:	3b01      	subs	r3, #1
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d10e      	bne.n	8005d9e <_printf_float+0x42a>
 8005d80:	e659      	b.n	8005a36 <_printf_float+0xc2>
 8005d82:	2301      	movs	r3, #1
 8005d84:	4652      	mov	r2, sl
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	f43f ae52 	beq.w	8005a36 <_printf_float+0xc2>
 8005d92:	f108 0801 	add.w	r8, r8, #1
 8005d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	4543      	cmp	r3, r8
 8005d9c:	dcf1      	bgt.n	8005d82 <_printf_float+0x40e>
 8005d9e:	464b      	mov	r3, r9
 8005da0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005da4:	e6dc      	b.n	8005b60 <_printf_float+0x1ec>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	f104 0a1a 	add.w	sl, r4, #26
 8005dae:	e7f2      	b.n	8005d96 <_printf_float+0x422>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4642      	mov	r2, r8
 8005db4:	e7df      	b.n	8005d76 <_printf_float+0x402>
 8005db6:	2301      	movs	r3, #1
 8005db8:	464a      	mov	r2, r9
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f ae38 	beq.w	8005a36 <_printf_float+0xc2>
 8005dc6:	f108 0801 	add.w	r8, r8, #1
 8005dca:	68e3      	ldr	r3, [r4, #12]
 8005dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dce:	1a5b      	subs	r3, r3, r1
 8005dd0:	4543      	cmp	r3, r8
 8005dd2:	dcf0      	bgt.n	8005db6 <_printf_float+0x442>
 8005dd4:	e6fa      	b.n	8005bcc <_printf_float+0x258>
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	f104 0919 	add.w	r9, r4, #25
 8005dde:	e7f4      	b.n	8005dca <_printf_float+0x456>

08005de0 <_printf_common>:
 8005de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	4616      	mov	r6, r2
 8005de6:	4699      	mov	r9, r3
 8005de8:	688a      	ldr	r2, [r1, #8]
 8005dea:	690b      	ldr	r3, [r1, #16]
 8005dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	bfb8      	it	lt
 8005df4:	4613      	movlt	r3, r2
 8005df6:	6033      	str	r3, [r6, #0]
 8005df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	b10a      	cbz	r2, 8005e06 <_printf_common+0x26>
 8005e02:	3301      	adds	r3, #1
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	0699      	lsls	r1, r3, #26
 8005e0a:	bf42      	ittt	mi
 8005e0c:	6833      	ldrmi	r3, [r6, #0]
 8005e0e:	3302      	addmi	r3, #2
 8005e10:	6033      	strmi	r3, [r6, #0]
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	f015 0506 	ands.w	r5, r5, #6
 8005e18:	d106      	bne.n	8005e28 <_printf_common+0x48>
 8005e1a:	f104 0a19 	add.w	sl, r4, #25
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	6832      	ldr	r2, [r6, #0]
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dc26      	bgt.n	8005e76 <_printf_common+0x96>
 8005e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e2c:	1e13      	subs	r3, r2, #0
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	bf18      	it	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	0692      	lsls	r2, r2, #26
 8005e36:	d42b      	bmi.n	8005e90 <_printf_common+0xb0>
 8005e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d01e      	beq.n	8005e84 <_printf_common+0xa4>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	68e5      	ldr	r5, [r4, #12]
 8005e4a:	6832      	ldr	r2, [r6, #0]
 8005e4c:	f003 0306 	and.w	r3, r3, #6
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	bf08      	it	eq
 8005e54:	1aad      	subeq	r5, r5, r2
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	bf0c      	ite	eq
 8005e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e60:	2500      	movne	r5, #0
 8005e62:	4293      	cmp	r3, r2
 8005e64:	bfc4      	itt	gt
 8005e66:	1a9b      	subgt	r3, r3, r2
 8005e68:	18ed      	addgt	r5, r5, r3
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	341a      	adds	r4, #26
 8005e6e:	42b5      	cmp	r5, r6
 8005e70:	d11a      	bne.n	8005ea8 <_printf_common+0xc8>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e008      	b.n	8005e88 <_printf_common+0xa8>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4652      	mov	r2, sl
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	47c0      	blx	r8
 8005e80:	3001      	adds	r0, #1
 8005e82:	d103      	bne.n	8005e8c <_printf_common+0xac>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	e7c6      	b.n	8005e1e <_printf_common+0x3e>
 8005e90:	18e1      	adds	r1, r4, r3
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	2030      	movs	r0, #48	; 0x30
 8005e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9a:	4422      	add	r2, r4
 8005e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	e7c7      	b.n	8005e38 <_printf_common+0x58>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4622      	mov	r2, r4
 8005eac:	4649      	mov	r1, r9
 8005eae:	4638      	mov	r0, r7
 8005eb0:	47c0      	blx	r8
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d0e6      	beq.n	8005e84 <_printf_common+0xa4>
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7d9      	b.n	8005e6e <_printf_common+0x8e>
	...

08005ebc <_printf_i>:
 8005ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec0:	7e0f      	ldrb	r7, [r1, #24]
 8005ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec4:	2f78      	cmp	r7, #120	; 0x78
 8005ec6:	4691      	mov	r9, r2
 8005ec8:	4680      	mov	r8, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	469a      	mov	sl, r3
 8005ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ed2:	d807      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ed4:	2f62      	cmp	r7, #98	; 0x62
 8005ed6:	d80a      	bhi.n	8005eee <_printf_i+0x32>
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	f000 80d8 	beq.w	800608e <_printf_i+0x1d2>
 8005ede:	2f58      	cmp	r7, #88	; 0x58
 8005ee0:	f000 80a3 	beq.w	800602a <_printf_i+0x16e>
 8005ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eec:	e03a      	b.n	8005f64 <_printf_i+0xa8>
 8005eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef2:	2b15      	cmp	r3, #21
 8005ef4:	d8f6      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ef6:	a101      	add	r1, pc, #4	; (adr r1, 8005efc <_printf_i+0x40>)
 8005ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f69 	.word	0x08005f69
 8005f04:	08005ee5 	.word	0x08005ee5
 8005f08:	08005ee5 	.word	0x08005ee5
 8005f0c:	08005ee5 	.word	0x08005ee5
 8005f10:	08005ee5 	.word	0x08005ee5
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005ee5 	.word	0x08005ee5
 8005f1c:	08005ee5 	.word	0x08005ee5
 8005f20:	08005ee5 	.word	0x08005ee5
 8005f24:	08005ee5 	.word	0x08005ee5
 8005f28:	08006075 	.word	0x08006075
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08006057 	.word	0x08006057
 8005f34:	08005ee5 	.word	0x08005ee5
 8005f38:	08005ee5 	.word	0x08005ee5
 8005f3c:	08006097 	.word	0x08006097
 8005f40:	08005ee5 	.word	0x08005ee5
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005ee5 	.word	0x08005ee5
 8005f4c:	08005ee5 	.word	0x08005ee5
 8005f50:	0800605f 	.word	0x0800605f
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	602a      	str	r2, [r5, #0]
 8005f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0a3      	b.n	80060b0 <_printf_i+0x1f4>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	6829      	ldr	r1, [r5, #0]
 8005f6c:	0606      	lsls	r6, r0, #24
 8005f6e:	f101 0304 	add.w	r3, r1, #4
 8005f72:	d50a      	bpl.n	8005f8a <_printf_i+0xce>
 8005f74:	680e      	ldr	r6, [r1, #0]
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	da03      	bge.n	8005f84 <_printf_i+0xc8>
 8005f7c:	232d      	movs	r3, #45	; 0x2d
 8005f7e:	4276      	negs	r6, r6
 8005f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f84:	485e      	ldr	r0, [pc, #376]	; (8006100 <_printf_i+0x244>)
 8005f86:	230a      	movs	r3, #10
 8005f88:	e019      	b.n	8005fbe <_printf_i+0x102>
 8005f8a:	680e      	ldr	r6, [r1, #0]
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f92:	bf18      	it	ne
 8005f94:	b236      	sxthne	r6, r6
 8005f96:	e7ef      	b.n	8005f78 <_printf_i+0xbc>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	6029      	str	r1, [r5, #0]
 8005fa0:	0601      	lsls	r1, r0, #24
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0xec>
 8005fa4:	681e      	ldr	r6, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0xf2>
 8005fa8:	0646      	lsls	r6, r0, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0xe8>
 8005fac:	881e      	ldrh	r6, [r3, #0]
 8005fae:	4854      	ldr	r0, [pc, #336]	; (8006100 <_printf_i+0x244>)
 8005fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2308      	moveq	r3, #8
 8005fb6:	230a      	movne	r3, #10
 8005fb8:	2100      	movs	r1, #0
 8005fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fbe:	6865      	ldr	r5, [r4, #4]
 8005fc0:	60a5      	str	r5, [r4, #8]
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	bfa2      	ittt	ge
 8005fc6:	6821      	ldrge	r1, [r4, #0]
 8005fc8:	f021 0104 	bicge.w	r1, r1, #4
 8005fcc:	6021      	strge	r1, [r4, #0]
 8005fce:	b90e      	cbnz	r6, 8005fd4 <_printf_i+0x118>
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	d04d      	beq.n	8006070 <_printf_i+0x1b4>
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fda:	fb03 6711 	mls	r7, r3, r1, r6
 8005fde:	5dc7      	ldrb	r7, [r0, r7]
 8005fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fe4:	4637      	mov	r7, r6
 8005fe6:	42bb      	cmp	r3, r7
 8005fe8:	460e      	mov	r6, r1
 8005fea:	d9f4      	bls.n	8005fd6 <_printf_i+0x11a>
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d10b      	bne.n	8006008 <_printf_i+0x14c>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07de      	lsls	r6, r3, #31
 8005ff4:	d508      	bpl.n	8006008 <_printf_i+0x14c>
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	6861      	ldr	r1, [r4, #4]
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	bfde      	ittt	le
 8005ffe:	2330      	movle	r3, #48	; 0x30
 8006000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006004:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006008:	1b52      	subs	r2, r2, r5
 800600a:	6122      	str	r2, [r4, #16]
 800600c:	f8cd a000 	str.w	sl, [sp]
 8006010:	464b      	mov	r3, r9
 8006012:	aa03      	add	r2, sp, #12
 8006014:	4621      	mov	r1, r4
 8006016:	4640      	mov	r0, r8
 8006018:	f7ff fee2 	bl	8005de0 <_printf_common>
 800601c:	3001      	adds	r0, #1
 800601e:	d14c      	bne.n	80060ba <_printf_i+0x1fe>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	b004      	add	sp, #16
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	4835      	ldr	r0, [pc, #212]	; (8006100 <_printf_i+0x244>)
 800602c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006030:	6829      	ldr	r1, [r5, #0]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	f851 6b04 	ldr.w	r6, [r1], #4
 8006038:	6029      	str	r1, [r5, #0]
 800603a:	061d      	lsls	r5, r3, #24
 800603c:	d514      	bpl.n	8006068 <_printf_i+0x1ac>
 800603e:	07df      	lsls	r7, r3, #31
 8006040:	bf44      	itt	mi
 8006042:	f043 0320 	orrmi.w	r3, r3, #32
 8006046:	6023      	strmi	r3, [r4, #0]
 8006048:	b91e      	cbnz	r6, 8006052 <_printf_i+0x196>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	f023 0320 	bic.w	r3, r3, #32
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	2310      	movs	r3, #16
 8006054:	e7b0      	b.n	8005fb8 <_printf_i+0xfc>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f043 0320 	orr.w	r3, r3, #32
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	2378      	movs	r3, #120	; 0x78
 8006060:	4828      	ldr	r0, [pc, #160]	; (8006104 <_printf_i+0x248>)
 8006062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006066:	e7e3      	b.n	8006030 <_printf_i+0x174>
 8006068:	0659      	lsls	r1, r3, #25
 800606a:	bf48      	it	mi
 800606c:	b2b6      	uxthmi	r6, r6
 800606e:	e7e6      	b.n	800603e <_printf_i+0x182>
 8006070:	4615      	mov	r5, r2
 8006072:	e7bb      	b.n	8005fec <_printf_i+0x130>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	6826      	ldr	r6, [r4, #0]
 8006078:	6961      	ldr	r1, [r4, #20]
 800607a:	1d18      	adds	r0, r3, #4
 800607c:	6028      	str	r0, [r5, #0]
 800607e:	0635      	lsls	r5, r6, #24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	d501      	bpl.n	8006088 <_printf_i+0x1cc>
 8006084:	6019      	str	r1, [r3, #0]
 8006086:	e002      	b.n	800608e <_printf_i+0x1d2>
 8006088:	0670      	lsls	r0, r6, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0x1c8>
 800608c:	8019      	strh	r1, [r3, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	4615      	mov	r5, r2
 8006094:	e7ba      	b.n	800600c <_printf_i+0x150>
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	602a      	str	r2, [r5, #0]
 800609c:	681d      	ldr	r5, [r3, #0]
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	2100      	movs	r1, #0
 80060a2:	4628      	mov	r0, r5
 80060a4:	f7fa f89c 	bl	80001e0 <memchr>
 80060a8:	b108      	cbz	r0, 80060ae <_printf_i+0x1f2>
 80060aa:	1b40      	subs	r0, r0, r5
 80060ac:	6060      	str	r0, [r4, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	2300      	movs	r3, #0
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b8:	e7a8      	b.n	800600c <_printf_i+0x150>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	462a      	mov	r2, r5
 80060be:	4649      	mov	r1, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	47d0      	blx	sl
 80060c4:	3001      	adds	r0, #1
 80060c6:	d0ab      	beq.n	8006020 <_printf_i+0x164>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	d413      	bmi.n	80060f6 <_printf_i+0x23a>
 80060ce:	68e0      	ldr	r0, [r4, #12]
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	4298      	cmp	r0, r3
 80060d4:	bfb8      	it	lt
 80060d6:	4618      	movlt	r0, r3
 80060d8:	e7a4      	b.n	8006024 <_printf_i+0x168>
 80060da:	2301      	movs	r3, #1
 80060dc:	4632      	mov	r2, r6
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	47d0      	blx	sl
 80060e4:	3001      	adds	r0, #1
 80060e6:	d09b      	beq.n	8006020 <_printf_i+0x164>
 80060e8:	3501      	adds	r5, #1
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	9903      	ldr	r1, [sp, #12]
 80060ee:	1a5b      	subs	r3, r3, r1
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dcf2      	bgt.n	80060da <_printf_i+0x21e>
 80060f4:	e7eb      	b.n	80060ce <_printf_i+0x212>
 80060f6:	2500      	movs	r5, #0
 80060f8:	f104 0619 	add.w	r6, r4, #25
 80060fc:	e7f5      	b.n	80060ea <_printf_i+0x22e>
 80060fe:	bf00      	nop
 8006100:	0800869a 	.word	0x0800869a
 8006104:	080086ab 	.word	0x080086ab

08006108 <siprintf>:
 8006108:	b40e      	push	{r1, r2, r3}
 800610a:	b500      	push	{lr}
 800610c:	b09c      	sub	sp, #112	; 0x70
 800610e:	ab1d      	add	r3, sp, #116	; 0x74
 8006110:	9002      	str	r0, [sp, #8]
 8006112:	9006      	str	r0, [sp, #24]
 8006114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006118:	4809      	ldr	r0, [pc, #36]	; (8006140 <siprintf+0x38>)
 800611a:	9107      	str	r1, [sp, #28]
 800611c:	9104      	str	r1, [sp, #16]
 800611e:	4909      	ldr	r1, [pc, #36]	; (8006144 <siprintf+0x3c>)
 8006120:	f853 2b04 	ldr.w	r2, [r3], #4
 8006124:	9105      	str	r1, [sp, #20]
 8006126:	6800      	ldr	r0, [r0, #0]
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	a902      	add	r1, sp, #8
 800612c:	f001 fb76 	bl	800781c <_svfiprintf_r>
 8006130:	9b02      	ldr	r3, [sp, #8]
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	b01c      	add	sp, #112	; 0x70
 8006138:	f85d eb04 	ldr.w	lr, [sp], #4
 800613c:	b003      	add	sp, #12
 800613e:	4770      	bx	lr
 8006140:	20000044 	.word	0x20000044
 8006144:	ffff0208 	.word	0xffff0208

08006148 <quorem>:
 8006148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	6903      	ldr	r3, [r0, #16]
 800614e:	690c      	ldr	r4, [r1, #16]
 8006150:	42a3      	cmp	r3, r4
 8006152:	4607      	mov	r7, r0
 8006154:	f2c0 8081 	blt.w	800625a <quorem+0x112>
 8006158:	3c01      	subs	r4, #1
 800615a:	f101 0814 	add.w	r8, r1, #20
 800615e:	f100 0514 	add.w	r5, r0, #20
 8006162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800616c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006170:	3301      	adds	r3, #1
 8006172:	429a      	cmp	r2, r3
 8006174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800617c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006180:	d331      	bcc.n	80061e6 <quorem+0x9e>
 8006182:	f04f 0e00 	mov.w	lr, #0
 8006186:	4640      	mov	r0, r8
 8006188:	46ac      	mov	ip, r5
 800618a:	46f2      	mov	sl, lr
 800618c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006190:	b293      	uxth	r3, r2
 8006192:	fb06 e303 	mla	r3, r6, r3, lr
 8006196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800619a:	b29b      	uxth	r3, r3
 800619c:	ebaa 0303 	sub.w	r3, sl, r3
 80061a0:	f8dc a000 	ldr.w	sl, [ip]
 80061a4:	0c12      	lsrs	r2, r2, #16
 80061a6:	fa13 f38a 	uxtah	r3, r3, sl
 80061aa:	fb06 e202 	mla	r2, r6, r2, lr
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	9b00      	ldr	r3, [sp, #0]
 80061b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061b6:	b292      	uxth	r2, r2
 80061b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80061c4:	4581      	cmp	r9, r0
 80061c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ca:	f84c 3b04 	str.w	r3, [ip], #4
 80061ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061d2:	d2db      	bcs.n	800618c <quorem+0x44>
 80061d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80061d8:	b92b      	cbnz	r3, 80061e6 <quorem+0x9e>
 80061da:	9b01      	ldr	r3, [sp, #4]
 80061dc:	3b04      	subs	r3, #4
 80061de:	429d      	cmp	r5, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	d32e      	bcc.n	8006242 <quorem+0xfa>
 80061e4:	613c      	str	r4, [r7, #16]
 80061e6:	4638      	mov	r0, r7
 80061e8:	f001 f8c4 	bl	8007374 <__mcmp>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	db24      	blt.n	800623a <quorem+0xf2>
 80061f0:	3601      	adds	r6, #1
 80061f2:	4628      	mov	r0, r5
 80061f4:	f04f 0c00 	mov.w	ip, #0
 80061f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80061fc:	f8d0 e000 	ldr.w	lr, [r0]
 8006200:	b293      	uxth	r3, r2
 8006202:	ebac 0303 	sub.w	r3, ip, r3
 8006206:	0c12      	lsrs	r2, r2, #16
 8006208:	fa13 f38e 	uxtah	r3, r3, lr
 800620c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006214:	b29b      	uxth	r3, r3
 8006216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800621a:	45c1      	cmp	r9, r8
 800621c:	f840 3b04 	str.w	r3, [r0], #4
 8006220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006224:	d2e8      	bcs.n	80061f8 <quorem+0xb0>
 8006226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800622a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800622e:	b922      	cbnz	r2, 800623a <quorem+0xf2>
 8006230:	3b04      	subs	r3, #4
 8006232:	429d      	cmp	r5, r3
 8006234:	461a      	mov	r2, r3
 8006236:	d30a      	bcc.n	800624e <quorem+0x106>
 8006238:	613c      	str	r4, [r7, #16]
 800623a:	4630      	mov	r0, r6
 800623c:	b003      	add	sp, #12
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	3b04      	subs	r3, #4
 8006246:	2a00      	cmp	r2, #0
 8006248:	d1cc      	bne.n	80061e4 <quorem+0x9c>
 800624a:	3c01      	subs	r4, #1
 800624c:	e7c7      	b.n	80061de <quorem+0x96>
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	3b04      	subs	r3, #4
 8006252:	2a00      	cmp	r2, #0
 8006254:	d1f0      	bne.n	8006238 <quorem+0xf0>
 8006256:	3c01      	subs	r4, #1
 8006258:	e7eb      	b.n	8006232 <quorem+0xea>
 800625a:	2000      	movs	r0, #0
 800625c:	e7ee      	b.n	800623c <quorem+0xf4>
	...

08006260 <_dtoa_r>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	ed2d 8b04 	vpush	{d8-d9}
 8006268:	ec57 6b10 	vmov	r6, r7, d0
 800626c:	b093      	sub	sp, #76	; 0x4c
 800626e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006274:	9106      	str	r1, [sp, #24]
 8006276:	ee10 aa10 	vmov	sl, s0
 800627a:	4604      	mov	r4, r0
 800627c:	9209      	str	r2, [sp, #36]	; 0x24
 800627e:	930c      	str	r3, [sp, #48]	; 0x30
 8006280:	46bb      	mov	fp, r7
 8006282:	b975      	cbnz	r5, 80062a2 <_dtoa_r+0x42>
 8006284:	2010      	movs	r0, #16
 8006286:	f000 fddd 	bl	8006e44 <malloc>
 800628a:	4602      	mov	r2, r0
 800628c:	6260      	str	r0, [r4, #36]	; 0x24
 800628e:	b920      	cbnz	r0, 800629a <_dtoa_r+0x3a>
 8006290:	4ba7      	ldr	r3, [pc, #668]	; (8006530 <_dtoa_r+0x2d0>)
 8006292:	21ea      	movs	r1, #234	; 0xea
 8006294:	48a7      	ldr	r0, [pc, #668]	; (8006534 <_dtoa_r+0x2d4>)
 8006296:	f001 fbd1 	bl	8007a3c <__assert_func>
 800629a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800629e:	6005      	str	r5, [r0, #0]
 80062a0:	60c5      	str	r5, [r0, #12]
 80062a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062a4:	6819      	ldr	r1, [r3, #0]
 80062a6:	b151      	cbz	r1, 80062be <_dtoa_r+0x5e>
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	604a      	str	r2, [r1, #4]
 80062ac:	2301      	movs	r3, #1
 80062ae:	4093      	lsls	r3, r2
 80062b0:	608b      	str	r3, [r1, #8]
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 fe1c 	bl	8006ef0 <_Bfree>
 80062b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	1e3b      	subs	r3, r7, #0
 80062c0:	bfaa      	itet	ge
 80062c2:	2300      	movge	r3, #0
 80062c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80062c8:	f8c8 3000 	strge.w	r3, [r8]
 80062cc:	4b9a      	ldr	r3, [pc, #616]	; (8006538 <_dtoa_r+0x2d8>)
 80062ce:	bfbc      	itt	lt
 80062d0:	2201      	movlt	r2, #1
 80062d2:	f8c8 2000 	strlt.w	r2, [r8]
 80062d6:	ea33 030b 	bics.w	r3, r3, fp
 80062da:	d11b      	bne.n	8006314 <_dtoa_r+0xb4>
 80062dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062de:	f242 730f 	movw	r3, #9999	; 0x270f
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062e8:	4333      	orrs	r3, r6
 80062ea:	f000 8592 	beq.w	8006e12 <_dtoa_r+0xbb2>
 80062ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062f0:	b963      	cbnz	r3, 800630c <_dtoa_r+0xac>
 80062f2:	4b92      	ldr	r3, [pc, #584]	; (800653c <_dtoa_r+0x2dc>)
 80062f4:	e022      	b.n	800633c <_dtoa_r+0xdc>
 80062f6:	4b92      	ldr	r3, [pc, #584]	; (8006540 <_dtoa_r+0x2e0>)
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	3308      	adds	r3, #8
 80062fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	9801      	ldr	r0, [sp, #4]
 8006302:	b013      	add	sp, #76	; 0x4c
 8006304:	ecbd 8b04 	vpop	{d8-d9}
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	4b8b      	ldr	r3, [pc, #556]	; (800653c <_dtoa_r+0x2dc>)
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	3303      	adds	r3, #3
 8006312:	e7f3      	b.n	80062fc <_dtoa_r+0x9c>
 8006314:	2200      	movs	r2, #0
 8006316:	2300      	movs	r3, #0
 8006318:	4650      	mov	r0, sl
 800631a:	4659      	mov	r1, fp
 800631c:	f7fa fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006320:	ec4b ab19 	vmov	d9, sl, fp
 8006324:	4680      	mov	r8, r0
 8006326:	b158      	cbz	r0, 8006340 <_dtoa_r+0xe0>
 8006328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800632a:	2301      	movs	r3, #1
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 856b 	beq.w	8006e0c <_dtoa_r+0xbac>
 8006336:	4883      	ldr	r0, [pc, #524]	; (8006544 <_dtoa_r+0x2e4>)
 8006338:	6018      	str	r0, [r3, #0]
 800633a:	1e43      	subs	r3, r0, #1
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	e7df      	b.n	8006300 <_dtoa_r+0xa0>
 8006340:	ec4b ab10 	vmov	d0, sl, fp
 8006344:	aa10      	add	r2, sp, #64	; 0x40
 8006346:	a911      	add	r1, sp, #68	; 0x44
 8006348:	4620      	mov	r0, r4
 800634a:	f001 f8b9 	bl	80074c0 <__d2b>
 800634e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006352:	ee08 0a10 	vmov	s16, r0
 8006356:	2d00      	cmp	r5, #0
 8006358:	f000 8084 	beq.w	8006464 <_dtoa_r+0x204>
 800635c:	ee19 3a90 	vmov	r3, s19
 8006360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006368:	4656      	mov	r6, sl
 800636a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800636e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006376:	4b74      	ldr	r3, [pc, #464]	; (8006548 <_dtoa_r+0x2e8>)
 8006378:	2200      	movs	r2, #0
 800637a:	4630      	mov	r0, r6
 800637c:	4639      	mov	r1, r7
 800637e:	f7f9 ff83 	bl	8000288 <__aeabi_dsub>
 8006382:	a365      	add	r3, pc, #404	; (adr r3, 8006518 <_dtoa_r+0x2b8>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7fa f936 	bl	80005f8 <__aeabi_dmul>
 800638c:	a364      	add	r3, pc, #400	; (adr r3, 8006520 <_dtoa_r+0x2c0>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7f9 ff7b 	bl	800028c <__adddf3>
 8006396:	4606      	mov	r6, r0
 8006398:	4628      	mov	r0, r5
 800639a:	460f      	mov	r7, r1
 800639c:	f7fa f8c2 	bl	8000524 <__aeabi_i2d>
 80063a0:	a361      	add	r3, pc, #388	; (adr r3, 8006528 <_dtoa_r+0x2c8>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7fa f927 	bl	80005f8 <__aeabi_dmul>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4630      	mov	r0, r6
 80063b0:	4639      	mov	r1, r7
 80063b2:	f7f9 ff6b 	bl	800028c <__adddf3>
 80063b6:	4606      	mov	r6, r0
 80063b8:	460f      	mov	r7, r1
 80063ba:	f7fa fbcd 	bl	8000b58 <__aeabi_d2iz>
 80063be:	2200      	movs	r2, #0
 80063c0:	9000      	str	r0, [sp, #0]
 80063c2:	2300      	movs	r3, #0
 80063c4:	4630      	mov	r0, r6
 80063c6:	4639      	mov	r1, r7
 80063c8:	f7fa fb88 	bl	8000adc <__aeabi_dcmplt>
 80063cc:	b150      	cbz	r0, 80063e4 <_dtoa_r+0x184>
 80063ce:	9800      	ldr	r0, [sp, #0]
 80063d0:	f7fa f8a8 	bl	8000524 <__aeabi_i2d>
 80063d4:	4632      	mov	r2, r6
 80063d6:	463b      	mov	r3, r7
 80063d8:	f7fa fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80063dc:	b910      	cbnz	r0, 80063e4 <_dtoa_r+0x184>
 80063de:	9b00      	ldr	r3, [sp, #0]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	9b00      	ldr	r3, [sp, #0]
 80063e6:	2b16      	cmp	r3, #22
 80063e8:	d85a      	bhi.n	80064a0 <_dtoa_r+0x240>
 80063ea:	9a00      	ldr	r2, [sp, #0]
 80063ec:	4b57      	ldr	r3, [pc, #348]	; (800654c <_dtoa_r+0x2ec>)
 80063ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	ec51 0b19 	vmov	r0, r1, d9
 80063fa:	f7fa fb6f 	bl	8000adc <__aeabi_dcmplt>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d050      	beq.n	80064a4 <_dtoa_r+0x244>
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	3b01      	subs	r3, #1
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2300      	movs	r3, #0
 800640a:	930b      	str	r3, [sp, #44]	; 0x2c
 800640c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800640e:	1b5d      	subs	r5, r3, r5
 8006410:	1e6b      	subs	r3, r5, #1
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	bf45      	ittet	mi
 8006416:	f1c5 0301 	rsbmi	r3, r5, #1
 800641a:	9304      	strmi	r3, [sp, #16]
 800641c:	2300      	movpl	r3, #0
 800641e:	2300      	movmi	r3, #0
 8006420:	bf4c      	ite	mi
 8006422:	9305      	strmi	r3, [sp, #20]
 8006424:	9304      	strpl	r3, [sp, #16]
 8006426:	9b00      	ldr	r3, [sp, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	db3d      	blt.n	80064a8 <_dtoa_r+0x248>
 800642c:	9b05      	ldr	r3, [sp, #20]
 800642e:	9a00      	ldr	r2, [sp, #0]
 8006430:	920a      	str	r2, [sp, #40]	; 0x28
 8006432:	4413      	add	r3, r2
 8006434:	9305      	str	r3, [sp, #20]
 8006436:	2300      	movs	r3, #0
 8006438:	9307      	str	r3, [sp, #28]
 800643a:	9b06      	ldr	r3, [sp, #24]
 800643c:	2b09      	cmp	r3, #9
 800643e:	f200 8089 	bhi.w	8006554 <_dtoa_r+0x2f4>
 8006442:	2b05      	cmp	r3, #5
 8006444:	bfc4      	itt	gt
 8006446:	3b04      	subgt	r3, #4
 8006448:	9306      	strgt	r3, [sp, #24]
 800644a:	9b06      	ldr	r3, [sp, #24]
 800644c:	f1a3 0302 	sub.w	r3, r3, #2
 8006450:	bfcc      	ite	gt
 8006452:	2500      	movgt	r5, #0
 8006454:	2501      	movle	r5, #1
 8006456:	2b03      	cmp	r3, #3
 8006458:	f200 8087 	bhi.w	800656a <_dtoa_r+0x30a>
 800645c:	e8df f003 	tbb	[pc, r3]
 8006460:	59383a2d 	.word	0x59383a2d
 8006464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006468:	441d      	add	r5, r3
 800646a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800646e:	2b20      	cmp	r3, #32
 8006470:	bfc1      	itttt	gt
 8006472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800647a:	fa0b f303 	lslgt.w	r3, fp, r3
 800647e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006482:	bfda      	itte	le
 8006484:	f1c3 0320 	rsble	r3, r3, #32
 8006488:	fa06 f003 	lslle.w	r0, r6, r3
 800648c:	4318      	orrgt	r0, r3
 800648e:	f7fa f839 	bl	8000504 <__aeabi_ui2d>
 8006492:	2301      	movs	r3, #1
 8006494:	4606      	mov	r6, r0
 8006496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800649a:	3d01      	subs	r5, #1
 800649c:	930e      	str	r3, [sp, #56]	; 0x38
 800649e:	e76a      	b.n	8006376 <_dtoa_r+0x116>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e7b2      	b.n	800640a <_dtoa_r+0x1aa>
 80064a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80064a6:	e7b1      	b.n	800640c <_dtoa_r+0x1ac>
 80064a8:	9b04      	ldr	r3, [sp, #16]
 80064aa:	9a00      	ldr	r2, [sp, #0]
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	4253      	negs	r3, r2
 80064b2:	9307      	str	r3, [sp, #28]
 80064b4:	2300      	movs	r3, #0
 80064b6:	930a      	str	r3, [sp, #40]	; 0x28
 80064b8:	e7bf      	b.n	800643a <_dtoa_r+0x1da>
 80064ba:	2300      	movs	r3, #0
 80064bc:	9308      	str	r3, [sp, #32]
 80064be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc55      	bgt.n	8006570 <_dtoa_r+0x310>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80064ca:	461a      	mov	r2, r3
 80064cc:	9209      	str	r2, [sp, #36]	; 0x24
 80064ce:	e00c      	b.n	80064ea <_dtoa_r+0x28a>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e7f3      	b.n	80064bc <_dtoa_r+0x25c>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d8:	9308      	str	r3, [sp, #32]
 80064da:	9b00      	ldr	r3, [sp, #0]
 80064dc:	4413      	add	r3, r2
 80064de:	9302      	str	r3, [sp, #8]
 80064e0:	3301      	adds	r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	9303      	str	r3, [sp, #12]
 80064e6:	bfb8      	it	lt
 80064e8:	2301      	movlt	r3, #1
 80064ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064ec:	2200      	movs	r2, #0
 80064ee:	6042      	str	r2, [r0, #4]
 80064f0:	2204      	movs	r2, #4
 80064f2:	f102 0614 	add.w	r6, r2, #20
 80064f6:	429e      	cmp	r6, r3
 80064f8:	6841      	ldr	r1, [r0, #4]
 80064fa:	d93d      	bls.n	8006578 <_dtoa_r+0x318>
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 fcb7 	bl	8006e70 <_Balloc>
 8006502:	9001      	str	r0, [sp, #4]
 8006504:	2800      	cmp	r0, #0
 8006506:	d13b      	bne.n	8006580 <_dtoa_r+0x320>
 8006508:	4b11      	ldr	r3, [pc, #68]	; (8006550 <_dtoa_r+0x2f0>)
 800650a:	4602      	mov	r2, r0
 800650c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006510:	e6c0      	b.n	8006294 <_dtoa_r+0x34>
 8006512:	2301      	movs	r3, #1
 8006514:	e7df      	b.n	80064d6 <_dtoa_r+0x276>
 8006516:	bf00      	nop
 8006518:	636f4361 	.word	0x636f4361
 800651c:	3fd287a7 	.word	0x3fd287a7
 8006520:	8b60c8b3 	.word	0x8b60c8b3
 8006524:	3fc68a28 	.word	0x3fc68a28
 8006528:	509f79fb 	.word	0x509f79fb
 800652c:	3fd34413 	.word	0x3fd34413
 8006530:	080086c9 	.word	0x080086c9
 8006534:	080086e0 	.word	0x080086e0
 8006538:	7ff00000 	.word	0x7ff00000
 800653c:	080086c5 	.word	0x080086c5
 8006540:	080086bc 	.word	0x080086bc
 8006544:	08008699 	.word	0x08008699
 8006548:	3ff80000 	.word	0x3ff80000
 800654c:	080087d0 	.word	0x080087d0
 8006550:	0800873b 	.word	0x0800873b
 8006554:	2501      	movs	r5, #1
 8006556:	2300      	movs	r3, #0
 8006558:	9306      	str	r3, [sp, #24]
 800655a:	9508      	str	r5, [sp, #32]
 800655c:	f04f 33ff 	mov.w	r3, #4294967295
 8006560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006564:	2200      	movs	r2, #0
 8006566:	2312      	movs	r3, #18
 8006568:	e7b0      	b.n	80064cc <_dtoa_r+0x26c>
 800656a:	2301      	movs	r3, #1
 800656c:	9308      	str	r3, [sp, #32]
 800656e:	e7f5      	b.n	800655c <_dtoa_r+0x2fc>
 8006570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006576:	e7b8      	b.n	80064ea <_dtoa_r+0x28a>
 8006578:	3101      	adds	r1, #1
 800657a:	6041      	str	r1, [r0, #4]
 800657c:	0052      	lsls	r2, r2, #1
 800657e:	e7b8      	b.n	80064f2 <_dtoa_r+0x292>
 8006580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006582:	9a01      	ldr	r2, [sp, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	2b0e      	cmp	r3, #14
 800658a:	f200 809d 	bhi.w	80066c8 <_dtoa_r+0x468>
 800658e:	2d00      	cmp	r5, #0
 8006590:	f000 809a 	beq.w	80066c8 <_dtoa_r+0x468>
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	dd32      	ble.n	8006600 <_dtoa_r+0x3a0>
 800659a:	4ab7      	ldr	r2, [pc, #732]	; (8006878 <_dtoa_r+0x618>)
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065a8:	9b00      	ldr	r3, [sp, #0]
 80065aa:	05d8      	lsls	r0, r3, #23
 80065ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80065b0:	d516      	bpl.n	80065e0 <_dtoa_r+0x380>
 80065b2:	4bb2      	ldr	r3, [pc, #712]	; (800687c <_dtoa_r+0x61c>)
 80065b4:	ec51 0b19 	vmov	r0, r1, d9
 80065b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065bc:	f7fa f946 	bl	800084c <__aeabi_ddiv>
 80065c0:	f007 070f 	and.w	r7, r7, #15
 80065c4:	4682      	mov	sl, r0
 80065c6:	468b      	mov	fp, r1
 80065c8:	2503      	movs	r5, #3
 80065ca:	4eac      	ldr	r6, [pc, #688]	; (800687c <_dtoa_r+0x61c>)
 80065cc:	b957      	cbnz	r7, 80065e4 <_dtoa_r+0x384>
 80065ce:	4642      	mov	r2, r8
 80065d0:	464b      	mov	r3, r9
 80065d2:	4650      	mov	r0, sl
 80065d4:	4659      	mov	r1, fp
 80065d6:	f7fa f939 	bl	800084c <__aeabi_ddiv>
 80065da:	4682      	mov	sl, r0
 80065dc:	468b      	mov	fp, r1
 80065de:	e028      	b.n	8006632 <_dtoa_r+0x3d2>
 80065e0:	2502      	movs	r5, #2
 80065e2:	e7f2      	b.n	80065ca <_dtoa_r+0x36a>
 80065e4:	07f9      	lsls	r1, r7, #31
 80065e6:	d508      	bpl.n	80065fa <_dtoa_r+0x39a>
 80065e8:	4640      	mov	r0, r8
 80065ea:	4649      	mov	r1, r9
 80065ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065f0:	f7fa f802 	bl	80005f8 <__aeabi_dmul>
 80065f4:	3501      	adds	r5, #1
 80065f6:	4680      	mov	r8, r0
 80065f8:	4689      	mov	r9, r1
 80065fa:	107f      	asrs	r7, r7, #1
 80065fc:	3608      	adds	r6, #8
 80065fe:	e7e5      	b.n	80065cc <_dtoa_r+0x36c>
 8006600:	f000 809b 	beq.w	800673a <_dtoa_r+0x4da>
 8006604:	9b00      	ldr	r3, [sp, #0]
 8006606:	4f9d      	ldr	r7, [pc, #628]	; (800687c <_dtoa_r+0x61c>)
 8006608:	425e      	negs	r6, r3
 800660a:	4b9b      	ldr	r3, [pc, #620]	; (8006878 <_dtoa_r+0x618>)
 800660c:	f006 020f 	and.w	r2, r6, #15
 8006610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	ec51 0b19 	vmov	r0, r1, d9
 800661c:	f7f9 ffec 	bl	80005f8 <__aeabi_dmul>
 8006620:	1136      	asrs	r6, r6, #4
 8006622:	4682      	mov	sl, r0
 8006624:	468b      	mov	fp, r1
 8006626:	2300      	movs	r3, #0
 8006628:	2502      	movs	r5, #2
 800662a:	2e00      	cmp	r6, #0
 800662c:	d17a      	bne.n	8006724 <_dtoa_r+0x4c4>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1d3      	bne.n	80065da <_dtoa_r+0x37a>
 8006632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8082 	beq.w	800673e <_dtoa_r+0x4de>
 800663a:	4b91      	ldr	r3, [pc, #580]	; (8006880 <_dtoa_r+0x620>)
 800663c:	2200      	movs	r2, #0
 800663e:	4650      	mov	r0, sl
 8006640:	4659      	mov	r1, fp
 8006642:	f7fa fa4b 	bl	8000adc <__aeabi_dcmplt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d079      	beq.n	800673e <_dtoa_r+0x4de>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d076      	beq.n	800673e <_dtoa_r+0x4de>
 8006650:	9b02      	ldr	r3, [sp, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	dd36      	ble.n	80066c4 <_dtoa_r+0x464>
 8006656:	9b00      	ldr	r3, [sp, #0]
 8006658:	4650      	mov	r0, sl
 800665a:	4659      	mov	r1, fp
 800665c:	1e5f      	subs	r7, r3, #1
 800665e:	2200      	movs	r2, #0
 8006660:	4b88      	ldr	r3, [pc, #544]	; (8006884 <_dtoa_r+0x624>)
 8006662:	f7f9 ffc9 	bl	80005f8 <__aeabi_dmul>
 8006666:	9e02      	ldr	r6, [sp, #8]
 8006668:	4682      	mov	sl, r0
 800666a:	468b      	mov	fp, r1
 800666c:	3501      	adds	r5, #1
 800666e:	4628      	mov	r0, r5
 8006670:	f7f9 ff58 	bl	8000524 <__aeabi_i2d>
 8006674:	4652      	mov	r2, sl
 8006676:	465b      	mov	r3, fp
 8006678:	f7f9 ffbe 	bl	80005f8 <__aeabi_dmul>
 800667c:	4b82      	ldr	r3, [pc, #520]	; (8006888 <_dtoa_r+0x628>)
 800667e:	2200      	movs	r2, #0
 8006680:	f7f9 fe04 	bl	800028c <__adddf3>
 8006684:	46d0      	mov	r8, sl
 8006686:	46d9      	mov	r9, fp
 8006688:	4682      	mov	sl, r0
 800668a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800668e:	2e00      	cmp	r6, #0
 8006690:	d158      	bne.n	8006744 <_dtoa_r+0x4e4>
 8006692:	4b7e      	ldr	r3, [pc, #504]	; (800688c <_dtoa_r+0x62c>)
 8006694:	2200      	movs	r2, #0
 8006696:	4640      	mov	r0, r8
 8006698:	4649      	mov	r1, r9
 800669a:	f7f9 fdf5 	bl	8000288 <__aeabi_dsub>
 800669e:	4652      	mov	r2, sl
 80066a0:	465b      	mov	r3, fp
 80066a2:	4680      	mov	r8, r0
 80066a4:	4689      	mov	r9, r1
 80066a6:	f7fa fa37 	bl	8000b18 <__aeabi_dcmpgt>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f040 8295 	bne.w	8006bda <_dtoa_r+0x97a>
 80066b0:	4652      	mov	r2, sl
 80066b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80066b6:	4640      	mov	r0, r8
 80066b8:	4649      	mov	r1, r9
 80066ba:	f7fa fa0f 	bl	8000adc <__aeabi_dcmplt>
 80066be:	2800      	cmp	r0, #0
 80066c0:	f040 8289 	bne.w	8006bd6 <_dtoa_r+0x976>
 80066c4:	ec5b ab19 	vmov	sl, fp, d9
 80066c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f2c0 8148 	blt.w	8006960 <_dtoa_r+0x700>
 80066d0:	9a00      	ldr	r2, [sp, #0]
 80066d2:	2a0e      	cmp	r2, #14
 80066d4:	f300 8144 	bgt.w	8006960 <_dtoa_r+0x700>
 80066d8:	4b67      	ldr	r3, [pc, #412]	; (8006878 <_dtoa_r+0x618>)
 80066da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f280 80d5 	bge.w	8006894 <_dtoa_r+0x634>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f300 80d1 	bgt.w	8006894 <_dtoa_r+0x634>
 80066f2:	f040 826f 	bne.w	8006bd4 <_dtoa_r+0x974>
 80066f6:	4b65      	ldr	r3, [pc, #404]	; (800688c <_dtoa_r+0x62c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7f9 ff7b 	bl	80005f8 <__aeabi_dmul>
 8006702:	4652      	mov	r2, sl
 8006704:	465b      	mov	r3, fp
 8006706:	f7fa f9fd 	bl	8000b04 <__aeabi_dcmpge>
 800670a:	9e03      	ldr	r6, [sp, #12]
 800670c:	4637      	mov	r7, r6
 800670e:	2800      	cmp	r0, #0
 8006710:	f040 8245 	bne.w	8006b9e <_dtoa_r+0x93e>
 8006714:	9d01      	ldr	r5, [sp, #4]
 8006716:	2331      	movs	r3, #49	; 0x31
 8006718:	f805 3b01 	strb.w	r3, [r5], #1
 800671c:	9b00      	ldr	r3, [sp, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	e240      	b.n	8006ba6 <_dtoa_r+0x946>
 8006724:	07f2      	lsls	r2, r6, #31
 8006726:	d505      	bpl.n	8006734 <_dtoa_r+0x4d4>
 8006728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672c:	f7f9 ff64 	bl	80005f8 <__aeabi_dmul>
 8006730:	3501      	adds	r5, #1
 8006732:	2301      	movs	r3, #1
 8006734:	1076      	asrs	r6, r6, #1
 8006736:	3708      	adds	r7, #8
 8006738:	e777      	b.n	800662a <_dtoa_r+0x3ca>
 800673a:	2502      	movs	r5, #2
 800673c:	e779      	b.n	8006632 <_dtoa_r+0x3d2>
 800673e:	9f00      	ldr	r7, [sp, #0]
 8006740:	9e03      	ldr	r6, [sp, #12]
 8006742:	e794      	b.n	800666e <_dtoa_r+0x40e>
 8006744:	9901      	ldr	r1, [sp, #4]
 8006746:	4b4c      	ldr	r3, [pc, #304]	; (8006878 <_dtoa_r+0x618>)
 8006748:	4431      	add	r1, r6
 800674a:	910d      	str	r1, [sp, #52]	; 0x34
 800674c:	9908      	ldr	r1, [sp, #32]
 800674e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006756:	2900      	cmp	r1, #0
 8006758:	d043      	beq.n	80067e2 <_dtoa_r+0x582>
 800675a:	494d      	ldr	r1, [pc, #308]	; (8006890 <_dtoa_r+0x630>)
 800675c:	2000      	movs	r0, #0
 800675e:	f7fa f875 	bl	800084c <__aeabi_ddiv>
 8006762:	4652      	mov	r2, sl
 8006764:	465b      	mov	r3, fp
 8006766:	f7f9 fd8f 	bl	8000288 <__aeabi_dsub>
 800676a:	9d01      	ldr	r5, [sp, #4]
 800676c:	4682      	mov	sl, r0
 800676e:	468b      	mov	fp, r1
 8006770:	4649      	mov	r1, r9
 8006772:	4640      	mov	r0, r8
 8006774:	f7fa f9f0 	bl	8000b58 <__aeabi_d2iz>
 8006778:	4606      	mov	r6, r0
 800677a:	f7f9 fed3 	bl	8000524 <__aeabi_i2d>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4640      	mov	r0, r8
 8006784:	4649      	mov	r1, r9
 8006786:	f7f9 fd7f 	bl	8000288 <__aeabi_dsub>
 800678a:	3630      	adds	r6, #48	; 0x30
 800678c:	f805 6b01 	strb.w	r6, [r5], #1
 8006790:	4652      	mov	r2, sl
 8006792:	465b      	mov	r3, fp
 8006794:	4680      	mov	r8, r0
 8006796:	4689      	mov	r9, r1
 8006798:	f7fa f9a0 	bl	8000adc <__aeabi_dcmplt>
 800679c:	2800      	cmp	r0, #0
 800679e:	d163      	bne.n	8006868 <_dtoa_r+0x608>
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	4936      	ldr	r1, [pc, #216]	; (8006880 <_dtoa_r+0x620>)
 80067a6:	2000      	movs	r0, #0
 80067a8:	f7f9 fd6e 	bl	8000288 <__aeabi_dsub>
 80067ac:	4652      	mov	r2, sl
 80067ae:	465b      	mov	r3, fp
 80067b0:	f7fa f994 	bl	8000adc <__aeabi_dcmplt>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f040 80b5 	bne.w	8006924 <_dtoa_r+0x6c4>
 80067ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067bc:	429d      	cmp	r5, r3
 80067be:	d081      	beq.n	80066c4 <_dtoa_r+0x464>
 80067c0:	4b30      	ldr	r3, [pc, #192]	; (8006884 <_dtoa_r+0x624>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	4650      	mov	r0, sl
 80067c6:	4659      	mov	r1, fp
 80067c8:	f7f9 ff16 	bl	80005f8 <__aeabi_dmul>
 80067cc:	4b2d      	ldr	r3, [pc, #180]	; (8006884 <_dtoa_r+0x624>)
 80067ce:	4682      	mov	sl, r0
 80067d0:	468b      	mov	fp, r1
 80067d2:	4640      	mov	r0, r8
 80067d4:	4649      	mov	r1, r9
 80067d6:	2200      	movs	r2, #0
 80067d8:	f7f9 ff0e 	bl	80005f8 <__aeabi_dmul>
 80067dc:	4680      	mov	r8, r0
 80067de:	4689      	mov	r9, r1
 80067e0:	e7c6      	b.n	8006770 <_dtoa_r+0x510>
 80067e2:	4650      	mov	r0, sl
 80067e4:	4659      	mov	r1, fp
 80067e6:	f7f9 ff07 	bl	80005f8 <__aeabi_dmul>
 80067ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ec:	9d01      	ldr	r5, [sp, #4]
 80067ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f0:	4682      	mov	sl, r0
 80067f2:	468b      	mov	fp, r1
 80067f4:	4649      	mov	r1, r9
 80067f6:	4640      	mov	r0, r8
 80067f8:	f7fa f9ae 	bl	8000b58 <__aeabi_d2iz>
 80067fc:	4606      	mov	r6, r0
 80067fe:	f7f9 fe91 	bl	8000524 <__aeabi_i2d>
 8006802:	3630      	adds	r6, #48	; 0x30
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4640      	mov	r0, r8
 800680a:	4649      	mov	r1, r9
 800680c:	f7f9 fd3c 	bl	8000288 <__aeabi_dsub>
 8006810:	f805 6b01 	strb.w	r6, [r5], #1
 8006814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006816:	429d      	cmp	r5, r3
 8006818:	4680      	mov	r8, r0
 800681a:	4689      	mov	r9, r1
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	d124      	bne.n	800686c <_dtoa_r+0x60c>
 8006822:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <_dtoa_r+0x630>)
 8006824:	4650      	mov	r0, sl
 8006826:	4659      	mov	r1, fp
 8006828:	f7f9 fd30 	bl	800028c <__adddf3>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7fa f970 	bl	8000b18 <__aeabi_dcmpgt>
 8006838:	2800      	cmp	r0, #0
 800683a:	d173      	bne.n	8006924 <_dtoa_r+0x6c4>
 800683c:	4652      	mov	r2, sl
 800683e:	465b      	mov	r3, fp
 8006840:	4913      	ldr	r1, [pc, #76]	; (8006890 <_dtoa_r+0x630>)
 8006842:	2000      	movs	r0, #0
 8006844:	f7f9 fd20 	bl	8000288 <__aeabi_dsub>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4640      	mov	r0, r8
 800684e:	4649      	mov	r1, r9
 8006850:	f7fa f944 	bl	8000adc <__aeabi_dcmplt>
 8006854:	2800      	cmp	r0, #0
 8006856:	f43f af35 	beq.w	80066c4 <_dtoa_r+0x464>
 800685a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800685c:	1e6b      	subs	r3, r5, #1
 800685e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d0f8      	beq.n	800685a <_dtoa_r+0x5fa>
 8006868:	9700      	str	r7, [sp, #0]
 800686a:	e049      	b.n	8006900 <_dtoa_r+0x6a0>
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <_dtoa_r+0x624>)
 800686e:	f7f9 fec3 	bl	80005f8 <__aeabi_dmul>
 8006872:	4680      	mov	r8, r0
 8006874:	4689      	mov	r9, r1
 8006876:	e7bd      	b.n	80067f4 <_dtoa_r+0x594>
 8006878:	080087d0 	.word	0x080087d0
 800687c:	080087a8 	.word	0x080087a8
 8006880:	3ff00000 	.word	0x3ff00000
 8006884:	40240000 	.word	0x40240000
 8006888:	401c0000 	.word	0x401c0000
 800688c:	40140000 	.word	0x40140000
 8006890:	3fe00000 	.word	0x3fe00000
 8006894:	9d01      	ldr	r5, [sp, #4]
 8006896:	4656      	mov	r6, sl
 8006898:	465f      	mov	r7, fp
 800689a:	4642      	mov	r2, r8
 800689c:	464b      	mov	r3, r9
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7f9 ffd3 	bl	800084c <__aeabi_ddiv>
 80068a6:	f7fa f957 	bl	8000b58 <__aeabi_d2iz>
 80068aa:	4682      	mov	sl, r0
 80068ac:	f7f9 fe3a 	bl	8000524 <__aeabi_i2d>
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	f7f9 fea0 	bl	80005f8 <__aeabi_dmul>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4630      	mov	r0, r6
 80068be:	4639      	mov	r1, r7
 80068c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80068c4:	f7f9 fce0 	bl	8000288 <__aeabi_dsub>
 80068c8:	f805 6b01 	strb.w	r6, [r5], #1
 80068cc:	9e01      	ldr	r6, [sp, #4]
 80068ce:	9f03      	ldr	r7, [sp, #12]
 80068d0:	1bae      	subs	r6, r5, r6
 80068d2:	42b7      	cmp	r7, r6
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	d135      	bne.n	8006946 <_dtoa_r+0x6e6>
 80068da:	f7f9 fcd7 	bl	800028c <__adddf3>
 80068de:	4642      	mov	r2, r8
 80068e0:	464b      	mov	r3, r9
 80068e2:	4606      	mov	r6, r0
 80068e4:	460f      	mov	r7, r1
 80068e6:	f7fa f917 	bl	8000b18 <__aeabi_dcmpgt>
 80068ea:	b9d0      	cbnz	r0, 8006922 <_dtoa_r+0x6c2>
 80068ec:	4642      	mov	r2, r8
 80068ee:	464b      	mov	r3, r9
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7fa f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80068f8:	b110      	cbz	r0, 8006900 <_dtoa_r+0x6a0>
 80068fa:	f01a 0f01 	tst.w	sl, #1
 80068fe:	d110      	bne.n	8006922 <_dtoa_r+0x6c2>
 8006900:	4620      	mov	r0, r4
 8006902:	ee18 1a10 	vmov	r1, s16
 8006906:	f000 faf3 	bl	8006ef0 <_Bfree>
 800690a:	2300      	movs	r3, #0
 800690c:	9800      	ldr	r0, [sp, #0]
 800690e:	702b      	strb	r3, [r5, #0]
 8006910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006912:	3001      	adds	r0, #1
 8006914:	6018      	str	r0, [r3, #0]
 8006916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006918:	2b00      	cmp	r3, #0
 800691a:	f43f acf1 	beq.w	8006300 <_dtoa_r+0xa0>
 800691e:	601d      	str	r5, [r3, #0]
 8006920:	e4ee      	b.n	8006300 <_dtoa_r+0xa0>
 8006922:	9f00      	ldr	r7, [sp, #0]
 8006924:	462b      	mov	r3, r5
 8006926:	461d      	mov	r5, r3
 8006928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800692c:	2a39      	cmp	r2, #57	; 0x39
 800692e:	d106      	bne.n	800693e <_dtoa_r+0x6de>
 8006930:	9a01      	ldr	r2, [sp, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d1f7      	bne.n	8006926 <_dtoa_r+0x6c6>
 8006936:	9901      	ldr	r1, [sp, #4]
 8006938:	2230      	movs	r2, #48	; 0x30
 800693a:	3701      	adds	r7, #1
 800693c:	700a      	strb	r2, [r1, #0]
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	3201      	adds	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	e790      	b.n	8006868 <_dtoa_r+0x608>
 8006946:	4ba6      	ldr	r3, [pc, #664]	; (8006be0 <_dtoa_r+0x980>)
 8006948:	2200      	movs	r2, #0
 800694a:	f7f9 fe55 	bl	80005f8 <__aeabi_dmul>
 800694e:	2200      	movs	r2, #0
 8006950:	2300      	movs	r3, #0
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	f7fa f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800695a:	2800      	cmp	r0, #0
 800695c:	d09d      	beq.n	800689a <_dtoa_r+0x63a>
 800695e:	e7cf      	b.n	8006900 <_dtoa_r+0x6a0>
 8006960:	9a08      	ldr	r2, [sp, #32]
 8006962:	2a00      	cmp	r2, #0
 8006964:	f000 80d7 	beq.w	8006b16 <_dtoa_r+0x8b6>
 8006968:	9a06      	ldr	r2, [sp, #24]
 800696a:	2a01      	cmp	r2, #1
 800696c:	f300 80ba 	bgt.w	8006ae4 <_dtoa_r+0x884>
 8006970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006972:	2a00      	cmp	r2, #0
 8006974:	f000 80b2 	beq.w	8006adc <_dtoa_r+0x87c>
 8006978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800697c:	9e07      	ldr	r6, [sp, #28]
 800697e:	9d04      	ldr	r5, [sp, #16]
 8006980:	9a04      	ldr	r2, [sp, #16]
 8006982:	441a      	add	r2, r3
 8006984:	9204      	str	r2, [sp, #16]
 8006986:	9a05      	ldr	r2, [sp, #20]
 8006988:	2101      	movs	r1, #1
 800698a:	441a      	add	r2, r3
 800698c:	4620      	mov	r0, r4
 800698e:	9205      	str	r2, [sp, #20]
 8006990:	f000 fb66 	bl	8007060 <__i2b>
 8006994:	4607      	mov	r7, r0
 8006996:	2d00      	cmp	r5, #0
 8006998:	dd0c      	ble.n	80069b4 <_dtoa_r+0x754>
 800699a:	9b05      	ldr	r3, [sp, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	dd09      	ble.n	80069b4 <_dtoa_r+0x754>
 80069a0:	42ab      	cmp	r3, r5
 80069a2:	9a04      	ldr	r2, [sp, #16]
 80069a4:	bfa8      	it	ge
 80069a6:	462b      	movge	r3, r5
 80069a8:	1ad2      	subs	r2, r2, r3
 80069aa:	9204      	str	r2, [sp, #16]
 80069ac:	9a05      	ldr	r2, [sp, #20]
 80069ae:	1aed      	subs	r5, r5, r3
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	b31b      	cbz	r3, 8006a00 <_dtoa_r+0x7a0>
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80af 	beq.w	8006b1e <_dtoa_r+0x8be>
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	dd13      	ble.n	80069ec <_dtoa_r+0x78c>
 80069c4:	4639      	mov	r1, r7
 80069c6:	4632      	mov	r2, r6
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fc09 	bl	80071e0 <__pow5mult>
 80069ce:	ee18 2a10 	vmov	r2, s16
 80069d2:	4601      	mov	r1, r0
 80069d4:	4607      	mov	r7, r0
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fb58 	bl	800708c <__multiply>
 80069dc:	ee18 1a10 	vmov	r1, s16
 80069e0:	4680      	mov	r8, r0
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fa84 	bl	8006ef0 <_Bfree>
 80069e8:	ee08 8a10 	vmov	s16, r8
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	1b9a      	subs	r2, r3, r6
 80069f0:	d006      	beq.n	8006a00 <_dtoa_r+0x7a0>
 80069f2:	ee18 1a10 	vmov	r1, s16
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 fbf2 	bl	80071e0 <__pow5mult>
 80069fc:	ee08 0a10 	vmov	s16, r0
 8006a00:	2101      	movs	r1, #1
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 fb2c 	bl	8007060 <__i2b>
 8006a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	f340 8088 	ble.w	8006b22 <_dtoa_r+0x8c2>
 8006a12:	461a      	mov	r2, r3
 8006a14:	4601      	mov	r1, r0
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 fbe2 	bl	80071e0 <__pow5mult>
 8006a1c:	9b06      	ldr	r3, [sp, #24]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	4606      	mov	r6, r0
 8006a22:	f340 8081 	ble.w	8006b28 <_dtoa_r+0x8c8>
 8006a26:	f04f 0800 	mov.w	r8, #0
 8006a2a:	6933      	ldr	r3, [r6, #16]
 8006a2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a30:	6918      	ldr	r0, [r3, #16]
 8006a32:	f000 fac5 	bl	8006fc0 <__hi0bits>
 8006a36:	f1c0 0020 	rsb	r0, r0, #32
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	4418      	add	r0, r3
 8006a3e:	f010 001f 	ands.w	r0, r0, #31
 8006a42:	f000 8092 	beq.w	8006b6a <_dtoa_r+0x90a>
 8006a46:	f1c0 0320 	rsb	r3, r0, #32
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	f340 808a 	ble.w	8006b64 <_dtoa_r+0x904>
 8006a50:	f1c0 001c 	rsb	r0, r0, #28
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	4403      	add	r3, r0
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	4403      	add	r3, r0
 8006a5e:	4405      	add	r5, r0
 8006a60:	9305      	str	r3, [sp, #20]
 8006a62:	9b04      	ldr	r3, [sp, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd07      	ble.n	8006a78 <_dtoa_r+0x818>
 8006a68:	ee18 1a10 	vmov	r1, s16
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 fc10 	bl	8007294 <__lshift>
 8006a74:	ee08 0a10 	vmov	s16, r0
 8006a78:	9b05      	ldr	r3, [sp, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dd05      	ble.n	8006a8a <_dtoa_r+0x82a>
 8006a7e:	4631      	mov	r1, r6
 8006a80:	461a      	mov	r2, r3
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 fc06 	bl	8007294 <__lshift>
 8006a88:	4606      	mov	r6, r0
 8006a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d06e      	beq.n	8006b6e <_dtoa_r+0x90e>
 8006a90:	ee18 0a10 	vmov	r0, s16
 8006a94:	4631      	mov	r1, r6
 8006a96:	f000 fc6d 	bl	8007374 <__mcmp>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	da67      	bge.n	8006b6e <_dtoa_r+0x90e>
 8006a9e:	9b00      	ldr	r3, [sp, #0]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	ee18 1a10 	vmov	r1, s16
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fa41 	bl	8006f34 <__multadd>
 8006ab2:	9b08      	ldr	r3, [sp, #32]
 8006ab4:	ee08 0a10 	vmov	s16, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 81b1 	beq.w	8006e20 <_dtoa_r+0xbc0>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fa35 	bl	8006f34 <__multadd>
 8006aca:	9b02      	ldr	r3, [sp, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	4607      	mov	r7, r0
 8006ad0:	f300 808e 	bgt.w	8006bf0 <_dtoa_r+0x990>
 8006ad4:	9b06      	ldr	r3, [sp, #24]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	dc51      	bgt.n	8006b7e <_dtoa_r+0x91e>
 8006ada:	e089      	b.n	8006bf0 <_dtoa_r+0x990>
 8006adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ae2:	e74b      	b.n	800697c <_dtoa_r+0x71c>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	1e5e      	subs	r6, r3, #1
 8006ae8:	9b07      	ldr	r3, [sp, #28]
 8006aea:	42b3      	cmp	r3, r6
 8006aec:	bfbf      	itttt	lt
 8006aee:	9b07      	ldrlt	r3, [sp, #28]
 8006af0:	9607      	strlt	r6, [sp, #28]
 8006af2:	1af2      	sublt	r2, r6, r3
 8006af4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006af6:	bfb6      	itet	lt
 8006af8:	189b      	addlt	r3, r3, r2
 8006afa:	1b9e      	subge	r6, r3, r6
 8006afc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	bfb8      	it	lt
 8006b02:	2600      	movlt	r6, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfb7      	itett	lt
 8006b08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006b0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006b10:	1a9d      	sublt	r5, r3, r2
 8006b12:	2300      	movlt	r3, #0
 8006b14:	e734      	b.n	8006980 <_dtoa_r+0x720>
 8006b16:	9e07      	ldr	r6, [sp, #28]
 8006b18:	9d04      	ldr	r5, [sp, #16]
 8006b1a:	9f08      	ldr	r7, [sp, #32]
 8006b1c:	e73b      	b.n	8006996 <_dtoa_r+0x736>
 8006b1e:	9a07      	ldr	r2, [sp, #28]
 8006b20:	e767      	b.n	80069f2 <_dtoa_r+0x792>
 8006b22:	9b06      	ldr	r3, [sp, #24]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	dc18      	bgt.n	8006b5a <_dtoa_r+0x8fa>
 8006b28:	f1ba 0f00 	cmp.w	sl, #0
 8006b2c:	d115      	bne.n	8006b5a <_dtoa_r+0x8fa>
 8006b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b32:	b993      	cbnz	r3, 8006b5a <_dtoa_r+0x8fa>
 8006b34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b38:	0d1b      	lsrs	r3, r3, #20
 8006b3a:	051b      	lsls	r3, r3, #20
 8006b3c:	b183      	cbz	r3, 8006b60 <_dtoa_r+0x900>
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	9b05      	ldr	r3, [sp, #20]
 8006b46:	3301      	adds	r3, #1
 8006b48:	9305      	str	r3, [sp, #20]
 8006b4a:	f04f 0801 	mov.w	r8, #1
 8006b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f47f af6a 	bne.w	8006a2a <_dtoa_r+0x7ca>
 8006b56:	2001      	movs	r0, #1
 8006b58:	e76f      	b.n	8006a3a <_dtoa_r+0x7da>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	e7f6      	b.n	8006b4e <_dtoa_r+0x8ee>
 8006b60:	4698      	mov	r8, r3
 8006b62:	e7f4      	b.n	8006b4e <_dtoa_r+0x8ee>
 8006b64:	f43f af7d 	beq.w	8006a62 <_dtoa_r+0x802>
 8006b68:	4618      	mov	r0, r3
 8006b6a:	301c      	adds	r0, #28
 8006b6c:	e772      	b.n	8006a54 <_dtoa_r+0x7f4>
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dc37      	bgt.n	8006be4 <_dtoa_r+0x984>
 8006b74:	9b06      	ldr	r3, [sp, #24]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	dd34      	ble.n	8006be4 <_dtoa_r+0x984>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	9302      	str	r3, [sp, #8]
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	b96b      	cbnz	r3, 8006b9e <_dtoa_r+0x93e>
 8006b82:	4631      	mov	r1, r6
 8006b84:	2205      	movs	r2, #5
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 f9d4 	bl	8006f34 <__multadd>
 8006b8c:	4601      	mov	r1, r0
 8006b8e:	4606      	mov	r6, r0
 8006b90:	ee18 0a10 	vmov	r0, s16
 8006b94:	f000 fbee 	bl	8007374 <__mcmp>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	f73f adbb 	bgt.w	8006714 <_dtoa_r+0x4b4>
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	9d01      	ldr	r5, [sp, #4]
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	f04f 0800 	mov.w	r8, #0
 8006baa:	4631      	mov	r1, r6
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 f99f 	bl	8006ef0 <_Bfree>
 8006bb2:	2f00      	cmp	r7, #0
 8006bb4:	f43f aea4 	beq.w	8006900 <_dtoa_r+0x6a0>
 8006bb8:	f1b8 0f00 	cmp.w	r8, #0
 8006bbc:	d005      	beq.n	8006bca <_dtoa_r+0x96a>
 8006bbe:	45b8      	cmp	r8, r7
 8006bc0:	d003      	beq.n	8006bca <_dtoa_r+0x96a>
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 f993 	bl	8006ef0 <_Bfree>
 8006bca:	4639      	mov	r1, r7
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 f98f 	bl	8006ef0 <_Bfree>
 8006bd2:	e695      	b.n	8006900 <_dtoa_r+0x6a0>
 8006bd4:	2600      	movs	r6, #0
 8006bd6:	4637      	mov	r7, r6
 8006bd8:	e7e1      	b.n	8006b9e <_dtoa_r+0x93e>
 8006bda:	9700      	str	r7, [sp, #0]
 8006bdc:	4637      	mov	r7, r6
 8006bde:	e599      	b.n	8006714 <_dtoa_r+0x4b4>
 8006be0:	40240000 	.word	0x40240000
 8006be4:	9b08      	ldr	r3, [sp, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 80ca 	beq.w	8006d80 <_dtoa_r+0xb20>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	9302      	str	r3, [sp, #8]
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	dd05      	ble.n	8006c00 <_dtoa_r+0x9a0>
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fb4b 	bl	8007294 <__lshift>
 8006bfe:	4607      	mov	r7, r0
 8006c00:	f1b8 0f00 	cmp.w	r8, #0
 8006c04:	d05b      	beq.n	8006cbe <_dtoa_r+0xa5e>
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 f931 	bl	8006e70 <_Balloc>
 8006c0e:	4605      	mov	r5, r0
 8006c10:	b928      	cbnz	r0, 8006c1e <_dtoa_r+0x9be>
 8006c12:	4b87      	ldr	r3, [pc, #540]	; (8006e30 <_dtoa_r+0xbd0>)
 8006c14:	4602      	mov	r2, r0
 8006c16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c1a:	f7ff bb3b 	b.w	8006294 <_dtoa_r+0x34>
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	3202      	adds	r2, #2
 8006c22:	0092      	lsls	r2, r2, #2
 8006c24:	f107 010c 	add.w	r1, r7, #12
 8006c28:	300c      	adds	r0, #12
 8006c2a:	f000 f913 	bl	8006e54 <memcpy>
 8006c2e:	2201      	movs	r2, #1
 8006c30:	4629      	mov	r1, r5
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 fb2e 	bl	8007294 <__lshift>
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	f103 0901 	add.w	r9, r3, #1
 8006c3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	9305      	str	r3, [sp, #20]
 8006c46:	f00a 0301 	and.w	r3, sl, #1
 8006c4a:	46b8      	mov	r8, r7
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	4607      	mov	r7, r0
 8006c50:	4631      	mov	r1, r6
 8006c52:	ee18 0a10 	vmov	r0, s16
 8006c56:	f7ff fa77 	bl	8006148 <quorem>
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	9002      	str	r0, [sp, #8]
 8006c5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c62:	ee18 0a10 	vmov	r0, s16
 8006c66:	f000 fb85 	bl	8007374 <__mcmp>
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	9003      	str	r0, [sp, #12]
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fb9b 	bl	80073ac <__mdiff>
 8006c76:	68c2      	ldr	r2, [r0, #12]
 8006c78:	f109 3bff 	add.w	fp, r9, #4294967295
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	bb02      	cbnz	r2, 8006cc2 <_dtoa_r+0xa62>
 8006c80:	4601      	mov	r1, r0
 8006c82:	ee18 0a10 	vmov	r0, s16
 8006c86:	f000 fb75 	bl	8007374 <__mcmp>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	9207      	str	r2, [sp, #28]
 8006c92:	f000 f92d 	bl	8006ef0 <_Bfree>
 8006c96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006c9a:	ea43 0102 	orr.w	r1, r3, r2
 8006c9e:	9b04      	ldr	r3, [sp, #16]
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	464d      	mov	r5, r9
 8006ca4:	d10f      	bne.n	8006cc6 <_dtoa_r+0xa66>
 8006ca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006caa:	d02a      	beq.n	8006d02 <_dtoa_r+0xaa2>
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	dd02      	ble.n	8006cb8 <_dtoa_r+0xa58>
 8006cb2:	9b02      	ldr	r3, [sp, #8]
 8006cb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006cb8:	f88b a000 	strb.w	sl, [fp]
 8006cbc:	e775      	b.n	8006baa <_dtoa_r+0x94a>
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	e7ba      	b.n	8006c38 <_dtoa_r+0x9d8>
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	e7e2      	b.n	8006c8c <_dtoa_r+0xa2c>
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	db04      	blt.n	8006cd6 <_dtoa_r+0xa76>
 8006ccc:	9906      	ldr	r1, [sp, #24]
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	9904      	ldr	r1, [sp, #16]
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	d122      	bne.n	8006d1c <_dtoa_r+0xabc>
 8006cd6:	2a00      	cmp	r2, #0
 8006cd8:	ddee      	ble.n	8006cb8 <_dtoa_r+0xa58>
 8006cda:	ee18 1a10 	vmov	r1, s16
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fad7 	bl	8007294 <__lshift>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	ee08 0a10 	vmov	s16, r0
 8006cec:	f000 fb42 	bl	8007374 <__mcmp>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	dc03      	bgt.n	8006cfc <_dtoa_r+0xa9c>
 8006cf4:	d1e0      	bne.n	8006cb8 <_dtoa_r+0xa58>
 8006cf6:	f01a 0f01 	tst.w	sl, #1
 8006cfa:	d0dd      	beq.n	8006cb8 <_dtoa_r+0xa58>
 8006cfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d00:	d1d7      	bne.n	8006cb2 <_dtoa_r+0xa52>
 8006d02:	2339      	movs	r3, #57	; 0x39
 8006d04:	f88b 3000 	strb.w	r3, [fp]
 8006d08:	462b      	mov	r3, r5
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d12:	2a39      	cmp	r2, #57	; 0x39
 8006d14:	d071      	beq.n	8006dfa <_dtoa_r+0xb9a>
 8006d16:	3201      	adds	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e746      	b.n	8006baa <_dtoa_r+0x94a>
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	dd07      	ble.n	8006d30 <_dtoa_r+0xad0>
 8006d20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d24:	d0ed      	beq.n	8006d02 <_dtoa_r+0xaa2>
 8006d26:	f10a 0301 	add.w	r3, sl, #1
 8006d2a:	f88b 3000 	strb.w	r3, [fp]
 8006d2e:	e73c      	b.n	8006baa <_dtoa_r+0x94a>
 8006d30:	9b05      	ldr	r3, [sp, #20]
 8006d32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006d36:	4599      	cmp	r9, r3
 8006d38:	d047      	beq.n	8006dca <_dtoa_r+0xb6a>
 8006d3a:	ee18 1a10 	vmov	r1, s16
 8006d3e:	2300      	movs	r3, #0
 8006d40:	220a      	movs	r2, #10
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 f8f6 	bl	8006f34 <__multadd>
 8006d48:	45b8      	cmp	r8, r7
 8006d4a:	ee08 0a10 	vmov	s16, r0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	f04f 020a 	mov.w	r2, #10
 8006d56:	4641      	mov	r1, r8
 8006d58:	4620      	mov	r0, r4
 8006d5a:	d106      	bne.n	8006d6a <_dtoa_r+0xb0a>
 8006d5c:	f000 f8ea 	bl	8006f34 <__multadd>
 8006d60:	4680      	mov	r8, r0
 8006d62:	4607      	mov	r7, r0
 8006d64:	f109 0901 	add.w	r9, r9, #1
 8006d68:	e772      	b.n	8006c50 <_dtoa_r+0x9f0>
 8006d6a:	f000 f8e3 	bl	8006f34 <__multadd>
 8006d6e:	4639      	mov	r1, r7
 8006d70:	4680      	mov	r8, r0
 8006d72:	2300      	movs	r3, #0
 8006d74:	220a      	movs	r2, #10
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f8dc 	bl	8006f34 <__multadd>
 8006d7c:	4607      	mov	r7, r0
 8006d7e:	e7f1      	b.n	8006d64 <_dtoa_r+0xb04>
 8006d80:	9b03      	ldr	r3, [sp, #12]
 8006d82:	9302      	str	r3, [sp, #8]
 8006d84:	9d01      	ldr	r5, [sp, #4]
 8006d86:	ee18 0a10 	vmov	r0, s16
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	f7ff f9dc 	bl	8006148 <quorem>
 8006d90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	f805 ab01 	strb.w	sl, [r5], #1
 8006d9a:	1aea      	subs	r2, r5, r3
 8006d9c:	9b02      	ldr	r3, [sp, #8]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	dd09      	ble.n	8006db6 <_dtoa_r+0xb56>
 8006da2:	ee18 1a10 	vmov	r1, s16
 8006da6:	2300      	movs	r3, #0
 8006da8:	220a      	movs	r2, #10
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f8c2 	bl	8006f34 <__multadd>
 8006db0:	ee08 0a10 	vmov	s16, r0
 8006db4:	e7e7      	b.n	8006d86 <_dtoa_r+0xb26>
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfc8      	it	gt
 8006dbc:	461d      	movgt	r5, r3
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	bfd8      	it	le
 8006dc2:	2501      	movle	r5, #1
 8006dc4:	441d      	add	r5, r3
 8006dc6:	f04f 0800 	mov.w	r8, #0
 8006dca:	ee18 1a10 	vmov	r1, s16
 8006dce:	2201      	movs	r2, #1
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fa5f 	bl	8007294 <__lshift>
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	ee08 0a10 	vmov	s16, r0
 8006ddc:	f000 faca 	bl	8007374 <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	dc91      	bgt.n	8006d08 <_dtoa_r+0xaa8>
 8006de4:	d102      	bne.n	8006dec <_dtoa_r+0xb8c>
 8006de6:	f01a 0f01 	tst.w	sl, #1
 8006dea:	d18d      	bne.n	8006d08 <_dtoa_r+0xaa8>
 8006dec:	462b      	mov	r3, r5
 8006dee:	461d      	mov	r5, r3
 8006df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006df4:	2a30      	cmp	r2, #48	; 0x30
 8006df6:	d0fa      	beq.n	8006dee <_dtoa_r+0xb8e>
 8006df8:	e6d7      	b.n	8006baa <_dtoa_r+0x94a>
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d184      	bne.n	8006d0a <_dtoa_r+0xaaa>
 8006e00:	9b00      	ldr	r3, [sp, #0]
 8006e02:	3301      	adds	r3, #1
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	2331      	movs	r3, #49	; 0x31
 8006e08:	7013      	strb	r3, [r2, #0]
 8006e0a:	e6ce      	b.n	8006baa <_dtoa_r+0x94a>
 8006e0c:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <_dtoa_r+0xbd4>)
 8006e0e:	f7ff ba95 	b.w	800633c <_dtoa_r+0xdc>
 8006e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f47f aa6e 	bne.w	80062f6 <_dtoa_r+0x96>
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <_dtoa_r+0xbd8>)
 8006e1c:	f7ff ba8e 	b.w	800633c <_dtoa_r+0xdc>
 8006e20:	9b02      	ldr	r3, [sp, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dcae      	bgt.n	8006d84 <_dtoa_r+0xb24>
 8006e26:	9b06      	ldr	r3, [sp, #24]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	f73f aea8 	bgt.w	8006b7e <_dtoa_r+0x91e>
 8006e2e:	e7a9      	b.n	8006d84 <_dtoa_r+0xb24>
 8006e30:	0800873b 	.word	0x0800873b
 8006e34:	08008698 	.word	0x08008698
 8006e38:	080086bc 	.word	0x080086bc

08006e3c <_localeconv_r>:
 8006e3c:	4800      	ldr	r0, [pc, #0]	; (8006e40 <_localeconv_r+0x4>)
 8006e3e:	4770      	bx	lr
 8006e40:	20000198 	.word	0x20000198

08006e44 <malloc>:
 8006e44:	4b02      	ldr	r3, [pc, #8]	; (8006e50 <malloc+0xc>)
 8006e46:	4601      	mov	r1, r0
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f000 bc17 	b.w	800767c <_malloc_r>
 8006e4e:	bf00      	nop
 8006e50:	20000044 	.word	0x20000044

08006e54 <memcpy>:
 8006e54:	440a      	add	r2, r1
 8006e56:	4291      	cmp	r1, r2
 8006e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e5c:	d100      	bne.n	8006e60 <memcpy+0xc>
 8006e5e:	4770      	bx	lr
 8006e60:	b510      	push	{r4, lr}
 8006e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e6a:	4291      	cmp	r1, r2
 8006e6c:	d1f9      	bne.n	8006e62 <memcpy+0xe>
 8006e6e:	bd10      	pop	{r4, pc}

08006e70 <_Balloc>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e74:	4604      	mov	r4, r0
 8006e76:	460d      	mov	r5, r1
 8006e78:	b976      	cbnz	r6, 8006e98 <_Balloc+0x28>
 8006e7a:	2010      	movs	r0, #16
 8006e7c:	f7ff ffe2 	bl	8006e44 <malloc>
 8006e80:	4602      	mov	r2, r0
 8006e82:	6260      	str	r0, [r4, #36]	; 0x24
 8006e84:	b920      	cbnz	r0, 8006e90 <_Balloc+0x20>
 8006e86:	4b18      	ldr	r3, [pc, #96]	; (8006ee8 <_Balloc+0x78>)
 8006e88:	4818      	ldr	r0, [pc, #96]	; (8006eec <_Balloc+0x7c>)
 8006e8a:	2166      	movs	r1, #102	; 0x66
 8006e8c:	f000 fdd6 	bl	8007a3c <__assert_func>
 8006e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e94:	6006      	str	r6, [r0, #0]
 8006e96:	60c6      	str	r6, [r0, #12]
 8006e98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e9a:	68f3      	ldr	r3, [r6, #12]
 8006e9c:	b183      	cbz	r3, 8006ec0 <_Balloc+0x50>
 8006e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ea6:	b9b8      	cbnz	r0, 8006ed8 <_Balloc+0x68>
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8006eae:	1d72      	adds	r2, r6, #5
 8006eb0:	0092      	lsls	r2, r2, #2
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 fb60 	bl	8007578 <_calloc_r>
 8006eb8:	b160      	cbz	r0, 8006ed4 <_Balloc+0x64>
 8006eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ebe:	e00e      	b.n	8006ede <_Balloc+0x6e>
 8006ec0:	2221      	movs	r2, #33	; 0x21
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 fb57 	bl	8007578 <_calloc_r>
 8006eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ecc:	60f0      	str	r0, [r6, #12]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e4      	bne.n	8006e9e <_Balloc+0x2e>
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	6802      	ldr	r2, [r0, #0]
 8006eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ee4:	e7f7      	b.n	8006ed6 <_Balloc+0x66>
 8006ee6:	bf00      	nop
 8006ee8:	080086c9 	.word	0x080086c9
 8006eec:	0800874c 	.word	0x0800874c

08006ef0 <_Bfree>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	b976      	cbnz	r6, 8006f18 <_Bfree+0x28>
 8006efa:	2010      	movs	r0, #16
 8006efc:	f7ff ffa2 	bl	8006e44 <malloc>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6268      	str	r0, [r5, #36]	; 0x24
 8006f04:	b920      	cbnz	r0, 8006f10 <_Bfree+0x20>
 8006f06:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <_Bfree+0x3c>)
 8006f08:	4809      	ldr	r0, [pc, #36]	; (8006f30 <_Bfree+0x40>)
 8006f0a:	218a      	movs	r1, #138	; 0x8a
 8006f0c:	f000 fd96 	bl	8007a3c <__assert_func>
 8006f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f14:	6006      	str	r6, [r0, #0]
 8006f16:	60c6      	str	r6, [r0, #12]
 8006f18:	b13c      	cbz	r4, 8006f2a <_Bfree+0x3a>
 8006f1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f1c:	6862      	ldr	r2, [r4, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f24:	6021      	str	r1, [r4, #0]
 8006f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	080086c9 	.word	0x080086c9
 8006f30:	0800874c 	.word	0x0800874c

08006f34 <__multadd>:
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f38:	690d      	ldr	r5, [r1, #16]
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	461e      	mov	r6, r3
 8006f40:	f101 0c14 	add.w	ip, r1, #20
 8006f44:	2000      	movs	r0, #0
 8006f46:	f8dc 3000 	ldr.w	r3, [ip]
 8006f4a:	b299      	uxth	r1, r3
 8006f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8006f50:	0c1e      	lsrs	r6, r3, #16
 8006f52:	0c0b      	lsrs	r3, r1, #16
 8006f54:	fb02 3306 	mla	r3, r2, r6, r3
 8006f58:	b289      	uxth	r1, r1
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f60:	4285      	cmp	r5, r0
 8006f62:	f84c 1b04 	str.w	r1, [ip], #4
 8006f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f6a:	dcec      	bgt.n	8006f46 <__multadd+0x12>
 8006f6c:	b30e      	cbz	r6, 8006fb2 <__multadd+0x7e>
 8006f6e:	68a3      	ldr	r3, [r4, #8]
 8006f70:	42ab      	cmp	r3, r5
 8006f72:	dc19      	bgt.n	8006fa8 <__multadd+0x74>
 8006f74:	6861      	ldr	r1, [r4, #4]
 8006f76:	4638      	mov	r0, r7
 8006f78:	3101      	adds	r1, #1
 8006f7a:	f7ff ff79 	bl	8006e70 <_Balloc>
 8006f7e:	4680      	mov	r8, r0
 8006f80:	b928      	cbnz	r0, 8006f8e <__multadd+0x5a>
 8006f82:	4602      	mov	r2, r0
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <__multadd+0x84>)
 8006f86:	480d      	ldr	r0, [pc, #52]	; (8006fbc <__multadd+0x88>)
 8006f88:	21b5      	movs	r1, #181	; 0xb5
 8006f8a:	f000 fd57 	bl	8007a3c <__assert_func>
 8006f8e:	6922      	ldr	r2, [r4, #16]
 8006f90:	3202      	adds	r2, #2
 8006f92:	f104 010c 	add.w	r1, r4, #12
 8006f96:	0092      	lsls	r2, r2, #2
 8006f98:	300c      	adds	r0, #12
 8006f9a:	f7ff ff5b 	bl	8006e54 <memcpy>
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f7ff ffa5 	bl	8006ef0 <_Bfree>
 8006fa6:	4644      	mov	r4, r8
 8006fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fac:	3501      	adds	r5, #1
 8006fae:	615e      	str	r6, [r3, #20]
 8006fb0:	6125      	str	r5, [r4, #16]
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb8:	0800873b 	.word	0x0800873b
 8006fbc:	0800874c 	.word	0x0800874c

08006fc0 <__hi0bits>:
 8006fc0:	0c03      	lsrs	r3, r0, #16
 8006fc2:	041b      	lsls	r3, r3, #16
 8006fc4:	b9d3      	cbnz	r3, 8006ffc <__hi0bits+0x3c>
 8006fc6:	0400      	lsls	r0, r0, #16
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fce:	bf04      	itt	eq
 8006fd0:	0200      	lsleq	r0, r0, #8
 8006fd2:	3308      	addeq	r3, #8
 8006fd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fd8:	bf04      	itt	eq
 8006fda:	0100      	lsleq	r0, r0, #4
 8006fdc:	3304      	addeq	r3, #4
 8006fde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fe2:	bf04      	itt	eq
 8006fe4:	0080      	lsleq	r0, r0, #2
 8006fe6:	3302      	addeq	r3, #2
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	db05      	blt.n	8006ff8 <__hi0bits+0x38>
 8006fec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ff0:	f103 0301 	add.w	r3, r3, #1
 8006ff4:	bf08      	it	eq
 8006ff6:	2320      	moveq	r3, #32
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	4770      	bx	lr
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e7e4      	b.n	8006fca <__hi0bits+0xa>

08007000 <__lo0bits>:
 8007000:	6803      	ldr	r3, [r0, #0]
 8007002:	f013 0207 	ands.w	r2, r3, #7
 8007006:	4601      	mov	r1, r0
 8007008:	d00b      	beq.n	8007022 <__lo0bits+0x22>
 800700a:	07da      	lsls	r2, r3, #31
 800700c:	d423      	bmi.n	8007056 <__lo0bits+0x56>
 800700e:	0798      	lsls	r0, r3, #30
 8007010:	bf49      	itett	mi
 8007012:	085b      	lsrmi	r3, r3, #1
 8007014:	089b      	lsrpl	r3, r3, #2
 8007016:	2001      	movmi	r0, #1
 8007018:	600b      	strmi	r3, [r1, #0]
 800701a:	bf5c      	itt	pl
 800701c:	600b      	strpl	r3, [r1, #0]
 800701e:	2002      	movpl	r0, #2
 8007020:	4770      	bx	lr
 8007022:	b298      	uxth	r0, r3
 8007024:	b9a8      	cbnz	r0, 8007052 <__lo0bits+0x52>
 8007026:	0c1b      	lsrs	r3, r3, #16
 8007028:	2010      	movs	r0, #16
 800702a:	b2da      	uxtb	r2, r3
 800702c:	b90a      	cbnz	r2, 8007032 <__lo0bits+0x32>
 800702e:	3008      	adds	r0, #8
 8007030:	0a1b      	lsrs	r3, r3, #8
 8007032:	071a      	lsls	r2, r3, #28
 8007034:	bf04      	itt	eq
 8007036:	091b      	lsreq	r3, r3, #4
 8007038:	3004      	addeq	r0, #4
 800703a:	079a      	lsls	r2, r3, #30
 800703c:	bf04      	itt	eq
 800703e:	089b      	lsreq	r3, r3, #2
 8007040:	3002      	addeq	r0, #2
 8007042:	07da      	lsls	r2, r3, #31
 8007044:	d403      	bmi.n	800704e <__lo0bits+0x4e>
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	f100 0001 	add.w	r0, r0, #1
 800704c:	d005      	beq.n	800705a <__lo0bits+0x5a>
 800704e:	600b      	str	r3, [r1, #0]
 8007050:	4770      	bx	lr
 8007052:	4610      	mov	r0, r2
 8007054:	e7e9      	b.n	800702a <__lo0bits+0x2a>
 8007056:	2000      	movs	r0, #0
 8007058:	4770      	bx	lr
 800705a:	2020      	movs	r0, #32
 800705c:	4770      	bx	lr
	...

08007060 <__i2b>:
 8007060:	b510      	push	{r4, lr}
 8007062:	460c      	mov	r4, r1
 8007064:	2101      	movs	r1, #1
 8007066:	f7ff ff03 	bl	8006e70 <_Balloc>
 800706a:	4602      	mov	r2, r0
 800706c:	b928      	cbnz	r0, 800707a <__i2b+0x1a>
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <__i2b+0x24>)
 8007070:	4805      	ldr	r0, [pc, #20]	; (8007088 <__i2b+0x28>)
 8007072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007076:	f000 fce1 	bl	8007a3c <__assert_func>
 800707a:	2301      	movs	r3, #1
 800707c:	6144      	str	r4, [r0, #20]
 800707e:	6103      	str	r3, [r0, #16]
 8007080:	bd10      	pop	{r4, pc}
 8007082:	bf00      	nop
 8007084:	0800873b 	.word	0x0800873b
 8007088:	0800874c 	.word	0x0800874c

0800708c <__multiply>:
 800708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007090:	4691      	mov	r9, r2
 8007092:	690a      	ldr	r2, [r1, #16]
 8007094:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007098:	429a      	cmp	r2, r3
 800709a:	bfb8      	it	lt
 800709c:	460b      	movlt	r3, r1
 800709e:	460c      	mov	r4, r1
 80070a0:	bfbc      	itt	lt
 80070a2:	464c      	movlt	r4, r9
 80070a4:	4699      	movlt	r9, r3
 80070a6:	6927      	ldr	r7, [r4, #16]
 80070a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80070ac:	68a3      	ldr	r3, [r4, #8]
 80070ae:	6861      	ldr	r1, [r4, #4]
 80070b0:	eb07 060a 	add.w	r6, r7, sl
 80070b4:	42b3      	cmp	r3, r6
 80070b6:	b085      	sub	sp, #20
 80070b8:	bfb8      	it	lt
 80070ba:	3101      	addlt	r1, #1
 80070bc:	f7ff fed8 	bl	8006e70 <_Balloc>
 80070c0:	b930      	cbnz	r0, 80070d0 <__multiply+0x44>
 80070c2:	4602      	mov	r2, r0
 80070c4:	4b44      	ldr	r3, [pc, #272]	; (80071d8 <__multiply+0x14c>)
 80070c6:	4845      	ldr	r0, [pc, #276]	; (80071dc <__multiply+0x150>)
 80070c8:	f240 115d 	movw	r1, #349	; 0x15d
 80070cc:	f000 fcb6 	bl	8007a3c <__assert_func>
 80070d0:	f100 0514 	add.w	r5, r0, #20
 80070d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070d8:	462b      	mov	r3, r5
 80070da:	2200      	movs	r2, #0
 80070dc:	4543      	cmp	r3, r8
 80070de:	d321      	bcc.n	8007124 <__multiply+0x98>
 80070e0:	f104 0314 	add.w	r3, r4, #20
 80070e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070e8:	f109 0314 	add.w	r3, r9, #20
 80070ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070f0:	9202      	str	r2, [sp, #8]
 80070f2:	1b3a      	subs	r2, r7, r4
 80070f4:	3a15      	subs	r2, #21
 80070f6:	f022 0203 	bic.w	r2, r2, #3
 80070fa:	3204      	adds	r2, #4
 80070fc:	f104 0115 	add.w	r1, r4, #21
 8007100:	428f      	cmp	r7, r1
 8007102:	bf38      	it	cc
 8007104:	2204      	movcc	r2, #4
 8007106:	9201      	str	r2, [sp, #4]
 8007108:	9a02      	ldr	r2, [sp, #8]
 800710a:	9303      	str	r3, [sp, #12]
 800710c:	429a      	cmp	r2, r3
 800710e:	d80c      	bhi.n	800712a <__multiply+0x9e>
 8007110:	2e00      	cmp	r6, #0
 8007112:	dd03      	ble.n	800711c <__multiply+0x90>
 8007114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007118:	2b00      	cmp	r3, #0
 800711a:	d05a      	beq.n	80071d2 <__multiply+0x146>
 800711c:	6106      	str	r6, [r0, #16]
 800711e:	b005      	add	sp, #20
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	f843 2b04 	str.w	r2, [r3], #4
 8007128:	e7d8      	b.n	80070dc <__multiply+0x50>
 800712a:	f8b3 a000 	ldrh.w	sl, [r3]
 800712e:	f1ba 0f00 	cmp.w	sl, #0
 8007132:	d024      	beq.n	800717e <__multiply+0xf2>
 8007134:	f104 0e14 	add.w	lr, r4, #20
 8007138:	46a9      	mov	r9, r5
 800713a:	f04f 0c00 	mov.w	ip, #0
 800713e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007142:	f8d9 1000 	ldr.w	r1, [r9]
 8007146:	fa1f fb82 	uxth.w	fp, r2
 800714a:	b289      	uxth	r1, r1
 800714c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007154:	f8d9 2000 	ldr.w	r2, [r9]
 8007158:	4461      	add	r1, ip
 800715a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800715e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007166:	b289      	uxth	r1, r1
 8007168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800716c:	4577      	cmp	r7, lr
 800716e:	f849 1b04 	str.w	r1, [r9], #4
 8007172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007176:	d8e2      	bhi.n	800713e <__multiply+0xb2>
 8007178:	9a01      	ldr	r2, [sp, #4]
 800717a:	f845 c002 	str.w	ip, [r5, r2]
 800717e:	9a03      	ldr	r2, [sp, #12]
 8007180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007184:	3304      	adds	r3, #4
 8007186:	f1b9 0f00 	cmp.w	r9, #0
 800718a:	d020      	beq.n	80071ce <__multiply+0x142>
 800718c:	6829      	ldr	r1, [r5, #0]
 800718e:	f104 0c14 	add.w	ip, r4, #20
 8007192:	46ae      	mov	lr, r5
 8007194:	f04f 0a00 	mov.w	sl, #0
 8007198:	f8bc b000 	ldrh.w	fp, [ip]
 800719c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80071a0:	fb09 220b 	mla	r2, r9, fp, r2
 80071a4:	4492      	add	sl, r2
 80071a6:	b289      	uxth	r1, r1
 80071a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80071ac:	f84e 1b04 	str.w	r1, [lr], #4
 80071b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071b4:	f8be 1000 	ldrh.w	r1, [lr]
 80071b8:	0c12      	lsrs	r2, r2, #16
 80071ba:	fb09 1102 	mla	r1, r9, r2, r1
 80071be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80071c2:	4567      	cmp	r7, ip
 80071c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071c8:	d8e6      	bhi.n	8007198 <__multiply+0x10c>
 80071ca:	9a01      	ldr	r2, [sp, #4]
 80071cc:	50a9      	str	r1, [r5, r2]
 80071ce:	3504      	adds	r5, #4
 80071d0:	e79a      	b.n	8007108 <__multiply+0x7c>
 80071d2:	3e01      	subs	r6, #1
 80071d4:	e79c      	b.n	8007110 <__multiply+0x84>
 80071d6:	bf00      	nop
 80071d8:	0800873b 	.word	0x0800873b
 80071dc:	0800874c 	.word	0x0800874c

080071e0 <__pow5mult>:
 80071e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e4:	4615      	mov	r5, r2
 80071e6:	f012 0203 	ands.w	r2, r2, #3
 80071ea:	4606      	mov	r6, r0
 80071ec:	460f      	mov	r7, r1
 80071ee:	d007      	beq.n	8007200 <__pow5mult+0x20>
 80071f0:	4c25      	ldr	r4, [pc, #148]	; (8007288 <__pow5mult+0xa8>)
 80071f2:	3a01      	subs	r2, #1
 80071f4:	2300      	movs	r3, #0
 80071f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071fa:	f7ff fe9b 	bl	8006f34 <__multadd>
 80071fe:	4607      	mov	r7, r0
 8007200:	10ad      	asrs	r5, r5, #2
 8007202:	d03d      	beq.n	8007280 <__pow5mult+0xa0>
 8007204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007206:	b97c      	cbnz	r4, 8007228 <__pow5mult+0x48>
 8007208:	2010      	movs	r0, #16
 800720a:	f7ff fe1b 	bl	8006e44 <malloc>
 800720e:	4602      	mov	r2, r0
 8007210:	6270      	str	r0, [r6, #36]	; 0x24
 8007212:	b928      	cbnz	r0, 8007220 <__pow5mult+0x40>
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <__pow5mult+0xac>)
 8007216:	481e      	ldr	r0, [pc, #120]	; (8007290 <__pow5mult+0xb0>)
 8007218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800721c:	f000 fc0e 	bl	8007a3c <__assert_func>
 8007220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007224:	6004      	str	r4, [r0, #0]
 8007226:	60c4      	str	r4, [r0, #12]
 8007228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800722c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007230:	b94c      	cbnz	r4, 8007246 <__pow5mult+0x66>
 8007232:	f240 2171 	movw	r1, #625	; 0x271
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ff12 	bl	8007060 <__i2b>
 800723c:	2300      	movs	r3, #0
 800723e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007242:	4604      	mov	r4, r0
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	f04f 0900 	mov.w	r9, #0
 800724a:	07eb      	lsls	r3, r5, #31
 800724c:	d50a      	bpl.n	8007264 <__pow5mult+0x84>
 800724e:	4639      	mov	r1, r7
 8007250:	4622      	mov	r2, r4
 8007252:	4630      	mov	r0, r6
 8007254:	f7ff ff1a 	bl	800708c <__multiply>
 8007258:	4639      	mov	r1, r7
 800725a:	4680      	mov	r8, r0
 800725c:	4630      	mov	r0, r6
 800725e:	f7ff fe47 	bl	8006ef0 <_Bfree>
 8007262:	4647      	mov	r7, r8
 8007264:	106d      	asrs	r5, r5, #1
 8007266:	d00b      	beq.n	8007280 <__pow5mult+0xa0>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	b938      	cbnz	r0, 800727c <__pow5mult+0x9c>
 800726c:	4622      	mov	r2, r4
 800726e:	4621      	mov	r1, r4
 8007270:	4630      	mov	r0, r6
 8007272:	f7ff ff0b 	bl	800708c <__multiply>
 8007276:	6020      	str	r0, [r4, #0]
 8007278:	f8c0 9000 	str.w	r9, [r0]
 800727c:	4604      	mov	r4, r0
 800727e:	e7e4      	b.n	800724a <__pow5mult+0x6a>
 8007280:	4638      	mov	r0, r7
 8007282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007286:	bf00      	nop
 8007288:	08008898 	.word	0x08008898
 800728c:	080086c9 	.word	0x080086c9
 8007290:	0800874c 	.word	0x0800874c

08007294 <__lshift>:
 8007294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	460c      	mov	r4, r1
 800729a:	6849      	ldr	r1, [r1, #4]
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	4607      	mov	r7, r0
 80072a6:	4691      	mov	r9, r2
 80072a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072ac:	f108 0601 	add.w	r6, r8, #1
 80072b0:	42b3      	cmp	r3, r6
 80072b2:	db0b      	blt.n	80072cc <__lshift+0x38>
 80072b4:	4638      	mov	r0, r7
 80072b6:	f7ff fddb 	bl	8006e70 <_Balloc>
 80072ba:	4605      	mov	r5, r0
 80072bc:	b948      	cbnz	r0, 80072d2 <__lshift+0x3e>
 80072be:	4602      	mov	r2, r0
 80072c0:	4b2a      	ldr	r3, [pc, #168]	; (800736c <__lshift+0xd8>)
 80072c2:	482b      	ldr	r0, [pc, #172]	; (8007370 <__lshift+0xdc>)
 80072c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072c8:	f000 fbb8 	bl	8007a3c <__assert_func>
 80072cc:	3101      	adds	r1, #1
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	e7ee      	b.n	80072b0 <__lshift+0x1c>
 80072d2:	2300      	movs	r3, #0
 80072d4:	f100 0114 	add.w	r1, r0, #20
 80072d8:	f100 0210 	add.w	r2, r0, #16
 80072dc:	4618      	mov	r0, r3
 80072de:	4553      	cmp	r3, sl
 80072e0:	db37      	blt.n	8007352 <__lshift+0xbe>
 80072e2:	6920      	ldr	r0, [r4, #16]
 80072e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072e8:	f104 0314 	add.w	r3, r4, #20
 80072ec:	f019 091f 	ands.w	r9, r9, #31
 80072f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072f8:	d02f      	beq.n	800735a <__lshift+0xc6>
 80072fa:	f1c9 0e20 	rsb	lr, r9, #32
 80072fe:	468a      	mov	sl, r1
 8007300:	f04f 0c00 	mov.w	ip, #0
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	fa02 f209 	lsl.w	r2, r2, r9
 800730a:	ea42 020c 	orr.w	r2, r2, ip
 800730e:	f84a 2b04 	str.w	r2, [sl], #4
 8007312:	f853 2b04 	ldr.w	r2, [r3], #4
 8007316:	4298      	cmp	r0, r3
 8007318:	fa22 fc0e 	lsr.w	ip, r2, lr
 800731c:	d8f2      	bhi.n	8007304 <__lshift+0x70>
 800731e:	1b03      	subs	r3, r0, r4
 8007320:	3b15      	subs	r3, #21
 8007322:	f023 0303 	bic.w	r3, r3, #3
 8007326:	3304      	adds	r3, #4
 8007328:	f104 0215 	add.w	r2, r4, #21
 800732c:	4290      	cmp	r0, r2
 800732e:	bf38      	it	cc
 8007330:	2304      	movcc	r3, #4
 8007332:	f841 c003 	str.w	ip, [r1, r3]
 8007336:	f1bc 0f00 	cmp.w	ip, #0
 800733a:	d001      	beq.n	8007340 <__lshift+0xac>
 800733c:	f108 0602 	add.w	r6, r8, #2
 8007340:	3e01      	subs	r6, #1
 8007342:	4638      	mov	r0, r7
 8007344:	612e      	str	r6, [r5, #16]
 8007346:	4621      	mov	r1, r4
 8007348:	f7ff fdd2 	bl	8006ef0 <_Bfree>
 800734c:	4628      	mov	r0, r5
 800734e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007352:	f842 0f04 	str.w	r0, [r2, #4]!
 8007356:	3301      	adds	r3, #1
 8007358:	e7c1      	b.n	80072de <__lshift+0x4a>
 800735a:	3904      	subs	r1, #4
 800735c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007360:	f841 2f04 	str.w	r2, [r1, #4]!
 8007364:	4298      	cmp	r0, r3
 8007366:	d8f9      	bhi.n	800735c <__lshift+0xc8>
 8007368:	e7ea      	b.n	8007340 <__lshift+0xac>
 800736a:	bf00      	nop
 800736c:	0800873b 	.word	0x0800873b
 8007370:	0800874c 	.word	0x0800874c

08007374 <__mcmp>:
 8007374:	b530      	push	{r4, r5, lr}
 8007376:	6902      	ldr	r2, [r0, #16]
 8007378:	690c      	ldr	r4, [r1, #16]
 800737a:	1b12      	subs	r2, r2, r4
 800737c:	d10e      	bne.n	800739c <__mcmp+0x28>
 800737e:	f100 0314 	add.w	r3, r0, #20
 8007382:	3114      	adds	r1, #20
 8007384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800738c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007394:	42a5      	cmp	r5, r4
 8007396:	d003      	beq.n	80073a0 <__mcmp+0x2c>
 8007398:	d305      	bcc.n	80073a6 <__mcmp+0x32>
 800739a:	2201      	movs	r2, #1
 800739c:	4610      	mov	r0, r2
 800739e:	bd30      	pop	{r4, r5, pc}
 80073a0:	4283      	cmp	r3, r0
 80073a2:	d3f3      	bcc.n	800738c <__mcmp+0x18>
 80073a4:	e7fa      	b.n	800739c <__mcmp+0x28>
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295
 80073aa:	e7f7      	b.n	800739c <__mcmp+0x28>

080073ac <__mdiff>:
 80073ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	460c      	mov	r4, r1
 80073b2:	4606      	mov	r6, r0
 80073b4:	4611      	mov	r1, r2
 80073b6:	4620      	mov	r0, r4
 80073b8:	4690      	mov	r8, r2
 80073ba:	f7ff ffdb 	bl	8007374 <__mcmp>
 80073be:	1e05      	subs	r5, r0, #0
 80073c0:	d110      	bne.n	80073e4 <__mdiff+0x38>
 80073c2:	4629      	mov	r1, r5
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7ff fd53 	bl	8006e70 <_Balloc>
 80073ca:	b930      	cbnz	r0, 80073da <__mdiff+0x2e>
 80073cc:	4b3a      	ldr	r3, [pc, #232]	; (80074b8 <__mdiff+0x10c>)
 80073ce:	4602      	mov	r2, r0
 80073d0:	f240 2132 	movw	r1, #562	; 0x232
 80073d4:	4839      	ldr	r0, [pc, #228]	; (80074bc <__mdiff+0x110>)
 80073d6:	f000 fb31 	bl	8007a3c <__assert_func>
 80073da:	2301      	movs	r3, #1
 80073dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e4:	bfa4      	itt	ge
 80073e6:	4643      	movge	r3, r8
 80073e8:	46a0      	movge	r8, r4
 80073ea:	4630      	mov	r0, r6
 80073ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073f0:	bfa6      	itte	ge
 80073f2:	461c      	movge	r4, r3
 80073f4:	2500      	movge	r5, #0
 80073f6:	2501      	movlt	r5, #1
 80073f8:	f7ff fd3a 	bl	8006e70 <_Balloc>
 80073fc:	b920      	cbnz	r0, 8007408 <__mdiff+0x5c>
 80073fe:	4b2e      	ldr	r3, [pc, #184]	; (80074b8 <__mdiff+0x10c>)
 8007400:	4602      	mov	r2, r0
 8007402:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007406:	e7e5      	b.n	80073d4 <__mdiff+0x28>
 8007408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800740c:	6926      	ldr	r6, [r4, #16]
 800740e:	60c5      	str	r5, [r0, #12]
 8007410:	f104 0914 	add.w	r9, r4, #20
 8007414:	f108 0514 	add.w	r5, r8, #20
 8007418:	f100 0e14 	add.w	lr, r0, #20
 800741c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007424:	f108 0210 	add.w	r2, r8, #16
 8007428:	46f2      	mov	sl, lr
 800742a:	2100      	movs	r1, #0
 800742c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007430:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007434:	fa1f f883 	uxth.w	r8, r3
 8007438:	fa11 f18b 	uxtah	r1, r1, fp
 800743c:	0c1b      	lsrs	r3, r3, #16
 800743e:	eba1 0808 	sub.w	r8, r1, r8
 8007442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007446:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800744a:	fa1f f888 	uxth.w	r8, r8
 800744e:	1419      	asrs	r1, r3, #16
 8007450:	454e      	cmp	r6, r9
 8007452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007456:	f84a 3b04 	str.w	r3, [sl], #4
 800745a:	d8e7      	bhi.n	800742c <__mdiff+0x80>
 800745c:	1b33      	subs	r3, r6, r4
 800745e:	3b15      	subs	r3, #21
 8007460:	f023 0303 	bic.w	r3, r3, #3
 8007464:	3304      	adds	r3, #4
 8007466:	3415      	adds	r4, #21
 8007468:	42a6      	cmp	r6, r4
 800746a:	bf38      	it	cc
 800746c:	2304      	movcc	r3, #4
 800746e:	441d      	add	r5, r3
 8007470:	4473      	add	r3, lr
 8007472:	469e      	mov	lr, r3
 8007474:	462e      	mov	r6, r5
 8007476:	4566      	cmp	r6, ip
 8007478:	d30e      	bcc.n	8007498 <__mdiff+0xec>
 800747a:	f10c 0203 	add.w	r2, ip, #3
 800747e:	1b52      	subs	r2, r2, r5
 8007480:	f022 0203 	bic.w	r2, r2, #3
 8007484:	3d03      	subs	r5, #3
 8007486:	45ac      	cmp	ip, r5
 8007488:	bf38      	it	cc
 800748a:	2200      	movcc	r2, #0
 800748c:	441a      	add	r2, r3
 800748e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007492:	b17b      	cbz	r3, 80074b4 <__mdiff+0x108>
 8007494:	6107      	str	r7, [r0, #16]
 8007496:	e7a3      	b.n	80073e0 <__mdiff+0x34>
 8007498:	f856 8b04 	ldr.w	r8, [r6], #4
 800749c:	fa11 f288 	uxtah	r2, r1, r8
 80074a0:	1414      	asrs	r4, r2, #16
 80074a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80074a6:	b292      	uxth	r2, r2
 80074a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80074ac:	f84e 2b04 	str.w	r2, [lr], #4
 80074b0:	1421      	asrs	r1, r4, #16
 80074b2:	e7e0      	b.n	8007476 <__mdiff+0xca>
 80074b4:	3f01      	subs	r7, #1
 80074b6:	e7ea      	b.n	800748e <__mdiff+0xe2>
 80074b8:	0800873b 	.word	0x0800873b
 80074bc:	0800874c 	.word	0x0800874c

080074c0 <__d2b>:
 80074c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074c4:	4689      	mov	r9, r1
 80074c6:	2101      	movs	r1, #1
 80074c8:	ec57 6b10 	vmov	r6, r7, d0
 80074cc:	4690      	mov	r8, r2
 80074ce:	f7ff fccf 	bl	8006e70 <_Balloc>
 80074d2:	4604      	mov	r4, r0
 80074d4:	b930      	cbnz	r0, 80074e4 <__d2b+0x24>
 80074d6:	4602      	mov	r2, r0
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <__d2b+0xb0>)
 80074da:	4826      	ldr	r0, [pc, #152]	; (8007574 <__d2b+0xb4>)
 80074dc:	f240 310a 	movw	r1, #778	; 0x30a
 80074e0:	f000 faac 	bl	8007a3c <__assert_func>
 80074e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80074e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074ec:	bb35      	cbnz	r5, 800753c <__d2b+0x7c>
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	d028      	beq.n	8007546 <__d2b+0x86>
 80074f4:	4668      	mov	r0, sp
 80074f6:	9600      	str	r6, [sp, #0]
 80074f8:	f7ff fd82 	bl	8007000 <__lo0bits>
 80074fc:	9900      	ldr	r1, [sp, #0]
 80074fe:	b300      	cbz	r0, 8007542 <__d2b+0x82>
 8007500:	9a01      	ldr	r2, [sp, #4]
 8007502:	f1c0 0320 	rsb	r3, r0, #32
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	430b      	orrs	r3, r1
 800750c:	40c2      	lsrs	r2, r0
 800750e:	6163      	str	r3, [r4, #20]
 8007510:	9201      	str	r2, [sp, #4]
 8007512:	9b01      	ldr	r3, [sp, #4]
 8007514:	61a3      	str	r3, [r4, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	bf14      	ite	ne
 800751a:	2202      	movne	r2, #2
 800751c:	2201      	moveq	r2, #1
 800751e:	6122      	str	r2, [r4, #16]
 8007520:	b1d5      	cbz	r5, 8007558 <__d2b+0x98>
 8007522:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007526:	4405      	add	r5, r0
 8007528:	f8c9 5000 	str.w	r5, [r9]
 800752c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007530:	f8c8 0000 	str.w	r0, [r8]
 8007534:	4620      	mov	r0, r4
 8007536:	b003      	add	sp, #12
 8007538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800753c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007540:	e7d5      	b.n	80074ee <__d2b+0x2e>
 8007542:	6161      	str	r1, [r4, #20]
 8007544:	e7e5      	b.n	8007512 <__d2b+0x52>
 8007546:	a801      	add	r0, sp, #4
 8007548:	f7ff fd5a 	bl	8007000 <__lo0bits>
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	6163      	str	r3, [r4, #20]
 8007550:	2201      	movs	r2, #1
 8007552:	6122      	str	r2, [r4, #16]
 8007554:	3020      	adds	r0, #32
 8007556:	e7e3      	b.n	8007520 <__d2b+0x60>
 8007558:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800755c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007560:	f8c9 0000 	str.w	r0, [r9]
 8007564:	6918      	ldr	r0, [r3, #16]
 8007566:	f7ff fd2b 	bl	8006fc0 <__hi0bits>
 800756a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800756e:	e7df      	b.n	8007530 <__d2b+0x70>
 8007570:	0800873b 	.word	0x0800873b
 8007574:	0800874c 	.word	0x0800874c

08007578 <_calloc_r>:
 8007578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800757a:	fba1 2402 	umull	r2, r4, r1, r2
 800757e:	b94c      	cbnz	r4, 8007594 <_calloc_r+0x1c>
 8007580:	4611      	mov	r1, r2
 8007582:	9201      	str	r2, [sp, #4]
 8007584:	f000 f87a 	bl	800767c <_malloc_r>
 8007588:	9a01      	ldr	r2, [sp, #4]
 800758a:	4605      	mov	r5, r0
 800758c:	b930      	cbnz	r0, 800759c <_calloc_r+0x24>
 800758e:	4628      	mov	r0, r5
 8007590:	b003      	add	sp, #12
 8007592:	bd30      	pop	{r4, r5, pc}
 8007594:	220c      	movs	r2, #12
 8007596:	6002      	str	r2, [r0, #0]
 8007598:	2500      	movs	r5, #0
 800759a:	e7f8      	b.n	800758e <_calloc_r+0x16>
 800759c:	4621      	mov	r1, r4
 800759e:	f7fe f941 	bl	8005824 <memset>
 80075a2:	e7f4      	b.n	800758e <_calloc_r+0x16>

080075a4 <_free_r>:
 80075a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a6:	2900      	cmp	r1, #0
 80075a8:	d044      	beq.n	8007634 <_free_r+0x90>
 80075aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ae:	9001      	str	r0, [sp, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f1a1 0404 	sub.w	r4, r1, #4
 80075b6:	bfb8      	it	lt
 80075b8:	18e4      	addlt	r4, r4, r3
 80075ba:	f000 fa9b 	bl	8007af4 <__malloc_lock>
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <_free_r+0x94>)
 80075c0:	9801      	ldr	r0, [sp, #4]
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	b933      	cbnz	r3, 80075d4 <_free_r+0x30>
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	6014      	str	r4, [r2, #0]
 80075ca:	b003      	add	sp, #12
 80075cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075d0:	f000 ba96 	b.w	8007b00 <__malloc_unlock>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d908      	bls.n	80075ea <_free_r+0x46>
 80075d8:	6825      	ldr	r5, [r4, #0]
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf01      	itttt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	1949      	addeq	r1, r1, r5
 80075e6:	6021      	streq	r1, [r4, #0]
 80075e8:	e7ed      	b.n	80075c6 <_free_r+0x22>
 80075ea:	461a      	mov	r2, r3
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b10b      	cbz	r3, 80075f4 <_free_r+0x50>
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d9fa      	bls.n	80075ea <_free_r+0x46>
 80075f4:	6811      	ldr	r1, [r2, #0]
 80075f6:	1855      	adds	r5, r2, r1
 80075f8:	42a5      	cmp	r5, r4
 80075fa:	d10b      	bne.n	8007614 <_free_r+0x70>
 80075fc:	6824      	ldr	r4, [r4, #0]
 80075fe:	4421      	add	r1, r4
 8007600:	1854      	adds	r4, r2, r1
 8007602:	42a3      	cmp	r3, r4
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	d1e0      	bne.n	80075ca <_free_r+0x26>
 8007608:	681c      	ldr	r4, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6053      	str	r3, [r2, #4]
 800760e:	4421      	add	r1, r4
 8007610:	6011      	str	r1, [r2, #0]
 8007612:	e7da      	b.n	80075ca <_free_r+0x26>
 8007614:	d902      	bls.n	800761c <_free_r+0x78>
 8007616:	230c      	movs	r3, #12
 8007618:	6003      	str	r3, [r0, #0]
 800761a:	e7d6      	b.n	80075ca <_free_r+0x26>
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	1961      	adds	r1, r4, r5
 8007620:	428b      	cmp	r3, r1
 8007622:	bf04      	itt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	bf04      	itt	eq
 800762c:	1949      	addeq	r1, r1, r5
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	6054      	str	r4, [r2, #4]
 8007632:	e7ca      	b.n	80075ca <_free_r+0x26>
 8007634:	b003      	add	sp, #12
 8007636:	bd30      	pop	{r4, r5, pc}
 8007638:	20000448 	.word	0x20000448

0800763c <sbrk_aligned>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	4e0e      	ldr	r6, [pc, #56]	; (8007678 <sbrk_aligned+0x3c>)
 8007640:	460c      	mov	r4, r1
 8007642:	6831      	ldr	r1, [r6, #0]
 8007644:	4605      	mov	r5, r0
 8007646:	b911      	cbnz	r1, 800764e <sbrk_aligned+0x12>
 8007648:	f000 f9e8 	bl	8007a1c <_sbrk_r>
 800764c:	6030      	str	r0, [r6, #0]
 800764e:	4621      	mov	r1, r4
 8007650:	4628      	mov	r0, r5
 8007652:	f000 f9e3 	bl	8007a1c <_sbrk_r>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	d00a      	beq.n	8007670 <sbrk_aligned+0x34>
 800765a:	1cc4      	adds	r4, r0, #3
 800765c:	f024 0403 	bic.w	r4, r4, #3
 8007660:	42a0      	cmp	r0, r4
 8007662:	d007      	beq.n	8007674 <sbrk_aligned+0x38>
 8007664:	1a21      	subs	r1, r4, r0
 8007666:	4628      	mov	r0, r5
 8007668:	f000 f9d8 	bl	8007a1c <_sbrk_r>
 800766c:	3001      	adds	r0, #1
 800766e:	d101      	bne.n	8007674 <sbrk_aligned+0x38>
 8007670:	f04f 34ff 	mov.w	r4, #4294967295
 8007674:	4620      	mov	r0, r4
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	2000044c 	.word	0x2000044c

0800767c <_malloc_r>:
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	1ccd      	adds	r5, r1, #3
 8007682:	f025 0503 	bic.w	r5, r5, #3
 8007686:	3508      	adds	r5, #8
 8007688:	2d0c      	cmp	r5, #12
 800768a:	bf38      	it	cc
 800768c:	250c      	movcc	r5, #12
 800768e:	2d00      	cmp	r5, #0
 8007690:	4607      	mov	r7, r0
 8007692:	db01      	blt.n	8007698 <_malloc_r+0x1c>
 8007694:	42a9      	cmp	r1, r5
 8007696:	d905      	bls.n	80076a4 <_malloc_r+0x28>
 8007698:	230c      	movs	r3, #12
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	2600      	movs	r6, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	4e2e      	ldr	r6, [pc, #184]	; (8007760 <_malloc_r+0xe4>)
 80076a6:	f000 fa25 	bl	8007af4 <__malloc_lock>
 80076aa:	6833      	ldr	r3, [r6, #0]
 80076ac:	461c      	mov	r4, r3
 80076ae:	bb34      	cbnz	r4, 80076fe <_malloc_r+0x82>
 80076b0:	4629      	mov	r1, r5
 80076b2:	4638      	mov	r0, r7
 80076b4:	f7ff ffc2 	bl	800763c <sbrk_aligned>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	4604      	mov	r4, r0
 80076bc:	d14d      	bne.n	800775a <_malloc_r+0xde>
 80076be:	6834      	ldr	r4, [r6, #0]
 80076c0:	4626      	mov	r6, r4
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	d140      	bne.n	8007748 <_malloc_r+0xcc>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	4631      	mov	r1, r6
 80076ca:	4638      	mov	r0, r7
 80076cc:	eb04 0803 	add.w	r8, r4, r3
 80076d0:	f000 f9a4 	bl	8007a1c <_sbrk_r>
 80076d4:	4580      	cmp	r8, r0
 80076d6:	d13a      	bne.n	800774e <_malloc_r+0xd2>
 80076d8:	6821      	ldr	r1, [r4, #0]
 80076da:	3503      	adds	r5, #3
 80076dc:	1a6d      	subs	r5, r5, r1
 80076de:	f025 0503 	bic.w	r5, r5, #3
 80076e2:	3508      	adds	r5, #8
 80076e4:	2d0c      	cmp	r5, #12
 80076e6:	bf38      	it	cc
 80076e8:	250c      	movcc	r5, #12
 80076ea:	4629      	mov	r1, r5
 80076ec:	4638      	mov	r0, r7
 80076ee:	f7ff ffa5 	bl	800763c <sbrk_aligned>
 80076f2:	3001      	adds	r0, #1
 80076f4:	d02b      	beq.n	800774e <_malloc_r+0xd2>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	442b      	add	r3, r5
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	e00e      	b.n	800771c <_malloc_r+0xa0>
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	1b52      	subs	r2, r2, r5
 8007702:	d41e      	bmi.n	8007742 <_malloc_r+0xc6>
 8007704:	2a0b      	cmp	r2, #11
 8007706:	d916      	bls.n	8007736 <_malloc_r+0xba>
 8007708:	1961      	adds	r1, r4, r5
 800770a:	42a3      	cmp	r3, r4
 800770c:	6025      	str	r5, [r4, #0]
 800770e:	bf18      	it	ne
 8007710:	6059      	strne	r1, [r3, #4]
 8007712:	6863      	ldr	r3, [r4, #4]
 8007714:	bf08      	it	eq
 8007716:	6031      	streq	r1, [r6, #0]
 8007718:	5162      	str	r2, [r4, r5]
 800771a:	604b      	str	r3, [r1, #4]
 800771c:	4638      	mov	r0, r7
 800771e:	f104 060b 	add.w	r6, r4, #11
 8007722:	f000 f9ed 	bl	8007b00 <__malloc_unlock>
 8007726:	f026 0607 	bic.w	r6, r6, #7
 800772a:	1d23      	adds	r3, r4, #4
 800772c:	1af2      	subs	r2, r6, r3
 800772e:	d0b6      	beq.n	800769e <_malloc_r+0x22>
 8007730:	1b9b      	subs	r3, r3, r6
 8007732:	50a3      	str	r3, [r4, r2]
 8007734:	e7b3      	b.n	800769e <_malloc_r+0x22>
 8007736:	6862      	ldr	r2, [r4, #4]
 8007738:	42a3      	cmp	r3, r4
 800773a:	bf0c      	ite	eq
 800773c:	6032      	streq	r2, [r6, #0]
 800773e:	605a      	strne	r2, [r3, #4]
 8007740:	e7ec      	b.n	800771c <_malloc_r+0xa0>
 8007742:	4623      	mov	r3, r4
 8007744:	6864      	ldr	r4, [r4, #4]
 8007746:	e7b2      	b.n	80076ae <_malloc_r+0x32>
 8007748:	4634      	mov	r4, r6
 800774a:	6876      	ldr	r6, [r6, #4]
 800774c:	e7b9      	b.n	80076c2 <_malloc_r+0x46>
 800774e:	230c      	movs	r3, #12
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4638      	mov	r0, r7
 8007754:	f000 f9d4 	bl	8007b00 <__malloc_unlock>
 8007758:	e7a1      	b.n	800769e <_malloc_r+0x22>
 800775a:	6025      	str	r5, [r4, #0]
 800775c:	e7de      	b.n	800771c <_malloc_r+0xa0>
 800775e:	bf00      	nop
 8007760:	20000448 	.word	0x20000448

08007764 <__ssputs_r>:
 8007764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007768:	688e      	ldr	r6, [r1, #8]
 800776a:	429e      	cmp	r6, r3
 800776c:	4682      	mov	sl, r0
 800776e:	460c      	mov	r4, r1
 8007770:	4690      	mov	r8, r2
 8007772:	461f      	mov	r7, r3
 8007774:	d838      	bhi.n	80077e8 <__ssputs_r+0x84>
 8007776:	898a      	ldrh	r2, [r1, #12]
 8007778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800777c:	d032      	beq.n	80077e4 <__ssputs_r+0x80>
 800777e:	6825      	ldr	r5, [r4, #0]
 8007780:	6909      	ldr	r1, [r1, #16]
 8007782:	eba5 0901 	sub.w	r9, r5, r1
 8007786:	6965      	ldr	r5, [r4, #20]
 8007788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800778c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007790:	3301      	adds	r3, #1
 8007792:	444b      	add	r3, r9
 8007794:	106d      	asrs	r5, r5, #1
 8007796:	429d      	cmp	r5, r3
 8007798:	bf38      	it	cc
 800779a:	461d      	movcc	r5, r3
 800779c:	0553      	lsls	r3, r2, #21
 800779e:	d531      	bpl.n	8007804 <__ssputs_r+0xa0>
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7ff ff6b 	bl	800767c <_malloc_r>
 80077a6:	4606      	mov	r6, r0
 80077a8:	b950      	cbnz	r0, 80077c0 <__ssputs_r+0x5c>
 80077aa:	230c      	movs	r3, #12
 80077ac:	f8ca 3000 	str.w	r3, [sl]
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295
 80077bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c0:	6921      	ldr	r1, [r4, #16]
 80077c2:	464a      	mov	r2, r9
 80077c4:	f7ff fb46 	bl	8006e54 <memcpy>
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d2:	81a3      	strh	r3, [r4, #12]
 80077d4:	6126      	str	r6, [r4, #16]
 80077d6:	6165      	str	r5, [r4, #20]
 80077d8:	444e      	add	r6, r9
 80077da:	eba5 0509 	sub.w	r5, r5, r9
 80077de:	6026      	str	r6, [r4, #0]
 80077e0:	60a5      	str	r5, [r4, #8]
 80077e2:	463e      	mov	r6, r7
 80077e4:	42be      	cmp	r6, r7
 80077e6:	d900      	bls.n	80077ea <__ssputs_r+0x86>
 80077e8:	463e      	mov	r6, r7
 80077ea:	6820      	ldr	r0, [r4, #0]
 80077ec:	4632      	mov	r2, r6
 80077ee:	4641      	mov	r1, r8
 80077f0:	f000 f966 	bl	8007ac0 <memmove>
 80077f4:	68a3      	ldr	r3, [r4, #8]
 80077f6:	1b9b      	subs	r3, r3, r6
 80077f8:	60a3      	str	r3, [r4, #8]
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	4433      	add	r3, r6
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	2000      	movs	r0, #0
 8007802:	e7db      	b.n	80077bc <__ssputs_r+0x58>
 8007804:	462a      	mov	r2, r5
 8007806:	f000 f981 	bl	8007b0c <_realloc_r>
 800780a:	4606      	mov	r6, r0
 800780c:	2800      	cmp	r0, #0
 800780e:	d1e1      	bne.n	80077d4 <__ssputs_r+0x70>
 8007810:	6921      	ldr	r1, [r4, #16]
 8007812:	4650      	mov	r0, sl
 8007814:	f7ff fec6 	bl	80075a4 <_free_r>
 8007818:	e7c7      	b.n	80077aa <__ssputs_r+0x46>
	...

0800781c <_svfiprintf_r>:
 800781c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007820:	4698      	mov	r8, r3
 8007822:	898b      	ldrh	r3, [r1, #12]
 8007824:	061b      	lsls	r3, r3, #24
 8007826:	b09d      	sub	sp, #116	; 0x74
 8007828:	4607      	mov	r7, r0
 800782a:	460d      	mov	r5, r1
 800782c:	4614      	mov	r4, r2
 800782e:	d50e      	bpl.n	800784e <_svfiprintf_r+0x32>
 8007830:	690b      	ldr	r3, [r1, #16]
 8007832:	b963      	cbnz	r3, 800784e <_svfiprintf_r+0x32>
 8007834:	2140      	movs	r1, #64	; 0x40
 8007836:	f7ff ff21 	bl	800767c <_malloc_r>
 800783a:	6028      	str	r0, [r5, #0]
 800783c:	6128      	str	r0, [r5, #16]
 800783e:	b920      	cbnz	r0, 800784a <_svfiprintf_r+0x2e>
 8007840:	230c      	movs	r3, #12
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	e0d1      	b.n	80079ee <_svfiprintf_r+0x1d2>
 800784a:	2340      	movs	r3, #64	; 0x40
 800784c:	616b      	str	r3, [r5, #20]
 800784e:	2300      	movs	r3, #0
 8007850:	9309      	str	r3, [sp, #36]	; 0x24
 8007852:	2320      	movs	r3, #32
 8007854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007858:	f8cd 800c 	str.w	r8, [sp, #12]
 800785c:	2330      	movs	r3, #48	; 0x30
 800785e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a08 <_svfiprintf_r+0x1ec>
 8007862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007866:	f04f 0901 	mov.w	r9, #1
 800786a:	4623      	mov	r3, r4
 800786c:	469a      	mov	sl, r3
 800786e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007872:	b10a      	cbz	r2, 8007878 <_svfiprintf_r+0x5c>
 8007874:	2a25      	cmp	r2, #37	; 0x25
 8007876:	d1f9      	bne.n	800786c <_svfiprintf_r+0x50>
 8007878:	ebba 0b04 	subs.w	fp, sl, r4
 800787c:	d00b      	beq.n	8007896 <_svfiprintf_r+0x7a>
 800787e:	465b      	mov	r3, fp
 8007880:	4622      	mov	r2, r4
 8007882:	4629      	mov	r1, r5
 8007884:	4638      	mov	r0, r7
 8007886:	f7ff ff6d 	bl	8007764 <__ssputs_r>
 800788a:	3001      	adds	r0, #1
 800788c:	f000 80aa 	beq.w	80079e4 <_svfiprintf_r+0x1c8>
 8007890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007892:	445a      	add	r2, fp
 8007894:	9209      	str	r2, [sp, #36]	; 0x24
 8007896:	f89a 3000 	ldrb.w	r3, [sl]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 80a2 	beq.w	80079e4 <_svfiprintf_r+0x1c8>
 80078a0:	2300      	movs	r3, #0
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295
 80078a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078aa:	f10a 0a01 	add.w	sl, sl, #1
 80078ae:	9304      	str	r3, [sp, #16]
 80078b0:	9307      	str	r3, [sp, #28]
 80078b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078b6:	931a      	str	r3, [sp, #104]	; 0x68
 80078b8:	4654      	mov	r4, sl
 80078ba:	2205      	movs	r2, #5
 80078bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c0:	4851      	ldr	r0, [pc, #324]	; (8007a08 <_svfiprintf_r+0x1ec>)
 80078c2:	f7f8 fc8d 	bl	80001e0 <memchr>
 80078c6:	9a04      	ldr	r2, [sp, #16]
 80078c8:	b9d8      	cbnz	r0, 8007902 <_svfiprintf_r+0xe6>
 80078ca:	06d0      	lsls	r0, r2, #27
 80078cc:	bf44      	itt	mi
 80078ce:	2320      	movmi	r3, #32
 80078d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078d4:	0711      	lsls	r1, r2, #28
 80078d6:	bf44      	itt	mi
 80078d8:	232b      	movmi	r3, #43	; 0x2b
 80078da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078de:	f89a 3000 	ldrb.w	r3, [sl]
 80078e2:	2b2a      	cmp	r3, #42	; 0x2a
 80078e4:	d015      	beq.n	8007912 <_svfiprintf_r+0xf6>
 80078e6:	9a07      	ldr	r2, [sp, #28]
 80078e8:	4654      	mov	r4, sl
 80078ea:	2000      	movs	r0, #0
 80078ec:	f04f 0c0a 	mov.w	ip, #10
 80078f0:	4621      	mov	r1, r4
 80078f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078f6:	3b30      	subs	r3, #48	; 0x30
 80078f8:	2b09      	cmp	r3, #9
 80078fa:	d94e      	bls.n	800799a <_svfiprintf_r+0x17e>
 80078fc:	b1b0      	cbz	r0, 800792c <_svfiprintf_r+0x110>
 80078fe:	9207      	str	r2, [sp, #28]
 8007900:	e014      	b.n	800792c <_svfiprintf_r+0x110>
 8007902:	eba0 0308 	sub.w	r3, r0, r8
 8007906:	fa09 f303 	lsl.w	r3, r9, r3
 800790a:	4313      	orrs	r3, r2
 800790c:	9304      	str	r3, [sp, #16]
 800790e:	46a2      	mov	sl, r4
 8007910:	e7d2      	b.n	80078b8 <_svfiprintf_r+0x9c>
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	1d19      	adds	r1, r3, #4
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	9103      	str	r1, [sp, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	bfbb      	ittet	lt
 800791e:	425b      	neglt	r3, r3
 8007920:	f042 0202 	orrlt.w	r2, r2, #2
 8007924:	9307      	strge	r3, [sp, #28]
 8007926:	9307      	strlt	r3, [sp, #28]
 8007928:	bfb8      	it	lt
 800792a:	9204      	strlt	r2, [sp, #16]
 800792c:	7823      	ldrb	r3, [r4, #0]
 800792e:	2b2e      	cmp	r3, #46	; 0x2e
 8007930:	d10c      	bne.n	800794c <_svfiprintf_r+0x130>
 8007932:	7863      	ldrb	r3, [r4, #1]
 8007934:	2b2a      	cmp	r3, #42	; 0x2a
 8007936:	d135      	bne.n	80079a4 <_svfiprintf_r+0x188>
 8007938:	9b03      	ldr	r3, [sp, #12]
 800793a:	1d1a      	adds	r2, r3, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	9203      	str	r2, [sp, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	bfb8      	it	lt
 8007944:	f04f 33ff 	movlt.w	r3, #4294967295
 8007948:	3402      	adds	r4, #2
 800794a:	9305      	str	r3, [sp, #20]
 800794c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a18 <_svfiprintf_r+0x1fc>
 8007950:	7821      	ldrb	r1, [r4, #0]
 8007952:	2203      	movs	r2, #3
 8007954:	4650      	mov	r0, sl
 8007956:	f7f8 fc43 	bl	80001e0 <memchr>
 800795a:	b140      	cbz	r0, 800796e <_svfiprintf_r+0x152>
 800795c:	2340      	movs	r3, #64	; 0x40
 800795e:	eba0 000a 	sub.w	r0, r0, sl
 8007962:	fa03 f000 	lsl.w	r0, r3, r0
 8007966:	9b04      	ldr	r3, [sp, #16]
 8007968:	4303      	orrs	r3, r0
 800796a:	3401      	adds	r4, #1
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007972:	4826      	ldr	r0, [pc, #152]	; (8007a0c <_svfiprintf_r+0x1f0>)
 8007974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007978:	2206      	movs	r2, #6
 800797a:	f7f8 fc31 	bl	80001e0 <memchr>
 800797e:	2800      	cmp	r0, #0
 8007980:	d038      	beq.n	80079f4 <_svfiprintf_r+0x1d8>
 8007982:	4b23      	ldr	r3, [pc, #140]	; (8007a10 <_svfiprintf_r+0x1f4>)
 8007984:	bb1b      	cbnz	r3, 80079ce <_svfiprintf_r+0x1b2>
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	3307      	adds	r3, #7
 800798a:	f023 0307 	bic.w	r3, r3, #7
 800798e:	3308      	adds	r3, #8
 8007990:	9303      	str	r3, [sp, #12]
 8007992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007994:	4433      	add	r3, r6
 8007996:	9309      	str	r3, [sp, #36]	; 0x24
 8007998:	e767      	b.n	800786a <_svfiprintf_r+0x4e>
 800799a:	fb0c 3202 	mla	r2, ip, r2, r3
 800799e:	460c      	mov	r4, r1
 80079a0:	2001      	movs	r0, #1
 80079a2:	e7a5      	b.n	80078f0 <_svfiprintf_r+0xd4>
 80079a4:	2300      	movs	r3, #0
 80079a6:	3401      	adds	r4, #1
 80079a8:	9305      	str	r3, [sp, #20]
 80079aa:	4619      	mov	r1, r3
 80079ac:	f04f 0c0a 	mov.w	ip, #10
 80079b0:	4620      	mov	r0, r4
 80079b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079b6:	3a30      	subs	r2, #48	; 0x30
 80079b8:	2a09      	cmp	r2, #9
 80079ba:	d903      	bls.n	80079c4 <_svfiprintf_r+0x1a8>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0c5      	beq.n	800794c <_svfiprintf_r+0x130>
 80079c0:	9105      	str	r1, [sp, #20]
 80079c2:	e7c3      	b.n	800794c <_svfiprintf_r+0x130>
 80079c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079c8:	4604      	mov	r4, r0
 80079ca:	2301      	movs	r3, #1
 80079cc:	e7f0      	b.n	80079b0 <_svfiprintf_r+0x194>
 80079ce:	ab03      	add	r3, sp, #12
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	462a      	mov	r2, r5
 80079d4:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <_svfiprintf_r+0x1f8>)
 80079d6:	a904      	add	r1, sp, #16
 80079d8:	4638      	mov	r0, r7
 80079da:	f7fd ffcb 	bl	8005974 <_printf_float>
 80079de:	1c42      	adds	r2, r0, #1
 80079e0:	4606      	mov	r6, r0
 80079e2:	d1d6      	bne.n	8007992 <_svfiprintf_r+0x176>
 80079e4:	89ab      	ldrh	r3, [r5, #12]
 80079e6:	065b      	lsls	r3, r3, #25
 80079e8:	f53f af2c 	bmi.w	8007844 <_svfiprintf_r+0x28>
 80079ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ee:	b01d      	add	sp, #116	; 0x74
 80079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f4:	ab03      	add	r3, sp, #12
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	462a      	mov	r2, r5
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <_svfiprintf_r+0x1f8>)
 80079fc:	a904      	add	r1, sp, #16
 80079fe:	4638      	mov	r0, r7
 8007a00:	f7fe fa5c 	bl	8005ebc <_printf_i>
 8007a04:	e7eb      	b.n	80079de <_svfiprintf_r+0x1c2>
 8007a06:	bf00      	nop
 8007a08:	080088a4 	.word	0x080088a4
 8007a0c:	080088ae 	.word	0x080088ae
 8007a10:	08005975 	.word	0x08005975
 8007a14:	08007765 	.word	0x08007765
 8007a18:	080088aa 	.word	0x080088aa

08007a1c <_sbrk_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d06      	ldr	r5, [pc, #24]	; (8007a38 <_sbrk_r+0x1c>)
 8007a20:	2300      	movs	r3, #0
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	602b      	str	r3, [r5, #0]
 8007a28:	f7fa fdb6 	bl	8002598 <_sbrk>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_sbrk_r+0x1a>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_sbrk_r+0x1a>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	20000450 	.word	0x20000450

08007a3c <__assert_func>:
 8007a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a3e:	4614      	mov	r4, r2
 8007a40:	461a      	mov	r2, r3
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <__assert_func+0x2c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4605      	mov	r5, r0
 8007a48:	68d8      	ldr	r0, [r3, #12]
 8007a4a:	b14c      	cbz	r4, 8007a60 <__assert_func+0x24>
 8007a4c:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <__assert_func+0x30>)
 8007a4e:	9100      	str	r1, [sp, #0]
 8007a50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a54:	4906      	ldr	r1, [pc, #24]	; (8007a70 <__assert_func+0x34>)
 8007a56:	462b      	mov	r3, r5
 8007a58:	f000 f80e 	bl	8007a78 <fiprintf>
 8007a5c:	f000 faac 	bl	8007fb8 <abort>
 8007a60:	4b04      	ldr	r3, [pc, #16]	; (8007a74 <__assert_func+0x38>)
 8007a62:	461c      	mov	r4, r3
 8007a64:	e7f3      	b.n	8007a4e <__assert_func+0x12>
 8007a66:	bf00      	nop
 8007a68:	20000044 	.word	0x20000044
 8007a6c:	080088b5 	.word	0x080088b5
 8007a70:	080088c2 	.word	0x080088c2
 8007a74:	080088f0 	.word	0x080088f0

08007a78 <fiprintf>:
 8007a78:	b40e      	push	{r1, r2, r3}
 8007a7a:	b503      	push	{r0, r1, lr}
 8007a7c:	4601      	mov	r1, r0
 8007a7e:	ab03      	add	r3, sp, #12
 8007a80:	4805      	ldr	r0, [pc, #20]	; (8007a98 <fiprintf+0x20>)
 8007a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a86:	6800      	ldr	r0, [r0, #0]
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	f000 f897 	bl	8007bbc <_vfiprintf_r>
 8007a8e:	b002      	add	sp, #8
 8007a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a94:	b003      	add	sp, #12
 8007a96:	4770      	bx	lr
 8007a98:	20000044 	.word	0x20000044

08007a9c <__ascii_mbtowc>:
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	b901      	cbnz	r1, 8007aa2 <__ascii_mbtowc+0x6>
 8007aa0:	a901      	add	r1, sp, #4
 8007aa2:	b142      	cbz	r2, 8007ab6 <__ascii_mbtowc+0x1a>
 8007aa4:	b14b      	cbz	r3, 8007aba <__ascii_mbtowc+0x1e>
 8007aa6:	7813      	ldrb	r3, [r2, #0]
 8007aa8:	600b      	str	r3, [r1, #0]
 8007aaa:	7812      	ldrb	r2, [r2, #0]
 8007aac:	1e10      	subs	r0, r2, #0
 8007aae:	bf18      	it	ne
 8007ab0:	2001      	movne	r0, #1
 8007ab2:	b002      	add	sp, #8
 8007ab4:	4770      	bx	lr
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	e7fb      	b.n	8007ab2 <__ascii_mbtowc+0x16>
 8007aba:	f06f 0001 	mvn.w	r0, #1
 8007abe:	e7f8      	b.n	8007ab2 <__ascii_mbtowc+0x16>

08007ac0 <memmove>:
 8007ac0:	4288      	cmp	r0, r1
 8007ac2:	b510      	push	{r4, lr}
 8007ac4:	eb01 0402 	add.w	r4, r1, r2
 8007ac8:	d902      	bls.n	8007ad0 <memmove+0x10>
 8007aca:	4284      	cmp	r4, r0
 8007acc:	4623      	mov	r3, r4
 8007ace:	d807      	bhi.n	8007ae0 <memmove+0x20>
 8007ad0:	1e43      	subs	r3, r0, #1
 8007ad2:	42a1      	cmp	r1, r4
 8007ad4:	d008      	beq.n	8007ae8 <memmove+0x28>
 8007ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ade:	e7f8      	b.n	8007ad2 <memmove+0x12>
 8007ae0:	4402      	add	r2, r0
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	428a      	cmp	r2, r1
 8007ae6:	d100      	bne.n	8007aea <memmove+0x2a>
 8007ae8:	bd10      	pop	{r4, pc}
 8007aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007af2:	e7f7      	b.n	8007ae4 <memmove+0x24>

08007af4 <__malloc_lock>:
 8007af4:	4801      	ldr	r0, [pc, #4]	; (8007afc <__malloc_lock+0x8>)
 8007af6:	f000 bc1f 	b.w	8008338 <__retarget_lock_acquire_recursive>
 8007afa:	bf00      	nop
 8007afc:	20000454 	.word	0x20000454

08007b00 <__malloc_unlock>:
 8007b00:	4801      	ldr	r0, [pc, #4]	; (8007b08 <__malloc_unlock+0x8>)
 8007b02:	f000 bc1a 	b.w	800833a <__retarget_lock_release_recursive>
 8007b06:	bf00      	nop
 8007b08:	20000454 	.word	0x20000454

08007b0c <_realloc_r>:
 8007b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b10:	4680      	mov	r8, r0
 8007b12:	4614      	mov	r4, r2
 8007b14:	460e      	mov	r6, r1
 8007b16:	b921      	cbnz	r1, 8007b22 <_realloc_r+0x16>
 8007b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	f7ff bdad 	b.w	800767c <_malloc_r>
 8007b22:	b92a      	cbnz	r2, 8007b30 <_realloc_r+0x24>
 8007b24:	f7ff fd3e 	bl	80075a4 <_free_r>
 8007b28:	4625      	mov	r5, r4
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b30:	f000 fc6a 	bl	8008408 <_malloc_usable_size_r>
 8007b34:	4284      	cmp	r4, r0
 8007b36:	4607      	mov	r7, r0
 8007b38:	d802      	bhi.n	8007b40 <_realloc_r+0x34>
 8007b3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b3e:	d812      	bhi.n	8007b66 <_realloc_r+0x5a>
 8007b40:	4621      	mov	r1, r4
 8007b42:	4640      	mov	r0, r8
 8007b44:	f7ff fd9a 	bl	800767c <_malloc_r>
 8007b48:	4605      	mov	r5, r0
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d0ed      	beq.n	8007b2a <_realloc_r+0x1e>
 8007b4e:	42bc      	cmp	r4, r7
 8007b50:	4622      	mov	r2, r4
 8007b52:	4631      	mov	r1, r6
 8007b54:	bf28      	it	cs
 8007b56:	463a      	movcs	r2, r7
 8007b58:	f7ff f97c 	bl	8006e54 <memcpy>
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4640      	mov	r0, r8
 8007b60:	f7ff fd20 	bl	80075a4 <_free_r>
 8007b64:	e7e1      	b.n	8007b2a <_realloc_r+0x1e>
 8007b66:	4635      	mov	r5, r6
 8007b68:	e7df      	b.n	8007b2a <_realloc_r+0x1e>

08007b6a <__sfputc_r>:
 8007b6a:	6893      	ldr	r3, [r2, #8]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	b410      	push	{r4}
 8007b72:	6093      	str	r3, [r2, #8]
 8007b74:	da08      	bge.n	8007b88 <__sfputc_r+0x1e>
 8007b76:	6994      	ldr	r4, [r2, #24]
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	db01      	blt.n	8007b80 <__sfputc_r+0x16>
 8007b7c:	290a      	cmp	r1, #10
 8007b7e:	d103      	bne.n	8007b88 <__sfputc_r+0x1e>
 8007b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b84:	f000 b94a 	b.w	8007e1c <__swbuf_r>
 8007b88:	6813      	ldr	r3, [r2, #0]
 8007b8a:	1c58      	adds	r0, r3, #1
 8007b8c:	6010      	str	r0, [r2, #0]
 8007b8e:	7019      	strb	r1, [r3, #0]
 8007b90:	4608      	mov	r0, r1
 8007b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <__sfputs_r>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460f      	mov	r7, r1
 8007b9e:	4614      	mov	r4, r2
 8007ba0:	18d5      	adds	r5, r2, r3
 8007ba2:	42ac      	cmp	r4, r5
 8007ba4:	d101      	bne.n	8007baa <__sfputs_r+0x12>
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e007      	b.n	8007bba <__sfputs_r+0x22>
 8007baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bae:	463a      	mov	r2, r7
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f7ff ffda 	bl	8007b6a <__sfputc_r>
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	d1f3      	bne.n	8007ba2 <__sfputs_r+0xa>
 8007bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bbc <_vfiprintf_r>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	b09d      	sub	sp, #116	; 0x74
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	4698      	mov	r8, r3
 8007bc8:	4606      	mov	r6, r0
 8007bca:	b118      	cbz	r0, 8007bd4 <_vfiprintf_r+0x18>
 8007bcc:	6983      	ldr	r3, [r0, #24]
 8007bce:	b90b      	cbnz	r3, 8007bd4 <_vfiprintf_r+0x18>
 8007bd0:	f000 fb14 	bl	80081fc <__sinit>
 8007bd4:	4b89      	ldr	r3, [pc, #548]	; (8007dfc <_vfiprintf_r+0x240>)
 8007bd6:	429d      	cmp	r5, r3
 8007bd8:	d11b      	bne.n	8007c12 <_vfiprintf_r+0x56>
 8007bda:	6875      	ldr	r5, [r6, #4]
 8007bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bde:	07d9      	lsls	r1, r3, #31
 8007be0:	d405      	bmi.n	8007bee <_vfiprintf_r+0x32>
 8007be2:	89ab      	ldrh	r3, [r5, #12]
 8007be4:	059a      	lsls	r2, r3, #22
 8007be6:	d402      	bmi.n	8007bee <_vfiprintf_r+0x32>
 8007be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bea:	f000 fba5 	bl	8008338 <__retarget_lock_acquire_recursive>
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	071b      	lsls	r3, r3, #28
 8007bf2:	d501      	bpl.n	8007bf8 <_vfiprintf_r+0x3c>
 8007bf4:	692b      	ldr	r3, [r5, #16]
 8007bf6:	b9eb      	cbnz	r3, 8007c34 <_vfiprintf_r+0x78>
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f000 f96e 	bl	8007edc <__swsetup_r>
 8007c00:	b1c0      	cbz	r0, 8007c34 <_vfiprintf_r+0x78>
 8007c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c04:	07dc      	lsls	r4, r3, #31
 8007c06:	d50e      	bpl.n	8007c26 <_vfiprintf_r+0x6a>
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	b01d      	add	sp, #116	; 0x74
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	4b7b      	ldr	r3, [pc, #492]	; (8007e00 <_vfiprintf_r+0x244>)
 8007c14:	429d      	cmp	r5, r3
 8007c16:	d101      	bne.n	8007c1c <_vfiprintf_r+0x60>
 8007c18:	68b5      	ldr	r5, [r6, #8]
 8007c1a:	e7df      	b.n	8007bdc <_vfiprintf_r+0x20>
 8007c1c:	4b79      	ldr	r3, [pc, #484]	; (8007e04 <_vfiprintf_r+0x248>)
 8007c1e:	429d      	cmp	r5, r3
 8007c20:	bf08      	it	eq
 8007c22:	68f5      	ldreq	r5, [r6, #12]
 8007c24:	e7da      	b.n	8007bdc <_vfiprintf_r+0x20>
 8007c26:	89ab      	ldrh	r3, [r5, #12]
 8007c28:	0598      	lsls	r0, r3, #22
 8007c2a:	d4ed      	bmi.n	8007c08 <_vfiprintf_r+0x4c>
 8007c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c2e:	f000 fb84 	bl	800833a <__retarget_lock_release_recursive>
 8007c32:	e7e9      	b.n	8007c08 <_vfiprintf_r+0x4c>
 8007c34:	2300      	movs	r3, #0
 8007c36:	9309      	str	r3, [sp, #36]	; 0x24
 8007c38:	2320      	movs	r3, #32
 8007c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c42:	2330      	movs	r3, #48	; 0x30
 8007c44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e08 <_vfiprintf_r+0x24c>
 8007c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c4c:	f04f 0901 	mov.w	r9, #1
 8007c50:	4623      	mov	r3, r4
 8007c52:	469a      	mov	sl, r3
 8007c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c58:	b10a      	cbz	r2, 8007c5e <_vfiprintf_r+0xa2>
 8007c5a:	2a25      	cmp	r2, #37	; 0x25
 8007c5c:	d1f9      	bne.n	8007c52 <_vfiprintf_r+0x96>
 8007c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007c62:	d00b      	beq.n	8007c7c <_vfiprintf_r+0xc0>
 8007c64:	465b      	mov	r3, fp
 8007c66:	4622      	mov	r2, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7ff ff94 	bl	8007b98 <__sfputs_r>
 8007c70:	3001      	adds	r0, #1
 8007c72:	f000 80aa 	beq.w	8007dca <_vfiprintf_r+0x20e>
 8007c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c78:	445a      	add	r2, fp
 8007c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80a2 	beq.w	8007dca <_vfiprintf_r+0x20e>
 8007c86:	2300      	movs	r3, #0
 8007c88:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c90:	f10a 0a01 	add.w	sl, sl, #1
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	9307      	str	r3, [sp, #28]
 8007c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c9e:	4654      	mov	r4, sl
 8007ca0:	2205      	movs	r2, #5
 8007ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca6:	4858      	ldr	r0, [pc, #352]	; (8007e08 <_vfiprintf_r+0x24c>)
 8007ca8:	f7f8 fa9a 	bl	80001e0 <memchr>
 8007cac:	9a04      	ldr	r2, [sp, #16]
 8007cae:	b9d8      	cbnz	r0, 8007ce8 <_vfiprintf_r+0x12c>
 8007cb0:	06d1      	lsls	r1, r2, #27
 8007cb2:	bf44      	itt	mi
 8007cb4:	2320      	movmi	r3, #32
 8007cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cba:	0713      	lsls	r3, r2, #28
 8007cbc:	bf44      	itt	mi
 8007cbe:	232b      	movmi	r3, #43	; 0x2b
 8007cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cca:	d015      	beq.n	8007cf8 <_vfiprintf_r+0x13c>
 8007ccc:	9a07      	ldr	r2, [sp, #28]
 8007cce:	4654      	mov	r4, sl
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f04f 0c0a 	mov.w	ip, #10
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cdc:	3b30      	subs	r3, #48	; 0x30
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	d94e      	bls.n	8007d80 <_vfiprintf_r+0x1c4>
 8007ce2:	b1b0      	cbz	r0, 8007d12 <_vfiprintf_r+0x156>
 8007ce4:	9207      	str	r2, [sp, #28]
 8007ce6:	e014      	b.n	8007d12 <_vfiprintf_r+0x156>
 8007ce8:	eba0 0308 	sub.w	r3, r0, r8
 8007cec:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	9304      	str	r3, [sp, #16]
 8007cf4:	46a2      	mov	sl, r4
 8007cf6:	e7d2      	b.n	8007c9e <_vfiprintf_r+0xe2>
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	1d19      	adds	r1, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	9103      	str	r1, [sp, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bfbb      	ittet	lt
 8007d04:	425b      	neglt	r3, r3
 8007d06:	f042 0202 	orrlt.w	r2, r2, #2
 8007d0a:	9307      	strge	r3, [sp, #28]
 8007d0c:	9307      	strlt	r3, [sp, #28]
 8007d0e:	bfb8      	it	lt
 8007d10:	9204      	strlt	r2, [sp, #16]
 8007d12:	7823      	ldrb	r3, [r4, #0]
 8007d14:	2b2e      	cmp	r3, #46	; 0x2e
 8007d16:	d10c      	bne.n	8007d32 <_vfiprintf_r+0x176>
 8007d18:	7863      	ldrb	r3, [r4, #1]
 8007d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1c:	d135      	bne.n	8007d8a <_vfiprintf_r+0x1ce>
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	1d1a      	adds	r2, r3, #4
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	9203      	str	r2, [sp, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bfb8      	it	lt
 8007d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d2e:	3402      	adds	r4, #2
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e18 <_vfiprintf_r+0x25c>
 8007d36:	7821      	ldrb	r1, [r4, #0]
 8007d38:	2203      	movs	r2, #3
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	f7f8 fa50 	bl	80001e0 <memchr>
 8007d40:	b140      	cbz	r0, 8007d54 <_vfiprintf_r+0x198>
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	eba0 000a 	sub.w	r0, r0, sl
 8007d48:	fa03 f000 	lsl.w	r0, r3, r0
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	4303      	orrs	r3, r0
 8007d50:	3401      	adds	r4, #1
 8007d52:	9304      	str	r3, [sp, #16]
 8007d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d58:	482c      	ldr	r0, [pc, #176]	; (8007e0c <_vfiprintf_r+0x250>)
 8007d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d5e:	2206      	movs	r2, #6
 8007d60:	f7f8 fa3e 	bl	80001e0 <memchr>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d03f      	beq.n	8007de8 <_vfiprintf_r+0x22c>
 8007d68:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <_vfiprintf_r+0x254>)
 8007d6a:	bb1b      	cbnz	r3, 8007db4 <_vfiprintf_r+0x1f8>
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	3307      	adds	r3, #7
 8007d70:	f023 0307 	bic.w	r3, r3, #7
 8007d74:	3308      	adds	r3, #8
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7a:	443b      	add	r3, r7
 8007d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7e:	e767      	b.n	8007c50 <_vfiprintf_r+0x94>
 8007d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d84:	460c      	mov	r4, r1
 8007d86:	2001      	movs	r0, #1
 8007d88:	e7a5      	b.n	8007cd6 <_vfiprintf_r+0x11a>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	3401      	adds	r4, #1
 8007d8e:	9305      	str	r3, [sp, #20]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f04f 0c0a 	mov.w	ip, #10
 8007d96:	4620      	mov	r0, r4
 8007d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9c:	3a30      	subs	r2, #48	; 0x30
 8007d9e:	2a09      	cmp	r2, #9
 8007da0:	d903      	bls.n	8007daa <_vfiprintf_r+0x1ee>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0c5      	beq.n	8007d32 <_vfiprintf_r+0x176>
 8007da6:	9105      	str	r1, [sp, #20]
 8007da8:	e7c3      	b.n	8007d32 <_vfiprintf_r+0x176>
 8007daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dae:	4604      	mov	r4, r0
 8007db0:	2301      	movs	r3, #1
 8007db2:	e7f0      	b.n	8007d96 <_vfiprintf_r+0x1da>
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	462a      	mov	r2, r5
 8007dba:	4b16      	ldr	r3, [pc, #88]	; (8007e14 <_vfiprintf_r+0x258>)
 8007dbc:	a904      	add	r1, sp, #16
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7fd fdd8 	bl	8005974 <_printf_float>
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	1c78      	adds	r0, r7, #1
 8007dc8:	d1d6      	bne.n	8007d78 <_vfiprintf_r+0x1bc>
 8007dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dcc:	07d9      	lsls	r1, r3, #31
 8007dce:	d405      	bmi.n	8007ddc <_vfiprintf_r+0x220>
 8007dd0:	89ab      	ldrh	r3, [r5, #12]
 8007dd2:	059a      	lsls	r2, r3, #22
 8007dd4:	d402      	bmi.n	8007ddc <_vfiprintf_r+0x220>
 8007dd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dd8:	f000 faaf 	bl	800833a <__retarget_lock_release_recursive>
 8007ddc:	89ab      	ldrh	r3, [r5, #12]
 8007dde:	065b      	lsls	r3, r3, #25
 8007de0:	f53f af12 	bmi.w	8007c08 <_vfiprintf_r+0x4c>
 8007de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007de6:	e711      	b.n	8007c0c <_vfiprintf_r+0x50>
 8007de8:	ab03      	add	r3, sp, #12
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	462a      	mov	r2, r5
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <_vfiprintf_r+0x258>)
 8007df0:	a904      	add	r1, sp, #16
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7fe f862 	bl	8005ebc <_printf_i>
 8007df8:	e7e4      	b.n	8007dc4 <_vfiprintf_r+0x208>
 8007dfa:	bf00      	nop
 8007dfc:	08008a1c 	.word	0x08008a1c
 8007e00:	08008a3c 	.word	0x08008a3c
 8007e04:	080089fc 	.word	0x080089fc
 8007e08:	080088a4 	.word	0x080088a4
 8007e0c:	080088ae 	.word	0x080088ae
 8007e10:	08005975 	.word	0x08005975
 8007e14:	08007b99 	.word	0x08007b99
 8007e18:	080088aa 	.word	0x080088aa

08007e1c <__swbuf_r>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	460e      	mov	r6, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	4605      	mov	r5, r0
 8007e24:	b118      	cbz	r0, 8007e2e <__swbuf_r+0x12>
 8007e26:	6983      	ldr	r3, [r0, #24]
 8007e28:	b90b      	cbnz	r3, 8007e2e <__swbuf_r+0x12>
 8007e2a:	f000 f9e7 	bl	80081fc <__sinit>
 8007e2e:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <__swbuf_r+0x98>)
 8007e30:	429c      	cmp	r4, r3
 8007e32:	d12b      	bne.n	8007e8c <__swbuf_r+0x70>
 8007e34:	686c      	ldr	r4, [r5, #4]
 8007e36:	69a3      	ldr	r3, [r4, #24]
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	071a      	lsls	r2, r3, #28
 8007e3e:	d52f      	bpl.n	8007ea0 <__swbuf_r+0x84>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	b36b      	cbz	r3, 8007ea0 <__swbuf_r+0x84>
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	6820      	ldr	r0, [r4, #0]
 8007e48:	1ac0      	subs	r0, r0, r3
 8007e4a:	6963      	ldr	r3, [r4, #20]
 8007e4c:	b2f6      	uxtb	r6, r6
 8007e4e:	4283      	cmp	r3, r0
 8007e50:	4637      	mov	r7, r6
 8007e52:	dc04      	bgt.n	8007e5e <__swbuf_r+0x42>
 8007e54:	4621      	mov	r1, r4
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 f93c 	bl	80080d4 <_fflush_r>
 8007e5c:	bb30      	cbnz	r0, 8007eac <__swbuf_r+0x90>
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	60a3      	str	r3, [r4, #8]
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	6022      	str	r2, [r4, #0]
 8007e6a:	701e      	strb	r6, [r3, #0]
 8007e6c:	6963      	ldr	r3, [r4, #20]
 8007e6e:	3001      	adds	r0, #1
 8007e70:	4283      	cmp	r3, r0
 8007e72:	d004      	beq.n	8007e7e <__swbuf_r+0x62>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	07db      	lsls	r3, r3, #31
 8007e78:	d506      	bpl.n	8007e88 <__swbuf_r+0x6c>
 8007e7a:	2e0a      	cmp	r6, #10
 8007e7c:	d104      	bne.n	8007e88 <__swbuf_r+0x6c>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 f927 	bl	80080d4 <_fflush_r>
 8007e86:	b988      	cbnz	r0, 8007eac <__swbuf_r+0x90>
 8007e88:	4638      	mov	r0, r7
 8007e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <__swbuf_r+0x9c>)
 8007e8e:	429c      	cmp	r4, r3
 8007e90:	d101      	bne.n	8007e96 <__swbuf_r+0x7a>
 8007e92:	68ac      	ldr	r4, [r5, #8]
 8007e94:	e7cf      	b.n	8007e36 <__swbuf_r+0x1a>
 8007e96:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <__swbuf_r+0xa0>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	bf08      	it	eq
 8007e9c:	68ec      	ldreq	r4, [r5, #12]
 8007e9e:	e7ca      	b.n	8007e36 <__swbuf_r+0x1a>
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 f81a 	bl	8007edc <__swsetup_r>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d0cb      	beq.n	8007e44 <__swbuf_r+0x28>
 8007eac:	f04f 37ff 	mov.w	r7, #4294967295
 8007eb0:	e7ea      	b.n	8007e88 <__swbuf_r+0x6c>
 8007eb2:	bf00      	nop
 8007eb4:	08008a1c 	.word	0x08008a1c
 8007eb8:	08008a3c 	.word	0x08008a3c
 8007ebc:	080089fc 	.word	0x080089fc

08007ec0 <__ascii_wctomb>:
 8007ec0:	b149      	cbz	r1, 8007ed6 <__ascii_wctomb+0x16>
 8007ec2:	2aff      	cmp	r2, #255	; 0xff
 8007ec4:	bf85      	ittet	hi
 8007ec6:	238a      	movhi	r3, #138	; 0x8a
 8007ec8:	6003      	strhi	r3, [r0, #0]
 8007eca:	700a      	strbls	r2, [r1, #0]
 8007ecc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ed0:	bf98      	it	ls
 8007ed2:	2001      	movls	r0, #1
 8007ed4:	4770      	bx	lr
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	4770      	bx	lr
	...

08007edc <__swsetup_r>:
 8007edc:	4b32      	ldr	r3, [pc, #200]	; (8007fa8 <__swsetup_r+0xcc>)
 8007ede:	b570      	push	{r4, r5, r6, lr}
 8007ee0:	681d      	ldr	r5, [r3, #0]
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	b125      	cbz	r5, 8007ef2 <__swsetup_r+0x16>
 8007ee8:	69ab      	ldr	r3, [r5, #24]
 8007eea:	b913      	cbnz	r3, 8007ef2 <__swsetup_r+0x16>
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 f985 	bl	80081fc <__sinit>
 8007ef2:	4b2e      	ldr	r3, [pc, #184]	; (8007fac <__swsetup_r+0xd0>)
 8007ef4:	429c      	cmp	r4, r3
 8007ef6:	d10f      	bne.n	8007f18 <__swsetup_r+0x3c>
 8007ef8:	686c      	ldr	r4, [r5, #4]
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f00:	0719      	lsls	r1, r3, #28
 8007f02:	d42c      	bmi.n	8007f5e <__swsetup_r+0x82>
 8007f04:	06dd      	lsls	r5, r3, #27
 8007f06:	d411      	bmi.n	8007f2c <__swsetup_r+0x50>
 8007f08:	2309      	movs	r3, #9
 8007f0a:	6033      	str	r3, [r6, #0]
 8007f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	f04f 30ff 	mov.w	r0, #4294967295
 8007f16:	e03e      	b.n	8007f96 <__swsetup_r+0xba>
 8007f18:	4b25      	ldr	r3, [pc, #148]	; (8007fb0 <__swsetup_r+0xd4>)
 8007f1a:	429c      	cmp	r4, r3
 8007f1c:	d101      	bne.n	8007f22 <__swsetup_r+0x46>
 8007f1e:	68ac      	ldr	r4, [r5, #8]
 8007f20:	e7eb      	b.n	8007efa <__swsetup_r+0x1e>
 8007f22:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <__swsetup_r+0xd8>)
 8007f24:	429c      	cmp	r4, r3
 8007f26:	bf08      	it	eq
 8007f28:	68ec      	ldreq	r4, [r5, #12]
 8007f2a:	e7e6      	b.n	8007efa <__swsetup_r+0x1e>
 8007f2c:	0758      	lsls	r0, r3, #29
 8007f2e:	d512      	bpl.n	8007f56 <__swsetup_r+0x7a>
 8007f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f32:	b141      	cbz	r1, 8007f46 <__swsetup_r+0x6a>
 8007f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f38:	4299      	cmp	r1, r3
 8007f3a:	d002      	beq.n	8007f42 <__swsetup_r+0x66>
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7ff fb31 	bl	80075a4 <_free_r>
 8007f42:	2300      	movs	r3, #0
 8007f44:	6363      	str	r3, [r4, #52]	; 0x34
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6063      	str	r3, [r4, #4]
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f043 0308 	orr.w	r3, r3, #8
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	b94b      	cbnz	r3, 8007f76 <__swsetup_r+0x9a>
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f6c:	d003      	beq.n	8007f76 <__swsetup_r+0x9a>
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 fa09 	bl	8008388 <__smakebuf_r>
 8007f76:	89a0      	ldrh	r0, [r4, #12]
 8007f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f7c:	f010 0301 	ands.w	r3, r0, #1
 8007f80:	d00a      	beq.n	8007f98 <__swsetup_r+0xbc>
 8007f82:	2300      	movs	r3, #0
 8007f84:	60a3      	str	r3, [r4, #8]
 8007f86:	6963      	ldr	r3, [r4, #20]
 8007f88:	425b      	negs	r3, r3
 8007f8a:	61a3      	str	r3, [r4, #24]
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	b943      	cbnz	r3, 8007fa2 <__swsetup_r+0xc6>
 8007f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f94:	d1ba      	bne.n	8007f0c <__swsetup_r+0x30>
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	0781      	lsls	r1, r0, #30
 8007f9a:	bf58      	it	pl
 8007f9c:	6963      	ldrpl	r3, [r4, #20]
 8007f9e:	60a3      	str	r3, [r4, #8]
 8007fa0:	e7f4      	b.n	8007f8c <__swsetup_r+0xb0>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e7f7      	b.n	8007f96 <__swsetup_r+0xba>
 8007fa6:	bf00      	nop
 8007fa8:	20000044 	.word	0x20000044
 8007fac:	08008a1c 	.word	0x08008a1c
 8007fb0:	08008a3c 	.word	0x08008a3c
 8007fb4:	080089fc 	.word	0x080089fc

08007fb8 <abort>:
 8007fb8:	b508      	push	{r3, lr}
 8007fba:	2006      	movs	r0, #6
 8007fbc:	f000 fa54 	bl	8008468 <raise>
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	f7fa fa8e 	bl	80024e2 <_exit>
	...

08007fc8 <__sflush_r>:
 8007fc8:	898a      	ldrh	r2, [r1, #12]
 8007fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fce:	4605      	mov	r5, r0
 8007fd0:	0710      	lsls	r0, r2, #28
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	d458      	bmi.n	8008088 <__sflush_r+0xc0>
 8007fd6:	684b      	ldr	r3, [r1, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	dc05      	bgt.n	8007fe8 <__sflush_r+0x20>
 8007fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	dc02      	bgt.n	8007fe8 <__sflush_r+0x20>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	d0f9      	beq.n	8007fe2 <__sflush_r+0x1a>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ff4:	682f      	ldr	r7, [r5, #0]
 8007ff6:	602b      	str	r3, [r5, #0]
 8007ff8:	d032      	beq.n	8008060 <__sflush_r+0x98>
 8007ffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	075a      	lsls	r2, r3, #29
 8008000:	d505      	bpl.n	800800e <__sflush_r+0x46>
 8008002:	6863      	ldr	r3, [r4, #4]
 8008004:	1ac0      	subs	r0, r0, r3
 8008006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008008:	b10b      	cbz	r3, 800800e <__sflush_r+0x46>
 800800a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800800c:	1ac0      	subs	r0, r0, r3
 800800e:	2300      	movs	r3, #0
 8008010:	4602      	mov	r2, r0
 8008012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008014:	6a21      	ldr	r1, [r4, #32]
 8008016:	4628      	mov	r0, r5
 8008018:	47b0      	blx	r6
 800801a:	1c43      	adds	r3, r0, #1
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	d106      	bne.n	800802e <__sflush_r+0x66>
 8008020:	6829      	ldr	r1, [r5, #0]
 8008022:	291d      	cmp	r1, #29
 8008024:	d82c      	bhi.n	8008080 <__sflush_r+0xb8>
 8008026:	4a2a      	ldr	r2, [pc, #168]	; (80080d0 <__sflush_r+0x108>)
 8008028:	40ca      	lsrs	r2, r1
 800802a:	07d6      	lsls	r6, r2, #31
 800802c:	d528      	bpl.n	8008080 <__sflush_r+0xb8>
 800802e:	2200      	movs	r2, #0
 8008030:	6062      	str	r2, [r4, #4]
 8008032:	04d9      	lsls	r1, r3, #19
 8008034:	6922      	ldr	r2, [r4, #16]
 8008036:	6022      	str	r2, [r4, #0]
 8008038:	d504      	bpl.n	8008044 <__sflush_r+0x7c>
 800803a:	1c42      	adds	r2, r0, #1
 800803c:	d101      	bne.n	8008042 <__sflush_r+0x7a>
 800803e:	682b      	ldr	r3, [r5, #0]
 8008040:	b903      	cbnz	r3, 8008044 <__sflush_r+0x7c>
 8008042:	6560      	str	r0, [r4, #84]	; 0x54
 8008044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008046:	602f      	str	r7, [r5, #0]
 8008048:	2900      	cmp	r1, #0
 800804a:	d0ca      	beq.n	8007fe2 <__sflush_r+0x1a>
 800804c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008050:	4299      	cmp	r1, r3
 8008052:	d002      	beq.n	800805a <__sflush_r+0x92>
 8008054:	4628      	mov	r0, r5
 8008056:	f7ff faa5 	bl	80075a4 <_free_r>
 800805a:	2000      	movs	r0, #0
 800805c:	6360      	str	r0, [r4, #52]	; 0x34
 800805e:	e7c1      	b.n	8007fe4 <__sflush_r+0x1c>
 8008060:	6a21      	ldr	r1, [r4, #32]
 8008062:	2301      	movs	r3, #1
 8008064:	4628      	mov	r0, r5
 8008066:	47b0      	blx	r6
 8008068:	1c41      	adds	r1, r0, #1
 800806a:	d1c7      	bne.n	8007ffc <__sflush_r+0x34>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0c4      	beq.n	8007ffc <__sflush_r+0x34>
 8008072:	2b1d      	cmp	r3, #29
 8008074:	d001      	beq.n	800807a <__sflush_r+0xb2>
 8008076:	2b16      	cmp	r3, #22
 8008078:	d101      	bne.n	800807e <__sflush_r+0xb6>
 800807a:	602f      	str	r7, [r5, #0]
 800807c:	e7b1      	b.n	8007fe2 <__sflush_r+0x1a>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	e7ad      	b.n	8007fe4 <__sflush_r+0x1c>
 8008088:	690f      	ldr	r7, [r1, #16]
 800808a:	2f00      	cmp	r7, #0
 800808c:	d0a9      	beq.n	8007fe2 <__sflush_r+0x1a>
 800808e:	0793      	lsls	r3, r2, #30
 8008090:	680e      	ldr	r6, [r1, #0]
 8008092:	bf08      	it	eq
 8008094:	694b      	ldreq	r3, [r1, #20]
 8008096:	600f      	str	r7, [r1, #0]
 8008098:	bf18      	it	ne
 800809a:	2300      	movne	r3, #0
 800809c:	eba6 0807 	sub.w	r8, r6, r7
 80080a0:	608b      	str	r3, [r1, #8]
 80080a2:	f1b8 0f00 	cmp.w	r8, #0
 80080a6:	dd9c      	ble.n	8007fe2 <__sflush_r+0x1a>
 80080a8:	6a21      	ldr	r1, [r4, #32]
 80080aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080ac:	4643      	mov	r3, r8
 80080ae:	463a      	mov	r2, r7
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b0      	blx	r6
 80080b4:	2800      	cmp	r0, #0
 80080b6:	dc06      	bgt.n	80080c6 <__sflush_r+0xfe>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	e78e      	b.n	8007fe4 <__sflush_r+0x1c>
 80080c6:	4407      	add	r7, r0
 80080c8:	eba8 0800 	sub.w	r8, r8, r0
 80080cc:	e7e9      	b.n	80080a2 <__sflush_r+0xda>
 80080ce:	bf00      	nop
 80080d0:	20400001 	.word	0x20400001

080080d4 <_fflush_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	690b      	ldr	r3, [r1, #16]
 80080d8:	4605      	mov	r5, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	b913      	cbnz	r3, 80080e4 <_fflush_r+0x10>
 80080de:	2500      	movs	r5, #0
 80080e0:	4628      	mov	r0, r5
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	b118      	cbz	r0, 80080ee <_fflush_r+0x1a>
 80080e6:	6983      	ldr	r3, [r0, #24]
 80080e8:	b90b      	cbnz	r3, 80080ee <_fflush_r+0x1a>
 80080ea:	f000 f887 	bl	80081fc <__sinit>
 80080ee:	4b14      	ldr	r3, [pc, #80]	; (8008140 <_fflush_r+0x6c>)
 80080f0:	429c      	cmp	r4, r3
 80080f2:	d11b      	bne.n	800812c <_fflush_r+0x58>
 80080f4:	686c      	ldr	r4, [r5, #4]
 80080f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0ef      	beq.n	80080de <_fflush_r+0xa>
 80080fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008100:	07d0      	lsls	r0, r2, #31
 8008102:	d404      	bmi.n	800810e <_fflush_r+0x3a>
 8008104:	0599      	lsls	r1, r3, #22
 8008106:	d402      	bmi.n	800810e <_fflush_r+0x3a>
 8008108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810a:	f000 f915 	bl	8008338 <__retarget_lock_acquire_recursive>
 800810e:	4628      	mov	r0, r5
 8008110:	4621      	mov	r1, r4
 8008112:	f7ff ff59 	bl	8007fc8 <__sflush_r>
 8008116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008118:	07da      	lsls	r2, r3, #31
 800811a:	4605      	mov	r5, r0
 800811c:	d4e0      	bmi.n	80080e0 <_fflush_r+0xc>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	059b      	lsls	r3, r3, #22
 8008122:	d4dd      	bmi.n	80080e0 <_fflush_r+0xc>
 8008124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008126:	f000 f908 	bl	800833a <__retarget_lock_release_recursive>
 800812a:	e7d9      	b.n	80080e0 <_fflush_r+0xc>
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <_fflush_r+0x70>)
 800812e:	429c      	cmp	r4, r3
 8008130:	d101      	bne.n	8008136 <_fflush_r+0x62>
 8008132:	68ac      	ldr	r4, [r5, #8]
 8008134:	e7df      	b.n	80080f6 <_fflush_r+0x22>
 8008136:	4b04      	ldr	r3, [pc, #16]	; (8008148 <_fflush_r+0x74>)
 8008138:	429c      	cmp	r4, r3
 800813a:	bf08      	it	eq
 800813c:	68ec      	ldreq	r4, [r5, #12]
 800813e:	e7da      	b.n	80080f6 <_fflush_r+0x22>
 8008140:	08008a1c 	.word	0x08008a1c
 8008144:	08008a3c 	.word	0x08008a3c
 8008148:	080089fc 	.word	0x080089fc

0800814c <std>:
 800814c:	2300      	movs	r3, #0
 800814e:	b510      	push	{r4, lr}
 8008150:	4604      	mov	r4, r0
 8008152:	e9c0 3300 	strd	r3, r3, [r0]
 8008156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800815a:	6083      	str	r3, [r0, #8]
 800815c:	8181      	strh	r1, [r0, #12]
 800815e:	6643      	str	r3, [r0, #100]	; 0x64
 8008160:	81c2      	strh	r2, [r0, #14]
 8008162:	6183      	str	r3, [r0, #24]
 8008164:	4619      	mov	r1, r3
 8008166:	2208      	movs	r2, #8
 8008168:	305c      	adds	r0, #92	; 0x5c
 800816a:	f7fd fb5b 	bl	8005824 <memset>
 800816e:	4b05      	ldr	r3, [pc, #20]	; (8008184 <std+0x38>)
 8008170:	6263      	str	r3, [r4, #36]	; 0x24
 8008172:	4b05      	ldr	r3, [pc, #20]	; (8008188 <std+0x3c>)
 8008174:	62a3      	str	r3, [r4, #40]	; 0x28
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <std+0x40>)
 8008178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <std+0x44>)
 800817c:	6224      	str	r4, [r4, #32]
 800817e:	6323      	str	r3, [r4, #48]	; 0x30
 8008180:	bd10      	pop	{r4, pc}
 8008182:	bf00      	nop
 8008184:	080084a1 	.word	0x080084a1
 8008188:	080084c3 	.word	0x080084c3
 800818c:	080084fb 	.word	0x080084fb
 8008190:	0800851f 	.word	0x0800851f

08008194 <_cleanup_r>:
 8008194:	4901      	ldr	r1, [pc, #4]	; (800819c <_cleanup_r+0x8>)
 8008196:	f000 b8af 	b.w	80082f8 <_fwalk_reent>
 800819a:	bf00      	nop
 800819c:	080080d5 	.word	0x080080d5

080081a0 <__sfmoreglue>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	2268      	movs	r2, #104	; 0x68
 80081a4:	1e4d      	subs	r5, r1, #1
 80081a6:	4355      	muls	r5, r2
 80081a8:	460e      	mov	r6, r1
 80081aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081ae:	f7ff fa65 	bl	800767c <_malloc_r>
 80081b2:	4604      	mov	r4, r0
 80081b4:	b140      	cbz	r0, 80081c8 <__sfmoreglue+0x28>
 80081b6:	2100      	movs	r1, #0
 80081b8:	e9c0 1600 	strd	r1, r6, [r0]
 80081bc:	300c      	adds	r0, #12
 80081be:	60a0      	str	r0, [r4, #8]
 80081c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081c4:	f7fd fb2e 	bl	8005824 <memset>
 80081c8:	4620      	mov	r0, r4
 80081ca:	bd70      	pop	{r4, r5, r6, pc}

080081cc <__sfp_lock_acquire>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__sfp_lock_acquire+0x8>)
 80081ce:	f000 b8b3 	b.w	8008338 <__retarget_lock_acquire_recursive>
 80081d2:	bf00      	nop
 80081d4:	20000455 	.word	0x20000455

080081d8 <__sfp_lock_release>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__sfp_lock_release+0x8>)
 80081da:	f000 b8ae 	b.w	800833a <__retarget_lock_release_recursive>
 80081de:	bf00      	nop
 80081e0:	20000455 	.word	0x20000455

080081e4 <__sinit_lock_acquire>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__sinit_lock_acquire+0x8>)
 80081e6:	f000 b8a7 	b.w	8008338 <__retarget_lock_acquire_recursive>
 80081ea:	bf00      	nop
 80081ec:	20000456 	.word	0x20000456

080081f0 <__sinit_lock_release>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__sinit_lock_release+0x8>)
 80081f2:	f000 b8a2 	b.w	800833a <__retarget_lock_release_recursive>
 80081f6:	bf00      	nop
 80081f8:	20000456 	.word	0x20000456

080081fc <__sinit>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4604      	mov	r4, r0
 8008200:	f7ff fff0 	bl	80081e4 <__sinit_lock_acquire>
 8008204:	69a3      	ldr	r3, [r4, #24]
 8008206:	b11b      	cbz	r3, 8008210 <__sinit+0x14>
 8008208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800820c:	f7ff bff0 	b.w	80081f0 <__sinit_lock_release>
 8008210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008214:	6523      	str	r3, [r4, #80]	; 0x50
 8008216:	4b13      	ldr	r3, [pc, #76]	; (8008264 <__sinit+0x68>)
 8008218:	4a13      	ldr	r2, [pc, #76]	; (8008268 <__sinit+0x6c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	62a2      	str	r2, [r4, #40]	; 0x28
 800821e:	42a3      	cmp	r3, r4
 8008220:	bf04      	itt	eq
 8008222:	2301      	moveq	r3, #1
 8008224:	61a3      	streq	r3, [r4, #24]
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f820 	bl	800826c <__sfp>
 800822c:	6060      	str	r0, [r4, #4]
 800822e:	4620      	mov	r0, r4
 8008230:	f000 f81c 	bl	800826c <__sfp>
 8008234:	60a0      	str	r0, [r4, #8]
 8008236:	4620      	mov	r0, r4
 8008238:	f000 f818 	bl	800826c <__sfp>
 800823c:	2200      	movs	r2, #0
 800823e:	60e0      	str	r0, [r4, #12]
 8008240:	2104      	movs	r1, #4
 8008242:	6860      	ldr	r0, [r4, #4]
 8008244:	f7ff ff82 	bl	800814c <std>
 8008248:	68a0      	ldr	r0, [r4, #8]
 800824a:	2201      	movs	r2, #1
 800824c:	2109      	movs	r1, #9
 800824e:	f7ff ff7d 	bl	800814c <std>
 8008252:	68e0      	ldr	r0, [r4, #12]
 8008254:	2202      	movs	r2, #2
 8008256:	2112      	movs	r1, #18
 8008258:	f7ff ff78 	bl	800814c <std>
 800825c:	2301      	movs	r3, #1
 800825e:	61a3      	str	r3, [r4, #24]
 8008260:	e7d2      	b.n	8008208 <__sinit+0xc>
 8008262:	bf00      	nop
 8008264:	08008684 	.word	0x08008684
 8008268:	08008195 	.word	0x08008195

0800826c <__sfp>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	4607      	mov	r7, r0
 8008270:	f7ff ffac 	bl	80081cc <__sfp_lock_acquire>
 8008274:	4b1e      	ldr	r3, [pc, #120]	; (80082f0 <__sfp+0x84>)
 8008276:	681e      	ldr	r6, [r3, #0]
 8008278:	69b3      	ldr	r3, [r6, #24]
 800827a:	b913      	cbnz	r3, 8008282 <__sfp+0x16>
 800827c:	4630      	mov	r0, r6
 800827e:	f7ff ffbd 	bl	80081fc <__sinit>
 8008282:	3648      	adds	r6, #72	; 0x48
 8008284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008288:	3b01      	subs	r3, #1
 800828a:	d503      	bpl.n	8008294 <__sfp+0x28>
 800828c:	6833      	ldr	r3, [r6, #0]
 800828e:	b30b      	cbz	r3, 80082d4 <__sfp+0x68>
 8008290:	6836      	ldr	r6, [r6, #0]
 8008292:	e7f7      	b.n	8008284 <__sfp+0x18>
 8008294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008298:	b9d5      	cbnz	r5, 80082d0 <__sfp+0x64>
 800829a:	4b16      	ldr	r3, [pc, #88]	; (80082f4 <__sfp+0x88>)
 800829c:	60e3      	str	r3, [r4, #12]
 800829e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082a2:	6665      	str	r5, [r4, #100]	; 0x64
 80082a4:	f000 f847 	bl	8008336 <__retarget_lock_init_recursive>
 80082a8:	f7ff ff96 	bl	80081d8 <__sfp_lock_release>
 80082ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082b4:	6025      	str	r5, [r4, #0]
 80082b6:	61a5      	str	r5, [r4, #24]
 80082b8:	2208      	movs	r2, #8
 80082ba:	4629      	mov	r1, r5
 80082bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082c0:	f7fd fab0 	bl	8005824 <memset>
 80082c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082cc:	4620      	mov	r0, r4
 80082ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d0:	3468      	adds	r4, #104	; 0x68
 80082d2:	e7d9      	b.n	8008288 <__sfp+0x1c>
 80082d4:	2104      	movs	r1, #4
 80082d6:	4638      	mov	r0, r7
 80082d8:	f7ff ff62 	bl	80081a0 <__sfmoreglue>
 80082dc:	4604      	mov	r4, r0
 80082de:	6030      	str	r0, [r6, #0]
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d1d5      	bne.n	8008290 <__sfp+0x24>
 80082e4:	f7ff ff78 	bl	80081d8 <__sfp_lock_release>
 80082e8:	230c      	movs	r3, #12
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	e7ee      	b.n	80082cc <__sfp+0x60>
 80082ee:	bf00      	nop
 80082f0:	08008684 	.word	0x08008684
 80082f4:	ffff0001 	.word	0xffff0001

080082f8 <_fwalk_reent>:
 80082f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082fc:	4606      	mov	r6, r0
 80082fe:	4688      	mov	r8, r1
 8008300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008304:	2700      	movs	r7, #0
 8008306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800830a:	f1b9 0901 	subs.w	r9, r9, #1
 800830e:	d505      	bpl.n	800831c <_fwalk_reent+0x24>
 8008310:	6824      	ldr	r4, [r4, #0]
 8008312:	2c00      	cmp	r4, #0
 8008314:	d1f7      	bne.n	8008306 <_fwalk_reent+0xe>
 8008316:	4638      	mov	r0, r7
 8008318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800831c:	89ab      	ldrh	r3, [r5, #12]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d907      	bls.n	8008332 <_fwalk_reent+0x3a>
 8008322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008326:	3301      	adds	r3, #1
 8008328:	d003      	beq.n	8008332 <_fwalk_reent+0x3a>
 800832a:	4629      	mov	r1, r5
 800832c:	4630      	mov	r0, r6
 800832e:	47c0      	blx	r8
 8008330:	4307      	orrs	r7, r0
 8008332:	3568      	adds	r5, #104	; 0x68
 8008334:	e7e9      	b.n	800830a <_fwalk_reent+0x12>

08008336 <__retarget_lock_init_recursive>:
 8008336:	4770      	bx	lr

08008338 <__retarget_lock_acquire_recursive>:
 8008338:	4770      	bx	lr

0800833a <__retarget_lock_release_recursive>:
 800833a:	4770      	bx	lr

0800833c <__swhatbuf_r>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	460e      	mov	r6, r1
 8008340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008344:	2900      	cmp	r1, #0
 8008346:	b096      	sub	sp, #88	; 0x58
 8008348:	4614      	mov	r4, r2
 800834a:	461d      	mov	r5, r3
 800834c:	da08      	bge.n	8008360 <__swhatbuf_r+0x24>
 800834e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	061a      	lsls	r2, r3, #24
 8008358:	d410      	bmi.n	800837c <__swhatbuf_r+0x40>
 800835a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800835e:	e00e      	b.n	800837e <__swhatbuf_r+0x42>
 8008360:	466a      	mov	r2, sp
 8008362:	f000 f903 	bl	800856c <_fstat_r>
 8008366:	2800      	cmp	r0, #0
 8008368:	dbf1      	blt.n	800834e <__swhatbuf_r+0x12>
 800836a:	9a01      	ldr	r2, [sp, #4]
 800836c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008370:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008374:	425a      	negs	r2, r3
 8008376:	415a      	adcs	r2, r3
 8008378:	602a      	str	r2, [r5, #0]
 800837a:	e7ee      	b.n	800835a <__swhatbuf_r+0x1e>
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	2000      	movs	r0, #0
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	b016      	add	sp, #88	; 0x58
 8008384:	bd70      	pop	{r4, r5, r6, pc}
	...

08008388 <__smakebuf_r>:
 8008388:	898b      	ldrh	r3, [r1, #12]
 800838a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800838c:	079d      	lsls	r5, r3, #30
 800838e:	4606      	mov	r6, r0
 8008390:	460c      	mov	r4, r1
 8008392:	d507      	bpl.n	80083a4 <__smakebuf_r+0x1c>
 8008394:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	6123      	str	r3, [r4, #16]
 800839c:	2301      	movs	r3, #1
 800839e:	6163      	str	r3, [r4, #20]
 80083a0:	b002      	add	sp, #8
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	ab01      	add	r3, sp, #4
 80083a6:	466a      	mov	r2, sp
 80083a8:	f7ff ffc8 	bl	800833c <__swhatbuf_r>
 80083ac:	9900      	ldr	r1, [sp, #0]
 80083ae:	4605      	mov	r5, r0
 80083b0:	4630      	mov	r0, r6
 80083b2:	f7ff f963 	bl	800767c <_malloc_r>
 80083b6:	b948      	cbnz	r0, 80083cc <__smakebuf_r+0x44>
 80083b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083bc:	059a      	lsls	r2, r3, #22
 80083be:	d4ef      	bmi.n	80083a0 <__smakebuf_r+0x18>
 80083c0:	f023 0303 	bic.w	r3, r3, #3
 80083c4:	f043 0302 	orr.w	r3, r3, #2
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	e7e3      	b.n	8008394 <__smakebuf_r+0xc>
 80083cc:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <__smakebuf_r+0x7c>)
 80083ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	6020      	str	r0, [r4, #0]
 80083d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d8:	81a3      	strh	r3, [r4, #12]
 80083da:	9b00      	ldr	r3, [sp, #0]
 80083dc:	6163      	str	r3, [r4, #20]
 80083de:	9b01      	ldr	r3, [sp, #4]
 80083e0:	6120      	str	r0, [r4, #16]
 80083e2:	b15b      	cbz	r3, 80083fc <__smakebuf_r+0x74>
 80083e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 f8d1 	bl	8008590 <_isatty_r>
 80083ee:	b128      	cbz	r0, 80083fc <__smakebuf_r+0x74>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	f023 0303 	bic.w	r3, r3, #3
 80083f6:	f043 0301 	orr.w	r3, r3, #1
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	89a0      	ldrh	r0, [r4, #12]
 80083fe:	4305      	orrs	r5, r0
 8008400:	81a5      	strh	r5, [r4, #12]
 8008402:	e7cd      	b.n	80083a0 <__smakebuf_r+0x18>
 8008404:	08008195 	.word	0x08008195

08008408 <_malloc_usable_size_r>:
 8008408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840c:	1f18      	subs	r0, r3, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfbc      	itt	lt
 8008412:	580b      	ldrlt	r3, [r1, r0]
 8008414:	18c0      	addlt	r0, r0, r3
 8008416:	4770      	bx	lr

08008418 <_raise_r>:
 8008418:	291f      	cmp	r1, #31
 800841a:	b538      	push	{r3, r4, r5, lr}
 800841c:	4604      	mov	r4, r0
 800841e:	460d      	mov	r5, r1
 8008420:	d904      	bls.n	800842c <_raise_r+0x14>
 8008422:	2316      	movs	r3, #22
 8008424:	6003      	str	r3, [r0, #0]
 8008426:	f04f 30ff 	mov.w	r0, #4294967295
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800842e:	b112      	cbz	r2, 8008436 <_raise_r+0x1e>
 8008430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008434:	b94b      	cbnz	r3, 800844a <_raise_r+0x32>
 8008436:	4620      	mov	r0, r4
 8008438:	f000 f830 	bl	800849c <_getpid_r>
 800843c:	462a      	mov	r2, r5
 800843e:	4601      	mov	r1, r0
 8008440:	4620      	mov	r0, r4
 8008442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008446:	f000 b817 	b.w	8008478 <_kill_r>
 800844a:	2b01      	cmp	r3, #1
 800844c:	d00a      	beq.n	8008464 <_raise_r+0x4c>
 800844e:	1c59      	adds	r1, r3, #1
 8008450:	d103      	bne.n	800845a <_raise_r+0x42>
 8008452:	2316      	movs	r3, #22
 8008454:	6003      	str	r3, [r0, #0]
 8008456:	2001      	movs	r0, #1
 8008458:	e7e7      	b.n	800842a <_raise_r+0x12>
 800845a:	2400      	movs	r4, #0
 800845c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008460:	4628      	mov	r0, r5
 8008462:	4798      	blx	r3
 8008464:	2000      	movs	r0, #0
 8008466:	e7e0      	b.n	800842a <_raise_r+0x12>

08008468 <raise>:
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <raise+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f7ff bfd3 	b.w	8008418 <_raise_r>
 8008472:	bf00      	nop
 8008474:	20000044 	.word	0x20000044

08008478 <_kill_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4d07      	ldr	r5, [pc, #28]	; (8008498 <_kill_r+0x20>)
 800847c:	2300      	movs	r3, #0
 800847e:	4604      	mov	r4, r0
 8008480:	4608      	mov	r0, r1
 8008482:	4611      	mov	r1, r2
 8008484:	602b      	str	r3, [r5, #0]
 8008486:	f7fa f81c 	bl	80024c2 <_kill>
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	d102      	bne.n	8008494 <_kill_r+0x1c>
 800848e:	682b      	ldr	r3, [r5, #0]
 8008490:	b103      	cbz	r3, 8008494 <_kill_r+0x1c>
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	bd38      	pop	{r3, r4, r5, pc}
 8008496:	bf00      	nop
 8008498:	20000450 	.word	0x20000450

0800849c <_getpid_r>:
 800849c:	f7fa b809 	b.w	80024b2 <_getpid>

080084a0 <__sread>:
 80084a0:	b510      	push	{r4, lr}
 80084a2:	460c      	mov	r4, r1
 80084a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a8:	f000 f894 	bl	80085d4 <_read_r>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	bfab      	itete	ge
 80084b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084b2:	89a3      	ldrhlt	r3, [r4, #12]
 80084b4:	181b      	addge	r3, r3, r0
 80084b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084ba:	bfac      	ite	ge
 80084bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80084be:	81a3      	strhlt	r3, [r4, #12]
 80084c0:	bd10      	pop	{r4, pc}

080084c2 <__swrite>:
 80084c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c6:	461f      	mov	r7, r3
 80084c8:	898b      	ldrh	r3, [r1, #12]
 80084ca:	05db      	lsls	r3, r3, #23
 80084cc:	4605      	mov	r5, r0
 80084ce:	460c      	mov	r4, r1
 80084d0:	4616      	mov	r6, r2
 80084d2:	d505      	bpl.n	80084e0 <__swrite+0x1e>
 80084d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d8:	2302      	movs	r3, #2
 80084da:	2200      	movs	r2, #0
 80084dc:	f000 f868 	bl	80085b0 <_lseek_r>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	4632      	mov	r2, r6
 80084ee:	463b      	mov	r3, r7
 80084f0:	4628      	mov	r0, r5
 80084f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084f6:	f000 b817 	b.w	8008528 <_write_r>

080084fa <__sseek>:
 80084fa:	b510      	push	{r4, lr}
 80084fc:	460c      	mov	r4, r1
 80084fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008502:	f000 f855 	bl	80085b0 <_lseek_r>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	bf15      	itete	ne
 800850c:	6560      	strne	r0, [r4, #84]	; 0x54
 800850e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008516:	81a3      	strheq	r3, [r4, #12]
 8008518:	bf18      	it	ne
 800851a:	81a3      	strhne	r3, [r4, #12]
 800851c:	bd10      	pop	{r4, pc}

0800851e <__sclose>:
 800851e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008522:	f000 b813 	b.w	800854c <_close_r>
	...

08008528 <_write_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4d07      	ldr	r5, [pc, #28]	; (8008548 <_write_r+0x20>)
 800852c:	4604      	mov	r4, r0
 800852e:	4608      	mov	r0, r1
 8008530:	4611      	mov	r1, r2
 8008532:	2200      	movs	r2, #0
 8008534:	602a      	str	r2, [r5, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	f7f9 fc21 	bl	8001d7e <_write>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_write_r+0x1e>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	b103      	cbz	r3, 8008546 <_write_r+0x1e>
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	20000450 	.word	0x20000450

0800854c <_close_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4d06      	ldr	r5, [pc, #24]	; (8008568 <_close_r+0x1c>)
 8008550:	2300      	movs	r3, #0
 8008552:	4604      	mov	r4, r0
 8008554:	4608      	mov	r0, r1
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	f7f9 ffea 	bl	8002530 <_close>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_close_r+0x1a>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_close_r+0x1a>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	20000450 	.word	0x20000450

0800856c <_fstat_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4d07      	ldr	r5, [pc, #28]	; (800858c <_fstat_r+0x20>)
 8008570:	2300      	movs	r3, #0
 8008572:	4604      	mov	r4, r0
 8008574:	4608      	mov	r0, r1
 8008576:	4611      	mov	r1, r2
 8008578:	602b      	str	r3, [r5, #0]
 800857a:	f7f9 ffe5 	bl	8002548 <_fstat>
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	d102      	bne.n	8008588 <_fstat_r+0x1c>
 8008582:	682b      	ldr	r3, [r5, #0]
 8008584:	b103      	cbz	r3, 8008588 <_fstat_r+0x1c>
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	bd38      	pop	{r3, r4, r5, pc}
 800858a:	bf00      	nop
 800858c:	20000450 	.word	0x20000450

08008590 <_isatty_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d06      	ldr	r5, [pc, #24]	; (80085ac <_isatty_r+0x1c>)
 8008594:	2300      	movs	r3, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	f7f9 ffe4 	bl	8002568 <_isatty>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_isatty_r+0x1a>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_isatty_r+0x1a>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	20000450 	.word	0x20000450

080085b0 <_lseek_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d07      	ldr	r5, [pc, #28]	; (80085d0 <_lseek_r+0x20>)
 80085b4:	4604      	mov	r4, r0
 80085b6:	4608      	mov	r0, r1
 80085b8:	4611      	mov	r1, r2
 80085ba:	2200      	movs	r2, #0
 80085bc:	602a      	str	r2, [r5, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	f7f9 ffdd 	bl	800257e <_lseek>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_lseek_r+0x1e>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_lseek_r+0x1e>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	20000450 	.word	0x20000450

080085d4 <_read_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4d07      	ldr	r5, [pc, #28]	; (80085f4 <_read_r+0x20>)
 80085d8:	4604      	mov	r4, r0
 80085da:	4608      	mov	r0, r1
 80085dc:	4611      	mov	r1, r2
 80085de:	2200      	movs	r2, #0
 80085e0:	602a      	str	r2, [r5, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	f7f9 ff87 	bl	80024f6 <_read>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_read_r+0x1e>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_read_r+0x1e>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	20000450 	.word	0x20000450

080085f8 <_init>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	bf00      	nop
 80085fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fe:	bc08      	pop	{r3}
 8008600:	469e      	mov	lr, r3
 8008602:	4770      	bx	lr

08008604 <_fini>:
 8008604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008606:	bf00      	nop
 8008608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860a:	bc08      	pop	{r3}
 800860c:	469e      	mov	lr, r3
 800860e:	4770      	bx	lr
