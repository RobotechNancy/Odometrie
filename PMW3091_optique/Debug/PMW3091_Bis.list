
PMW3091_Bis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08008f18  08008f18  00018f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009384  08009384  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009384  08009384  00019384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800938c  0800938c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  200001e8  0800957c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  0800957c  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aa4  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002604  00000000  00000000  00030cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000332c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002221b  00000000  00000000  00034d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010566  00000000  00000000  00056f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7923  00000000  00000000  000674a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012edcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  0012ee1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008efc 	.word	0x08008efc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008efc 	.word	0x08008efc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_CAN_RxFifo0MsgPendingCallback>:
	int send(CAN_ADDR, CAN_CODE_FCT, uint8_t*, uint, bool, uint, uint);
	CanResponse_t traitement_trame(CAN_RxHeaderTypeDef, uint8_t*);

#else

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b0a8      	sub	sp, #160	; 0xa0
 8000eb0:	af06      	add	r7, sp, #24
 8000eb2:	62f8      	str	r0, [r7, #44]	; 0x2c
	// traitement et mise en forme de la trame
	/////////////////////////////////////////////////////////////////////////
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000eb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000eb8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ec0:	f001 f935 	bl	800212e <HAL_CAN_GetRxMessage>

	CanResponse_t msg;
	msg = traitement_trame(RxHeader, RxData);
 8000ec4:	463d      	mov	r5, r7
 8000ec6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000eca:	9304      	str	r3, [sp, #16]
 8000ecc:	466c      	mov	r4, sp
 8000ece:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ed8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000edc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ede:	4628      	mov	r0, r5
 8000ee0:	f000 f8f6 	bl	80010d0 <traitement_trame>
 8000ee4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000ee8:	463d      	mov	r5, r7
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef2:	682b      	ldr	r3, [r5, #0]
 8000ef4:	6023      	str	r3, [r4, #0]
	/////////////////////////////////////////////////////////////////////////
	uint8_t data[1];
	switch(msg.codeFct){
 8000ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef8:	f5b3 2f21 	cmp.w	r3, #659456	; 0xa1000
 8000efc:	d03c      	beq.n	8000f78 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
 8000efe:	f5b3 2f21 	cmp.w	r3, #659456	; 0xa1000
 8000f02:	d85c      	bhi.n	8000fbe <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
 8000f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f08:	d003      	beq.n	8000f12 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 8000f0a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8000f0e:	d013      	beq.n	8000f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
			send(CAN_ADDR_RASPBERRY, GET_OPTIQUE, msgopt, 4, true, 1, 3);
			msg_optique(x, y, msgopt);
		}
		break;
		default:
		break;
 8000f10:	e055      	b.n	8000fbe <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
			data[0] = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			send(CAN_ADDR_RASPBERRY, TEST_COMM, data, 1, true, 1, 0);
 8000f18:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	2301      	movs	r3, #1
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000f32:	f000 f895 	bl	8001060 <send>
		break;
 8000f36:	e043      	b.n	8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
			state.len = msg.dataLen;
 8000f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000f3e:	711a      	strb	r2, [r3, #4]
			memcpy(state.data, msg.data, msg.dataLen);
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f4a:	331c      	adds	r3, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f005 f8eb 	bl	8006128 <memcpy>
			send(CAN_ADDR_RASPBERRY, CHANGEMENT_ETAT, msg.data, msg.dataLen, false, 0, 0);
 8000f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f58:	f103 021c 	add.w	r2, r3, #28
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2300      	movs	r3, #0
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000f6e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000f72:	f000 f875 	bl	8001060 <send>
		break;
 8000f76:	e023      	b.n	8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
			PMW3901_Read_Variation(&x, &y);
 8000f78:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f7c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 f850 	bl	8006028 <PMW3901_Read_Variation>
			send(CAN_ADDR_RASPBERRY, GET_OPTIQUE, msgopt, 4, true, 1, 3);
 8000f88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2304      	movs	r3, #4
 8000f9a:	f44f 2121 	mov.w	r1, #659456	; 0xa1000
 8000f9e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000fa2:	f000 f85d 	bl	8001060 <send>
			msg_optique(x, y, msgopt);
 8000fa6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000faa:	4618      	mov	r0, r3
 8000fac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f000 f8d7 	bl	800116a <msg_optique>
		break;
 8000fbc:	e000      	b.n	8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
		break;
 8000fbe:	bf00      	nop
	//	le message et ses info sont dans la variable msg

	//renvoi un msg sur le bus can
	//uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
	//send(CAN_ADDR_RASPBERRY, AVANCE, data, 5, true, 5) ;
}
 8000fc0:	bf00      	nop
 8000fc2:	3788      	adds	r7, #136	; 0x88
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc8:	20000340 	.word	0x20000340

08000fcc <CAN_Config>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void CAN_Config(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR adresse) {
 8000fcc:	b084      	sub	sp, #16
 8000fce:	b5b0      	push	{r4, r5, r7, lr}
 8000fd0:	b08a      	sub	sp, #40	; 0x28
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; // Filtrage par liste ou par masque
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // Filtre de 32 bits ou 1 de 16 bits
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // 3 files avec 3 filtres par file
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
	sFilterConfig.SlaveStartFilterBank = 14; // Choix du filtre dans la banque
 8000fe8:	230e      	movs	r3, #14
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterActivation = ENABLE;
 8000fec:	2301      	movs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterMaskIdLow = 0b111100000000000;
 8000ff0:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000ff4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0b111100000000000; // Masque utilisé
 8000ff6:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000ffa:	60bb      	str	r3, [r7, #8]

	sFilterConfig.FilterBank = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0b101000000000000; // Adresse de l'émetteur
 8001000:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001004:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0b111100000000000;
 8001006:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800100a:	607b      	str	r3, [r7, #4]

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001014:	f000 fead 	bl	8001d72 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan); // Démarrer le périphérique CAN
 8001018:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800101c:	f000 ff73 	bl	8001f06 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Activer le mode interruption
 8001020:	2102      	movs	r1, #2
 8001022:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001026:	f001 f994 	bl	8002352 <HAL_CAN_ActivateNotification>

	hcan_p = hcan;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <CAN_Config+0x8c>)
 800102c:	461d      	mov	r5, r3
 800102e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800103e:	e885 0003 	stmia.w	r5, {r0, r1}
	CanAdresse = adresse;
 8001042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <CAN_Config+0x90>)
 8001048:	701a      	strb	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001054:	b004      	add	sp, #16
 8001056:	4770      	bx	lr
 8001058:	20000318 	.word	0x20000318
 800105c:	20000314 	.word	0x20000314

08001060 <send>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_WRITE_ERROR} une erreur à eu lieu lors de l'envoie du message
*/
int send(CAN_ADDR addr, CAN_CODE_FCT codeFct , uint8_t data[], uint dataLen, bool isRep, uint repLenght, uint idMessage){
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]

	if (dataLen >8){
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d901      	bls.n	8001078 <send+0x18>
		return CAN_E_DATA_SIZE_TOO_LONG;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <send+0x68>)
 8001076:	e022      	b.n	80010be <send+0x5e>
	//if(!is_valid_addr(addr)) return CAN_E_UNKNOW_ADDR;
	//if(!is_valid_code_fct(codeFct)) return CAN_E_UNKNOW_CODE_FCT;


	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dataLen; // taille des données à transmettre en octets
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28

	//adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage

	txHeader.ExtId = addr | CAN_ADDR_BASE_ROULANTE_E | codeFct | repLenght | idMessage << CAN_DECALAGE_ID_MSG | isRep << CAN_DECALAGE_IS_REP | repLenght;
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	431a      	orrs	r2, r3
 8001082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001084:	431a      	orrs	r2, r3
 8001086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4313      	orrs	r3, r2
 800108c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001090:	00d2      	lsls	r2, r2, #3
 8001092:	431a      	orrs	r2, r3
 8001094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001096:	4313      	orrs	r3, r2
 8001098:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800109c:	61fb      	str	r3, [r7, #28]
	//txHeader.ExtId = 0b11101100100100000010000011111;
	//1 111 0001 0000 10010000 00000000 1 001
	//1011 0001 00001001 00000000 0000 1 001000000011001
	txHeader.IDE = CAN_ID_EXT; //on choisit l'adressage étendue
 800109e:	2304      	movs	r3, #4
 80010a0:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.TransmitGlobalTime = DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, data, &TxMailbox);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	f107 0118 	add.w	r1, r7, #24
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <send+0x6c>)
 80010b8:	f000 ff69 	bl	8001f8e <HAL_CAN_AddTxMessage>

	return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3730      	adds	r7, #48	; 0x30
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	fffffe02 	.word	0xfffffe02
 80010cc:	20000318 	.word	0x20000318

080010d0 <traitement_trame>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_READ_ERROR} erreur dans la lecture de la trame depuis le buffer
*/
CanResponse_t traitement_trame(CAN_RxHeaderTypeDef frame, uint8_t data[]){
 80010d0:	b084      	sub	sp, #16
 80010d2:	b4b0      	push	{r4, r5, r7}
 80010d4:	b08d      	sub	sp, #52	; 0x34
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80010de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		CanResponse_t rep;
		//rep.ExtID.champId = frame.ExtId;

		rep.addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR)  ;
 80010e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80010e8:	60bb      	str	r3, [r7, #8]
		rep.emetteur = (frame.ExtId &  CAN_FILTER_ADDR_RECEPTEUR) ;
 80010ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80010f0:	60fb      	str	r3, [r7, #12]
		rep.codeFct = (frame.ExtId & CAN_FILTER_CODE_FCT);
 80010f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010f4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80010f8:	613b      	str	r3, [r7, #16]
		rep.isRep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 80010fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	763b      	strb	r3, [r7, #24]
		rep.RepId = (frame.ExtId & CAN_FILTER_REP_NBR) ;
 800110e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	61fb      	str	r3, [r7, #28]
		rep.idMessage = (frame.ExtId & CAN_FILTER_IDE_MSG) >> CAN_DECALAGE_ID_MSG;
 8001116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	b2db      	uxtb	r3, r3
 800111c:	617b      	str	r3, [r7, #20]
        if(!is_valid_addr(rep.addr)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_addr(rep.emetteur)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_code_fct(rep.codeFct)) return CAN_E_UNKNOW_CODE_FCT;
        if (frame.DLC >8)  return CAN_E_DATA_SIZE_TOO_LONG;*/

        rep.dataLen = frame.DLC;
 800111e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001120:	623b      	str	r3, [r7, #32]


        for (int i = 0; i < frame.DLC; i++){
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001126:	e00c      	b.n	8001142 <traitement_trame+0x72>
            //if(data[i] <0 || data[i] > 255) return CAN_E_OOB_DATA;
            rep.data[i] = data[i];
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800112c:	4413      	add	r3, r2
 800112e:	7819      	ldrb	r1, [r3, #0]
 8001130:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001136:	4413      	add	r3, r2
 8001138:	460a      	mov	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < frame.DLC; i++){
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	3301      	adds	r3, #1
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001142:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001146:	429a      	cmp	r2, r3
 8001148:	d8ee      	bhi.n	8001128 <traitement_trame+0x58>
        }


    return rep;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	461d      	mov	r5, r3
 800114e:	f107 0408 	add.w	r4, r7, #8
 8001152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	602b      	str	r3, [r5, #0]
}
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	3734      	adds	r7, #52	; 0x34
 8001162:	46bd      	mov	sp, r7
 8001164:	bcb0      	pop	{r4, r5, r7}
 8001166:	b004      	add	sp, #16
 8001168:	4770      	bx	lr

0800116a <msg_optique>:
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100); // Permet d'afficher en uart dans le terminal le posX, posY, status

	HAL_Delay(10); // Permet de mettre un délai de 10 ms
}

void msg_optique(uint16_t x,uint16_t y, uint8_t* msg) {
 800116a:	b580      	push	{r7, lr}
 800116c:	b08a      	sub	sp, #40	; 0x28
 800116e:	af04      	add	r7, sp, #16
 8001170:	4603      	mov	r3, r0
 8001172:	603a      	str	r2, [r7, #0]
 8001174:	80fb      	strh	r3, [r7, #6]
 8001176:	460b      	mov	r3, r1
 8001178:	80bb      	strh	r3, [r7, #4]
	uint8_t bigX[2] = {(uint8_t) (x >> 8), (uint8_t) (x & 0xff)};
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	b29b      	uxth	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	743b      	strb	r3, [r7, #16]
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	747b      	strb	r3, [r7, #17]
	uint8_t bigY[2] = {(uint8_t) (y >> 8), (uint8_t) (y & 0xff)};
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	733b      	strb	r3, [r7, #12]
 8001194:	88bb      	ldrh	r3, [r7, #4]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	737b      	strb	r3, [r7, #13]
	for (int i = 0; i < 2; i++) {
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e015      	b.n	80011cc <msg_optique+0x62>
		msg[i] = bigX[i];
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	f107 0110 	add.w	r1, r7, #16
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	440a      	add	r2, r1
 80011ae:	7812      	ldrb	r2, [r2, #0]
 80011b0:	701a      	strb	r2, [r3, #0]
		msg[i+2] = bigY[i];
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3302      	adds	r3, #2
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4413      	add	r3, r2
 80011ba:	f107 010c 	add.w	r1, r7, #12
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	440a      	add	r2, r1
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	dde6      	ble.n	80011a0 <msg_optique+0x36>
	}
	send(CAN_ADDR_RASPBERRY, GET_OPTIQUE, msg, 4, true, 1, 3);
 80011d2:	2303      	movs	r3, #3
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	2301      	movs	r3, #1
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2304      	movs	r3, #4
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	f44f 2121 	mov.w	r1, #659456	; 0xa1000
 80011e6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80011ea:	f7ff ff39 	bl	8001060 <send>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fe:	f000 fc48 	bl	8001a92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001202:	f000 f853 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001206:	f000 f957 	bl	80014b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800120a:	f000 f925 	bl	8001458 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800120e:	f000 f8e5 	bl	80013dc <MX_SPI1_Init>
  MX_CAN1_Init();
 8001212:	f000 f8ad 	bl	8001370 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  Tx_len = sprintf (buffer, "init\r\n"); // Début initialisation + écriture de "init"
 8001216:	491d      	ldr	r1, [pc, #116]	; (800128c <main+0x94>)
 8001218:	481d      	ldr	r0, [pc, #116]	; (8001290 <main+0x98>)
 800121a:	f005 fc05 	bl	8006a28 <siprintf>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <main+0x9c>)
 8001224:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*) buffer, Tx_len, 100); // Permet d'écrire en uart le tx_len : Va écrire dans le terminal ; "init"
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <main+0x9c>)
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	2364      	movs	r3, #100	; 0x64
 800122c:	4918      	ldr	r1, [pc, #96]	; (8001290 <main+0x98>)
 800122e:	481a      	ldr	r0, [pc, #104]	; (8001298 <main+0xa0>)
 8001230:	f003 fe7a 	bl	8004f28 <HAL_UART_Transmit>

  status = PMW3901_Init(&PMW3901_Descriptor); // Permet d'initialiser le capteur optique
 8001234:	4819      	ldr	r0, [pc, #100]	; (800129c <main+0xa4>)
 8001236:	f004 fb91 	bl	800595c <PMW3901_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <main+0xa8>)
 8001240:	701a      	strb	r2, [r3, #0]

  Tx_len = sprintf (buffer, "init status = %d\r\n",status); // Permet d'afficher status qui s'il est égal à 0 veut dire que tout fonctionne
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <main+0xa8>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4916      	ldr	r1, [pc, #88]	; (80012a4 <main+0xac>)
 800124a:	4811      	ldr	r0, [pc, #68]	; (8001290 <main+0x98>)
 800124c:	f005 fbec 	bl	8006a28 <siprintf>
 8001250:	4603      	mov	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <main+0x9c>)
 8001256:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100); // Permet d'écrire dans le terminal : "init status = " avec le status qui doit être à 0 indiquant que tout fonctionne
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <main+0x9c>)
 800125a:	881a      	ldrh	r2, [r3, #0]
 800125c:	2364      	movs	r3, #100	; 0x64
 800125e:	490c      	ldr	r1, [pc, #48]	; (8001290 <main+0x98>)
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <main+0xa0>)
 8001262:	f003 fe61 	bl	8004f28 <HAL_UART_Transmit>

  CAN_Config(hcan1, CAN_ADDR_ODOMETRIE_E);
 8001266:	4e10      	ldr	r6, [pc, #64]	; (80012a8 <main+0xb0>)
 8001268:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800126c:	9306      	str	r3, [sp, #24]
 800126e:	466d      	mov	r5, sp
 8001270:	f106 0410 	add.w	r4, r6, #16
 8001274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001278:	e894 0003 	ldmia.w	r4, {r0, r1}
 800127c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001280:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001284:	f7ff fea2 	bl	8000fcc <CAN_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001288:	e7fe      	b.n	8001288 <main+0x90>
 800128a:	bf00      	nop
 800128c:	08008f48 	.word	0x08008f48
 8001290:	20000348 	.word	0x20000348
 8001294:	20000748 	.word	0x20000748
 8001298:	20000290 	.word	0x20000290
 800129c:	20000000 	.word	0x20000000
 80012a0:	2000074a 	.word	0x2000074a
 80012a4:	08008f50 	.word	0x08008f50
 80012a8:	20000204 	.word	0x20000204

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b096      	sub	sp, #88	; 0x58
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2244      	movs	r2, #68	; 0x44
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 ff42 	bl	8006144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	463b      	mov	r3, r7
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012d2:	f001 fd45 	bl	8002d60 <HAL_PWREx_ControlVoltageScaling>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012dc:	f000 f94c 	bl	8001578 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012e0:	f001 fd20 	bl	8002d24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <SystemClock_Config+0xc0>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ea:	4a20      	ldr	r2, [pc, #128]	; (800136c <SystemClock_Config+0xc0>)
 80012ec:	f023 0318 	bic.w	r3, r3, #24
 80012f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012f4:	2314      	movs	r3, #20
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001304:	2360      	movs	r3, #96	; 0x60
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800130c:	2301      	movs	r3, #1
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001314:	2310      	movs	r3, #16
 8001316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001318:	2307      	movs	r3, #7
 800131a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001320:	2302      	movs	r3, #2
 8001322:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4618      	mov	r0, r3
 800132a:	f001 fd6f 	bl	8002e0c <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001334:	f000 f920 	bl	8001578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2303      	movs	r3, #3
 800133e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f002 f96f 	bl	8003634 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800135c:	f000 f90c 	bl	8001578 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001360:	f002 fd82 	bl	8003e68 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001364:	bf00      	nop
 8001366:	3758      	adds	r7, #88	; 0x58
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000

08001370 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_CAN1_Init+0x64>)
 8001376:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <MX_CAN1_Init+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_CAN1_Init+0x64>)
 800137c:	2210      	movs	r2, #16
 800137e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_CAN1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_CAN1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_CAN1_Init+0x64>)
 800138e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001392:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_CAN1_Init+0x64>)
 8001396:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800139a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_CAN1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013c2:	f000 fbdb 	bl	8001b7c <HAL_CAN_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80013cc:	f000 f8d4 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000204 	.word	0x20000204
 80013d8:	40006400 	.word	0x40006400

080013dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_SPI1_Init+0x74>)
 80013e2:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <MX_SPI1_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_SPI1_Init+0x74>)
 80013e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_SPI1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_SPI1_Init+0x74>)
 80013f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_SPI1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_SPI1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_SPI1_Init+0x74>)
 800140a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_SPI1_Init+0x74>)
 8001412:	2238      	movs	r2, #56	; 0x38
 8001414:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_SPI1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_SPI1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_SPI1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_SPI1_Init+0x74>)
 800142a:	2207      	movs	r2, #7
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_SPI1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_SPI1_Init+0x74>)
 8001436:	2208      	movs	r2, #8
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_SPI1_Init+0x74>)
 800143c:	f002 fe16 	bl	800406c <HAL_SPI_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001446:	f000 f897 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000022c 	.word	0x2000022c
 8001454:	40013000 	.word	0x40013000

08001458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 800145e:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <MX_USART2_UART_Init+0x5c>)
 8001460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_USART2_UART_Init+0x58>)
 800149c:	f003 fcf6 	bl	8004e8c <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014a6:	f000 f867 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000290 	.word	0x20000290
 80014b4:	40004400 	.word	0x40004400

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a27      	ldr	r2, [pc, #156]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_GPIO_Init+0xb8>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <MX_GPIO_Init+0xb8>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_GPIO_Init+0xb8>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2110      	movs	r1, #16
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f001 fbe9 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2108      	movs	r1, #8
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <MX_GPIO_Init+0xbc>)
 8001528:	f001 fbe4 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800152c:	2310      	movs	r3, #16
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f001 fa6b 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800154a:	2308      	movs	r3, #8
 800154c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4619      	mov	r1, r3
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_GPIO_Init+0xbc>)
 8001562:	f001 fa5d 	bl	8002a20 <HAL_GPIO_Init>

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	48000400 	.word	0x48000400

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>
	...

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_MspInit+0x44>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_MspInit+0x44>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6613      	str	r3, [r2, #96]	; 0x60
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_MspInit+0x44>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_MspInit+0x44>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_MspInit+0x44>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6593      	str	r3, [r2, #88]	; 0x58
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_MspInit+0x44>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000

080015cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a28      	ldr	r2, [pc, #160]	; (800168c <HAL_CAN_MspInit+0xc0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d149      	bne.n	8001682 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <HAL_CAN_MspInit+0xc4>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a27      	ldr	r2, [pc, #156]	; (8001690 <HAL_CAN_MspInit+0xc4>)
 80015f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_CAN_MspInit+0xc4>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <HAL_CAN_MspInit+0xc4>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a21      	ldr	r2, [pc, #132]	; (8001690 <HAL_CAN_MspInit+0xc4>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_CAN_MspInit+0xc4>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800161e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001630:	2309      	movs	r3, #9
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f001 f9ef 	bl	8002a20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2013      	movs	r0, #19
 8001648:	f001 f9b3 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800164c:	2013      	movs	r0, #19
 800164e:	f001 f9cc 	bl	80029ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2014      	movs	r0, #20
 8001658:	f001 f9ab 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800165c:	2014      	movs	r0, #20
 800165e:	f001 f9c4 	bl	80029ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2015      	movs	r0, #21
 8001668:	f001 f9a3 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800166c:	2015      	movs	r0, #21
 800166e:	f001 f9bc 	bl	80029ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2016      	movs	r0, #22
 8001678:	f001 f99b 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800167c:	2016      	movs	r0, #22
 800167e:	f001 f9b4 	bl	80029ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40006400 	.word	0x40006400
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_SPI_MspInit+0x7c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d128      	bne.n	8001708 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_SPI_MspInit+0x80>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	4a16      	ldr	r2, [pc, #88]	; (8001714 <HAL_SPI_MspInit+0x80>)
 80016bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c0:	6613      	str	r3, [r2, #96]	; 0x60
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_SPI_MspInit+0x80>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_SPI_MspInit+0x80>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a10      	ldr	r2, [pc, #64]	; (8001714 <HAL_SPI_MspInit+0x80>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_SPI_MspInit+0x80>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016e6:	23e0      	movs	r3, #224	; 0xe0
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016f6:	2305      	movs	r3, #5
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f001 f98c 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40013000 	.word	0x40013000
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b09e      	sub	sp, #120	; 0x78
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	2254      	movs	r2, #84	; 0x54
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f004 fd03 	bl	8006144 <memset>
  if(huart->Instance==USART2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a28      	ldr	r2, [pc, #160]	; (80017e4 <HAL_UART_MspInit+0xcc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d148      	bne.n	80017da <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4618      	mov	r0, r3
 8001756:	f002 f991 	bl	8003a7c <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001760:	f7ff ff0a 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_UART_MspInit+0xd0>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_UART_MspInit+0xd0>)
 800176a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176e:	6593      	str	r3, [r2, #88]	; 0x58
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_UART_MspInit+0xd0>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_UART_MspInit+0xd0>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0xd0>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0xd0>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001794:	2304      	movs	r3, #4
 8001796:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a4:	2307      	movs	r3, #7
 80017a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f001 f935 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80017b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80017c8:	2303      	movs	r3, #3
 80017ca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d6:	f001 f923 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3778      	adds	r7, #120	; 0x78
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40021000 	.word	0x40021000

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001838:	f000 f980 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <CAN1_TX_IRQHandler+0x10>)
 8001846:	f000 fdaa 	bl	800239e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000204 	.word	0x20000204

08001854 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <CAN1_RX0_IRQHandler+0x10>)
 800185a:	f000 fda0 	bl	800239e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000204 	.word	0x20000204

08001868 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <CAN1_RX1_IRQHandler+0x10>)
 800186e:	f000 fd96 	bl	800239e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000204 	.word	0x20000204

0800187c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <CAN1_SCE_IRQHandler+0x10>)
 8001882:	f000 fd8c 	bl	800239e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000204 	.word	0x20000204

08001890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_kill>:

int _kill(int pid, int sig)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018aa:	f004 fc13 	bl	80060d4 <__errno>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2216      	movs	r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
	return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_exit>:

void _exit (int status)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe7 	bl	80018a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018d2:	e7fe      	b.n	80018d2 <_exit+0x12>

080018d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00a      	b.n	80018fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e6:	f3af 8000 	nop.w
 80018ea:	4601      	mov	r1, r0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf0      	blt.n	80018e6 <_read+0x12>
	}

return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e009      	b.n	8001934 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	60ba      	str	r2, [r7, #8]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf1      	blt.n	8001920 <_write+0x12>
	}
	return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_close>:

int _close(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
	return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196e:	605a      	str	r2, [r3, #4]
	return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_isatty>:

int _isatty(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
	return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f004 fb78 	bl	80060d4 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000c000 	.word	0x2000c000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	2000074c 	.word	0x2000074c
 8001a18:	20000768 	.word	0x20000768

08001a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SystemInit+0x20>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <SystemInit+0x20>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a44:	f7ff ffea 	bl	8001a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4a:	490d      	ldr	r1, [pc, #52]	; (8001a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <LoopForever+0xe>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a60:	4c0a      	ldr	r4, [pc, #40]	; (8001a8c <LoopForever+0x16>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f004 fb37 	bl	80060e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a72:	f7ff fbc1 	bl	80011f8 <main>

08001a76 <LoopForever>:

LoopForever:
    b LoopForever
 8001a76:	e7fe      	b.n	8001a76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a78:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a84:	08009394 	.word	0x08009394
  ldr r2, =_sbss
 8001a88:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a8c:	20000768 	.word	0x20000768

08001a90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC1_IRQHandler>

08001a92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 ff7d 	bl	800299c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f80e 	bl	8001ac4 <HAL_InitTick>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	e001      	b.n	8001ab8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab4:	f7ff fd66 	bl	8001584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_InitTick+0x6c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_InitTick+0x70>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_InitTick+0x6c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 ff89 	bl	8002a06 <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d809      	bhi.n	8001b14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 ff53 	bl	80029b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_InitTick+0x74>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e007      	b.n	8001b24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e004      	b.n	8001b24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e001      	b.n	8001b24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000014 	.word	0x20000014
 8001b34:	2000000c 	.word	0x2000000c
 8001b38:	20000010 	.word	0x20000010

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000014 	.word	0x20000014
 8001b60:	20000750 	.word	0x20000750

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000750 	.word	0x20000750

08001b7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0ed      	b.n	8001d6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fd16 	bl	80015cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb0:	f7ff ffd8 	bl	8001b64 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bb6:	e012      	b.n	8001bde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bb8:	f7ff ffd4 	bl	8001b64 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b0a      	cmp	r3, #10
 8001bc4:	d90b      	bls.n	8001bde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0c5      	b.n	8001d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0e5      	beq.n	8001bb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0202 	bic.w	r2, r2, #2
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bfc:	f7ff ffb2 	bl	8001b64 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c02:	e012      	b.n	8001c2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c04:	f7ff ffae 	bl	8001b64 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b0a      	cmp	r3, #10
 8001c10:	d90b      	bls.n	8001c2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2205      	movs	r2, #5
 8001c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e09f      	b.n	8001d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1e5      	bne.n	8001c04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7e1b      	ldrb	r3, [r3, #24]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e007      	b.n	8001c62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7e5b      	ldrb	r3, [r3, #25]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e007      	b.n	8001c8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7e9b      	ldrb	r3, [r3, #26]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d108      	bne.n	8001ca6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0220 	orr.w	r2, r2, #32
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e007      	b.n	8001cb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0220 	bic.w	r2, r2, #32
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7edb      	ldrb	r3, [r3, #27]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d108      	bne.n	8001cd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0210 	bic.w	r2, r2, #16
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e007      	b.n	8001ce0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0210 	orr.w	r2, r2, #16
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7f1b      	ldrb	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0208 	orr.w	r2, r2, #8
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e007      	b.n	8001d0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0208 	bic.w	r2, r2, #8
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7f5b      	ldrb	r3, [r3, #29]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d108      	bne.n	8001d24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0204 	orr.w	r2, r2, #4
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e007      	b.n	8001d34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0204 	bic.w	r2, r2, #4
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	ea42 0103 	orr.w	r1, r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b087      	sub	sp, #28
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d88:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d8a:	7cfb      	ldrb	r3, [r7, #19]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d003      	beq.n	8001d98 <HAL_CAN_ConfigFilter+0x26>
 8001d90:	7cfb      	ldrb	r3, [r7, #19]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	f040 80aa 	bne.w	8001eec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2201      	movs	r2, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d123      	bne.n	8001e1a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001df4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3248      	adds	r2, #72	; 0x48
 8001dfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e10:	6979      	ldr	r1, [r7, #20]
 8001e12:	3348      	adds	r3, #72	; 0x48
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d122      	bne.n	8001e68 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3248      	adds	r2, #72	; 0x48
 8001e48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e5e:	6979      	ldr	r1, [r7, #20]
 8001e60:	3348      	adds	r3, #72	; 0x48
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e82:	e007      	b.n	8001e94 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001eae:	e007      	b.n	8001ec0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ede:	f023 0201 	bic.w	r2, r3, #1
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e006      	b.n	8001efa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d12e      	bne.n	8001f78 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f32:	f7ff fe17 	bl	8001b64 <HAL_GetTick>
 8001f36:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f38:	e012      	b.n	8001f60 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f3a:	f7ff fe13 	bl	8001b64 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b0a      	cmp	r3, #10
 8001f46:	d90b      	bls.n	8001f60 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2205      	movs	r2, #5
 8001f58:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e012      	b.n	8001f86 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1e5      	bne.n	8001f3a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e006      	b.n	8001f86 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b089      	sub	sp, #36	; 0x24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fac:	7ffb      	ldrb	r3, [r7, #31]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d003      	beq.n	8001fba <HAL_CAN_AddTxMessage+0x2c>
 8001fb2:	7ffb      	ldrb	r3, [r7, #31]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	f040 80ad 	bne.w	8002114 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10a      	bne.n	8001fda <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8095 	beq.w	8002104 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	0e1b      	lsrs	r3, r3, #24
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	6809      	ldr	r1, [r1, #0]
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3318      	adds	r3, #24
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	440b      	add	r3, r1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e00f      	b.n	8002032 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800201c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002026:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3318      	adds	r3, #24
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	440b      	add	r3, r1
 8002030:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6819      	ldr	r1, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3318      	adds	r3, #24
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	440b      	add	r3, r1
 8002042:	3304      	adds	r3, #4
 8002044:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	7d1b      	ldrb	r3, [r3, #20]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d111      	bne.n	8002072 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3318      	adds	r3, #24
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	4413      	add	r3, r2
 800205a:	3304      	adds	r3, #4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6811      	ldr	r1, [r2, #0]
 8002062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3318      	adds	r3, #24
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	440b      	add	r3, r1
 800206e:	3304      	adds	r3, #4
 8002070:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3307      	adds	r3, #7
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	061a      	lsls	r2, r3, #24
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3306      	adds	r3, #6
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3305      	adds	r3, #5
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	4313      	orrs	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	3204      	adds	r2, #4
 8002092:	7812      	ldrb	r2, [r2, #0]
 8002094:	4610      	mov	r0, r2
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	6811      	ldr	r1, [r2, #0]
 800209a:	ea43 0200 	orr.w	r2, r3, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	440b      	add	r3, r1
 80020a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3303      	adds	r3, #3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	061a      	lsls	r2, r3, #24
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3302      	adds	r3, #2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	041b      	lsls	r3, r3, #16
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3301      	adds	r3, #1
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	4313      	orrs	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	4610      	mov	r0, r2
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	6811      	ldr	r1, [r2, #0]
 80020d0:	ea43 0200 	orr.w	r2, r3, r0
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	440b      	add	r3, r1
 80020da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80020de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3318      	adds	r3, #24
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	6811      	ldr	r1, [r2, #0]
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3318      	adds	r3, #24
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	440b      	add	r3, r1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e00e      	b.n	8002122 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e006      	b.n	8002122 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800212e:	b480      	push	{r7}
 8002130:	b087      	sub	sp, #28
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002142:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d003      	beq.n	8002152 <HAL_CAN_GetRxMessage+0x24>
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b02      	cmp	r3, #2
 800214e:	f040 80f3 	bne.w	8002338 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10e      	bne.n	8002176 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0e7      	b.n	8002346 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d107      	bne.n	8002194 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0d8      	b.n	8002346 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	331b      	adds	r3, #27
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	4413      	add	r3, r2
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0204 	and.w	r2, r3, #4
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	331b      	adds	r3, #27
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	4413      	add	r3, r2
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e00b      	b.n	80021e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	331b      	adds	r3, #27
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4413      	add	r3, r2
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	331b      	adds	r3, #27
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	4413      	add	r3, r2
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0202 	and.w	r2, r3, #2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	331b      	adds	r3, #27
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4413      	add	r3, r2
 8002206:	3304      	adds	r3, #4
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 020f 	and.w	r2, r3, #15
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	331b      	adds	r3, #27
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b2da      	uxtb	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	331b      	adds	r3, #27
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4413      	add	r3, r2
 8002236:	3304      	adds	r3, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	b29a      	uxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	4413      	add	r3, r2
 800224c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	4413      	add	r3, r2
 8002262:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0a1a      	lsrs	r2, r3, #8
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	4413      	add	r3, r2
 800227c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0c1a      	lsrs	r2, r3, #16
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3302      	adds	r3, #2
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	4413      	add	r3, r2
 8002296:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e1a      	lsrs	r2, r3, #24
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	3303      	adds	r3, #3
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	3304      	adds	r3, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0a1a      	lsrs	r2, r3, #8
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	3305      	adds	r3, #5
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0c1a      	lsrs	r2, r3, #16
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	3306      	adds	r3, #6
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0e1a      	lsrs	r2, r3, #24
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	3307      	adds	r3, #7
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0220 	orr.w	r2, r2, #32
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	e007      	b.n	8002334 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0220 	orr.w	r2, r2, #32
 8002332:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e006      	b.n	8002346 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002362:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d002      	beq.n	8002370 <HAL_CAN_ActivateNotification+0x1e>
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d109      	bne.n	8002384 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6959      	ldr	r1, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e006      	b.n	8002392 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b08a      	sub	sp, #40	; 0x28
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d07c      	beq.n	80024de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d023      	beq.n	8002436 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2201      	movs	r2, #1
 80023f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f983 	bl	800270c <HAL_CAN_TxMailbox0CompleteCallback>
 8002406:	e016      	b.n	8002436 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	e00c      	b.n	8002436 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	e002      	b.n	8002436 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f989 	bl	8002748 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d024      	beq.n	800248a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002448:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f963 	bl	8002720 <HAL_CAN_TxMailbox1CompleteCallback>
 800245a:	e016      	b.n	800248a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	e00c      	b.n	800248a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
 8002482:	e002      	b.n	800248a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f969 	bl	800275c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d024      	beq.n	80024de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800249c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f943 	bl	8002734 <HAL_CAN_TxMailbox2CompleteCallback>
 80024ae:	e016      	b.n	80024de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d004      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
 80024c2:	e00c      	b.n	80024de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e002      	b.n	80024de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f949 	bl	8002770 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00c      	beq.n	8002502 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2210      	movs	r2, #16
 8002500:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2208      	movs	r2, #8
 800251c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f930 	bl	8002784 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7fe fcb5 	bl	8000eac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00c      	beq.n	8002566 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2210      	movs	r2, #16
 8002564:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2208      	movs	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f912 	bl	80027ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f8f9 	bl	8002798 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00b      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2210      	movs	r2, #16
 80025c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8fc 	bl	80027c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2208      	movs	r2, #8
 80025e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f8f5 	bl	80027d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d07b      	beq.n	80026ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d072      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002658:	2b00      	cmp	r3, #0
 800265a:	d043      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002662:	2b00      	cmp	r3, #0
 8002664:	d03e      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800266c:	2b60      	cmp	r3, #96	; 0x60
 800266e:	d02b      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x32a>
 8002670:	2b60      	cmp	r3, #96	; 0x60
 8002672:	d82e      	bhi.n	80026d2 <HAL_CAN_IRQHandler+0x334>
 8002674:	2b50      	cmp	r3, #80	; 0x50
 8002676:	d022      	beq.n	80026be <HAL_CAN_IRQHandler+0x320>
 8002678:	2b50      	cmp	r3, #80	; 0x50
 800267a:	d82a      	bhi.n	80026d2 <HAL_CAN_IRQHandler+0x334>
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d019      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x316>
 8002680:	2b40      	cmp	r3, #64	; 0x40
 8002682:	d826      	bhi.n	80026d2 <HAL_CAN_IRQHandler+0x334>
 8002684:	2b30      	cmp	r3, #48	; 0x30
 8002686:	d010      	beq.n	80026aa <HAL_CAN_IRQHandler+0x30c>
 8002688:	2b30      	cmp	r3, #48	; 0x30
 800268a:	d822      	bhi.n	80026d2 <HAL_CAN_IRQHandler+0x334>
 800268c:	2b10      	cmp	r3, #16
 800268e:	d002      	beq.n	8002696 <HAL_CAN_IRQHandler+0x2f8>
 8002690:	2b20      	cmp	r3, #32
 8002692:	d005      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002694:	e01d      	b.n	80026d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f043 0308 	orr.w	r3, r3, #8
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800269e:	e019      	b.n	80026d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	f043 0310 	orr.w	r3, r3, #16
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026a8:	e014      	b.n	80026d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	f043 0320 	orr.w	r3, r3, #32
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026b2:	e00f      	b.n	80026d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026bc:	e00a      	b.n	80026d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026c6:	e005      	b.n	80026d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026d0:	e000      	b.n	80026d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80026d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2204      	movs	r2, #4
 80026ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f872 	bl	80027e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002704:	bf00      	nop
 8002706:	3728      	adds	r7, #40	; 0x28
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002968:	d301      	bcc.n	800296e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296a:	2301      	movs	r3, #1
 800296c:	e00f      	b.n	800298e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <SysTick_Config+0x40>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002976:	210f      	movs	r1, #15
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f7ff ff8e 	bl	800289c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SysTick_Config+0x40>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SysTick_Config+0x40>)
 8002988:	2207      	movs	r2, #7
 800298a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	e000e010 	.word	0xe000e010

0800299c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff29 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029c4:	f7ff ff3e 	bl	8002844 <__NVIC_GetPriorityGrouping>
 80029c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff8e 	bl	80028f0 <NVIC_EncodePriority>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff5d 	bl	800289c <__NVIC_SetPriority>
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff31 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ffa2 	bl	8002958 <SysTick_Config>
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	e148      	b.n	8002cc2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 813a 	beq.w	8002cbc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d005      	beq.n	8002a60 <HAL_GPIO_Init+0x40>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d130      	bne.n	8002ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a96:	2201      	movs	r2, #1
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0201 	and.w	r2, r3, #1
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d017      	beq.n	8002afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d123      	bne.n	8002b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	08da      	lsrs	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	6939      	ldr	r1, [r7, #16]
 8002b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0203 	and.w	r2, r3, #3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8094 	beq.w	8002cbc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b94:	4b52      	ldr	r3, [pc, #328]	; (8002ce0 <HAL_GPIO_Init+0x2c0>)
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	4a51      	ldr	r2, [pc, #324]	; (8002ce0 <HAL_GPIO_Init+0x2c0>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6613      	str	r3, [r2, #96]	; 0x60
 8002ba0:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <HAL_GPIO_Init+0x2c0>)
 8002ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bac:	4a4d      	ldr	r2, [pc, #308]	; (8002ce4 <HAL_GPIO_Init+0x2c4>)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_GPIO_Init+0x1d4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a43      	ldr	r2, [pc, #268]	; (8002ce8 <HAL_GPIO_Init+0x2c8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <HAL_GPIO_Init+0x1d0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a42      	ldr	r2, [pc, #264]	; (8002cec <HAL_GPIO_Init+0x2cc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d101      	bne.n	8002bec <HAL_GPIO_Init+0x1cc>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e004      	b.n	8002bf6 <HAL_GPIO_Init+0x1d6>
 8002bec:	2307      	movs	r3, #7
 8002bee:	e002      	b.n	8002bf6 <HAL_GPIO_Init+0x1d6>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_GPIO_Init+0x1d6>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	f002 0203 	and.w	r2, r2, #3
 8002bfc:	0092      	lsls	r2, r2, #2
 8002bfe:	4093      	lsls	r3, r2
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c06:	4937      	ldr	r1, [pc, #220]	; (8002ce4 <HAL_GPIO_Init+0x2c4>)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c14:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c38:	4a2d      	ldr	r2, [pc, #180]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c62:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb6:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f aeaf 	bne.w	8002a30 <HAL_GPIO_Init+0x10>
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	48000400 	.word	0x48000400
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
 8002d00:	4613      	mov	r3, r2
 8002d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d04:	787b      	ldrb	r3, [r7, #1]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40007000 	.word	0x40007000

08002d44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40007000 	.word	0x40007000

08002d60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6e:	d130      	bne.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7c:	d038      	beq.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2232      	movs	r2, #50	; 0x32
 8002d94:	fb02 f303 	mul.w	r3, r2, r3
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0c9b      	lsrs	r3, r3, #18
 8002da0:	3301      	adds	r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da4:	e002      	b.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db8:	d102      	bne.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f2      	bne.n	8002da6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dcc:	d110      	bne.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e00f      	b.n	8002df2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d007      	beq.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002de0:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002de8:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40007000 	.word	0x40007000
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	431bde83 	.word	0x431bde83

08002e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f000 bc02 	b.w	8003624 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e20:	4b96      	ldr	r3, [pc, #600]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e2a:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80e4 	beq.w	800300a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4c>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	f040 808b 	bne.w	8002f66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	f040 8087 	bne.w	8002f66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e58:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_OscConfig+0x64>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e3d9      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_RCC_OscConfig+0x7e>
 8002e80:	4b7e      	ldr	r3, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e88:	e005      	b.n	8002e96 <HAL_RCC_OscConfig+0x8a>
 8002e8a:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d223      	bcs.n	8002ee2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fd8c 	bl	80039bc <RCC_SetFlashLatencyFromMSIRange>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e3ba      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eae:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a72      	ldr	r2, [pc, #456]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002eb4:	f043 0308 	orr.w	r3, r3, #8
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	4b70      	ldr	r3, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	496d      	ldr	r1, [pc, #436]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ecc:	4b6b      	ldr	r3, [pc, #428]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	4968      	ldr	r1, [pc, #416]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
 8002ee0:	e025      	b.n	8002f2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee2:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ee8:	f043 0308 	orr.w	r3, r3, #8
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4960      	ldr	r1, [pc, #384]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f00:	4b5e      	ldr	r3, [pc, #376]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	495b      	ldr	r1, [pc, #364]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fd4c 	bl	80039bc <RCC_SetFlashLatencyFromMSIRange>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e37a      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f2e:	f000 fc81 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b51      	ldr	r3, [pc, #324]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4950      	ldr	r1, [pc, #320]	; (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_RCC_OscConfig+0x278>)
 8002f4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f4e:	4b4e      	ldr	r3, [pc, #312]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fdb6 	bl	8001ac4 <HAL_InitTick>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d052      	beq.n	8003008 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	e35e      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d032      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f6e:	4b43      	ldr	r3, [pc, #268]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a42      	ldr	r2, [pc, #264]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fdf3 	bl	8001b64 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f82:	f7fe fdef 	bl	8001b64 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e347      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f94:	4b39      	ldr	r3, [pc, #228]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa0:	4b36      	ldr	r3, [pc, #216]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a35      	ldr	r2, [pc, #212]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fa6:	f043 0308 	orr.w	r3, r3, #8
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4930      	ldr	r1, [pc, #192]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	492b      	ldr	r1, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
 8002fd2:	e01a      	b.n	800300a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fd4:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a28      	ldr	r2, [pc, #160]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fdc0 	bl	8001b64 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fdbc 	bl	8001b64 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e314      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1dc>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d073      	beq.n	80030fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d005      	beq.n	8003028 <HAL_RCC_OscConfig+0x21c>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d10e      	bne.n	8003040 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d10b      	bne.n	8003040 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <HAL_RCC_OscConfig+0x270>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d063      	beq.n	80030fc <HAL_RCC_OscConfig+0x2f0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d15f      	bne.n	80030fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e2f1      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x24c>
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a0b      	ldr	r2, [pc, #44]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e025      	b.n	80030a4 <HAL_RCC_OscConfig+0x298>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	d114      	bne.n	800308c <HAL_RCC_OscConfig+0x280>
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a02      	ldr	r2, [pc, #8]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e013      	b.n	80030a4 <HAL_RCC_OscConfig+0x298>
 800307c:	40021000 	.word	0x40021000
 8003080:	08008f64 	.word	0x08008f64
 8003084:	2000000c 	.word	0x2000000c
 8003088:	20000010 	.word	0x20000010
 800308c:	4ba0      	ldr	r3, [pc, #640]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a9f      	ldr	r2, [pc, #636]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b9d      	ldr	r3, [pc, #628]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a9c      	ldr	r2, [pc, #624]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fd5a 	bl	8001b64 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe fd56 	bl	8001b64 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e2ae      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c6:	4b92      	ldr	r3, [pc, #584]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2a8>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe fd46 	bl	8001b64 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe fd42 	bl	8001b64 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e29a      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x2d0>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d060      	beq.n	80031cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d005      	beq.n	800311c <HAL_RCC_OscConfig+0x310>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d119      	bne.n	800314a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d116      	bne.n	800314a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800311c:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_OscConfig+0x328>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e277      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b76      	ldr	r3, [pc, #472]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	4973      	ldr	r1, [pc, #460]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003148:	e040      	b.n	80031cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d023      	beq.n	800319a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003152:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6e      	ldr	r2, [pc, #440]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe fd01 	bl	8001b64 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7fe fcfd 	bl	8001b64 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e255      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003178:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b62      	ldr	r3, [pc, #392]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	495f      	ldr	r1, [pc, #380]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
 8003198:	e018      	b.n	80031cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5c      	ldr	r2, [pc, #368]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fe fcdd 	bl	8001b64 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ae:	f7fe fcd9 	bl	8001b64 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e231      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d03c      	beq.n	8003252 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01c      	beq.n	800321a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e0:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e6:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe fcb8 	bl	8001b64 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7fe fcb4 	bl	8001b64 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e20c      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ef      	beq.n	80031f8 <HAL_RCC_OscConfig+0x3ec>
 8003218:	e01b      	b.n	8003252 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800321c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003220:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fe fc9b 	bl	8001b64 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003232:	f7fe fc97 	bl	8001b64 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1ef      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ef      	bne.n	8003232 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a6 	beq.w	80033ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003264:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	4a26      	ldr	r2, [pc, #152]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327a:	6593      	str	r3, [r2, #88]	; 0x58
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003288:	2301      	movs	r3, #1
 800328a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d118      	bne.n	80032ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a4:	f7fe fc5e 	bl	8001b64 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fe fc5a 	bl	8001b64 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1b2      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d108      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4d8>
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e2:	e029      	b.n	8003338 <HAL_RCC_OscConfig+0x52c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d115      	bne.n	8003318 <HAL_RCC_OscConfig+0x50c>
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	4a03      	ldr	r2, [pc, #12]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800330c:	e014      	b.n	8003338 <HAL_RCC_OscConfig+0x52c>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
 8003318:	4b9a      	ldr	r3, [pc, #616]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	4a99      	ldr	r2, [pc, #612]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003328:	4b96      	ldr	r3, [pc, #600]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	4a95      	ldr	r2, [pc, #596]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d016      	beq.n	800336e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fe fc10 	bl	8001b64 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003346:	e00a      	b.n	800335e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003348:	f7fe fc0c 	bl	8001b64 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e162      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335e:	4b89      	ldr	r3, [pc, #548]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ed      	beq.n	8003348 <HAL_RCC_OscConfig+0x53c>
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fe fbf9 	bl	8001b64 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe fbf5 	bl	8001b64 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e14b      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800338c:	4b7d      	ldr	r3, [pc, #500]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ed      	bne.n	8003376 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339a:	7ffb      	ldrb	r3, [r7, #31]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b78      	ldr	r3, [pc, #480]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a77      	ldr	r2, [pc, #476]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d03c      	beq.n	8003432 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01c      	beq.n	80033fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033c0:	4b70      	ldr	r3, [pc, #448]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80033c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c6:	4a6f      	ldr	r2, [pc, #444]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe fbc8 	bl	8001b64 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d8:	f7fe fbc4 	bl	8001b64 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e11c      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ea:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80033ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <HAL_RCC_OscConfig+0x5cc>
 80033f8:	e01b      	b.n	8003432 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033fa:	4b62      	ldr	r3, [pc, #392]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80033fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003400:	4a60      	ldr	r2, [pc, #384]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe fbab 	bl	8001b64 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003412:	f7fe fba7 	bl	8001b64 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0ff      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003424:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ef      	bne.n	8003412 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80f3 	beq.w	8003622 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	2b02      	cmp	r3, #2
 8003442:	f040 80c9 	bne.w	80035d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003446:	4b4f      	ldr	r3, [pc, #316]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0203 	and.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	429a      	cmp	r2, r3
 8003458:	d12c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	3b01      	subs	r3, #1
 8003466:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d123      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d11b      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d113      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d109      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	3b01      	subs	r3, #1
 80034ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d06b      	beq.n	800358c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d062      	beq.n	8003580 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034ba:	4b32      	ldr	r3, [pc, #200]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0ac      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034ca:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2d      	ldr	r2, [pc, #180]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80034d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034d6:	f7fe fb45 	bl	8001b64 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7fe fb41 	bl	8001b64 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e099      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034fc:	4b21      	ldr	r3, [pc, #132]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_RCC_OscConfig+0x77c>)
 8003502:	4013      	ands	r3, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800350c:	3a01      	subs	r2, #1
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	4311      	orrs	r1, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003516:	0212      	lsls	r2, r2, #8
 8003518:	4311      	orrs	r1, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800351e:	0852      	lsrs	r2, r2, #1
 8003520:	3a01      	subs	r2, #1
 8003522:	0552      	lsls	r2, r2, #21
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800352a:	0852      	lsrs	r2, r2, #1
 800352c:	3a01      	subs	r2, #1
 800352e:	0652      	lsls	r2, r2, #25
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003536:	06d2      	lsls	r2, r2, #27
 8003538:	430a      	orrs	r2, r1
 800353a:	4912      	ldr	r1, [pc, #72]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 800353c:	4313      	orrs	r3, r2
 800353e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800354c:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003556:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003558:	f7fe fb04 	bl	8001b64 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe fb00 	bl	8001b64 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e058      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003572:	4b04      	ldr	r3, [pc, #16]	; (8003584 <HAL_RCC_OscConfig+0x778>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800357e:	e050      	b.n	8003622 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e04f      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
 8003584:	40021000 	.word	0x40021000
 8003588:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_OscConfig+0x820>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d144      	bne.n	8003622 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003598:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCC_OscConfig+0x820>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a23      	ldr	r2, [pc, #140]	; (800362c <HAL_RCC_OscConfig+0x820>)
 800359e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <HAL_RCC_OscConfig+0x820>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a20      	ldr	r2, [pc, #128]	; (800362c <HAL_RCC_OscConfig+0x820>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035b0:	f7fe fad8 	bl	8001b64 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe fad4 	bl	8001b64 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e02c      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <HAL_RCC_OscConfig+0x820>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x7ac>
 80035d6:	e024      	b.n	8003622 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d01f      	beq.n	800361e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b13      	ldr	r3, [pc, #76]	; (800362c <HAL_RCC_OscConfig+0x820>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a12      	ldr	r2, [pc, #72]	; (800362c <HAL_RCC_OscConfig+0x820>)
 80035e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fe fabb 	bl	8001b64 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe fab7 	bl	8001b64 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e00f      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_OscConfig+0x820>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_RCC_OscConfig+0x820>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4905      	ldr	r1, [pc, #20]	; (800362c <HAL_RCC_OscConfig+0x820>)
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCC_OscConfig+0x824>)
 8003618:	4013      	ands	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
 800361c:	e001      	b.n	8003622 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	feeefffc 	.word	0xfeeefffc

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0e7      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b75      	ldr	r3, [pc, #468]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d910      	bls.n	8003678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b72      	ldr	r3, [pc, #456]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 0207 	bic.w	r2, r3, #7
 800365e:	4970      	ldr	r1, [pc, #448]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0cf      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d010      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b66      	ldr	r3, [pc, #408]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003690:	429a      	cmp	r2, r3
 8003692:	d908      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4960      	ldr	r1, [pc, #384]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d04c      	beq.n	800374c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	4b5a      	ldr	r3, [pc, #360]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d121      	bne.n	800370a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0a6      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d2:	4b54      	ldr	r3, [pc, #336]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d115      	bne.n	800370a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e09a      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ea:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e08e      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036fa:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e086      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b46      	ldr	r3, [pc, #280]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4943      	ldr	r1, [pc, #268]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fe fa22 	bl	8001b64 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fe fa1e 	bl	8001b64 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e06e      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d010      	beq.n	800377a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003764:	429a      	cmp	r2, r3
 8003766:	d208      	bcs.n	800377a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	492b      	ldr	r1, [pc, #172]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d210      	bcs.n	80037aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 0207 	bic.w	r2, r3, #7
 8003790:	4923      	ldr	r1, [pc, #140]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e036      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4918      	ldr	r1, [pc, #96]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4910      	ldr	r1, [pc, #64]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e8:	f000 f824 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	490b      	ldr	r1, [pc, #44]	; (8003828 <HAL_RCC_ClockConfig+0x1f4>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_RCC_ClockConfig+0x1f8>)
 8003806:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1fc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe f959 	bl	8001ac4 <HAL_InitTick>
 8003812:	4603      	mov	r3, r0
 8003814:	72fb      	strb	r3, [r7, #11]

  return status;
 8003816:	7afb      	ldrb	r3, [r7, #11]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40022000 	.word	0x40022000
 8003824:	40021000 	.word	0x40021000
 8003828:	08008f64 	.word	0x08008f64
 800382c:	2000000c 	.word	0x2000000c
 8003830:	20000010 	.word	0x20000010

08003834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003842:	4b3e      	ldr	r3, [pc, #248]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800384c:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x34>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d121      	bne.n	80038a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d11e      	bne.n	80038a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003868:	4b34      	ldr	r3, [pc, #208]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003874:	4b31      	ldr	r3, [pc, #196]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e005      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003884:	4b2d      	ldr	r3, [pc, #180]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003890:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10d      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d102      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038ac:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e004      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038b8:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d134      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d003      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0xa6>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d003      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0xac>
 80038d8:	e005      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038da:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <HAL_RCC_GetSysClockFreq+0x110>)
 80038dc:	617b      	str	r3, [r7, #20]
      break;
 80038de:	e005      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_GetSysClockFreq+0x114>)
 80038e2:	617b      	str	r3, [r7, #20]
      break;
 80038e4:	e002      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	617b      	str	r3, [r7, #20]
      break;
 80038ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	3301      	adds	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	fb03 f202 	mul.w	r2, r3, r2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	0e5b      	lsrs	r3, r3, #25
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	3301      	adds	r3, #1
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800392c:	69bb      	ldr	r3, [r7, #24]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	08008f7c 	.word	0x08008f7c
 8003944:	00f42400 	.word	0x00f42400
 8003948:	007a1200 	.word	0x007a1200

0800394c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <HAL_RCC_GetHCLKFreq+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	2000000c 	.word	0x2000000c

08003964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003968:	f7ff fff0 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4904      	ldr	r1, [pc, #16]	; (800398c <HAL_RCC_GetPCLK1Freq+0x28>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	08008f74 	.word	0x08008f74

08003990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003994:	f7ff ffda 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0adb      	lsrs	r3, r3, #11
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4904      	ldr	r1, [pc, #16]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08008f74 	.word	0x08008f74

080039bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039d4:	f7ff f9b6 	bl	8002d44 <HAL_PWREx_GetVoltageRange>
 80039d8:	6178      	str	r0, [r7, #20]
 80039da:	e014      	b.n	8003a06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	4a24      	ldr	r2, [pc, #144]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6593      	str	r3, [r2, #88]	; 0x58
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039f4:	f7ff f9a6 	bl	8002d44 <HAL_PWREx_GetVoltageRange>
 80039f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0c:	d10b      	bne.n	8003a26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	d919      	bls.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2ba0      	cmp	r3, #160	; 0xa0
 8003a18:	d902      	bls.n	8003a20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	e013      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a20:	2301      	movs	r3, #1
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	e010      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b80      	cmp	r3, #128	; 0x80
 8003a2a:	d902      	bls.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	e00a      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d102      	bne.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a38:	2302      	movs	r3, #2
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e004      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b70      	cmp	r3, #112	; 0x70
 8003a42:	d101      	bne.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a44:	2301      	movs	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 0207 	bic.w	r2, r3, #7
 8003a50:	4909      	ldr	r1, [pc, #36]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d001      	beq.n	8003a6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40022000 	.word	0x40022000

08003a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a84:	2300      	movs	r3, #0
 8003a86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d031      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aa0:	d01a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003aa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aa6:	d814      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003aac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab0:	d10f      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003ab2:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4a5c      	ldr	r2, [pc, #368]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003abe:	e00c      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f9de 	bl	8003e88 <RCCEx_PLLSAI1_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ad0:	e003      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ae0:	4b51      	ldr	r3, [pc, #324]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	494e      	ldr	r1, [pc, #312]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003af6:	e001      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 809e 	beq.w	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b0e:	4b46      	ldr	r3, [pc, #280]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b24:	4b40      	ldr	r3, [pc, #256]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	4a3f      	ldr	r2, [pc, #252]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b30:	4b3d      	ldr	r3, [pc, #244]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b40:	4b3a      	ldr	r3, [pc, #232]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a39      	ldr	r2, [pc, #228]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b4c:	f7fe f80a 	bl	8001b64 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b52:	e009      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b54:	f7fe f806 	bl	8001b64 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	74fb      	strb	r3, [r7, #19]
        break;
 8003b66:	e005      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b68:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b74:	7cfb      	ldrb	r3, [r7, #19]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d15a      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b7a:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01e      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d019      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ba2:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	4a1f      	ldr	r2, [pc, #124]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bc2:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d016      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fd ffc6 	bl	8001b64 <HAL_GetTick>
 8003bd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fd ffc2 	bl	8001b64 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d902      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	74fb      	strb	r3, [r7, #19]
            break;
 8003bf2:	e006      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0ec      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c16:	4904      	ldr	r1, [pc, #16]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c1e:	e009      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	74bb      	strb	r3, [r7, #18]
 8003c24:	e006      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c34:	7c7b      	ldrb	r3, [r7, #17]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b8a      	ldr	r3, [pc, #552]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	4a89      	ldr	r2, [pc, #548]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c52:	4b84      	ldr	r3, [pc, #528]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f023 0203 	bic.w	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4980      	ldr	r1, [pc, #512]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c74:	4b7b      	ldr	r3, [pc, #492]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f023 020c 	bic.w	r2, r3, #12
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	4978      	ldr	r1, [pc, #480]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c96:	4b73      	ldr	r3, [pc, #460]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	496f      	ldr	r1, [pc, #444]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	4967      	ldr	r1, [pc, #412]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cda:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	495e      	ldr	r1, [pc, #376]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	4956      	ldr	r1, [pc, #344]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d1e:	4b51      	ldr	r3, [pc, #324]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	494d      	ldr	r1, [pc, #308]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d028      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d40:	4b48      	ldr	r3, [pc, #288]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4945      	ldr	r1, [pc, #276]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d5e:	d106      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d60:	4b40      	ldr	r3, [pc, #256]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4a3f      	ldr	r2, [pc, #252]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d6a:	60d3      	str	r3, [r2, #12]
 8003d6c:	e011      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d76:	d10c      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f882 	bl	8003e88 <RCCEx_PLLSAI1_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003d8e:	7cfb      	ldrb	r3, [r7, #19]
 8003d90:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d028      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d9e:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	492d      	ldr	r1, [pc, #180]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dbc:	d106      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dbe:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	4a28      	ldr	r2, [pc, #160]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc8:	60d3      	str	r3, [r2, #12]
 8003dca:	e011      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f853 	bl	8003e88 <RCCEx_PLLSAI1_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003de6:	7cfb      	ldrb	r3, [r7, #19]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01c      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0a:	4916      	ldr	r1, [pc, #88]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e1a:	d10c      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2102      	movs	r1, #2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f830 	bl	8003e88 <RCCEx_PLLSAI1_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e50:	4904      	ldr	r1, [pc, #16]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e58:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000

08003e68 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e72:	f043 0304 	orr.w	r3, r3, #4
 8003e76:	6013      	str	r3, [r2, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000

08003e88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e96:	4b74      	ldr	r3, [pc, #464]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d018      	beq.n	8003ed4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ea2:	4b71      	ldr	r3, [pc, #452]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0203 	and.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10d      	bne.n	8003ece <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003eba:	4b6b      	ldr	r3, [pc, #428]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d047      	beq.n	8003f5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
 8003ed2:	e044      	b.n	8003f5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d018      	beq.n	8003f0e <RCCEx_PLLSAI1_Config+0x86>
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d825      	bhi.n	8003f2c <RCCEx_PLLSAI1_Config+0xa4>
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d002      	beq.n	8003eea <RCCEx_PLLSAI1_Config+0x62>
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d009      	beq.n	8003efc <RCCEx_PLLSAI1_Config+0x74>
 8003ee8:	e020      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eea:	4b5f      	ldr	r3, [pc, #380]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11d      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efa:	e01a      	b.n	8003f32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003efc:	4b5a      	ldr	r3, [pc, #360]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d116      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e013      	b.n	8003f36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f0e:	4b56      	ldr	r3, [pc, #344]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f1a:	4b53      	ldr	r3, [pc, #332]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f2a:	e006      	b.n	8003f3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f30:	e004      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f42:	4b49      	ldr	r3, [pc, #292]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	430b      	orrs	r3, r1
 8003f58:	4943      	ldr	r1, [pc, #268]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d17c      	bne.n	800405e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f64:	4b40      	ldr	r3, [pc, #256]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a3f      	ldr	r2, [pc, #252]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fd fdf8 	bl	8001b64 <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f76:	e009      	b.n	8003f8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f78:	f7fd fdf4 	bl	8001b64 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d902      	bls.n	8003f8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8a:	e005      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f8c:	4b36      	ldr	r3, [pc, #216]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ef      	bne.n	8003f78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d15f      	bne.n	800405e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d110      	bne.n	8003fc6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fa4:	4b30      	ldr	r3, [pc, #192]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6892      	ldr	r2, [r2, #8]
 8003fb4:	0211      	lsls	r1, r2, #8
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68d2      	ldr	r2, [r2, #12]
 8003fba:	06d2      	lsls	r2, r2, #27
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	492a      	ldr	r1, [pc, #168]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	610b      	str	r3, [r1, #16]
 8003fc4:	e027      	b.n	8004016 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d112      	bne.n	8003ff2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fcc:	4b26      	ldr	r3, [pc, #152]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6892      	ldr	r2, [r2, #8]
 8003fdc:	0211      	lsls	r1, r2, #8
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6912      	ldr	r2, [r2, #16]
 8003fe2:	0852      	lsrs	r2, r2, #1
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	0552      	lsls	r2, r2, #21
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	491f      	ldr	r1, [pc, #124]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	610b      	str	r3, [r1, #16]
 8003ff0:	e011      	b.n	8004016 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	0211      	lsls	r1, r2, #8
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6952      	ldr	r2, [r2, #20]
 8004008:	0852      	lsrs	r2, r2, #1
 800400a:	3a01      	subs	r2, #1
 800400c:	0652      	lsls	r2, r2, #25
 800400e:	430a      	orrs	r2, r1
 8004010:	4915      	ldr	r1, [pc, #84]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004012:	4313      	orrs	r3, r2
 8004014:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a13      	ldr	r2, [pc, #76]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 800401c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004020:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fd fd9f 	bl	8001b64 <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004028:	e009      	b.n	800403e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800402a:	f7fd fd9b 	bl	8001b64 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d902      	bls.n	800403e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	73fb      	strb	r3, [r7, #15]
          break;
 800403c:	e005      	b.n	800404a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ef      	beq.n	800402a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	4903      	ldr	r1, [pc, #12]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000

0800406c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e095      	b.n	80041aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408e:	d009      	beq.n	80040a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
 8004096:	e005      	b.n	80040a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd fae8 	bl	8001694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e4:	d902      	bls.n	80040ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e002      	b.n	80040f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040fa:	d007      	beq.n	800410c <HAL_SPI_Init+0xa0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004104:	d002      	beq.n	800410c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	ea42 0103 	orr.w	r1, r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	f003 0204 	and.w	r2, r3, #4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004188:	ea42 0103 	orr.w	r1, r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b088      	sub	sp, #32
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_SPI_Transmit+0x22>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e158      	b.n	8004486 <HAL_SPI_Transmit+0x2d4>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041dc:	f7fd fcc2 	bl	8001b64 <HAL_GetTick>
 80041e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d002      	beq.n	80041f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
 80041f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041f6:	e13d      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_SPI_Transmit+0x52>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004208:	e134      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2203      	movs	r2, #3
 800420e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004254:	d10f      	bne.n	8004276 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d007      	beq.n	8004294 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800429c:	d94b      	bls.n	8004336 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Transmit+0xfa>
 80042a6:	8afb      	ldrh	r3, [r7, #22]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d13e      	bne.n	800432a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	1c9a      	adds	r2, r3, #2
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042d0:	e02b      	b.n	800432a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d112      	bne.n	8004306 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004304:	e011      	b.n	800432a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004306:	f7fd fc2d 	bl	8001b64 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d803      	bhi.n	800431e <HAL_SPI_Transmit+0x16c>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d102      	bne.n	8004324 <HAL_SPI_Transmit+0x172>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004328:	e0a4      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1ce      	bne.n	80042d2 <HAL_SPI_Transmit+0x120>
 8004334:	e07c      	b.n	8004430 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_SPI_Transmit+0x192>
 800433e:	8afb      	ldrh	r3, [r7, #22]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d170      	bne.n	8004426 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d912      	bls.n	8004374 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b02      	subs	r3, #2
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004372:	e058      	b.n	8004426 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	7812      	ldrb	r2, [r2, #0]
 8004380:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800439a:	e044      	b.n	8004426 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d12b      	bne.n	8004402 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d912      	bls.n	80043da <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b02      	subs	r3, #2
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d8:	e025      	b.n	8004426 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004400:	e011      	b.n	8004426 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004402:	f7fd fbaf 	bl	8001b64 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d803      	bhi.n	800441a <HAL_SPI_Transmit+0x268>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d102      	bne.n	8004420 <HAL_SPI_Transmit+0x26e>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004424:	e026      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1b5      	bne.n	800439c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fce3 	bl	8004e00 <SPI_EndRxTxTransaction>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e000      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004484:	7ffb      	ldrb	r3, [r7, #31]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b088      	sub	sp, #32
 8004492:	af02      	add	r7, sp, #8
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044aa:	d112      	bne.n	80044d2 <HAL_SPI_Receive+0x44>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10e      	bne.n	80044d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2204      	movs	r2, #4
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f910 	bl	80046ee <HAL_SPI_TransmitReceive>
 80044ce:	4603      	mov	r3, r0
 80044d0:	e109      	b.n	80046e6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_SPI_Receive+0x52>
 80044dc:	2302      	movs	r3, #2
 80044de:	e102      	b.n	80046e6 <HAL_SPI_Receive+0x258>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e8:	f7fd fb3c 	bl	8001b64 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d002      	beq.n	8004500 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
 80044fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044fe:	e0e9      	b.n	80046d4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_SPI_Receive+0x7e>
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004510:	e0e0      	b.n	80046d4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2204      	movs	r2, #4
 8004516:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	88fa      	ldrh	r2, [r7, #6]
 800452a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800455c:	d908      	bls.n	8004570 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	e007      	b.n	8004580 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800457e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	d10f      	bne.n	80045aa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004598:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045d0:	d867      	bhi.n	80046a2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045d2:	e030      	b.n	8004636 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d117      	bne.n	8004612 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f103 020c 	add.w	r2, r3, #12
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	7812      	ldrb	r2, [r2, #0]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004610:	e011      	b.n	8004636 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004612:	f7fd faa7 	bl	8001b64 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d803      	bhi.n	800462a <HAL_SPI_Receive+0x19c>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d102      	bne.n	8004630 <HAL_SPI_Receive+0x1a2>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004634:	e04e      	b.n	80046d4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1c8      	bne.n	80045d4 <HAL_SPI_Receive+0x146>
 8004642:	e034      	b.n	80046ae <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d115      	bne.n	800467e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	b292      	uxth	r2, r2
 800465e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	1c9a      	adds	r2, r3, #2
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800467c:	e011      	b.n	80046a2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467e:	f7fd fa71 	bl	8001b64 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d803      	bhi.n	8004696 <HAL_SPI_Receive+0x208>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d102      	bne.n	800469c <HAL_SPI_Receive+0x20e>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046a0:	e018      	b.n	80046d4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ca      	bne.n	8004644 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fb4c 	bl	8004d50 <SPI_EndRxTransaction>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]
 80046d0:	e000      	b.n	80046d4 <HAL_SPI_Receive+0x246>
  }

error :
 80046d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b08a      	sub	sp, #40	; 0x28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046fc:	2301      	movs	r3, #1
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x26>
 8004710:	2302      	movs	r3, #2
 8004712:	e1fb      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x41e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800471c:	f7fd fa22 	bl	8001b64 <HAL_GetTick>
 8004720:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004728:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004730:	887b      	ldrh	r3, [r7, #2]
 8004732:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004738:	7efb      	ldrb	r3, [r7, #27]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d00e      	beq.n	800475c <HAL_SPI_TransmitReceive+0x6e>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004744:	d106      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x66>
 800474e:	7efb      	ldrb	r3, [r7, #27]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d003      	beq.n	800475c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800475a:	e1cd      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_SPI_TransmitReceive+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_TransmitReceive+0x80>
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004774:	e1c0      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b04      	cmp	r3, #4
 8004780:	d003      	beq.n	800478a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2205      	movs	r2, #5
 8004786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	887a      	ldrh	r2, [r7, #2]
 800479a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	887a      	ldrh	r2, [r7, #2]
 80047a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	887a      	ldrh	r2, [r7, #2]
 80047b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047cc:	d802      	bhi.n	80047d4 <HAL_SPI_TransmitReceive+0xe6>
 80047ce:	8a3b      	ldrh	r3, [r7, #16]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d908      	bls.n	80047e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	e007      	b.n	80047f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d007      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800481c:	d97c      	bls.n	8004918 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_TransmitReceive+0x13e>
 8004826:	8a7b      	ldrh	r3, [r7, #18]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d169      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	1c9a      	adds	r2, r3, #2
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004850:	e056      	b.n	8004900 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b02      	cmp	r3, #2
 800485e:	d11b      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x1aa>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_SPI_TransmitReceive+0x1aa>
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	2b01      	cmp	r3, #1
 800486e:	d113      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	881a      	ldrh	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	1c9a      	adds	r2, r3, #2
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d11c      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x1f2>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	b292      	uxth	r2, r2
 80048be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	1c9a      	adds	r2, r3, #2
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048dc:	2301      	movs	r3, #1
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048e0:	f7fd f940 	bl	8001b64 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d807      	bhi.n	8004900 <HAL_SPI_TransmitReceive+0x212>
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d003      	beq.n	8004900 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048fe:	e0fb      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1a3      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x164>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d19d      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x164>
 8004916:	e0df      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x23a>
 8004920:	8a7b      	ldrh	r3, [r7, #18]
 8004922:	2b01      	cmp	r3, #1
 8004924:	f040 80cb 	bne.w	8004abe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d912      	bls.n	8004958 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	1c9a      	adds	r2, r3, #2
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b02      	subs	r3, #2
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004956:	e0b2      	b.n	8004abe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800497e:	e09e      	b.n	8004abe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d134      	bne.n	80049f8 <HAL_SPI_TransmitReceive+0x30a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02f      	beq.n	80049f8 <HAL_SPI_TransmitReceive+0x30a>
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2b01      	cmp	r3, #1
 800499c:	d12c      	bne.n	80049f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d912      	bls.n	80049ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b02      	subs	r3, #2
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049cc:	e012      	b.n	80049f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d148      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x3aa>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d042      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d923      	bls.n	8004a66 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	b292      	uxth	r2, r2
 8004a2a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	1c9a      	adds	r2, r3, #2
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b02      	subs	r3, #2
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d81f      	bhi.n	8004a94 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	e016      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f103 020c 	add.w	r2, r3, #12
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	7812      	ldrb	r2, [r2, #0]
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a94:	2301      	movs	r3, #1
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a98:	f7fd f864 	bl	8001b64 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d803      	bhi.n	8004ab0 <HAL_SPI_TransmitReceive+0x3c2>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d102      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x3c8>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004abc:	e01c      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f47f af5b 	bne.w	8004980 <HAL_SPI_TransmitReceive+0x292>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f47f af54 	bne.w	8004980 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f98f 	bl	8004e00 <SPI_EndRxTxTransaction>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	661a      	str	r2, [r3, #96]	; 0x60
 8004af4:	e000      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b24:	f7fd f81e 	bl	8001b64 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4413      	add	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b34:	f7fd f816 	bl	8001b64 <HAL_GetTick>
 8004b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3a:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	0d1b      	lsrs	r3, r3, #20
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4a:	e054      	b.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d050      	beq.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b54:	f7fd f806 	bl	8001b64 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d902      	bls.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d13d      	bne.n	8004be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b82:	d111      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8c:	d004      	beq.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d107      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d10f      	bne.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e017      	b.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d19b      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	2000000c 	.word	0x2000000c

08004c24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c36:	f7fc ff95 	bl	8001b64 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	4413      	add	r3, r2
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c46:	f7fc ff8d 	bl	8001b64 <HAL_GetTick>
 8004c4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c54:	4b3d      	ldr	r3, [pc, #244]	; (8004d4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00da      	lsls	r2, r3, #3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	0d1b      	lsrs	r3, r3, #20
 8004c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c6c:	e060      	b.n	8004d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c74:	d107      	bne.n	8004c86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d050      	beq.n	8004d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c8e:	f7fc ff69 	bl	8001b64 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d902      	bls.n	8004ca4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d13d      	bne.n	8004d20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cbc:	d111      	bne.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc6:	d004      	beq.n	8004cd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d107      	bne.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cea:	d10f      	bne.n	8004d0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e010      	b.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d196      	bne.n	8004c6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3728      	adds	r7, #40	; 0x28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	2000000c 	.word	0x2000000c

08004d50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d64:	d111      	bne.n	8004d8a <SPI_EndRxTransaction+0x3a>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6e:	d004      	beq.n	8004d7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d78:	d107      	bne.n	8004d8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2180      	movs	r1, #128	; 0x80
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff febd 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e023      	b.n	8004df8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004db8:	d11d      	bne.n	8004df6 <SPI_EndRxTransaction+0xa6>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc2:	d004      	beq.n	8004dce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dcc:	d113      	bne.n	8004df6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff ff22 	bl	8004c24 <SPI_WaitFifoStateUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e000      	b.n	8004df8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff ff03 	bl	8004c24 <SPI_WaitFifoStateUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e027      	b.n	8004e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff fe68 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e014      	b.n	8004e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7ff fedc 	bl	8004c24 <SPI_WaitFifoStateUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e000      	b.n	8004e84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e040      	b.n	8004f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc fc32 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8c0 	bl	8005050 <UART_SetConfig>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e022      	b.n	8004f20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fae0 	bl	80054a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fb67 	bl	80055ec <UART_CheckIdleState>
 8004f1e:	4603      	mov	r3, r0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	f040 8082 	bne.w	8005046 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_UART_Transmit+0x26>
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07a      	b.n	8005048 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_UART_Transmit+0x38>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e073      	b.n	8005048 <HAL_UART_Transmit+0x120>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2221      	movs	r2, #33	; 0x21
 8004f74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f76:	f7fc fdf5 	bl	8001b64 <HAL_GetTick>
 8004f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	d108      	bne.n	8004fa8 <HAL_UART_Transmit+0x80>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d104      	bne.n	8004fa8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	e003      	b.n	8004fb0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004fb8:	e02d      	b.n	8005016 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fb5a 	bl	800567e <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e039      	b.n	8005048 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	881a      	ldrh	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe6:	b292      	uxth	r2, r2
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	3302      	adds	r3, #2
 8004fee:	61bb      	str	r3, [r7, #24]
 8004ff0:	e008      	b.n	8005004 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3301      	adds	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1cb      	bne.n	8004fba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	2140      	movs	r1, #64	; 0x40
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fb26 	bl	800567e <UART_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e005      	b.n	8005048 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e000      	b.n	8005048 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	4618      	mov	r0, r3
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005054:	b08a      	sub	sp, #40	; 0x28
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	431a      	orrs	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	4313      	orrs	r3, r2
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4bb4      	ldr	r3, [pc, #720]	; (8005350 <UART_SetConfig+0x300>)
 8005080:	4013      	ands	r3, r2
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005088:	430b      	orrs	r3, r1
 800508a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4aa9      	ldr	r2, [pc, #676]	; (8005354 <UART_SetConfig+0x304>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	4313      	orrs	r3, r2
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	430a      	orrs	r2, r1
 80050ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4aa0      	ldr	r2, [pc, #640]	; (8005358 <UART_SetConfig+0x308>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d126      	bne.n	8005128 <UART_SetConfig+0xd8>
 80050da:	4ba0      	ldr	r3, [pc, #640]	; (800535c <UART_SetConfig+0x30c>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d81b      	bhi.n	8005120 <UART_SetConfig+0xd0>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0xa0>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005101 	.word	0x08005101
 80050f4:	08005111 	.word	0x08005111
 80050f8:	08005109 	.word	0x08005109
 80050fc:	08005119 	.word	0x08005119
 8005100:	2301      	movs	r3, #1
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005106:	e080      	b.n	800520a <UART_SetConfig+0x1ba>
 8005108:	2302      	movs	r3, #2
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510e:	e07c      	b.n	800520a <UART_SetConfig+0x1ba>
 8005110:	2304      	movs	r3, #4
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005116:	e078      	b.n	800520a <UART_SetConfig+0x1ba>
 8005118:	2308      	movs	r3, #8
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e074      	b.n	800520a <UART_SetConfig+0x1ba>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	e070      	b.n	800520a <UART_SetConfig+0x1ba>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a8c      	ldr	r2, [pc, #560]	; (8005360 <UART_SetConfig+0x310>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d138      	bne.n	80051a4 <UART_SetConfig+0x154>
 8005132:	4b8a      	ldr	r3, [pc, #552]	; (800535c <UART_SetConfig+0x30c>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b0c      	cmp	r3, #12
 800513e:	d82d      	bhi.n	800519c <UART_SetConfig+0x14c>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0xf8>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	0800517d 	.word	0x0800517d
 800514c:	0800519d 	.word	0x0800519d
 8005150:	0800519d 	.word	0x0800519d
 8005154:	0800519d 	.word	0x0800519d
 8005158:	0800518d 	.word	0x0800518d
 800515c:	0800519d 	.word	0x0800519d
 8005160:	0800519d 	.word	0x0800519d
 8005164:	0800519d 	.word	0x0800519d
 8005168:	08005185 	.word	0x08005185
 800516c:	0800519d 	.word	0x0800519d
 8005170:	0800519d 	.word	0x0800519d
 8005174:	0800519d 	.word	0x0800519d
 8005178:	08005195 	.word	0x08005195
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e042      	b.n	800520a <UART_SetConfig+0x1ba>
 8005184:	2302      	movs	r3, #2
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518a:	e03e      	b.n	800520a <UART_SetConfig+0x1ba>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005192:	e03a      	b.n	800520a <UART_SetConfig+0x1ba>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519a:	e036      	b.n	800520a <UART_SetConfig+0x1ba>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a2:	e032      	b.n	800520a <UART_SetConfig+0x1ba>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a6a      	ldr	r2, [pc, #424]	; (8005354 <UART_SetConfig+0x304>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d12a      	bne.n	8005204 <UART_SetConfig+0x1b4>
 80051ae:	4b6b      	ldr	r3, [pc, #428]	; (800535c <UART_SetConfig+0x30c>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051bc:	d01a      	beq.n	80051f4 <UART_SetConfig+0x1a4>
 80051be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c2:	d81b      	bhi.n	80051fc <UART_SetConfig+0x1ac>
 80051c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c8:	d00c      	beq.n	80051e4 <UART_SetConfig+0x194>
 80051ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ce:	d815      	bhi.n	80051fc <UART_SetConfig+0x1ac>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <UART_SetConfig+0x18c>
 80051d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d8:	d008      	beq.n	80051ec <UART_SetConfig+0x19c>
 80051da:	e00f      	b.n	80051fc <UART_SetConfig+0x1ac>
 80051dc:	2300      	movs	r3, #0
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e2:	e012      	b.n	800520a <UART_SetConfig+0x1ba>
 80051e4:	2302      	movs	r3, #2
 80051e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ea:	e00e      	b.n	800520a <UART_SetConfig+0x1ba>
 80051ec:	2304      	movs	r3, #4
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f2:	e00a      	b.n	800520a <UART_SetConfig+0x1ba>
 80051f4:	2308      	movs	r3, #8
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fa:	e006      	b.n	800520a <UART_SetConfig+0x1ba>
 80051fc:	2310      	movs	r3, #16
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005202:	e002      	b.n	800520a <UART_SetConfig+0x1ba>
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a51      	ldr	r2, [pc, #324]	; (8005354 <UART_SetConfig+0x304>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d17a      	bne.n	800530a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005218:	2b08      	cmp	r3, #8
 800521a:	d824      	bhi.n	8005266 <UART_SetConfig+0x216>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <UART_SetConfig+0x1d4>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005249 	.word	0x08005249
 8005228:	08005267 	.word	0x08005267
 800522c:	08005251 	.word	0x08005251
 8005230:	08005267 	.word	0x08005267
 8005234:	08005257 	.word	0x08005257
 8005238:	08005267 	.word	0x08005267
 800523c:	08005267 	.word	0x08005267
 8005240:	08005267 	.word	0x08005267
 8005244:	0800525f 	.word	0x0800525f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005248:	f7fe fb8c 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 800524c:	61f8      	str	r0, [r7, #28]
        break;
 800524e:	e010      	b.n	8005272 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005250:	4b44      	ldr	r3, [pc, #272]	; (8005364 <UART_SetConfig+0x314>)
 8005252:	61fb      	str	r3, [r7, #28]
        break;
 8005254:	e00d      	b.n	8005272 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005256:	f7fe faed 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 800525a:	61f8      	str	r0, [r7, #28]
        break;
 800525c:	e009      	b.n	8005272 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005262:	61fb      	str	r3, [r7, #28]
        break;
 8005264:	e005      	b.n	8005272 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8107 	beq.w	8005488 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	429a      	cmp	r2, r3
 8005288:	d305      	bcc.n	8005296 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	429a      	cmp	r2, r3
 8005294:	d903      	bls.n	800529e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800529c:	e0f4      	b.n	8005488 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2200      	movs	r2, #0
 80052a2:	461c      	mov	r4, r3
 80052a4:	4615      	mov	r5, r2
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	022b      	lsls	r3, r5, #8
 80052b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80052b4:	0222      	lsls	r2, r4, #8
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	6849      	ldr	r1, [r1, #4]
 80052ba:	0849      	lsrs	r1, r1, #1
 80052bc:	2000      	movs	r0, #0
 80052be:	4688      	mov	r8, r1
 80052c0:	4681      	mov	r9, r0
 80052c2:	eb12 0a08 	adds.w	sl, r2, r8
 80052c6:	eb43 0b09 	adc.w	fp, r3, r9
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d8:	4650      	mov	r0, sl
 80052da:	4659      	mov	r1, fp
 80052dc:	f7fb fc64 	bl	8000ba8 <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4613      	mov	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ee:	d308      	bcc.n	8005302 <UART_SetConfig+0x2b2>
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f6:	d204      	bcs.n	8005302 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	e0c2      	b.n	8005488 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005308:	e0be      	b.n	8005488 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005312:	d16a      	bne.n	80053ea <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005318:	2b08      	cmp	r3, #8
 800531a:	d834      	bhi.n	8005386 <UART_SetConfig+0x336>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x2d4>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005349 	.word	0x08005349
 8005328:	08005369 	.word	0x08005369
 800532c:	08005371 	.word	0x08005371
 8005330:	08005387 	.word	0x08005387
 8005334:	08005377 	.word	0x08005377
 8005338:	08005387 	.word	0x08005387
 800533c:	08005387 	.word	0x08005387
 8005340:	08005387 	.word	0x08005387
 8005344:	0800537f 	.word	0x0800537f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fe fb0c 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 800534c:	61f8      	str	r0, [r7, #28]
        break;
 800534e:	e020      	b.n	8005392 <UART_SetConfig+0x342>
 8005350:	efff69f3 	.word	0xefff69f3
 8005354:	40008000 	.word	0x40008000
 8005358:	40013800 	.word	0x40013800
 800535c:	40021000 	.word	0x40021000
 8005360:	40004400 	.word	0x40004400
 8005364:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005368:	f7fe fb12 	bl	8003990 <HAL_RCC_GetPCLK2Freq>
 800536c:	61f8      	str	r0, [r7, #28]
        break;
 800536e:	e010      	b.n	8005392 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005370:	4b4c      	ldr	r3, [pc, #304]	; (80054a4 <UART_SetConfig+0x454>)
 8005372:	61fb      	str	r3, [r7, #28]
        break;
 8005374:	e00d      	b.n	8005392 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005376:	f7fe fa5d 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 800537a:	61f8      	str	r0, [r7, #28]
        break;
 800537c:	e009      	b.n	8005392 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005382:	61fb      	str	r3, [r7, #28]
        break;
 8005384:	e005      	b.n	8005392 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d077      	beq.n	8005488 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	005a      	lsls	r2, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	441a      	add	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b0f      	cmp	r3, #15
 80053b2:	d916      	bls.n	80053e2 <UART_SetConfig+0x392>
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ba:	d212      	bcs.n	80053e2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f023 030f 	bic.w	r3, r3, #15
 80053c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	085b      	lsrs	r3, r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	8afb      	ldrh	r3, [r7, #22]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	8afa      	ldrh	r2, [r7, #22]
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	e052      	b.n	8005488 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053e8:	e04e      	b.n	8005488 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d827      	bhi.n	8005442 <UART_SetConfig+0x3f2>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0x3a8>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005425 	.word	0x08005425
 8005400:	0800542d 	.word	0x0800542d
 8005404:	08005443 	.word	0x08005443
 8005408:	08005433 	.word	0x08005433
 800540c:	08005443 	.word	0x08005443
 8005410:	08005443 	.word	0x08005443
 8005414:	08005443 	.word	0x08005443
 8005418:	0800543b 	.word	0x0800543b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800541c:	f7fe faa2 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8005420:	61f8      	str	r0, [r7, #28]
        break;
 8005422:	e014      	b.n	800544e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005424:	f7fe fab4 	bl	8003990 <HAL_RCC_GetPCLK2Freq>
 8005428:	61f8      	str	r0, [r7, #28]
        break;
 800542a:	e010      	b.n	800544e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800542c:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <UART_SetConfig+0x454>)
 800542e:	61fb      	str	r3, [r7, #28]
        break;
 8005430:	e00d      	b.n	800544e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005432:	f7fe f9ff 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 8005436:	61f8      	str	r0, [r7, #28]
        break;
 8005438:	e009      	b.n	800544e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	61fb      	str	r3, [r7, #28]
        break;
 8005440:	e005      	b.n	800544e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800544c:	bf00      	nop
    }

    if (pclk != 0U)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d019      	beq.n	8005488 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	085a      	lsrs	r2, r3, #1
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	441a      	add	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b0f      	cmp	r3, #15
 800546c:	d909      	bls.n	8005482 <UART_SetConfig+0x432>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005474:	d205      	bcs.n	8005482 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60da      	str	r2, [r3, #12]
 8005480:	e002      	b.n	8005488 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005494:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005498:	4618      	mov	r0, r3
 800549a:	3728      	adds	r7, #40	; 0x28
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a2:	bf00      	nop
 80054a4:	00f42400 	.word	0x00f42400

080054a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01a      	beq.n	80055be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a6:	d10a      	bne.n	80055be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055fc:	f7fc fab2 	bl	8001b64 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d10e      	bne.n	800562e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f82d 	bl	800567e <UART_WaitOnFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e023      	b.n	8005676 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d10e      	bne.n	800565a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800563c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f817 	bl	800567e <UART_WaitOnFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e00d      	b.n	8005676 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b09c      	sub	sp, #112	; 0x70
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	603b      	str	r3, [r7, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568e:	e0a5      	b.n	80057dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	f000 80a1 	beq.w	80057dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569a:	f7fc fa63 	bl	8001b64 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80056aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d13e      	bne.n	800572e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056c4:	667b      	str	r3, [r7, #100]	; 0x64
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e6      	bne.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	663b      	str	r3, [r7, #96]	; 0x60
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3308      	adds	r3, #8
 8005700:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005702:	64ba      	str	r2, [r7, #72]	; 0x48
 8005704:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e5      	bne.n	80056e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e067      	b.n	80057fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d04f      	beq.n	80057dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574a:	d147      	bne.n	80057dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005754:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800576a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
 8005776:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800577a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e6      	bne.n	8005756 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	613b      	str	r3, [r7, #16]
   return(result);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	66bb      	str	r3, [r7, #104]	; 0x68
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057a8:	623a      	str	r2, [r7, #32]
 80057aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	69f9      	ldr	r1, [r7, #28]
 80057ae:	6a3a      	ldr	r2, [r7, #32]
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e010      	b.n	80057fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69da      	ldr	r2, [r3, #28]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4013      	ands	r3, r2
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	f43f af4a 	beq.w	8005690 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3770      	adds	r7, #112	; 0x70
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <PMW3901_RegWrite>:

PMW3901_Descriptor_t *Descriptor; // Initialise notre port SPI


PMW3901_Status_t PMW3901_RegWrite(uint8_t reg, uint8_t val) // Méthode permettant d'écrire dans des registres en SPI
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	460a      	mov	r2, r1
 8005812:	71fb      	strb	r3, [r7, #7]
 8005814:	4613      	mov	r3, r2
 8005816:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef SPI_status;

	reg |= 0x80;
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800581e:	71fb      	strb	r3, [r7, #7]
	uint8_t send[2]={reg,val};
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	733b      	strb	r3, [r7, #12]
 8005824:	79bb      	ldrb	r3, [r7, #6]
 8005826:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8005828:	4b14      	ldr	r3, [pc, #80]	; (800587c <PMW3901_RegWrite+0x74>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6858      	ldr	r0, [r3, #4]
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <PMW3901_RegWrite+0x74>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	891b      	ldrh	r3, [r3, #8]
 8005834:	2200      	movs	r2, #0
 8005836:	4619      	mov	r1, r3
 8005838:	f7fd fa5c 	bl	8002cf4 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, send, 2, 1000);
 800583c:	4b0f      	ldr	r3, [pc, #60]	; (800587c <PMW3901_RegWrite+0x74>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	f107 010c 	add.w	r1, r7, #12
 8005846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800584a:	2202      	movs	r2, #2
 800584c:	f7fe fcb1 	bl	80041b2 <HAL_SPI_Transmit>
 8005850:	4603      	mov	r3, r0
 8005852:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <PMW3901_RegWrite+0x56>
 800585a:	2302      	movs	r3, #2
 800585c:	e00a      	b.n	8005874 <PMW3901_RegWrite+0x6c>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <PMW3901_RegWrite+0x74>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6858      	ldr	r0, [r3, #4]
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <PMW3901_RegWrite+0x74>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	891b      	ldrh	r3, [r3, #8]
 800586a:	2201      	movs	r2, #1
 800586c:	4619      	mov	r1, r3
 800586e:	f7fd fa41 	bl	8002cf4 <HAL_GPIO_WritePin>

	return PMW3901_SUCCESS;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000754 	.word	0x20000754

08005880 <PMW3901_RegRead>:

PMW3901_Status_t PMW3901_RegRead(uint8_t reg, uint8_t *dest) // Méthode permettant de lire des registres en SPI
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef SPI_status;

	uint8_t value;

	reg &= ~0x80;
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005892:	b2db      	uxtb	r3, r3
 8005894:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8005896:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <PMW3901_RegRead+0x90>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6858      	ldr	r0, [r3, #4]
 800589c:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <PMW3901_RegRead+0x90>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	891b      	ldrh	r3, [r3, #8]
 80058a2:	2200      	movs	r2, #0
 80058a4:	4619      	mov	r1, r3
 80058a6:	f7fd fa25 	bl	8002cf4 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, &reg, 1, 1000);
 80058aa:	4b19      	ldr	r3, [pc, #100]	; (8005910 <PMW3901_RegRead+0x90>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	1df9      	adds	r1, r7, #7
 80058b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058b6:	2201      	movs	r2, #1
 80058b8:	f7fe fc7b 	bl	80041b2 <HAL_SPI_Transmit>
 80058bc:	4603      	mov	r3, r0
 80058be:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <PMW3901_RegRead+0x4a>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e01e      	b.n	8005908 <PMW3901_RegRead+0x88>

	SPI_status = HAL_SPI_Receive(HSPI, &value, 1, 1000);
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <PMW3901_RegRead+0x90>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	f107 010e 	add.w	r1, r7, #14
 80058d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058d8:	2201      	movs	r2, #1
 80058da:	f7fe fdd8 	bl	800448e <HAL_SPI_Receive>
 80058de:	4603      	mov	r3, r0
 80058e0:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <PMW3901_RegRead+0x6c>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e00d      	b.n	8005908 <PMW3901_RegRead+0x88>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80058ec:	4b08      	ldr	r3, [pc, #32]	; (8005910 <PMW3901_RegRead+0x90>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6858      	ldr	r0, [r3, #4]
 80058f2:	4b07      	ldr	r3, [pc, #28]	; (8005910 <PMW3901_RegRead+0x90>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	891b      	ldrh	r3, [r3, #8]
 80058f8:	2201      	movs	r2, #1
 80058fa:	4619      	mov	r1, r3
 80058fc:	f7fd f9fa 	bl	8002cf4 <HAL_GPIO_WritePin>

	*dest = value;
 8005900:	7bba      	ldrb	r2, [r7, #14]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	701a      	strb	r2, [r3, #0]

	return PMW3901_SUCCESS;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000754 	.word	0x20000754

08005914 <PMW3901_SetLed>:

PMW3901_Status_t PMW3901_SetLed() // Fonction permettant d'allumer les leds du capteurs
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
	PMW3901_Status_t status;

	status = PMW3901_RegWrite(0x7f, 0x14);
 800591a:	2114      	movs	r1, #20
 800591c:	207f      	movs	r0, #127	; 0x7f
 800591e:	f7ff ff73 	bl	8005808 <PMW3901_RegWrite>
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <PMW3901_SetLed+0x1c>
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	e011      	b.n	8005954 <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x6f, 0x1c);
 8005930:	211c      	movs	r1, #28
 8005932:	206f      	movs	r0, #111	; 0x6f
 8005934:	f7ff ff68 	bl	8005808 <PMW3901_RegWrite>
 8005938:	4603      	mov	r3, r0
 800593a:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <PMW3901_SetLed+0x32>
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	e006      	b.n	8005954 <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x7f, 0x00);
 8005946:	2100      	movs	r1, #0
 8005948:	207f      	movs	r0, #127	; 0x7f
 800594a:	f7ff ff5d 	bl	8005808 <PMW3901_RegWrite>
 800594e:	4603      	mov	r3, r0
 8005950:	71fb      	strb	r3, [r7, #7]
	return status;
 8005952:	79fb      	ldrb	r3, [r7, #7]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <PMW3901_Init>:

PMW3901_Status_t PMW3901_Init(PMW3901_Descriptor_t *_Descriptor) // Permet d'initialiser le capteur
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	PMW3901_Status_t status;

	uint8_t Product_ID;
	uint8_t Inverse_Product_ID;

	Descriptor = _Descriptor;
 8005964:	4aad      	ldr	r2, [pc, #692]	; (8005c1c <PMW3901_Init+0x2c0>)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6013      	str	r3, [r2, #0]

	status = PMW3901_RegRead(0x00, &Product_ID);
 800596a:	f107 030e 	add.w	r3, r7, #14
 800596e:	4619      	mov	r1, r3
 8005970:	2000      	movs	r0, #0
 8005972:	f7ff ff85 	bl	8005880 <PMW3901_RegRead>
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <PMW3901_Init+0x28>
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	e34c      	b.n	800601e <PMW3901_Init+0x6c2>

	if(Product_ID != PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 8005984:	7bbb      	ldrb	r3, [r7, #14]
 8005986:	2b49      	cmp	r3, #73	; 0x49
 8005988:	d001      	beq.n	800598e <PMW3901_Init+0x32>
 800598a:	2301      	movs	r3, #1
 800598c:	e347      	b.n	800601e <PMW3901_Init+0x6c2>

	status = PMW3901_RegRead(0x5F, &Inverse_Product_ID);
 800598e:	f107 030d 	add.w	r3, r7, #13
 8005992:	4619      	mov	r1, r3
 8005994:	205f      	movs	r0, #95	; 0x5f
 8005996:	f7ff ff73 	bl	8005880 <PMW3901_RegRead>
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <PMW3901_Init+0x4c>
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	e33a      	b.n	800601e <PMW3901_Init+0x6c2>

	if(Inverse_Product_ID != INVERSE_PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 80059a8:	7b7b      	ldrb	r3, [r7, #13]
 80059aa:	2bb6      	cmp	r3, #182	; 0xb6
 80059ac:	d001      	beq.n	80059b2 <PMW3901_Init+0x56>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e335      	b.n	800601e <PMW3901_Init+0x6c2>

	// Tout ça permet initialiser certains registres du capteur apparaissant dans la datasheet (on se sait pas à quoi ça correspond)
	status = PMW3901_RegWrite(0x3A, 0x00); if(status) return status; // Les if et return permettent de renvoyer un status afin de savoir si tout se passe bien, si status = 0 => tout est bon, si status = 1 => quelque chose fonctionne mal
 80059b2:	2100      	movs	r1, #0
 80059b4:	203a      	movs	r0, #58	; 0x3a
 80059b6:	f7ff ff27 	bl	8005808 <PMW3901_RegWrite>
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <PMW3901_Init+0x6c>
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	e32a      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 80059c8:	2100      	movs	r1, #0
 80059ca:	207f      	movs	r0, #127	; 0x7f
 80059cc:	f7ff ff1c 	bl	8005808 <PMW3901_RegWrite>
 80059d0:	4603      	mov	r3, r0
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <PMW3901_Init+0x82>
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	e31f      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0xAD); if(status) return status;
 80059de:	21ad      	movs	r1, #173	; 0xad
 80059e0:	2061      	movs	r0, #97	; 0x61
 80059e2:	f7ff ff11 	bl	8005808 <PMW3901_RegWrite>
 80059e6:	4603      	mov	r3, r0
 80059e8:	73fb      	strb	r3, [r7, #15]
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <PMW3901_Init+0x98>
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	e314      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x03); if(status) return status;
 80059f4:	2103      	movs	r1, #3
 80059f6:	207f      	movs	r0, #127	; 0x7f
 80059f8:	f7ff ff06 	bl	8005808 <PMW3901_RegWrite>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <PMW3901_Init+0xae>
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	e309      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x00); if(status) return status;
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	2040      	movs	r0, #64	; 0x40
 8005a0e:	f7ff fefb 	bl	8005808 <PMW3901_RegWrite>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <PMW3901_Init+0xc4>
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	e2fe      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x05); if(status) return status;
 8005a20:	2105      	movs	r1, #5
 8005a22:	207f      	movs	r0, #127	; 0x7f
 8005a24:	f7ff fef0 	bl	8005808 <PMW3901_RegWrite>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73fb      	strb	r3, [r7, #15]
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <PMW3901_Init+0xda>
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	e2f3      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0xB3); if(status) return status;
 8005a36:	21b3      	movs	r1, #179	; 0xb3
 8005a38:	2041      	movs	r0, #65	; 0x41
 8005a3a:	f7ff fee5 	bl	8005808 <PMW3901_RegWrite>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	73fb      	strb	r3, [r7, #15]
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <PMW3901_Init+0xf0>
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	e2e8      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0xF1); if(status) return status;
 8005a4c:	21f1      	movs	r1, #241	; 0xf1
 8005a4e:	2043      	movs	r0, #67	; 0x43
 8005a50:	f7ff feda 	bl	8005808 <PMW3901_RegWrite>
 8005a54:	4603      	mov	r3, r0
 8005a56:	73fb      	strb	r3, [r7, #15]
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <PMW3901_Init+0x106>
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	e2dd      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x14); if(status) return status;
 8005a62:	2114      	movs	r1, #20
 8005a64:	2045      	movs	r0, #69	; 0x45
 8005a66:	f7ff fecf 	bl	8005808 <PMW3901_RegWrite>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	73fb      	strb	r3, [r7, #15]
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <PMW3901_Init+0x11c>
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	e2d2      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x32); if(status) return status;
 8005a78:	2132      	movs	r1, #50	; 0x32
 8005a7a:	205b      	movs	r0, #91	; 0x5b
 8005a7c:	f7ff fec4 	bl	8005808 <PMW3901_RegWrite>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <PMW3901_Init+0x132>
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	e2c7      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x34); if(status) return status;
 8005a8e:	2134      	movs	r1, #52	; 0x34
 8005a90:	205f      	movs	r0, #95	; 0x5f
 8005a92:	f7ff feb9 	bl	8005808 <PMW3901_RegWrite>
 8005a96:	4603      	mov	r3, r0
 8005a98:	73fb      	strb	r3, [r7, #15]
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <PMW3901_Init+0x148>
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	e2bc      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7B, 0x08); if(status) return status;
 8005aa4:	2108      	movs	r1, #8
 8005aa6:	207b      	movs	r0, #123	; 0x7b
 8005aa8:	f7ff feae 	bl	8005808 <PMW3901_RegWrite>
 8005aac:	4603      	mov	r3, r0
 8005aae:	73fb      	strb	r3, [r7, #15]
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <PMW3901_Init+0x15e>
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	e2b1      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 8005aba:	2106      	movs	r1, #6
 8005abc:	207f      	movs	r0, #127	; 0x7f
 8005abe:	f7ff fea3 	bl	8005808 <PMW3901_RegWrite>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73fb      	strb	r3, [r7, #15]
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <PMW3901_Init+0x174>
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	e2a6      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x1B); if(status) return status;
 8005ad0:	211b      	movs	r1, #27
 8005ad2:	2044      	movs	r0, #68	; 0x44
 8005ad4:	f7ff fe98 	bl	8005808 <PMW3901_RegWrite>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	73fb      	strb	r3, [r7, #15]
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <PMW3901_Init+0x18a>
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	e29b      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0xBF); if(status) return status;
 8005ae6:	21bf      	movs	r1, #191	; 0xbf
 8005ae8:	2040      	movs	r0, #64	; 0x40
 8005aea:	f7ff fe8d 	bl	8005808 <PMW3901_RegWrite>
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <PMW3901_Init+0x1a0>
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	e290      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0x3F); if(status) return status;
 8005afc:	213f      	movs	r1, #63	; 0x3f
 8005afe:	204e      	movs	r0, #78	; 0x4e
 8005b00:	f7ff fe82 	bl	8005808 <PMW3901_RegWrite>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <PMW3901_Init+0x1b6>
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	e285      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x08); if(status) return status;
 8005b12:	2108      	movs	r1, #8
 8005b14:	207f      	movs	r0, #127	; 0x7f
 8005b16:	f7ff fe77 	bl	8005808 <PMW3901_RegWrite>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	73fb      	strb	r3, [r7, #15]
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <PMW3901_Init+0x1cc>
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	e27a      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x20); if(status) return status;
 8005b28:	2120      	movs	r1, #32
 8005b2a:	2065      	movs	r0, #101	; 0x65
 8005b2c:	f7ff fe6c 	bl	8005808 <PMW3901_RegWrite>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <PMW3901_Init+0x1e2>
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	e26f      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6A, 0x18); if(status) return status;
 8005b3e:	2118      	movs	r1, #24
 8005b40:	206a      	movs	r0, #106	; 0x6a
 8005b42:	f7ff fe61 	bl	8005808 <PMW3901_RegWrite>
 8005b46:	4603      	mov	r3, r0
 8005b48:	73fb      	strb	r3, [r7, #15]
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <PMW3901_Init+0x1f8>
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	e264      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x09); if(status) return status;
 8005b54:	2109      	movs	r1, #9
 8005b56:	207f      	movs	r0, #127	; 0x7f
 8005b58:	f7ff fe56 	bl	8005808 <PMW3901_RegWrite>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <PMW3901_Init+0x20e>
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	e259      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4F, 0xAF); if(status) return status;
 8005b6a:	21af      	movs	r1, #175	; 0xaf
 8005b6c:	204f      	movs	r0, #79	; 0x4f
 8005b6e:	f7ff fe4b 	bl	8005808 <PMW3901_RegWrite>
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <PMW3901_Init+0x224>
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	e24e      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x40); if(status) return status;
 8005b80:	2140      	movs	r1, #64	; 0x40
 8005b82:	205f      	movs	r0, #95	; 0x5f
 8005b84:	f7ff fe40 	bl	8005808 <PMW3901_RegWrite>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	73fb      	strb	r3, [r7, #15]
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <PMW3901_Init+0x23a>
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	e243      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x80); if(status) return status;
 8005b96:	2180      	movs	r1, #128	; 0x80
 8005b98:	2048      	movs	r0, #72	; 0x48
 8005b9a:	f7ff fe35 	bl	8005808 <PMW3901_RegWrite>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	73fb      	strb	r3, [r7, #15]
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <PMW3901_Init+0x250>
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	e238      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x49, 0x80); if(status) return status;
 8005bac:	2180      	movs	r1, #128	; 0x80
 8005bae:	2049      	movs	r0, #73	; 0x49
 8005bb0:	f7ff fe2a 	bl	8005808 <PMW3901_RegWrite>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <PMW3901_Init+0x266>
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	e22d      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x57, 0x77); if(status) return status;
 8005bc2:	2177      	movs	r1, #119	; 0x77
 8005bc4:	2057      	movs	r0, #87	; 0x57
 8005bc6:	f7ff fe1f 	bl	8005808 <PMW3901_RegWrite>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	73fb      	strb	r3, [r7, #15]
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <PMW3901_Init+0x27c>
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	e222      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x60, 0x78); if(status) return status;
 8005bd8:	2178      	movs	r1, #120	; 0x78
 8005bda:	2060      	movs	r0, #96	; 0x60
 8005bdc:	f7ff fe14 	bl	8005808 <PMW3901_RegWrite>
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <PMW3901_Init+0x292>
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	e217      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0x78); if(status) return status;
 8005bee:	2178      	movs	r1, #120	; 0x78
 8005bf0:	2061      	movs	r0, #97	; 0x61
 8005bf2:	f7ff fe09 	bl	8005808 <PMW3901_RegWrite>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <PMW3901_Init+0x2a8>
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	e20c      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0x08); if(status) return status;
 8005c04:	2108      	movs	r1, #8
 8005c06:	2062      	movs	r0, #98	; 0x62
 8005c08:	f7ff fdfe 	bl	8005808 <PMW3901_RegWrite>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d004      	beq.n	8005c20 <PMW3901_Init+0x2c4>
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	e201      	b.n	800601e <PMW3901_Init+0x6c2>
 8005c1a:	bf00      	nop
 8005c1c:	20000754 	.word	0x20000754
	status = PMW3901_RegWrite(0x63, 0x50); if(status) return status;
 8005c20:	2150      	movs	r1, #80	; 0x50
 8005c22:	2063      	movs	r0, #99	; 0x63
 8005c24:	f7ff fdf0 	bl	8005808 <PMW3901_RegWrite>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <PMW3901_Init+0x2da>
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	e1f3      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0A); if(status) return status;
 8005c36:	210a      	movs	r1, #10
 8005c38:	207f      	movs	r0, #127	; 0x7f
 8005c3a:	f7ff fde5 	bl	8005808 <PMW3901_RegWrite>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	73fb      	strb	r3, [r7, #15]
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <PMW3901_Init+0x2f0>
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	e1e8      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x60); if(status) return status;
 8005c4c:	2160      	movs	r1, #96	; 0x60
 8005c4e:	2045      	movs	r0, #69	; 0x45
 8005c50:	f7ff fdda 	bl	8005808 <PMW3901_RegWrite>
 8005c54:	4603      	mov	r3, r0
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <PMW3901_Init+0x306>
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	e1dd      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8005c62:	2100      	movs	r1, #0
 8005c64:	207f      	movs	r0, #127	; 0x7f
 8005c66:	f7ff fdcf 	bl	8005808 <PMW3901_RegWrite>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <PMW3901_Init+0x31c>
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	e1d2      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4D, 0x11); if(status) return status;
 8005c78:	2111      	movs	r1, #17
 8005c7a:	204d      	movs	r0, #77	; 0x4d
 8005c7c:	f7ff fdc4 	bl	8005808 <PMW3901_RegWrite>
 8005c80:	4603      	mov	r3, r0
 8005c82:	73fb      	strb	r3, [r7, #15]
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <PMW3901_Init+0x332>
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	e1c7      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x55, 0x80); if(status) return status;
 8005c8e:	2180      	movs	r1, #128	; 0x80
 8005c90:	2055      	movs	r0, #85	; 0x55
 8005c92:	f7ff fdb9 	bl	8005808 <PMW3901_RegWrite>
 8005c96:	4603      	mov	r3, r0
 8005c98:	73fb      	strb	r3, [r7, #15]
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <PMW3901_Init+0x348>
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	e1bc      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x74, 0x1F); if(status) return status;
 8005ca4:	211f      	movs	r1, #31
 8005ca6:	2074      	movs	r0, #116	; 0x74
 8005ca8:	f7ff fdae 	bl	8005808 <PMW3901_RegWrite>
 8005cac:	4603      	mov	r3, r0
 8005cae:	73fb      	strb	r3, [r7, #15]
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <PMW3901_Init+0x35e>
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	e1b1      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x75, 0x1F); if(status) return status;
 8005cba:	211f      	movs	r1, #31
 8005cbc:	2075      	movs	r0, #117	; 0x75
 8005cbe:	f7ff fda3 	bl	8005808 <PMW3901_RegWrite>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	73fb      	strb	r3, [r7, #15]
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <PMW3901_Init+0x374>
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	e1a6      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4A, 0x78); if(status) return status;
 8005cd0:	2178      	movs	r1, #120	; 0x78
 8005cd2:	204a      	movs	r0, #74	; 0x4a
 8005cd4:	f7ff fd98 	bl	8005808 <PMW3901_RegWrite>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <PMW3901_Init+0x38a>
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	e19b      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x78); if(status) return status;
 8005ce6:	2178      	movs	r1, #120	; 0x78
 8005ce8:	204b      	movs	r0, #75	; 0x4b
 8005cea:	f7ff fd8d 	bl	8005808 <PMW3901_RegWrite>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <PMW3901_Init+0x3a0>
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	e190      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x08); if(status) return status;
 8005cfc:	2108      	movs	r1, #8
 8005cfe:	2044      	movs	r0, #68	; 0x44
 8005d00:	f7ff fd82 	bl	8005808 <PMW3901_RegWrite>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <PMW3901_Init+0x3b6>
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	e185      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x50); if(status) return status;
 8005d12:	2150      	movs	r1, #80	; 0x50
 8005d14:	2045      	movs	r0, #69	; 0x45
 8005d16:	f7ff fd77 	bl	8005808 <PMW3901_RegWrite>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <PMW3901_Init+0x3cc>
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	e17a      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x64, 0xFF); if(status) return status;
 8005d28:	21ff      	movs	r1, #255	; 0xff
 8005d2a:	2064      	movs	r0, #100	; 0x64
 8005d2c:	f7ff fd6c 	bl	8005808 <PMW3901_RegWrite>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <PMW3901_Init+0x3e2>
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	e16f      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x1F); if(status) return status;
 8005d3e:	211f      	movs	r1, #31
 8005d40:	2065      	movs	r0, #101	; 0x65
 8005d42:	f7ff fd61 	bl	8005808 <PMW3901_RegWrite>
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <PMW3901_Init+0x3f8>
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	e164      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x14); if(status) return status;
 8005d54:	2114      	movs	r1, #20
 8005d56:	207f      	movs	r0, #127	; 0x7f
 8005d58:	f7ff fd56 	bl	8005808 <PMW3901_RegWrite>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <PMW3901_Init+0x40e>
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	e159      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x60); if(status) return status;
 8005d6a:	2160      	movs	r1, #96	; 0x60
 8005d6c:	2065      	movs	r0, #101	; 0x65
 8005d6e:	f7ff fd4b 	bl	8005808 <PMW3901_RegWrite>
 8005d72:	4603      	mov	r3, r0
 8005d74:	73fb      	strb	r3, [r7, #15]
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <PMW3901_Init+0x424>
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	e14e      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x66, 0x08); if(status) return status;
 8005d80:	2108      	movs	r1, #8
 8005d82:	2066      	movs	r0, #102	; 0x66
 8005d84:	f7ff fd40 	bl	8005808 <PMW3901_RegWrite>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <PMW3901_Init+0x43a>
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	e143      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x78); if(status) return status;
 8005d96:	2178      	movs	r1, #120	; 0x78
 8005d98:	2063      	movs	r0, #99	; 0x63
 8005d9a:	f7ff fd35 	bl	8005808 <PMW3901_RegWrite>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <PMW3901_Init+0x450>
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	e138      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x15); if(status) return status;
 8005dac:	2115      	movs	r1, #21
 8005dae:	207f      	movs	r0, #127	; 0x7f
 8005db0:	f7ff fd2a 	bl	8005808 <PMW3901_RegWrite>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <PMW3901_Init+0x466>
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	e12d      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x58); if(status) return status;
 8005dc2:	2158      	movs	r1, #88	; 0x58
 8005dc4:	2048      	movs	r0, #72	; 0x48
 8005dc6:	f7ff fd1f 	bl	8005808 <PMW3901_RegWrite>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73fb      	strb	r3, [r7, #15]
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <PMW3901_Init+0x47c>
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	e122      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8005dd8:	2107      	movs	r1, #7
 8005dda:	207f      	movs	r0, #127	; 0x7f
 8005ddc:	f7ff fd14 	bl	8005808 <PMW3901_RegWrite>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <PMW3901_Init+0x492>
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	e117      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0x0D); if(status) return status;
 8005dee:	210d      	movs	r1, #13
 8005df0:	2041      	movs	r0, #65	; 0x41
 8005df2:	f7ff fd09 	bl	8005808 <PMW3901_RegWrite>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <PMW3901_Init+0x4a8>
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	e10c      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0x14); if(status) return status;
 8005e04:	2114      	movs	r1, #20
 8005e06:	2043      	movs	r0, #67	; 0x43
 8005e08:	f7ff fcfe 	bl	8005808 <PMW3901_RegWrite>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <PMW3901_Init+0x4be>
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	e101      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x0E); if(status) return status;
 8005e1a:	210e      	movs	r1, #14
 8005e1c:	204b      	movs	r0, #75	; 0x4b
 8005e1e:	f7ff fcf3 	bl	8005808 <PMW3901_RegWrite>
 8005e22:	4603      	mov	r3, r0
 8005e24:	73fb      	strb	r3, [r7, #15]
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <PMW3901_Init+0x4d4>
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	e0f6      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x0F); if(status) return status;
 8005e30:	210f      	movs	r1, #15
 8005e32:	2045      	movs	r0, #69	; 0x45
 8005e34:	f7ff fce8 	bl	8005808 <PMW3901_RegWrite>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <PMW3901_Init+0x4ea>
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	e0eb      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x42); if(status) return status;
 8005e46:	2142      	movs	r1, #66	; 0x42
 8005e48:	2044      	movs	r0, #68	; 0x44
 8005e4a:	f7ff fcdd 	bl	8005808 <PMW3901_RegWrite>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	73fb      	strb	r3, [r7, #15]
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <PMW3901_Init+0x500>
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	e0e0      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4C, 0x80); if(status) return status;
 8005e5c:	2180      	movs	r1, #128	; 0x80
 8005e5e:	204c      	movs	r0, #76	; 0x4c
 8005e60:	f7ff fcd2 	bl	8005808 <PMW3901_RegWrite>
 8005e64:	4603      	mov	r3, r0
 8005e66:	73fb      	strb	r3, [r7, #15]
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <PMW3901_Init+0x516>
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	e0d5      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x10); if(status) return status;
 8005e72:	2110      	movs	r1, #16
 8005e74:	207f      	movs	r0, #127	; 0x7f
 8005e76:	f7ff fcc7 	bl	8005808 <PMW3901_RegWrite>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <PMW3901_Init+0x52c>
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	e0ca      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x02); if(status) return status;
 8005e88:	2102      	movs	r1, #2
 8005e8a:	205b      	movs	r0, #91	; 0x5b
 8005e8c:	f7ff fcbc 	bl	8005808 <PMW3901_RegWrite>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <PMW3901_Init+0x542>
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	e0bf      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8005e9e:	2107      	movs	r1, #7
 8005ea0:	207f      	movs	r0, #127	; 0x7f
 8005ea2:	f7ff fcb1 	bl	8005808 <PMW3901_RegWrite>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	73fb      	strb	r3, [r7, #15]
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <PMW3901_Init+0x558>
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	e0b4      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x41); if(status) return status;
 8005eb4:	2141      	movs	r1, #65	; 0x41
 8005eb6:	2040      	movs	r0, #64	; 0x40
 8005eb8:	f7ff fca6 	bl	8005808 <PMW3901_RegWrite>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	73fb      	strb	r3, [r7, #15]
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <PMW3901_Init+0x56e>
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	e0a9      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x70, 0x00); if(status) return status;
 8005eca:	2100      	movs	r1, #0
 8005ecc:	2070      	movs	r0, #112	; 0x70
 8005ece:	f7ff fc9b 	bl	8005808 <PMW3901_RegWrite>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <PMW3901_Init+0x584>
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	e09e      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x32, 0x44); if(status) return status;
 8005ee0:	2144      	movs	r1, #68	; 0x44
 8005ee2:	2032      	movs	r0, #50	; 0x32
 8005ee4:	f7ff fc90 	bl	8005808 <PMW3901_RegWrite>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <PMW3901_Init+0x59a>
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	e093      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8005ef6:	2107      	movs	r1, #7
 8005ef8:	207f      	movs	r0, #127	; 0x7f
 8005efa:	f7ff fc85 	bl	8005808 <PMW3901_RegWrite>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <PMW3901_Init+0x5b0>
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	e088      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x40); if(status) return status;
 8005f0c:	2140      	movs	r1, #64	; 0x40
 8005f0e:	2040      	movs	r0, #64	; 0x40
 8005f10:	f7ff fc7a 	bl	8005808 <PMW3901_RegWrite>
 8005f14:	4603      	mov	r3, r0
 8005f16:	73fb      	strb	r3, [r7, #15]
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <PMW3901_Init+0x5c6>
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	e07d      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 8005f22:	2106      	movs	r1, #6
 8005f24:	207f      	movs	r0, #127	; 0x7f
 8005f26:	f7ff fc6f 	bl	8005808 <PMW3901_RegWrite>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <PMW3901_Init+0x5dc>
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	e072      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0xf0); if(status) return status;
 8005f38:	21f0      	movs	r1, #240	; 0xf0
 8005f3a:	2062      	movs	r0, #98	; 0x62
 8005f3c:	f7ff fc64 	bl	8005808 <PMW3901_RegWrite>
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <PMW3901_Init+0x5f2>
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	e067      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x00); if(status) return status;
 8005f4e:	2100      	movs	r1, #0
 8005f50:	2063      	movs	r0, #99	; 0x63
 8005f52:	f7ff fc59 	bl	8005808 <PMW3901_RegWrite>
 8005f56:	4603      	mov	r3, r0
 8005f58:	73fb      	strb	r3, [r7, #15]
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <PMW3901_Init+0x608>
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	e05c      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0D); if(status) return status;
 8005f64:	210d      	movs	r1, #13
 8005f66:	207f      	movs	r0, #127	; 0x7f
 8005f68:	f7ff fc4e 	bl	8005808 <PMW3901_RegWrite>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	73fb      	strb	r3, [r7, #15]
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <PMW3901_Init+0x61e>
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	e051      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0xC0); if(status) return status;
 8005f7a:	21c0      	movs	r1, #192	; 0xc0
 8005f7c:	2048      	movs	r0, #72	; 0x48
 8005f7e:	f7ff fc43 	bl	8005808 <PMW3901_RegWrite>
 8005f82:	4603      	mov	r3, r0
 8005f84:	73fb      	strb	r3, [r7, #15]
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <PMW3901_Init+0x634>
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	e046      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6F, 0xd5); if(status) return status;
 8005f90:	21d5      	movs	r1, #213	; 0xd5
 8005f92:	206f      	movs	r0, #111	; 0x6f
 8005f94:	f7ff fc38 	bl	8005808 <PMW3901_RegWrite>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <PMW3901_Init+0x64a>
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	e03b      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	207f      	movs	r0, #127	; 0x7f
 8005faa:	f7ff fc2d 	bl	8005808 <PMW3901_RegWrite>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73fb      	strb	r3, [r7, #15]
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <PMW3901_Init+0x660>
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	e030      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0xa0); if(status) return status;
 8005fbc:	21a0      	movs	r1, #160	; 0xa0
 8005fbe:	205b      	movs	r0, #91	; 0x5b
 8005fc0:	f7ff fc22 	bl	8005808 <PMW3901_RegWrite>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <PMW3901_Init+0x676>
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	e025      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0xA8); if(status) return status;
 8005fd2:	21a8      	movs	r1, #168	; 0xa8
 8005fd4:	204e      	movs	r0, #78	; 0x4e
 8005fd6:	f7ff fc17 	bl	8005808 <PMW3901_RegWrite>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <PMW3901_Init+0x68c>
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	e01a      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5A, 0x50); if(status) return status;
 8005fe8:	2150      	movs	r1, #80	; 0x50
 8005fea:	205a      	movs	r0, #90	; 0x5a
 8005fec:	f7ff fc0c 	bl	8005808 <PMW3901_RegWrite>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <PMW3901_Init+0x6a2>
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	e00f      	b.n	800601e <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x80); if(status) return status;
 8005ffe:	2180      	movs	r1, #128	; 0x80
 8006000:	2040      	movs	r0, #64	; 0x40
 8006002:	f7ff fc01 	bl	8005808 <PMW3901_RegWrite>
 8006006:	4603      	mov	r3, r0
 8006008:	73fb      	strb	r3, [r7, #15]
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <PMW3901_Init+0x6b8>
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	e004      	b.n	800601e <PMW3901_Init+0x6c2>

	status = PMW3901_SetLed();
 8006014:	f7ff fc7e 	bl	8005914 <PMW3901_SetLed>
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]

	return status;
 800601c:	7bfb      	ldrb	r3, [r7, #15]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop

08006028 <PMW3901_Read_Variation>:

PMW3901_Status_t PMW3901_Read_Variation(int16_t *var_x, int16_t *var_y) // Fonction permettant de lire la valeur de la variation
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]

	PMW3901_Status_t status;
	PMW3901_Unify_2x8_to_16_t data;
	uint8_t Motion;

	status = PMW3901_RegRead(0x02, &Motion);
 8006032:	f107 030b 	add.w	r3, r7, #11
 8006036:	4619      	mov	r1, r3
 8006038:	2002      	movs	r0, #2
 800603a:	f7ff fc21 	bl	8005880 <PMW3901_RegRead>
 800603e:	4603      	mov	r3, r0
 8006040:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <PMW3901_Read_Variation+0x24>
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	e03e      	b.n	80060ca <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_H, &data.raw[1]);
 800604c:	f107 030c 	add.w	r3, r7, #12
 8006050:	3301      	adds	r3, #1
 8006052:	4619      	mov	r1, r3
 8006054:	2004      	movs	r0, #4
 8006056:	f7ff fc13 	bl	8005880 <PMW3901_RegRead>
 800605a:	4603      	mov	r3, r0
 800605c:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <PMW3901_Read_Variation+0x40>
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	e030      	b.n	80060ca <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_L, &data.raw[0]);
 8006068:	f107 030c 	add.w	r3, r7, #12
 800606c:	4619      	mov	r1, r3
 800606e:	2003      	movs	r0, #3
 8006070:	f7ff fc06 	bl	8005880 <PMW3901_RegRead>
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <PMW3901_Read_Variation+0x5a>
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	e023      	b.n	80060ca <PMW3901_Read_Variation+0xa2>

	*var_x = data.unified;
 8006082:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	801a      	strh	r2, [r3, #0]

	status = PMW3901_RegRead(DELTA_Y_H, &data.raw[1]);
 800608a:	f107 030c 	add.w	r3, r7, #12
 800608e:	3301      	adds	r3, #1
 8006090:	4619      	mov	r1, r3
 8006092:	2006      	movs	r0, #6
 8006094:	f7ff fbf4 	bl	8005880 <PMW3901_RegRead>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <PMW3901_Read_Variation+0x7e>
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	e011      	b.n	80060ca <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_Y_L, &data.raw[0]);
 80060a6:	f107 030c 	add.w	r3, r7, #12
 80060aa:	4619      	mov	r1, r3
 80060ac:	2005      	movs	r0, #5
 80060ae:	f7ff fbe7 	bl	8005880 <PMW3901_RegRead>
 80060b2:	4603      	mov	r3, r0
 80060b4:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <PMW3901_Read_Variation+0x98>
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	e004      	b.n	80060ca <PMW3901_Read_Variation+0xa2>

	*var_y = data.unified;
 80060c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	801a      	strh	r2, [r3, #0]

	return status;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <__errno>:
 80060d4:	4b01      	ldr	r3, [pc, #4]	; (80060dc <__errno+0x8>)
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000018 	.word	0x20000018

080060e0 <__libc_init_array>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	4d0d      	ldr	r5, [pc, #52]	; (8006118 <__libc_init_array+0x38>)
 80060e4:	4c0d      	ldr	r4, [pc, #52]	; (800611c <__libc_init_array+0x3c>)
 80060e6:	1b64      	subs	r4, r4, r5
 80060e8:	10a4      	asrs	r4, r4, #2
 80060ea:	2600      	movs	r6, #0
 80060ec:	42a6      	cmp	r6, r4
 80060ee:	d109      	bne.n	8006104 <__libc_init_array+0x24>
 80060f0:	4d0b      	ldr	r5, [pc, #44]	; (8006120 <__libc_init_array+0x40>)
 80060f2:	4c0c      	ldr	r4, [pc, #48]	; (8006124 <__libc_init_array+0x44>)
 80060f4:	f002 ff02 	bl	8008efc <_init>
 80060f8:	1b64      	subs	r4, r4, r5
 80060fa:	10a4      	asrs	r4, r4, #2
 80060fc:	2600      	movs	r6, #0
 80060fe:	42a6      	cmp	r6, r4
 8006100:	d105      	bne.n	800610e <__libc_init_array+0x2e>
 8006102:	bd70      	pop	{r4, r5, r6, pc}
 8006104:	f855 3b04 	ldr.w	r3, [r5], #4
 8006108:	4798      	blx	r3
 800610a:	3601      	adds	r6, #1
 800610c:	e7ee      	b.n	80060ec <__libc_init_array+0xc>
 800610e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006112:	4798      	blx	r3
 8006114:	3601      	adds	r6, #1
 8006116:	e7f2      	b.n	80060fe <__libc_init_array+0x1e>
 8006118:	0800938c 	.word	0x0800938c
 800611c:	0800938c 	.word	0x0800938c
 8006120:	0800938c 	.word	0x0800938c
 8006124:	08009390 	.word	0x08009390

08006128 <memcpy>:
 8006128:	440a      	add	r2, r1
 800612a:	4291      	cmp	r1, r2
 800612c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006130:	d100      	bne.n	8006134 <memcpy+0xc>
 8006132:	4770      	bx	lr
 8006134:	b510      	push	{r4, lr}
 8006136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800613e:	4291      	cmp	r1, r2
 8006140:	d1f9      	bne.n	8006136 <memcpy+0xe>
 8006142:	bd10      	pop	{r4, pc}

08006144 <memset>:
 8006144:	4402      	add	r2, r0
 8006146:	4603      	mov	r3, r0
 8006148:	4293      	cmp	r3, r2
 800614a:	d100      	bne.n	800614e <memset+0xa>
 800614c:	4770      	bx	lr
 800614e:	f803 1b01 	strb.w	r1, [r3], #1
 8006152:	e7f9      	b.n	8006148 <memset+0x4>

08006154 <__cvt>:
 8006154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	ec55 4b10 	vmov	r4, r5, d0
 800615c:	2d00      	cmp	r5, #0
 800615e:	460e      	mov	r6, r1
 8006160:	4619      	mov	r1, r3
 8006162:	462b      	mov	r3, r5
 8006164:	bfbb      	ittet	lt
 8006166:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800616a:	461d      	movlt	r5, r3
 800616c:	2300      	movge	r3, #0
 800616e:	232d      	movlt	r3, #45	; 0x2d
 8006170:	700b      	strb	r3, [r1, #0]
 8006172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006174:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006178:	4691      	mov	r9, r2
 800617a:	f023 0820 	bic.w	r8, r3, #32
 800617e:	bfbc      	itt	lt
 8006180:	4622      	movlt	r2, r4
 8006182:	4614      	movlt	r4, r2
 8006184:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006188:	d005      	beq.n	8006196 <__cvt+0x42>
 800618a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800618e:	d100      	bne.n	8006192 <__cvt+0x3e>
 8006190:	3601      	adds	r6, #1
 8006192:	2102      	movs	r1, #2
 8006194:	e000      	b.n	8006198 <__cvt+0x44>
 8006196:	2103      	movs	r1, #3
 8006198:	ab03      	add	r3, sp, #12
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	ab02      	add	r3, sp, #8
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	ec45 4b10 	vmov	d0, r4, r5
 80061a4:	4653      	mov	r3, sl
 80061a6:	4632      	mov	r2, r6
 80061a8:	f000 fcea 	bl	8006b80 <_dtoa_r>
 80061ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061b0:	4607      	mov	r7, r0
 80061b2:	d102      	bne.n	80061ba <__cvt+0x66>
 80061b4:	f019 0f01 	tst.w	r9, #1
 80061b8:	d022      	beq.n	8006200 <__cvt+0xac>
 80061ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061be:	eb07 0906 	add.w	r9, r7, r6
 80061c2:	d110      	bne.n	80061e6 <__cvt+0x92>
 80061c4:	783b      	ldrb	r3, [r7, #0]
 80061c6:	2b30      	cmp	r3, #48	; 0x30
 80061c8:	d10a      	bne.n	80061e0 <__cvt+0x8c>
 80061ca:	2200      	movs	r2, #0
 80061cc:	2300      	movs	r3, #0
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f7fa fc79 	bl	8000ac8 <__aeabi_dcmpeq>
 80061d6:	b918      	cbnz	r0, 80061e0 <__cvt+0x8c>
 80061d8:	f1c6 0601 	rsb	r6, r6, #1
 80061dc:	f8ca 6000 	str.w	r6, [sl]
 80061e0:	f8da 3000 	ldr.w	r3, [sl]
 80061e4:	4499      	add	r9, r3
 80061e6:	2200      	movs	r2, #0
 80061e8:	2300      	movs	r3, #0
 80061ea:	4620      	mov	r0, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	f7fa fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80061f2:	b108      	cbz	r0, 80061f8 <__cvt+0xa4>
 80061f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061f8:	2230      	movs	r2, #48	; 0x30
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	454b      	cmp	r3, r9
 80061fe:	d307      	bcc.n	8006210 <__cvt+0xbc>
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006204:	1bdb      	subs	r3, r3, r7
 8006206:	4638      	mov	r0, r7
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	b004      	add	sp, #16
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	1c59      	adds	r1, r3, #1
 8006212:	9103      	str	r1, [sp, #12]
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	e7f0      	b.n	80061fa <__cvt+0xa6>

08006218 <__exponent>:
 8006218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800621a:	4603      	mov	r3, r0
 800621c:	2900      	cmp	r1, #0
 800621e:	bfb8      	it	lt
 8006220:	4249      	neglt	r1, r1
 8006222:	f803 2b02 	strb.w	r2, [r3], #2
 8006226:	bfb4      	ite	lt
 8006228:	222d      	movlt	r2, #45	; 0x2d
 800622a:	222b      	movge	r2, #43	; 0x2b
 800622c:	2909      	cmp	r1, #9
 800622e:	7042      	strb	r2, [r0, #1]
 8006230:	dd2a      	ble.n	8006288 <__exponent+0x70>
 8006232:	f10d 0407 	add.w	r4, sp, #7
 8006236:	46a4      	mov	ip, r4
 8006238:	270a      	movs	r7, #10
 800623a:	46a6      	mov	lr, r4
 800623c:	460a      	mov	r2, r1
 800623e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006242:	fb07 1516 	mls	r5, r7, r6, r1
 8006246:	3530      	adds	r5, #48	; 0x30
 8006248:	2a63      	cmp	r2, #99	; 0x63
 800624a:	f104 34ff 	add.w	r4, r4, #4294967295
 800624e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006252:	4631      	mov	r1, r6
 8006254:	dcf1      	bgt.n	800623a <__exponent+0x22>
 8006256:	3130      	adds	r1, #48	; 0x30
 8006258:	f1ae 0502 	sub.w	r5, lr, #2
 800625c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006260:	1c44      	adds	r4, r0, #1
 8006262:	4629      	mov	r1, r5
 8006264:	4561      	cmp	r1, ip
 8006266:	d30a      	bcc.n	800627e <__exponent+0x66>
 8006268:	f10d 0209 	add.w	r2, sp, #9
 800626c:	eba2 020e 	sub.w	r2, r2, lr
 8006270:	4565      	cmp	r5, ip
 8006272:	bf88      	it	hi
 8006274:	2200      	movhi	r2, #0
 8006276:	4413      	add	r3, r2
 8006278:	1a18      	subs	r0, r3, r0
 800627a:	b003      	add	sp, #12
 800627c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006282:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006286:	e7ed      	b.n	8006264 <__exponent+0x4c>
 8006288:	2330      	movs	r3, #48	; 0x30
 800628a:	3130      	adds	r1, #48	; 0x30
 800628c:	7083      	strb	r3, [r0, #2]
 800628e:	70c1      	strb	r1, [r0, #3]
 8006290:	1d03      	adds	r3, r0, #4
 8006292:	e7f1      	b.n	8006278 <__exponent+0x60>

08006294 <_printf_float>:
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	ed2d 8b02 	vpush	{d8}
 800629c:	b08d      	sub	sp, #52	; 0x34
 800629e:	460c      	mov	r4, r1
 80062a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062a4:	4616      	mov	r6, r2
 80062a6:	461f      	mov	r7, r3
 80062a8:	4605      	mov	r5, r0
 80062aa:	f001 fa57 	bl	800775c <_localeconv_r>
 80062ae:	f8d0 a000 	ldr.w	sl, [r0]
 80062b2:	4650      	mov	r0, sl
 80062b4:	f7f9 ff8c 	bl	80001d0 <strlen>
 80062b8:	2300      	movs	r3, #0
 80062ba:	930a      	str	r3, [sp, #40]	; 0x28
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	9305      	str	r3, [sp, #20]
 80062c0:	f8d8 3000 	ldr.w	r3, [r8]
 80062c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062c8:	3307      	adds	r3, #7
 80062ca:	f023 0307 	bic.w	r3, r3, #7
 80062ce:	f103 0208 	add.w	r2, r3, #8
 80062d2:	f8c8 2000 	str.w	r2, [r8]
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062e6:	9307      	str	r3, [sp, #28]
 80062e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80062ec:	ee08 0a10 	vmov	s16, r0
 80062f0:	4b9f      	ldr	r3, [pc, #636]	; (8006570 <_printf_float+0x2dc>)
 80062f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062f6:	f04f 32ff 	mov.w	r2, #4294967295
 80062fa:	f7fa fc17 	bl	8000b2c <__aeabi_dcmpun>
 80062fe:	bb88      	cbnz	r0, 8006364 <_printf_float+0xd0>
 8006300:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006304:	4b9a      	ldr	r3, [pc, #616]	; (8006570 <_printf_float+0x2dc>)
 8006306:	f04f 32ff 	mov.w	r2, #4294967295
 800630a:	f7fa fbf1 	bl	8000af0 <__aeabi_dcmple>
 800630e:	bb48      	cbnz	r0, 8006364 <_printf_float+0xd0>
 8006310:	2200      	movs	r2, #0
 8006312:	2300      	movs	r3, #0
 8006314:	4640      	mov	r0, r8
 8006316:	4649      	mov	r1, r9
 8006318:	f7fa fbe0 	bl	8000adc <__aeabi_dcmplt>
 800631c:	b110      	cbz	r0, 8006324 <_printf_float+0x90>
 800631e:	232d      	movs	r3, #45	; 0x2d
 8006320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006324:	4b93      	ldr	r3, [pc, #588]	; (8006574 <_printf_float+0x2e0>)
 8006326:	4894      	ldr	r0, [pc, #592]	; (8006578 <_printf_float+0x2e4>)
 8006328:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800632c:	bf94      	ite	ls
 800632e:	4698      	movls	r8, r3
 8006330:	4680      	movhi	r8, r0
 8006332:	2303      	movs	r3, #3
 8006334:	6123      	str	r3, [r4, #16]
 8006336:	9b05      	ldr	r3, [sp, #20]
 8006338:	f023 0204 	bic.w	r2, r3, #4
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	f04f 0900 	mov.w	r9, #0
 8006342:	9700      	str	r7, [sp, #0]
 8006344:	4633      	mov	r3, r6
 8006346:	aa0b      	add	r2, sp, #44	; 0x2c
 8006348:	4621      	mov	r1, r4
 800634a:	4628      	mov	r0, r5
 800634c:	f000 f9d8 	bl	8006700 <_printf_common>
 8006350:	3001      	adds	r0, #1
 8006352:	f040 8090 	bne.w	8006476 <_printf_float+0x1e2>
 8006356:	f04f 30ff 	mov.w	r0, #4294967295
 800635a:	b00d      	add	sp, #52	; 0x34
 800635c:	ecbd 8b02 	vpop	{d8}
 8006360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006364:	4642      	mov	r2, r8
 8006366:	464b      	mov	r3, r9
 8006368:	4640      	mov	r0, r8
 800636a:	4649      	mov	r1, r9
 800636c:	f7fa fbde 	bl	8000b2c <__aeabi_dcmpun>
 8006370:	b140      	cbz	r0, 8006384 <_printf_float+0xf0>
 8006372:	464b      	mov	r3, r9
 8006374:	2b00      	cmp	r3, #0
 8006376:	bfbc      	itt	lt
 8006378:	232d      	movlt	r3, #45	; 0x2d
 800637a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800637e:	487f      	ldr	r0, [pc, #508]	; (800657c <_printf_float+0x2e8>)
 8006380:	4b7f      	ldr	r3, [pc, #508]	; (8006580 <_printf_float+0x2ec>)
 8006382:	e7d1      	b.n	8006328 <_printf_float+0x94>
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800638a:	9206      	str	r2, [sp, #24]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	d13f      	bne.n	8006410 <_printf_float+0x17c>
 8006390:	2306      	movs	r3, #6
 8006392:	6063      	str	r3, [r4, #4]
 8006394:	9b05      	ldr	r3, [sp, #20]
 8006396:	6861      	ldr	r1, [r4, #4]
 8006398:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800639c:	2300      	movs	r3, #0
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	ab0a      	add	r3, sp, #40	; 0x28
 80063a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063a6:	ab09      	add	r3, sp, #36	; 0x24
 80063a8:	ec49 8b10 	vmov	d0, r8, r9
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	6022      	str	r2, [r4, #0]
 80063b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063b4:	4628      	mov	r0, r5
 80063b6:	f7ff fecd 	bl	8006154 <__cvt>
 80063ba:	9b06      	ldr	r3, [sp, #24]
 80063bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063be:	2b47      	cmp	r3, #71	; 0x47
 80063c0:	4680      	mov	r8, r0
 80063c2:	d108      	bne.n	80063d6 <_printf_float+0x142>
 80063c4:	1cc8      	adds	r0, r1, #3
 80063c6:	db02      	blt.n	80063ce <_printf_float+0x13a>
 80063c8:	6863      	ldr	r3, [r4, #4]
 80063ca:	4299      	cmp	r1, r3
 80063cc:	dd41      	ble.n	8006452 <_printf_float+0x1be>
 80063ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80063d2:	fa5f fb8b 	uxtb.w	fp, fp
 80063d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063da:	d820      	bhi.n	800641e <_printf_float+0x18a>
 80063dc:	3901      	subs	r1, #1
 80063de:	465a      	mov	r2, fp
 80063e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063e4:	9109      	str	r1, [sp, #36]	; 0x24
 80063e6:	f7ff ff17 	bl	8006218 <__exponent>
 80063ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ec:	1813      	adds	r3, r2, r0
 80063ee:	2a01      	cmp	r2, #1
 80063f0:	4681      	mov	r9, r0
 80063f2:	6123      	str	r3, [r4, #16]
 80063f4:	dc02      	bgt.n	80063fc <_printf_float+0x168>
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	07d2      	lsls	r2, r2, #31
 80063fa:	d501      	bpl.n	8006400 <_printf_float+0x16c>
 80063fc:	3301      	adds	r3, #1
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006404:	2b00      	cmp	r3, #0
 8006406:	d09c      	beq.n	8006342 <_printf_float+0xae>
 8006408:	232d      	movs	r3, #45	; 0x2d
 800640a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640e:	e798      	b.n	8006342 <_printf_float+0xae>
 8006410:	9a06      	ldr	r2, [sp, #24]
 8006412:	2a47      	cmp	r2, #71	; 0x47
 8006414:	d1be      	bne.n	8006394 <_printf_float+0x100>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1bc      	bne.n	8006394 <_printf_float+0x100>
 800641a:	2301      	movs	r3, #1
 800641c:	e7b9      	b.n	8006392 <_printf_float+0xfe>
 800641e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006422:	d118      	bne.n	8006456 <_printf_float+0x1c2>
 8006424:	2900      	cmp	r1, #0
 8006426:	6863      	ldr	r3, [r4, #4]
 8006428:	dd0b      	ble.n	8006442 <_printf_float+0x1ae>
 800642a:	6121      	str	r1, [r4, #16]
 800642c:	b913      	cbnz	r3, 8006434 <_printf_float+0x1a0>
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	07d0      	lsls	r0, r2, #31
 8006432:	d502      	bpl.n	800643a <_printf_float+0x1a6>
 8006434:	3301      	adds	r3, #1
 8006436:	440b      	add	r3, r1
 8006438:	6123      	str	r3, [r4, #16]
 800643a:	65a1      	str	r1, [r4, #88]	; 0x58
 800643c:	f04f 0900 	mov.w	r9, #0
 8006440:	e7de      	b.n	8006400 <_printf_float+0x16c>
 8006442:	b913      	cbnz	r3, 800644a <_printf_float+0x1b6>
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	07d2      	lsls	r2, r2, #31
 8006448:	d501      	bpl.n	800644e <_printf_float+0x1ba>
 800644a:	3302      	adds	r3, #2
 800644c:	e7f4      	b.n	8006438 <_printf_float+0x1a4>
 800644e:	2301      	movs	r3, #1
 8006450:	e7f2      	b.n	8006438 <_printf_float+0x1a4>
 8006452:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006458:	4299      	cmp	r1, r3
 800645a:	db05      	blt.n	8006468 <_printf_float+0x1d4>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	6121      	str	r1, [r4, #16]
 8006460:	07d8      	lsls	r0, r3, #31
 8006462:	d5ea      	bpl.n	800643a <_printf_float+0x1a6>
 8006464:	1c4b      	adds	r3, r1, #1
 8006466:	e7e7      	b.n	8006438 <_printf_float+0x1a4>
 8006468:	2900      	cmp	r1, #0
 800646a:	bfd4      	ite	le
 800646c:	f1c1 0202 	rsble	r2, r1, #2
 8006470:	2201      	movgt	r2, #1
 8006472:	4413      	add	r3, r2
 8006474:	e7e0      	b.n	8006438 <_printf_float+0x1a4>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	055a      	lsls	r2, r3, #21
 800647a:	d407      	bmi.n	800648c <_printf_float+0x1f8>
 800647c:	6923      	ldr	r3, [r4, #16]
 800647e:	4642      	mov	r2, r8
 8006480:	4631      	mov	r1, r6
 8006482:	4628      	mov	r0, r5
 8006484:	47b8      	blx	r7
 8006486:	3001      	adds	r0, #1
 8006488:	d12c      	bne.n	80064e4 <_printf_float+0x250>
 800648a:	e764      	b.n	8006356 <_printf_float+0xc2>
 800648c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006490:	f240 80e0 	bls.w	8006654 <_printf_float+0x3c0>
 8006494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	f7fa fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d034      	beq.n	800650e <_printf_float+0x27a>
 80064a4:	4a37      	ldr	r2, [pc, #220]	; (8006584 <_printf_float+0x2f0>)
 80064a6:	2301      	movs	r3, #1
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	f43f af51 	beq.w	8006356 <_printf_float+0xc2>
 80064b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064b8:	429a      	cmp	r2, r3
 80064ba:	db02      	blt.n	80064c2 <_printf_float+0x22e>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	07d8      	lsls	r0, r3, #31
 80064c0:	d510      	bpl.n	80064e4 <_printf_float+0x250>
 80064c2:	ee18 3a10 	vmov	r3, s16
 80064c6:	4652      	mov	r2, sl
 80064c8:	4631      	mov	r1, r6
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	f43f af41 	beq.w	8006356 <_printf_float+0xc2>
 80064d4:	f04f 0800 	mov.w	r8, #0
 80064d8:	f104 091a 	add.w	r9, r4, #26
 80064dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064de:	3b01      	subs	r3, #1
 80064e0:	4543      	cmp	r3, r8
 80064e2:	dc09      	bgt.n	80064f8 <_printf_float+0x264>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	079b      	lsls	r3, r3, #30
 80064e8:	f100 8105 	bmi.w	80066f6 <_printf_float+0x462>
 80064ec:	68e0      	ldr	r0, [r4, #12]
 80064ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f0:	4298      	cmp	r0, r3
 80064f2:	bfb8      	it	lt
 80064f4:	4618      	movlt	r0, r3
 80064f6:	e730      	b.n	800635a <_printf_float+0xc6>
 80064f8:	2301      	movs	r3, #1
 80064fa:	464a      	mov	r2, r9
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af27 	beq.w	8006356 <_printf_float+0xc2>
 8006508:	f108 0801 	add.w	r8, r8, #1
 800650c:	e7e6      	b.n	80064dc <_printf_float+0x248>
 800650e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	dc39      	bgt.n	8006588 <_printf_float+0x2f4>
 8006514:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <_printf_float+0x2f0>)
 8006516:	2301      	movs	r3, #1
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	47b8      	blx	r7
 800651e:	3001      	adds	r0, #1
 8006520:	f43f af19 	beq.w	8006356 <_printf_float+0xc2>
 8006524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006528:	4313      	orrs	r3, r2
 800652a:	d102      	bne.n	8006532 <_printf_float+0x29e>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	07d9      	lsls	r1, r3, #31
 8006530:	d5d8      	bpl.n	80064e4 <_printf_float+0x250>
 8006532:	ee18 3a10 	vmov	r3, s16
 8006536:	4652      	mov	r2, sl
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	47b8      	blx	r7
 800653e:	3001      	adds	r0, #1
 8006540:	f43f af09 	beq.w	8006356 <_printf_float+0xc2>
 8006544:	f04f 0900 	mov.w	r9, #0
 8006548:	f104 0a1a 	add.w	sl, r4, #26
 800654c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654e:	425b      	negs	r3, r3
 8006550:	454b      	cmp	r3, r9
 8006552:	dc01      	bgt.n	8006558 <_printf_float+0x2c4>
 8006554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006556:	e792      	b.n	800647e <_printf_float+0x1ea>
 8006558:	2301      	movs	r3, #1
 800655a:	4652      	mov	r2, sl
 800655c:	4631      	mov	r1, r6
 800655e:	4628      	mov	r0, r5
 8006560:	47b8      	blx	r7
 8006562:	3001      	adds	r0, #1
 8006564:	f43f aef7 	beq.w	8006356 <_printf_float+0xc2>
 8006568:	f109 0901 	add.w	r9, r9, #1
 800656c:	e7ee      	b.n	800654c <_printf_float+0x2b8>
 800656e:	bf00      	nop
 8006570:	7fefffff 	.word	0x7fefffff
 8006574:	08008fb0 	.word	0x08008fb0
 8006578:	08008fb4 	.word	0x08008fb4
 800657c:	08008fbc 	.word	0x08008fbc
 8006580:	08008fb8 	.word	0x08008fb8
 8006584:	08008fc0 	.word	0x08008fc0
 8006588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800658a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800658c:	429a      	cmp	r2, r3
 800658e:	bfa8      	it	ge
 8006590:	461a      	movge	r2, r3
 8006592:	2a00      	cmp	r2, #0
 8006594:	4691      	mov	r9, r2
 8006596:	dc37      	bgt.n	8006608 <_printf_float+0x374>
 8006598:	f04f 0b00 	mov.w	fp, #0
 800659c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065a0:	f104 021a 	add.w	r2, r4, #26
 80065a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065a6:	9305      	str	r3, [sp, #20]
 80065a8:	eba3 0309 	sub.w	r3, r3, r9
 80065ac:	455b      	cmp	r3, fp
 80065ae:	dc33      	bgt.n	8006618 <_printf_float+0x384>
 80065b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065b4:	429a      	cmp	r2, r3
 80065b6:	db3b      	blt.n	8006630 <_printf_float+0x39c>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	07da      	lsls	r2, r3, #31
 80065bc:	d438      	bmi.n	8006630 <_printf_float+0x39c>
 80065be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c0:	9a05      	ldr	r2, [sp, #20]
 80065c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065c4:	1a9a      	subs	r2, r3, r2
 80065c6:	eba3 0901 	sub.w	r9, r3, r1
 80065ca:	4591      	cmp	r9, r2
 80065cc:	bfa8      	it	ge
 80065ce:	4691      	movge	r9, r2
 80065d0:	f1b9 0f00 	cmp.w	r9, #0
 80065d4:	dc35      	bgt.n	8006642 <_printf_float+0x3ae>
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065de:	f104 0a1a 	add.w	sl, r4, #26
 80065e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	eba3 0309 	sub.w	r3, r3, r9
 80065ec:	4543      	cmp	r3, r8
 80065ee:	f77f af79 	ble.w	80064e4 <_printf_float+0x250>
 80065f2:	2301      	movs	r3, #1
 80065f4:	4652      	mov	r2, sl
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	f43f aeaa 	beq.w	8006356 <_printf_float+0xc2>
 8006602:	f108 0801 	add.w	r8, r8, #1
 8006606:	e7ec      	b.n	80065e2 <_printf_float+0x34e>
 8006608:	4613      	mov	r3, r2
 800660a:	4631      	mov	r1, r6
 800660c:	4642      	mov	r2, r8
 800660e:	4628      	mov	r0, r5
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	d1c0      	bne.n	8006598 <_printf_float+0x304>
 8006616:	e69e      	b.n	8006356 <_printf_float+0xc2>
 8006618:	2301      	movs	r3, #1
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	9205      	str	r2, [sp, #20]
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	f43f ae97 	beq.w	8006356 <_printf_float+0xc2>
 8006628:	9a05      	ldr	r2, [sp, #20]
 800662a:	f10b 0b01 	add.w	fp, fp, #1
 800662e:	e7b9      	b.n	80065a4 <_printf_float+0x310>
 8006630:	ee18 3a10 	vmov	r3, s16
 8006634:	4652      	mov	r2, sl
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	d1be      	bne.n	80065be <_printf_float+0x32a>
 8006640:	e689      	b.n	8006356 <_printf_float+0xc2>
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	464b      	mov	r3, r9
 8006646:	4442      	add	r2, r8
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	d1c1      	bne.n	80065d6 <_printf_float+0x342>
 8006652:	e680      	b.n	8006356 <_printf_float+0xc2>
 8006654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006656:	2a01      	cmp	r2, #1
 8006658:	dc01      	bgt.n	800665e <_printf_float+0x3ca>
 800665a:	07db      	lsls	r3, r3, #31
 800665c:	d538      	bpl.n	80066d0 <_printf_float+0x43c>
 800665e:	2301      	movs	r3, #1
 8006660:	4642      	mov	r2, r8
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f ae74 	beq.w	8006356 <_printf_float+0xc2>
 800666e:	ee18 3a10 	vmov	r3, s16
 8006672:	4652      	mov	r2, sl
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f ae6b 	beq.w	8006356 <_printf_float+0xc2>
 8006680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	f7fa fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800668c:	b9d8      	cbnz	r0, 80066c6 <_printf_float+0x432>
 800668e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006690:	f108 0201 	add.w	r2, r8, #1
 8006694:	3b01      	subs	r3, #1
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	d10e      	bne.n	80066be <_printf_float+0x42a>
 80066a0:	e659      	b.n	8006356 <_printf_float+0xc2>
 80066a2:	2301      	movs	r3, #1
 80066a4:	4652      	mov	r2, sl
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	f43f ae52 	beq.w	8006356 <_printf_float+0xc2>
 80066b2:	f108 0801 	add.w	r8, r8, #1
 80066b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b8:	3b01      	subs	r3, #1
 80066ba:	4543      	cmp	r3, r8
 80066bc:	dcf1      	bgt.n	80066a2 <_printf_float+0x40e>
 80066be:	464b      	mov	r3, r9
 80066c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066c4:	e6dc      	b.n	8006480 <_printf_float+0x1ec>
 80066c6:	f04f 0800 	mov.w	r8, #0
 80066ca:	f104 0a1a 	add.w	sl, r4, #26
 80066ce:	e7f2      	b.n	80066b6 <_printf_float+0x422>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4642      	mov	r2, r8
 80066d4:	e7df      	b.n	8006696 <_printf_float+0x402>
 80066d6:	2301      	movs	r3, #1
 80066d8:	464a      	mov	r2, r9
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f ae38 	beq.w	8006356 <_printf_float+0xc2>
 80066e6:	f108 0801 	add.w	r8, r8, #1
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ee:	1a5b      	subs	r3, r3, r1
 80066f0:	4543      	cmp	r3, r8
 80066f2:	dcf0      	bgt.n	80066d6 <_printf_float+0x442>
 80066f4:	e6fa      	b.n	80064ec <_printf_float+0x258>
 80066f6:	f04f 0800 	mov.w	r8, #0
 80066fa:	f104 0919 	add.w	r9, r4, #25
 80066fe:	e7f4      	b.n	80066ea <_printf_float+0x456>

08006700 <_printf_common>:
 8006700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006704:	4616      	mov	r6, r2
 8006706:	4699      	mov	r9, r3
 8006708:	688a      	ldr	r2, [r1, #8]
 800670a:	690b      	ldr	r3, [r1, #16]
 800670c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006710:	4293      	cmp	r3, r2
 8006712:	bfb8      	it	lt
 8006714:	4613      	movlt	r3, r2
 8006716:	6033      	str	r3, [r6, #0]
 8006718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800671c:	4607      	mov	r7, r0
 800671e:	460c      	mov	r4, r1
 8006720:	b10a      	cbz	r2, 8006726 <_printf_common+0x26>
 8006722:	3301      	adds	r3, #1
 8006724:	6033      	str	r3, [r6, #0]
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	0699      	lsls	r1, r3, #26
 800672a:	bf42      	ittt	mi
 800672c:	6833      	ldrmi	r3, [r6, #0]
 800672e:	3302      	addmi	r3, #2
 8006730:	6033      	strmi	r3, [r6, #0]
 8006732:	6825      	ldr	r5, [r4, #0]
 8006734:	f015 0506 	ands.w	r5, r5, #6
 8006738:	d106      	bne.n	8006748 <_printf_common+0x48>
 800673a:	f104 0a19 	add.w	sl, r4, #25
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	6832      	ldr	r2, [r6, #0]
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	42ab      	cmp	r3, r5
 8006746:	dc26      	bgt.n	8006796 <_printf_common+0x96>
 8006748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800674c:	1e13      	subs	r3, r2, #0
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	bf18      	it	ne
 8006752:	2301      	movne	r3, #1
 8006754:	0692      	lsls	r2, r2, #26
 8006756:	d42b      	bmi.n	80067b0 <_printf_common+0xb0>
 8006758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800675c:	4649      	mov	r1, r9
 800675e:	4638      	mov	r0, r7
 8006760:	47c0      	blx	r8
 8006762:	3001      	adds	r0, #1
 8006764:	d01e      	beq.n	80067a4 <_printf_common+0xa4>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	68e5      	ldr	r5, [r4, #12]
 800676a:	6832      	ldr	r2, [r6, #0]
 800676c:	f003 0306 	and.w	r3, r3, #6
 8006770:	2b04      	cmp	r3, #4
 8006772:	bf08      	it	eq
 8006774:	1aad      	subeq	r5, r5, r2
 8006776:	68a3      	ldr	r3, [r4, #8]
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	bf0c      	ite	eq
 800677c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006780:	2500      	movne	r5, #0
 8006782:	4293      	cmp	r3, r2
 8006784:	bfc4      	itt	gt
 8006786:	1a9b      	subgt	r3, r3, r2
 8006788:	18ed      	addgt	r5, r5, r3
 800678a:	2600      	movs	r6, #0
 800678c:	341a      	adds	r4, #26
 800678e:	42b5      	cmp	r5, r6
 8006790:	d11a      	bne.n	80067c8 <_printf_common+0xc8>
 8006792:	2000      	movs	r0, #0
 8006794:	e008      	b.n	80067a8 <_printf_common+0xa8>
 8006796:	2301      	movs	r3, #1
 8006798:	4652      	mov	r2, sl
 800679a:	4649      	mov	r1, r9
 800679c:	4638      	mov	r0, r7
 800679e:	47c0      	blx	r8
 80067a0:	3001      	adds	r0, #1
 80067a2:	d103      	bne.n	80067ac <_printf_common+0xac>
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295
 80067a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ac:	3501      	adds	r5, #1
 80067ae:	e7c6      	b.n	800673e <_printf_common+0x3e>
 80067b0:	18e1      	adds	r1, r4, r3
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	2030      	movs	r0, #48	; 0x30
 80067b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ba:	4422      	add	r2, r4
 80067bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067c4:	3302      	adds	r3, #2
 80067c6:	e7c7      	b.n	8006758 <_printf_common+0x58>
 80067c8:	2301      	movs	r3, #1
 80067ca:	4622      	mov	r2, r4
 80067cc:	4649      	mov	r1, r9
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	3001      	adds	r0, #1
 80067d4:	d0e6      	beq.n	80067a4 <_printf_common+0xa4>
 80067d6:	3601      	adds	r6, #1
 80067d8:	e7d9      	b.n	800678e <_printf_common+0x8e>
	...

080067dc <_printf_i>:
 80067dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	7e0f      	ldrb	r7, [r1, #24]
 80067e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067e4:	2f78      	cmp	r7, #120	; 0x78
 80067e6:	4691      	mov	r9, r2
 80067e8:	4680      	mov	r8, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	469a      	mov	sl, r3
 80067ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067f2:	d807      	bhi.n	8006804 <_printf_i+0x28>
 80067f4:	2f62      	cmp	r7, #98	; 0x62
 80067f6:	d80a      	bhi.n	800680e <_printf_i+0x32>
 80067f8:	2f00      	cmp	r7, #0
 80067fa:	f000 80d8 	beq.w	80069ae <_printf_i+0x1d2>
 80067fe:	2f58      	cmp	r7, #88	; 0x58
 8006800:	f000 80a3 	beq.w	800694a <_printf_i+0x16e>
 8006804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800680c:	e03a      	b.n	8006884 <_printf_i+0xa8>
 800680e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006812:	2b15      	cmp	r3, #21
 8006814:	d8f6      	bhi.n	8006804 <_printf_i+0x28>
 8006816:	a101      	add	r1, pc, #4	; (adr r1, 800681c <_printf_i+0x40>)
 8006818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800681c:	08006875 	.word	0x08006875
 8006820:	08006889 	.word	0x08006889
 8006824:	08006805 	.word	0x08006805
 8006828:	08006805 	.word	0x08006805
 800682c:	08006805 	.word	0x08006805
 8006830:	08006805 	.word	0x08006805
 8006834:	08006889 	.word	0x08006889
 8006838:	08006805 	.word	0x08006805
 800683c:	08006805 	.word	0x08006805
 8006840:	08006805 	.word	0x08006805
 8006844:	08006805 	.word	0x08006805
 8006848:	08006995 	.word	0x08006995
 800684c:	080068b9 	.word	0x080068b9
 8006850:	08006977 	.word	0x08006977
 8006854:	08006805 	.word	0x08006805
 8006858:	08006805 	.word	0x08006805
 800685c:	080069b7 	.word	0x080069b7
 8006860:	08006805 	.word	0x08006805
 8006864:	080068b9 	.word	0x080068b9
 8006868:	08006805 	.word	0x08006805
 800686c:	08006805 	.word	0x08006805
 8006870:	0800697f 	.word	0x0800697f
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	1d1a      	adds	r2, r3, #4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	602a      	str	r2, [r5, #0]
 800687c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006884:	2301      	movs	r3, #1
 8006886:	e0a3      	b.n	80069d0 <_printf_i+0x1f4>
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	6829      	ldr	r1, [r5, #0]
 800688c:	0606      	lsls	r6, r0, #24
 800688e:	f101 0304 	add.w	r3, r1, #4
 8006892:	d50a      	bpl.n	80068aa <_printf_i+0xce>
 8006894:	680e      	ldr	r6, [r1, #0]
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	2e00      	cmp	r6, #0
 800689a:	da03      	bge.n	80068a4 <_printf_i+0xc8>
 800689c:	232d      	movs	r3, #45	; 0x2d
 800689e:	4276      	negs	r6, r6
 80068a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a4:	485e      	ldr	r0, [pc, #376]	; (8006a20 <_printf_i+0x244>)
 80068a6:	230a      	movs	r3, #10
 80068a8:	e019      	b.n	80068de <_printf_i+0x102>
 80068aa:	680e      	ldr	r6, [r1, #0]
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068b2:	bf18      	it	ne
 80068b4:	b236      	sxthne	r6, r6
 80068b6:	e7ef      	b.n	8006898 <_printf_i+0xbc>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	1d19      	adds	r1, r3, #4
 80068be:	6029      	str	r1, [r5, #0]
 80068c0:	0601      	lsls	r1, r0, #24
 80068c2:	d501      	bpl.n	80068c8 <_printf_i+0xec>
 80068c4:	681e      	ldr	r6, [r3, #0]
 80068c6:	e002      	b.n	80068ce <_printf_i+0xf2>
 80068c8:	0646      	lsls	r6, r0, #25
 80068ca:	d5fb      	bpl.n	80068c4 <_printf_i+0xe8>
 80068cc:	881e      	ldrh	r6, [r3, #0]
 80068ce:	4854      	ldr	r0, [pc, #336]	; (8006a20 <_printf_i+0x244>)
 80068d0:	2f6f      	cmp	r7, #111	; 0x6f
 80068d2:	bf0c      	ite	eq
 80068d4:	2308      	moveq	r3, #8
 80068d6:	230a      	movne	r3, #10
 80068d8:	2100      	movs	r1, #0
 80068da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068de:	6865      	ldr	r5, [r4, #4]
 80068e0:	60a5      	str	r5, [r4, #8]
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	bfa2      	ittt	ge
 80068e6:	6821      	ldrge	r1, [r4, #0]
 80068e8:	f021 0104 	bicge.w	r1, r1, #4
 80068ec:	6021      	strge	r1, [r4, #0]
 80068ee:	b90e      	cbnz	r6, 80068f4 <_printf_i+0x118>
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	d04d      	beq.n	8006990 <_printf_i+0x1b4>
 80068f4:	4615      	mov	r5, r2
 80068f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80068fa:	fb03 6711 	mls	r7, r3, r1, r6
 80068fe:	5dc7      	ldrb	r7, [r0, r7]
 8006900:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006904:	4637      	mov	r7, r6
 8006906:	42bb      	cmp	r3, r7
 8006908:	460e      	mov	r6, r1
 800690a:	d9f4      	bls.n	80068f6 <_printf_i+0x11a>
 800690c:	2b08      	cmp	r3, #8
 800690e:	d10b      	bne.n	8006928 <_printf_i+0x14c>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07de      	lsls	r6, r3, #31
 8006914:	d508      	bpl.n	8006928 <_printf_i+0x14c>
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	6861      	ldr	r1, [r4, #4]
 800691a:	4299      	cmp	r1, r3
 800691c:	bfde      	ittt	le
 800691e:	2330      	movle	r3, #48	; 0x30
 8006920:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006924:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006928:	1b52      	subs	r2, r2, r5
 800692a:	6122      	str	r2, [r4, #16]
 800692c:	f8cd a000 	str.w	sl, [sp]
 8006930:	464b      	mov	r3, r9
 8006932:	aa03      	add	r2, sp, #12
 8006934:	4621      	mov	r1, r4
 8006936:	4640      	mov	r0, r8
 8006938:	f7ff fee2 	bl	8006700 <_printf_common>
 800693c:	3001      	adds	r0, #1
 800693e:	d14c      	bne.n	80069da <_printf_i+0x1fe>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	b004      	add	sp, #16
 8006946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694a:	4835      	ldr	r0, [pc, #212]	; (8006a20 <_printf_i+0x244>)
 800694c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006950:	6829      	ldr	r1, [r5, #0]
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f851 6b04 	ldr.w	r6, [r1], #4
 8006958:	6029      	str	r1, [r5, #0]
 800695a:	061d      	lsls	r5, r3, #24
 800695c:	d514      	bpl.n	8006988 <_printf_i+0x1ac>
 800695e:	07df      	lsls	r7, r3, #31
 8006960:	bf44      	itt	mi
 8006962:	f043 0320 	orrmi.w	r3, r3, #32
 8006966:	6023      	strmi	r3, [r4, #0]
 8006968:	b91e      	cbnz	r6, 8006972 <_printf_i+0x196>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	f023 0320 	bic.w	r3, r3, #32
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	2310      	movs	r3, #16
 8006974:	e7b0      	b.n	80068d8 <_printf_i+0xfc>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	f043 0320 	orr.w	r3, r3, #32
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	2378      	movs	r3, #120	; 0x78
 8006980:	4828      	ldr	r0, [pc, #160]	; (8006a24 <_printf_i+0x248>)
 8006982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006986:	e7e3      	b.n	8006950 <_printf_i+0x174>
 8006988:	0659      	lsls	r1, r3, #25
 800698a:	bf48      	it	mi
 800698c:	b2b6      	uxthmi	r6, r6
 800698e:	e7e6      	b.n	800695e <_printf_i+0x182>
 8006990:	4615      	mov	r5, r2
 8006992:	e7bb      	b.n	800690c <_printf_i+0x130>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	6826      	ldr	r6, [r4, #0]
 8006998:	6961      	ldr	r1, [r4, #20]
 800699a:	1d18      	adds	r0, r3, #4
 800699c:	6028      	str	r0, [r5, #0]
 800699e:	0635      	lsls	r5, r6, #24
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	d501      	bpl.n	80069a8 <_printf_i+0x1cc>
 80069a4:	6019      	str	r1, [r3, #0]
 80069a6:	e002      	b.n	80069ae <_printf_i+0x1d2>
 80069a8:	0670      	lsls	r0, r6, #25
 80069aa:	d5fb      	bpl.n	80069a4 <_printf_i+0x1c8>
 80069ac:	8019      	strh	r1, [r3, #0]
 80069ae:	2300      	movs	r3, #0
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	4615      	mov	r5, r2
 80069b4:	e7ba      	b.n	800692c <_printf_i+0x150>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	602a      	str	r2, [r5, #0]
 80069bc:	681d      	ldr	r5, [r3, #0]
 80069be:	6862      	ldr	r2, [r4, #4]
 80069c0:	2100      	movs	r1, #0
 80069c2:	4628      	mov	r0, r5
 80069c4:	f7f9 fc0c 	bl	80001e0 <memchr>
 80069c8:	b108      	cbz	r0, 80069ce <_printf_i+0x1f2>
 80069ca:	1b40      	subs	r0, r0, r5
 80069cc:	6060      	str	r0, [r4, #4]
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	2300      	movs	r3, #0
 80069d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d8:	e7a8      	b.n	800692c <_printf_i+0x150>
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	462a      	mov	r2, r5
 80069de:	4649      	mov	r1, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	47d0      	blx	sl
 80069e4:	3001      	adds	r0, #1
 80069e6:	d0ab      	beq.n	8006940 <_printf_i+0x164>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	079b      	lsls	r3, r3, #30
 80069ec:	d413      	bmi.n	8006a16 <_printf_i+0x23a>
 80069ee:	68e0      	ldr	r0, [r4, #12]
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	4298      	cmp	r0, r3
 80069f4:	bfb8      	it	lt
 80069f6:	4618      	movlt	r0, r3
 80069f8:	e7a4      	b.n	8006944 <_printf_i+0x168>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4632      	mov	r2, r6
 80069fe:	4649      	mov	r1, r9
 8006a00:	4640      	mov	r0, r8
 8006a02:	47d0      	blx	sl
 8006a04:	3001      	adds	r0, #1
 8006a06:	d09b      	beq.n	8006940 <_printf_i+0x164>
 8006a08:	3501      	adds	r5, #1
 8006a0a:	68e3      	ldr	r3, [r4, #12]
 8006a0c:	9903      	ldr	r1, [sp, #12]
 8006a0e:	1a5b      	subs	r3, r3, r1
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	dcf2      	bgt.n	80069fa <_printf_i+0x21e>
 8006a14:	e7eb      	b.n	80069ee <_printf_i+0x212>
 8006a16:	2500      	movs	r5, #0
 8006a18:	f104 0619 	add.w	r6, r4, #25
 8006a1c:	e7f5      	b.n	8006a0a <_printf_i+0x22e>
 8006a1e:	bf00      	nop
 8006a20:	08008fc2 	.word	0x08008fc2
 8006a24:	08008fd3 	.word	0x08008fd3

08006a28 <siprintf>:
 8006a28:	b40e      	push	{r1, r2, r3}
 8006a2a:	b500      	push	{lr}
 8006a2c:	b09c      	sub	sp, #112	; 0x70
 8006a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a30:	9002      	str	r0, [sp, #8]
 8006a32:	9006      	str	r0, [sp, #24]
 8006a34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a38:	4809      	ldr	r0, [pc, #36]	; (8006a60 <siprintf+0x38>)
 8006a3a:	9107      	str	r1, [sp, #28]
 8006a3c:	9104      	str	r1, [sp, #16]
 8006a3e:	4909      	ldr	r1, [pc, #36]	; (8006a64 <siprintf+0x3c>)
 8006a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a44:	9105      	str	r1, [sp, #20]
 8006a46:	6800      	ldr	r0, [r0, #0]
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	a902      	add	r1, sp, #8
 8006a4c:	f001 fb68 	bl	8008120 <_svfiprintf_r>
 8006a50:	9b02      	ldr	r3, [sp, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	b01c      	add	sp, #112	; 0x70
 8006a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a5c:	b003      	add	sp, #12
 8006a5e:	4770      	bx	lr
 8006a60:	20000018 	.word	0x20000018
 8006a64:	ffff0208 	.word	0xffff0208

08006a68 <quorem>:
 8006a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	6903      	ldr	r3, [r0, #16]
 8006a6e:	690c      	ldr	r4, [r1, #16]
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	4607      	mov	r7, r0
 8006a74:	f2c0 8081 	blt.w	8006b7a <quorem+0x112>
 8006a78:	3c01      	subs	r4, #1
 8006a7a:	f101 0814 	add.w	r8, r1, #20
 8006a7e:	f100 0514 	add.w	r5, r0, #20
 8006a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a90:	3301      	adds	r3, #1
 8006a92:	429a      	cmp	r2, r3
 8006a94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006aa0:	d331      	bcc.n	8006b06 <quorem+0x9e>
 8006aa2:	f04f 0e00 	mov.w	lr, #0
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	46ac      	mov	ip, r5
 8006aaa:	46f2      	mov	sl, lr
 8006aac:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ab0:	b293      	uxth	r3, r2
 8006ab2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ab6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ac0:	f8dc a000 	ldr.w	sl, [ip]
 8006ac4:	0c12      	lsrs	r2, r2, #16
 8006ac6:	fa13 f38a 	uxtah	r3, r3, sl
 8006aca:	fb06 e202 	mla	r2, r6, r2, lr
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	9b00      	ldr	r3, [sp, #0]
 8006ad2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ad6:	b292      	uxth	r2, r2
 8006ad8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006adc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ae0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ae4:	4581      	cmp	r9, r0
 8006ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aea:	f84c 3b04 	str.w	r3, [ip], #4
 8006aee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006af2:	d2db      	bcs.n	8006aac <quorem+0x44>
 8006af4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006af8:	b92b      	cbnz	r3, 8006b06 <quorem+0x9e>
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	3b04      	subs	r3, #4
 8006afe:	429d      	cmp	r5, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	d32e      	bcc.n	8006b62 <quorem+0xfa>
 8006b04:	613c      	str	r4, [r7, #16]
 8006b06:	4638      	mov	r0, r7
 8006b08:	f001 f8b6 	bl	8007c78 <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	db24      	blt.n	8006b5a <quorem+0xf2>
 8006b10:	3601      	adds	r6, #1
 8006b12:	4628      	mov	r0, r5
 8006b14:	f04f 0c00 	mov.w	ip, #0
 8006b18:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b1c:	f8d0 e000 	ldr.w	lr, [r0]
 8006b20:	b293      	uxth	r3, r2
 8006b22:	ebac 0303 	sub.w	r3, ip, r3
 8006b26:	0c12      	lsrs	r2, r2, #16
 8006b28:	fa13 f38e 	uxtah	r3, r3, lr
 8006b2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b3a:	45c1      	cmp	r9, r8
 8006b3c:	f840 3b04 	str.w	r3, [r0], #4
 8006b40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b44:	d2e8      	bcs.n	8006b18 <quorem+0xb0>
 8006b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b4e:	b922      	cbnz	r2, 8006b5a <quorem+0xf2>
 8006b50:	3b04      	subs	r3, #4
 8006b52:	429d      	cmp	r5, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	d30a      	bcc.n	8006b6e <quorem+0x106>
 8006b58:	613c      	str	r4, [r7, #16]
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	b003      	add	sp, #12
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	3b04      	subs	r3, #4
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d1cc      	bne.n	8006b04 <quorem+0x9c>
 8006b6a:	3c01      	subs	r4, #1
 8006b6c:	e7c7      	b.n	8006afe <quorem+0x96>
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	3b04      	subs	r3, #4
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	d1f0      	bne.n	8006b58 <quorem+0xf0>
 8006b76:	3c01      	subs	r4, #1
 8006b78:	e7eb      	b.n	8006b52 <quorem+0xea>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	e7ee      	b.n	8006b5c <quorem+0xf4>
	...

08006b80 <_dtoa_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	ed2d 8b04 	vpush	{d8-d9}
 8006b88:	ec57 6b10 	vmov	r6, r7, d0
 8006b8c:	b093      	sub	sp, #76	; 0x4c
 8006b8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b94:	9106      	str	r1, [sp, #24]
 8006b96:	ee10 aa10 	vmov	sl, s0
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8006ba0:	46bb      	mov	fp, r7
 8006ba2:	b975      	cbnz	r5, 8006bc2 <_dtoa_r+0x42>
 8006ba4:	2010      	movs	r0, #16
 8006ba6:	f000 fddd 	bl	8007764 <malloc>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6260      	str	r0, [r4, #36]	; 0x24
 8006bae:	b920      	cbnz	r0, 8006bba <_dtoa_r+0x3a>
 8006bb0:	4ba7      	ldr	r3, [pc, #668]	; (8006e50 <_dtoa_r+0x2d0>)
 8006bb2:	21ea      	movs	r1, #234	; 0xea
 8006bb4:	48a7      	ldr	r0, [pc, #668]	; (8006e54 <_dtoa_r+0x2d4>)
 8006bb6:	f001 fbc3 	bl	8008340 <__assert_func>
 8006bba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bbe:	6005      	str	r5, [r0, #0]
 8006bc0:	60c5      	str	r5, [r0, #12]
 8006bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc4:	6819      	ldr	r1, [r3, #0]
 8006bc6:	b151      	cbz	r1, 8006bde <_dtoa_r+0x5e>
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	604a      	str	r2, [r1, #4]
 8006bcc:	2301      	movs	r3, #1
 8006bce:	4093      	lsls	r3, r2
 8006bd0:	608b      	str	r3, [r1, #8]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fe0e 	bl	80077f4 <_Bfree>
 8006bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	1e3b      	subs	r3, r7, #0
 8006be0:	bfaa      	itet	ge
 8006be2:	2300      	movge	r3, #0
 8006be4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006be8:	f8c8 3000 	strge.w	r3, [r8]
 8006bec:	4b9a      	ldr	r3, [pc, #616]	; (8006e58 <_dtoa_r+0x2d8>)
 8006bee:	bfbc      	itt	lt
 8006bf0:	2201      	movlt	r2, #1
 8006bf2:	f8c8 2000 	strlt.w	r2, [r8]
 8006bf6:	ea33 030b 	bics.w	r3, r3, fp
 8006bfa:	d11b      	bne.n	8006c34 <_dtoa_r+0xb4>
 8006bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bfe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c08:	4333      	orrs	r3, r6
 8006c0a:	f000 8592 	beq.w	8007732 <_dtoa_r+0xbb2>
 8006c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c10:	b963      	cbnz	r3, 8006c2c <_dtoa_r+0xac>
 8006c12:	4b92      	ldr	r3, [pc, #584]	; (8006e5c <_dtoa_r+0x2dc>)
 8006c14:	e022      	b.n	8006c5c <_dtoa_r+0xdc>
 8006c16:	4b92      	ldr	r3, [pc, #584]	; (8006e60 <_dtoa_r+0x2e0>)
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	9801      	ldr	r0, [sp, #4]
 8006c22:	b013      	add	sp, #76	; 0x4c
 8006c24:	ecbd 8b04 	vpop	{d8-d9}
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	4b8b      	ldr	r3, [pc, #556]	; (8006e5c <_dtoa_r+0x2dc>)
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	3303      	adds	r3, #3
 8006c32:	e7f3      	b.n	8006c1c <_dtoa_r+0x9c>
 8006c34:	2200      	movs	r2, #0
 8006c36:	2300      	movs	r3, #0
 8006c38:	4650      	mov	r0, sl
 8006c3a:	4659      	mov	r1, fp
 8006c3c:	f7f9 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c40:	ec4b ab19 	vmov	d9, sl, fp
 8006c44:	4680      	mov	r8, r0
 8006c46:	b158      	cbz	r0, 8006c60 <_dtoa_r+0xe0>
 8006c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 856b 	beq.w	800772c <_dtoa_r+0xbac>
 8006c56:	4883      	ldr	r0, [pc, #524]	; (8006e64 <_dtoa_r+0x2e4>)
 8006c58:	6018      	str	r0, [r3, #0]
 8006c5a:	1e43      	subs	r3, r0, #1
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	e7df      	b.n	8006c20 <_dtoa_r+0xa0>
 8006c60:	ec4b ab10 	vmov	d0, sl, fp
 8006c64:	aa10      	add	r2, sp, #64	; 0x40
 8006c66:	a911      	add	r1, sp, #68	; 0x44
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f001 f8ab 	bl	8007dc4 <__d2b>
 8006c6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c72:	ee08 0a10 	vmov	s16, r0
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	f000 8084 	beq.w	8006d84 <_dtoa_r+0x204>
 8006c7c:	ee19 3a90 	vmov	r3, s19
 8006c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c88:	4656      	mov	r6, sl
 8006c8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c96:	4b74      	ldr	r3, [pc, #464]	; (8006e68 <_dtoa_r+0x2e8>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 faf3 	bl	8000288 <__aeabi_dsub>
 8006ca2:	a365      	add	r3, pc, #404	; (adr r3, 8006e38 <_dtoa_r+0x2b8>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fca6 	bl	80005f8 <__aeabi_dmul>
 8006cac:	a364      	add	r3, pc, #400	; (adr r3, 8006e40 <_dtoa_r+0x2c0>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f7f9 faeb 	bl	800028c <__adddf3>
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	4628      	mov	r0, r5
 8006cba:	460f      	mov	r7, r1
 8006cbc:	f7f9 fc32 	bl	8000524 <__aeabi_i2d>
 8006cc0:	a361      	add	r3, pc, #388	; (adr r3, 8006e48 <_dtoa_r+0x2c8>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 fc97 	bl	80005f8 <__aeabi_dmul>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4630      	mov	r0, r6
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	f7f9 fadb 	bl	800028c <__adddf3>
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	460f      	mov	r7, r1
 8006cda:	f7f9 ff3d 	bl	8000b58 <__aeabi_d2iz>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	9000      	str	r0, [sp, #0]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 fef8 	bl	8000adc <__aeabi_dcmplt>
 8006cec:	b150      	cbz	r0, 8006d04 <_dtoa_r+0x184>
 8006cee:	9800      	ldr	r0, [sp, #0]
 8006cf0:	f7f9 fc18 	bl	8000524 <__aeabi_i2d>
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	f7f9 fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cfc:	b910      	cbnz	r0, 8006d04 <_dtoa_r+0x184>
 8006cfe:	9b00      	ldr	r3, [sp, #0]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	9b00      	ldr	r3, [sp, #0]
 8006d06:	2b16      	cmp	r3, #22
 8006d08:	d85a      	bhi.n	8006dc0 <_dtoa_r+0x240>
 8006d0a:	9a00      	ldr	r2, [sp, #0]
 8006d0c:	4b57      	ldr	r3, [pc, #348]	; (8006e6c <_dtoa_r+0x2ec>)
 8006d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	ec51 0b19 	vmov	r0, r1, d9
 8006d1a:	f7f9 fedf 	bl	8000adc <__aeabi_dcmplt>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d050      	beq.n	8006dc4 <_dtoa_r+0x244>
 8006d22:	9b00      	ldr	r3, [sp, #0]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d2e:	1b5d      	subs	r5, r3, r5
 8006d30:	1e6b      	subs	r3, r5, #1
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	bf45      	ittet	mi
 8006d36:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d3a:	9304      	strmi	r3, [sp, #16]
 8006d3c:	2300      	movpl	r3, #0
 8006d3e:	2300      	movmi	r3, #0
 8006d40:	bf4c      	ite	mi
 8006d42:	9305      	strmi	r3, [sp, #20]
 8006d44:	9304      	strpl	r3, [sp, #16]
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	db3d      	blt.n	8006dc8 <_dtoa_r+0x248>
 8006d4c:	9b05      	ldr	r3, [sp, #20]
 8006d4e:	9a00      	ldr	r2, [sp, #0]
 8006d50:	920a      	str	r2, [sp, #40]	; 0x28
 8006d52:	4413      	add	r3, r2
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	2300      	movs	r3, #0
 8006d58:	9307      	str	r3, [sp, #28]
 8006d5a:	9b06      	ldr	r3, [sp, #24]
 8006d5c:	2b09      	cmp	r3, #9
 8006d5e:	f200 8089 	bhi.w	8006e74 <_dtoa_r+0x2f4>
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	bfc4      	itt	gt
 8006d66:	3b04      	subgt	r3, #4
 8006d68:	9306      	strgt	r3, [sp, #24]
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	f1a3 0302 	sub.w	r3, r3, #2
 8006d70:	bfcc      	ite	gt
 8006d72:	2500      	movgt	r5, #0
 8006d74:	2501      	movle	r5, #1
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	f200 8087 	bhi.w	8006e8a <_dtoa_r+0x30a>
 8006d7c:	e8df f003 	tbb	[pc, r3]
 8006d80:	59383a2d 	.word	0x59383a2d
 8006d84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d88:	441d      	add	r5, r3
 8006d8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	bfc1      	itttt	gt
 8006d92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006da2:	bfda      	itte	le
 8006da4:	f1c3 0320 	rsble	r3, r3, #32
 8006da8:	fa06 f003 	lslle.w	r0, r6, r3
 8006dac:	4318      	orrgt	r0, r3
 8006dae:	f7f9 fba9 	bl	8000504 <__aeabi_ui2d>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4606      	mov	r6, r0
 8006db6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006dba:	3d01      	subs	r5, #1
 8006dbc:	930e      	str	r3, [sp, #56]	; 0x38
 8006dbe:	e76a      	b.n	8006c96 <_dtoa_r+0x116>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e7b2      	b.n	8006d2a <_dtoa_r+0x1aa>
 8006dc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006dc6:	e7b1      	b.n	8006d2c <_dtoa_r+0x1ac>
 8006dc8:	9b04      	ldr	r3, [sp, #16]
 8006dca:	9a00      	ldr	r2, [sp, #0]
 8006dcc:	1a9b      	subs	r3, r3, r2
 8006dce:	9304      	str	r3, [sp, #16]
 8006dd0:	4253      	negs	r3, r2
 8006dd2:	9307      	str	r3, [sp, #28]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006dd8:	e7bf      	b.n	8006d5a <_dtoa_r+0x1da>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9308      	str	r3, [sp, #32]
 8006dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dc55      	bgt.n	8006e90 <_dtoa_r+0x310>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dea:	461a      	mov	r2, r3
 8006dec:	9209      	str	r2, [sp, #36]	; 0x24
 8006dee:	e00c      	b.n	8006e0a <_dtoa_r+0x28a>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e7f3      	b.n	8006ddc <_dtoa_r+0x25c>
 8006df4:	2300      	movs	r3, #0
 8006df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df8:	9308      	str	r3, [sp, #32]
 8006dfa:	9b00      	ldr	r3, [sp, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	9302      	str	r3, [sp, #8]
 8006e00:	3301      	adds	r3, #1
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	bfb8      	it	lt
 8006e08:	2301      	movlt	r3, #1
 8006e0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	6042      	str	r2, [r0, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	f102 0614 	add.w	r6, r2, #20
 8006e16:	429e      	cmp	r6, r3
 8006e18:	6841      	ldr	r1, [r0, #4]
 8006e1a:	d93d      	bls.n	8006e98 <_dtoa_r+0x318>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 fca9 	bl	8007774 <_Balloc>
 8006e22:	9001      	str	r0, [sp, #4]
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d13b      	bne.n	8006ea0 <_dtoa_r+0x320>
 8006e28:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <_dtoa_r+0x2f0>)
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e30:	e6c0      	b.n	8006bb4 <_dtoa_r+0x34>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e7df      	b.n	8006df6 <_dtoa_r+0x276>
 8006e36:	bf00      	nop
 8006e38:	636f4361 	.word	0x636f4361
 8006e3c:	3fd287a7 	.word	0x3fd287a7
 8006e40:	8b60c8b3 	.word	0x8b60c8b3
 8006e44:	3fc68a28 	.word	0x3fc68a28
 8006e48:	509f79fb 	.word	0x509f79fb
 8006e4c:	3fd34413 	.word	0x3fd34413
 8006e50:	08008ff1 	.word	0x08008ff1
 8006e54:	08009008 	.word	0x08009008
 8006e58:	7ff00000 	.word	0x7ff00000
 8006e5c:	08008fed 	.word	0x08008fed
 8006e60:	08008fe4 	.word	0x08008fe4
 8006e64:	08008fc1 	.word	0x08008fc1
 8006e68:	3ff80000 	.word	0x3ff80000
 8006e6c:	080090f8 	.word	0x080090f8
 8006e70:	08009063 	.word	0x08009063
 8006e74:	2501      	movs	r5, #1
 8006e76:	2300      	movs	r3, #0
 8006e78:	9306      	str	r3, [sp, #24]
 8006e7a:	9508      	str	r5, [sp, #32]
 8006e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2312      	movs	r3, #18
 8006e88:	e7b0      	b.n	8006dec <_dtoa_r+0x26c>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	9308      	str	r3, [sp, #32]
 8006e8e:	e7f5      	b.n	8006e7c <_dtoa_r+0x2fc>
 8006e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e96:	e7b8      	b.n	8006e0a <_dtoa_r+0x28a>
 8006e98:	3101      	adds	r1, #1
 8006e9a:	6041      	str	r1, [r0, #4]
 8006e9c:	0052      	lsls	r2, r2, #1
 8006e9e:	e7b8      	b.n	8006e12 <_dtoa_r+0x292>
 8006ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea2:	9a01      	ldr	r2, [sp, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	2b0e      	cmp	r3, #14
 8006eaa:	f200 809d 	bhi.w	8006fe8 <_dtoa_r+0x468>
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	f000 809a 	beq.w	8006fe8 <_dtoa_r+0x468>
 8006eb4:	9b00      	ldr	r3, [sp, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dd32      	ble.n	8006f20 <_dtoa_r+0x3a0>
 8006eba:	4ab7      	ldr	r2, [pc, #732]	; (8007198 <_dtoa_r+0x618>)
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec8:	9b00      	ldr	r3, [sp, #0]
 8006eca:	05d8      	lsls	r0, r3, #23
 8006ecc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ed0:	d516      	bpl.n	8006f00 <_dtoa_r+0x380>
 8006ed2:	4bb2      	ldr	r3, [pc, #712]	; (800719c <_dtoa_r+0x61c>)
 8006ed4:	ec51 0b19 	vmov	r0, r1, d9
 8006ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006edc:	f7f9 fcb6 	bl	800084c <__aeabi_ddiv>
 8006ee0:	f007 070f 	and.w	r7, r7, #15
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	468b      	mov	fp, r1
 8006ee8:	2503      	movs	r5, #3
 8006eea:	4eac      	ldr	r6, [pc, #688]	; (800719c <_dtoa_r+0x61c>)
 8006eec:	b957      	cbnz	r7, 8006f04 <_dtoa_r+0x384>
 8006eee:	4642      	mov	r2, r8
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	f7f9 fca9 	bl	800084c <__aeabi_ddiv>
 8006efa:	4682      	mov	sl, r0
 8006efc:	468b      	mov	fp, r1
 8006efe:	e028      	b.n	8006f52 <_dtoa_r+0x3d2>
 8006f00:	2502      	movs	r5, #2
 8006f02:	e7f2      	b.n	8006eea <_dtoa_r+0x36a>
 8006f04:	07f9      	lsls	r1, r7, #31
 8006f06:	d508      	bpl.n	8006f1a <_dtoa_r+0x39a>
 8006f08:	4640      	mov	r0, r8
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	3501      	adds	r5, #1
 8006f16:	4680      	mov	r8, r0
 8006f18:	4689      	mov	r9, r1
 8006f1a:	107f      	asrs	r7, r7, #1
 8006f1c:	3608      	adds	r6, #8
 8006f1e:	e7e5      	b.n	8006eec <_dtoa_r+0x36c>
 8006f20:	f000 809b 	beq.w	800705a <_dtoa_r+0x4da>
 8006f24:	9b00      	ldr	r3, [sp, #0]
 8006f26:	4f9d      	ldr	r7, [pc, #628]	; (800719c <_dtoa_r+0x61c>)
 8006f28:	425e      	negs	r6, r3
 8006f2a:	4b9b      	ldr	r3, [pc, #620]	; (8007198 <_dtoa_r+0x618>)
 8006f2c:	f006 020f 	and.w	r2, r6, #15
 8006f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	ec51 0b19 	vmov	r0, r1, d9
 8006f3c:	f7f9 fb5c 	bl	80005f8 <__aeabi_dmul>
 8006f40:	1136      	asrs	r6, r6, #4
 8006f42:	4682      	mov	sl, r0
 8006f44:	468b      	mov	fp, r1
 8006f46:	2300      	movs	r3, #0
 8006f48:	2502      	movs	r5, #2
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	d17a      	bne.n	8007044 <_dtoa_r+0x4c4>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1d3      	bne.n	8006efa <_dtoa_r+0x37a>
 8006f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8082 	beq.w	800705e <_dtoa_r+0x4de>
 8006f5a:	4b91      	ldr	r3, [pc, #580]	; (80071a0 <_dtoa_r+0x620>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4650      	mov	r0, sl
 8006f60:	4659      	mov	r1, fp
 8006f62:	f7f9 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d079      	beq.n	800705e <_dtoa_r+0x4de>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d076      	beq.n	800705e <_dtoa_r+0x4de>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dd36      	ble.n	8006fe4 <_dtoa_r+0x464>
 8006f76:	9b00      	ldr	r3, [sp, #0]
 8006f78:	4650      	mov	r0, sl
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	1e5f      	subs	r7, r3, #1
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4b88      	ldr	r3, [pc, #544]	; (80071a4 <_dtoa_r+0x624>)
 8006f82:	f7f9 fb39 	bl	80005f8 <__aeabi_dmul>
 8006f86:	9e02      	ldr	r6, [sp, #8]
 8006f88:	4682      	mov	sl, r0
 8006f8a:	468b      	mov	fp, r1
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f7f9 fac8 	bl	8000524 <__aeabi_i2d>
 8006f94:	4652      	mov	r2, sl
 8006f96:	465b      	mov	r3, fp
 8006f98:	f7f9 fb2e 	bl	80005f8 <__aeabi_dmul>
 8006f9c:	4b82      	ldr	r3, [pc, #520]	; (80071a8 <_dtoa_r+0x628>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f7f9 f974 	bl	800028c <__adddf3>
 8006fa4:	46d0      	mov	r8, sl
 8006fa6:	46d9      	mov	r9, fp
 8006fa8:	4682      	mov	sl, r0
 8006faa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006fae:	2e00      	cmp	r6, #0
 8006fb0:	d158      	bne.n	8007064 <_dtoa_r+0x4e4>
 8006fb2:	4b7e      	ldr	r3, [pc, #504]	; (80071ac <_dtoa_r+0x62c>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 f965 	bl	8000288 <__aeabi_dsub>
 8006fbe:	4652      	mov	r2, sl
 8006fc0:	465b      	mov	r3, fp
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	4689      	mov	r9, r1
 8006fc6:	f7f9 fda7 	bl	8000b18 <__aeabi_dcmpgt>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f040 8295 	bne.w	80074fa <_dtoa_r+0x97a>
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	4649      	mov	r1, r9
 8006fda:	f7f9 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f040 8289 	bne.w	80074f6 <_dtoa_r+0x976>
 8006fe4:	ec5b ab19 	vmov	sl, fp, d9
 8006fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f2c0 8148 	blt.w	8007280 <_dtoa_r+0x700>
 8006ff0:	9a00      	ldr	r2, [sp, #0]
 8006ff2:	2a0e      	cmp	r2, #14
 8006ff4:	f300 8144 	bgt.w	8007280 <_dtoa_r+0x700>
 8006ff8:	4b67      	ldr	r3, [pc, #412]	; (8007198 <_dtoa_r+0x618>)
 8006ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	f280 80d5 	bge.w	80071b4 <_dtoa_r+0x634>
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f300 80d1 	bgt.w	80071b4 <_dtoa_r+0x634>
 8007012:	f040 826f 	bne.w	80074f4 <_dtoa_r+0x974>
 8007016:	4b65      	ldr	r3, [pc, #404]	; (80071ac <_dtoa_r+0x62c>)
 8007018:	2200      	movs	r2, #0
 800701a:	4640      	mov	r0, r8
 800701c:	4649      	mov	r1, r9
 800701e:	f7f9 faeb 	bl	80005f8 <__aeabi_dmul>
 8007022:	4652      	mov	r2, sl
 8007024:	465b      	mov	r3, fp
 8007026:	f7f9 fd6d 	bl	8000b04 <__aeabi_dcmpge>
 800702a:	9e03      	ldr	r6, [sp, #12]
 800702c:	4637      	mov	r7, r6
 800702e:	2800      	cmp	r0, #0
 8007030:	f040 8245 	bne.w	80074be <_dtoa_r+0x93e>
 8007034:	9d01      	ldr	r5, [sp, #4]
 8007036:	2331      	movs	r3, #49	; 0x31
 8007038:	f805 3b01 	strb.w	r3, [r5], #1
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	3301      	adds	r3, #1
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	e240      	b.n	80074c6 <_dtoa_r+0x946>
 8007044:	07f2      	lsls	r2, r6, #31
 8007046:	d505      	bpl.n	8007054 <_dtoa_r+0x4d4>
 8007048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800704c:	f7f9 fad4 	bl	80005f8 <__aeabi_dmul>
 8007050:	3501      	adds	r5, #1
 8007052:	2301      	movs	r3, #1
 8007054:	1076      	asrs	r6, r6, #1
 8007056:	3708      	adds	r7, #8
 8007058:	e777      	b.n	8006f4a <_dtoa_r+0x3ca>
 800705a:	2502      	movs	r5, #2
 800705c:	e779      	b.n	8006f52 <_dtoa_r+0x3d2>
 800705e:	9f00      	ldr	r7, [sp, #0]
 8007060:	9e03      	ldr	r6, [sp, #12]
 8007062:	e794      	b.n	8006f8e <_dtoa_r+0x40e>
 8007064:	9901      	ldr	r1, [sp, #4]
 8007066:	4b4c      	ldr	r3, [pc, #304]	; (8007198 <_dtoa_r+0x618>)
 8007068:	4431      	add	r1, r6
 800706a:	910d      	str	r1, [sp, #52]	; 0x34
 800706c:	9908      	ldr	r1, [sp, #32]
 800706e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007072:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007076:	2900      	cmp	r1, #0
 8007078:	d043      	beq.n	8007102 <_dtoa_r+0x582>
 800707a:	494d      	ldr	r1, [pc, #308]	; (80071b0 <_dtoa_r+0x630>)
 800707c:	2000      	movs	r0, #0
 800707e:	f7f9 fbe5 	bl	800084c <__aeabi_ddiv>
 8007082:	4652      	mov	r2, sl
 8007084:	465b      	mov	r3, fp
 8007086:	f7f9 f8ff 	bl	8000288 <__aeabi_dsub>
 800708a:	9d01      	ldr	r5, [sp, #4]
 800708c:	4682      	mov	sl, r0
 800708e:	468b      	mov	fp, r1
 8007090:	4649      	mov	r1, r9
 8007092:	4640      	mov	r0, r8
 8007094:	f7f9 fd60 	bl	8000b58 <__aeabi_d2iz>
 8007098:	4606      	mov	r6, r0
 800709a:	f7f9 fa43 	bl	8000524 <__aeabi_i2d>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4640      	mov	r0, r8
 80070a4:	4649      	mov	r1, r9
 80070a6:	f7f9 f8ef 	bl	8000288 <__aeabi_dsub>
 80070aa:	3630      	adds	r6, #48	; 0x30
 80070ac:	f805 6b01 	strb.w	r6, [r5], #1
 80070b0:	4652      	mov	r2, sl
 80070b2:	465b      	mov	r3, fp
 80070b4:	4680      	mov	r8, r0
 80070b6:	4689      	mov	r9, r1
 80070b8:	f7f9 fd10 	bl	8000adc <__aeabi_dcmplt>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d163      	bne.n	8007188 <_dtoa_r+0x608>
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	4936      	ldr	r1, [pc, #216]	; (80071a0 <_dtoa_r+0x620>)
 80070c6:	2000      	movs	r0, #0
 80070c8:	f7f9 f8de 	bl	8000288 <__aeabi_dsub>
 80070cc:	4652      	mov	r2, sl
 80070ce:	465b      	mov	r3, fp
 80070d0:	f7f9 fd04 	bl	8000adc <__aeabi_dcmplt>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f040 80b5 	bne.w	8007244 <_dtoa_r+0x6c4>
 80070da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070dc:	429d      	cmp	r5, r3
 80070de:	d081      	beq.n	8006fe4 <_dtoa_r+0x464>
 80070e0:	4b30      	ldr	r3, [pc, #192]	; (80071a4 <_dtoa_r+0x624>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 fa86 	bl	80005f8 <__aeabi_dmul>
 80070ec:	4b2d      	ldr	r3, [pc, #180]	; (80071a4 <_dtoa_r+0x624>)
 80070ee:	4682      	mov	sl, r0
 80070f0:	468b      	mov	fp, r1
 80070f2:	4640      	mov	r0, r8
 80070f4:	4649      	mov	r1, r9
 80070f6:	2200      	movs	r2, #0
 80070f8:	f7f9 fa7e 	bl	80005f8 <__aeabi_dmul>
 80070fc:	4680      	mov	r8, r0
 80070fe:	4689      	mov	r9, r1
 8007100:	e7c6      	b.n	8007090 <_dtoa_r+0x510>
 8007102:	4650      	mov	r0, sl
 8007104:	4659      	mov	r1, fp
 8007106:	f7f9 fa77 	bl	80005f8 <__aeabi_dmul>
 800710a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800710c:	9d01      	ldr	r5, [sp, #4]
 800710e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007110:	4682      	mov	sl, r0
 8007112:	468b      	mov	fp, r1
 8007114:	4649      	mov	r1, r9
 8007116:	4640      	mov	r0, r8
 8007118:	f7f9 fd1e 	bl	8000b58 <__aeabi_d2iz>
 800711c:	4606      	mov	r6, r0
 800711e:	f7f9 fa01 	bl	8000524 <__aeabi_i2d>
 8007122:	3630      	adds	r6, #48	; 0x30
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 f8ac 	bl	8000288 <__aeabi_dsub>
 8007130:	f805 6b01 	strb.w	r6, [r5], #1
 8007134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007136:	429d      	cmp	r5, r3
 8007138:	4680      	mov	r8, r0
 800713a:	4689      	mov	r9, r1
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	d124      	bne.n	800718c <_dtoa_r+0x60c>
 8007142:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <_dtoa_r+0x630>)
 8007144:	4650      	mov	r0, sl
 8007146:	4659      	mov	r1, fp
 8007148:	f7f9 f8a0 	bl	800028c <__adddf3>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4640      	mov	r0, r8
 8007152:	4649      	mov	r1, r9
 8007154:	f7f9 fce0 	bl	8000b18 <__aeabi_dcmpgt>
 8007158:	2800      	cmp	r0, #0
 800715a:	d173      	bne.n	8007244 <_dtoa_r+0x6c4>
 800715c:	4652      	mov	r2, sl
 800715e:	465b      	mov	r3, fp
 8007160:	4913      	ldr	r1, [pc, #76]	; (80071b0 <_dtoa_r+0x630>)
 8007162:	2000      	movs	r0, #0
 8007164:	f7f9 f890 	bl	8000288 <__aeabi_dsub>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4640      	mov	r0, r8
 800716e:	4649      	mov	r1, r9
 8007170:	f7f9 fcb4 	bl	8000adc <__aeabi_dcmplt>
 8007174:	2800      	cmp	r0, #0
 8007176:	f43f af35 	beq.w	8006fe4 <_dtoa_r+0x464>
 800717a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800717c:	1e6b      	subs	r3, r5, #1
 800717e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007180:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d0f8      	beq.n	800717a <_dtoa_r+0x5fa>
 8007188:	9700      	str	r7, [sp, #0]
 800718a:	e049      	b.n	8007220 <_dtoa_r+0x6a0>
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <_dtoa_r+0x624>)
 800718e:	f7f9 fa33 	bl	80005f8 <__aeabi_dmul>
 8007192:	4680      	mov	r8, r0
 8007194:	4689      	mov	r9, r1
 8007196:	e7bd      	b.n	8007114 <_dtoa_r+0x594>
 8007198:	080090f8 	.word	0x080090f8
 800719c:	080090d0 	.word	0x080090d0
 80071a0:	3ff00000 	.word	0x3ff00000
 80071a4:	40240000 	.word	0x40240000
 80071a8:	401c0000 	.word	0x401c0000
 80071ac:	40140000 	.word	0x40140000
 80071b0:	3fe00000 	.word	0x3fe00000
 80071b4:	9d01      	ldr	r5, [sp, #4]
 80071b6:	4656      	mov	r6, sl
 80071b8:	465f      	mov	r7, fp
 80071ba:	4642      	mov	r2, r8
 80071bc:	464b      	mov	r3, r9
 80071be:	4630      	mov	r0, r6
 80071c0:	4639      	mov	r1, r7
 80071c2:	f7f9 fb43 	bl	800084c <__aeabi_ddiv>
 80071c6:	f7f9 fcc7 	bl	8000b58 <__aeabi_d2iz>
 80071ca:	4682      	mov	sl, r0
 80071cc:	f7f9 f9aa 	bl	8000524 <__aeabi_i2d>
 80071d0:	4642      	mov	r2, r8
 80071d2:	464b      	mov	r3, r9
 80071d4:	f7f9 fa10 	bl	80005f8 <__aeabi_dmul>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80071e4:	f7f9 f850 	bl	8000288 <__aeabi_dsub>
 80071e8:	f805 6b01 	strb.w	r6, [r5], #1
 80071ec:	9e01      	ldr	r6, [sp, #4]
 80071ee:	9f03      	ldr	r7, [sp, #12]
 80071f0:	1bae      	subs	r6, r5, r6
 80071f2:	42b7      	cmp	r7, r6
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	d135      	bne.n	8007266 <_dtoa_r+0x6e6>
 80071fa:	f7f9 f847 	bl	800028c <__adddf3>
 80071fe:	4642      	mov	r2, r8
 8007200:	464b      	mov	r3, r9
 8007202:	4606      	mov	r6, r0
 8007204:	460f      	mov	r7, r1
 8007206:	f7f9 fc87 	bl	8000b18 <__aeabi_dcmpgt>
 800720a:	b9d0      	cbnz	r0, 8007242 <_dtoa_r+0x6c2>
 800720c:	4642      	mov	r2, r8
 800720e:	464b      	mov	r3, r9
 8007210:	4630      	mov	r0, r6
 8007212:	4639      	mov	r1, r7
 8007214:	f7f9 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007218:	b110      	cbz	r0, 8007220 <_dtoa_r+0x6a0>
 800721a:	f01a 0f01 	tst.w	sl, #1
 800721e:	d110      	bne.n	8007242 <_dtoa_r+0x6c2>
 8007220:	4620      	mov	r0, r4
 8007222:	ee18 1a10 	vmov	r1, s16
 8007226:	f000 fae5 	bl	80077f4 <_Bfree>
 800722a:	2300      	movs	r3, #0
 800722c:	9800      	ldr	r0, [sp, #0]
 800722e:	702b      	strb	r3, [r5, #0]
 8007230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007232:	3001      	adds	r0, #1
 8007234:	6018      	str	r0, [r3, #0]
 8007236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007238:	2b00      	cmp	r3, #0
 800723a:	f43f acf1 	beq.w	8006c20 <_dtoa_r+0xa0>
 800723e:	601d      	str	r5, [r3, #0]
 8007240:	e4ee      	b.n	8006c20 <_dtoa_r+0xa0>
 8007242:	9f00      	ldr	r7, [sp, #0]
 8007244:	462b      	mov	r3, r5
 8007246:	461d      	mov	r5, r3
 8007248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800724c:	2a39      	cmp	r2, #57	; 0x39
 800724e:	d106      	bne.n	800725e <_dtoa_r+0x6de>
 8007250:	9a01      	ldr	r2, [sp, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d1f7      	bne.n	8007246 <_dtoa_r+0x6c6>
 8007256:	9901      	ldr	r1, [sp, #4]
 8007258:	2230      	movs	r2, #48	; 0x30
 800725a:	3701      	adds	r7, #1
 800725c:	700a      	strb	r2, [r1, #0]
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	3201      	adds	r2, #1
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	e790      	b.n	8007188 <_dtoa_r+0x608>
 8007266:	4ba6      	ldr	r3, [pc, #664]	; (8007500 <_dtoa_r+0x980>)
 8007268:	2200      	movs	r2, #0
 800726a:	f7f9 f9c5 	bl	80005f8 <__aeabi_dmul>
 800726e:	2200      	movs	r2, #0
 8007270:	2300      	movs	r3, #0
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	f7f9 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800727a:	2800      	cmp	r0, #0
 800727c:	d09d      	beq.n	80071ba <_dtoa_r+0x63a>
 800727e:	e7cf      	b.n	8007220 <_dtoa_r+0x6a0>
 8007280:	9a08      	ldr	r2, [sp, #32]
 8007282:	2a00      	cmp	r2, #0
 8007284:	f000 80d7 	beq.w	8007436 <_dtoa_r+0x8b6>
 8007288:	9a06      	ldr	r2, [sp, #24]
 800728a:	2a01      	cmp	r2, #1
 800728c:	f300 80ba 	bgt.w	8007404 <_dtoa_r+0x884>
 8007290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007292:	2a00      	cmp	r2, #0
 8007294:	f000 80b2 	beq.w	80073fc <_dtoa_r+0x87c>
 8007298:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800729c:	9e07      	ldr	r6, [sp, #28]
 800729e:	9d04      	ldr	r5, [sp, #16]
 80072a0:	9a04      	ldr	r2, [sp, #16]
 80072a2:	441a      	add	r2, r3
 80072a4:	9204      	str	r2, [sp, #16]
 80072a6:	9a05      	ldr	r2, [sp, #20]
 80072a8:	2101      	movs	r1, #1
 80072aa:	441a      	add	r2, r3
 80072ac:	4620      	mov	r0, r4
 80072ae:	9205      	str	r2, [sp, #20]
 80072b0:	f000 fb58 	bl	8007964 <__i2b>
 80072b4:	4607      	mov	r7, r0
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	dd0c      	ble.n	80072d4 <_dtoa_r+0x754>
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dd09      	ble.n	80072d4 <_dtoa_r+0x754>
 80072c0:	42ab      	cmp	r3, r5
 80072c2:	9a04      	ldr	r2, [sp, #16]
 80072c4:	bfa8      	it	ge
 80072c6:	462b      	movge	r3, r5
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	9204      	str	r2, [sp, #16]
 80072cc:	9a05      	ldr	r2, [sp, #20]
 80072ce:	1aed      	subs	r5, r5, r3
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	b31b      	cbz	r3, 8007320 <_dtoa_r+0x7a0>
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80af 	beq.w	800743e <_dtoa_r+0x8be>
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	dd13      	ble.n	800730c <_dtoa_r+0x78c>
 80072e4:	4639      	mov	r1, r7
 80072e6:	4632      	mov	r2, r6
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 fbfb 	bl	8007ae4 <__pow5mult>
 80072ee:	ee18 2a10 	vmov	r2, s16
 80072f2:	4601      	mov	r1, r0
 80072f4:	4607      	mov	r7, r0
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 fb4a 	bl	8007990 <__multiply>
 80072fc:	ee18 1a10 	vmov	r1, s16
 8007300:	4680      	mov	r8, r0
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fa76 	bl	80077f4 <_Bfree>
 8007308:	ee08 8a10 	vmov	s16, r8
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	1b9a      	subs	r2, r3, r6
 8007310:	d006      	beq.n	8007320 <_dtoa_r+0x7a0>
 8007312:	ee18 1a10 	vmov	r1, s16
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fbe4 	bl	8007ae4 <__pow5mult>
 800731c:	ee08 0a10 	vmov	s16, r0
 8007320:	2101      	movs	r1, #1
 8007322:	4620      	mov	r0, r4
 8007324:	f000 fb1e 	bl	8007964 <__i2b>
 8007328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732a:	2b00      	cmp	r3, #0
 800732c:	4606      	mov	r6, r0
 800732e:	f340 8088 	ble.w	8007442 <_dtoa_r+0x8c2>
 8007332:	461a      	mov	r2, r3
 8007334:	4601      	mov	r1, r0
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fbd4 	bl	8007ae4 <__pow5mult>
 800733c:	9b06      	ldr	r3, [sp, #24]
 800733e:	2b01      	cmp	r3, #1
 8007340:	4606      	mov	r6, r0
 8007342:	f340 8081 	ble.w	8007448 <_dtoa_r+0x8c8>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	6933      	ldr	r3, [r6, #16]
 800734c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007350:	6918      	ldr	r0, [r3, #16]
 8007352:	f000 fab7 	bl	80078c4 <__hi0bits>
 8007356:	f1c0 0020 	rsb	r0, r0, #32
 800735a:	9b05      	ldr	r3, [sp, #20]
 800735c:	4418      	add	r0, r3
 800735e:	f010 001f 	ands.w	r0, r0, #31
 8007362:	f000 8092 	beq.w	800748a <_dtoa_r+0x90a>
 8007366:	f1c0 0320 	rsb	r3, r0, #32
 800736a:	2b04      	cmp	r3, #4
 800736c:	f340 808a 	ble.w	8007484 <_dtoa_r+0x904>
 8007370:	f1c0 001c 	rsb	r0, r0, #28
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	4403      	add	r3, r0
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	9b05      	ldr	r3, [sp, #20]
 800737c:	4403      	add	r3, r0
 800737e:	4405      	add	r5, r0
 8007380:	9305      	str	r3, [sp, #20]
 8007382:	9b04      	ldr	r3, [sp, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	dd07      	ble.n	8007398 <_dtoa_r+0x818>
 8007388:	ee18 1a10 	vmov	r1, s16
 800738c:	461a      	mov	r2, r3
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fc02 	bl	8007b98 <__lshift>
 8007394:	ee08 0a10 	vmov	s16, r0
 8007398:	9b05      	ldr	r3, [sp, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dd05      	ble.n	80073aa <_dtoa_r+0x82a>
 800739e:	4631      	mov	r1, r6
 80073a0:	461a      	mov	r2, r3
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fbf8 	bl	8007b98 <__lshift>
 80073a8:	4606      	mov	r6, r0
 80073aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d06e      	beq.n	800748e <_dtoa_r+0x90e>
 80073b0:	ee18 0a10 	vmov	r0, s16
 80073b4:	4631      	mov	r1, r6
 80073b6:	f000 fc5f 	bl	8007c78 <__mcmp>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	da67      	bge.n	800748e <_dtoa_r+0x90e>
 80073be:	9b00      	ldr	r3, [sp, #0]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	ee18 1a10 	vmov	r1, s16
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	220a      	movs	r2, #10
 80073ca:	2300      	movs	r3, #0
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fa33 	bl	8007838 <__multadd>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	ee08 0a10 	vmov	s16, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 81b1 	beq.w	8007740 <_dtoa_r+0xbc0>
 80073de:	2300      	movs	r3, #0
 80073e0:	4639      	mov	r1, r7
 80073e2:	220a      	movs	r2, #10
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 fa27 	bl	8007838 <__multadd>
 80073ea:	9b02      	ldr	r3, [sp, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	4607      	mov	r7, r0
 80073f0:	f300 808e 	bgt.w	8007510 <_dtoa_r+0x990>
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	dc51      	bgt.n	800749e <_dtoa_r+0x91e>
 80073fa:	e089      	b.n	8007510 <_dtoa_r+0x990>
 80073fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007402:	e74b      	b.n	800729c <_dtoa_r+0x71c>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	1e5e      	subs	r6, r3, #1
 8007408:	9b07      	ldr	r3, [sp, #28]
 800740a:	42b3      	cmp	r3, r6
 800740c:	bfbf      	itttt	lt
 800740e:	9b07      	ldrlt	r3, [sp, #28]
 8007410:	9607      	strlt	r6, [sp, #28]
 8007412:	1af2      	sublt	r2, r6, r3
 8007414:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007416:	bfb6      	itet	lt
 8007418:	189b      	addlt	r3, r3, r2
 800741a:	1b9e      	subge	r6, r3, r6
 800741c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	bfb8      	it	lt
 8007422:	2600      	movlt	r6, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	bfb7      	itett	lt
 8007428:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800742c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007430:	1a9d      	sublt	r5, r3, r2
 8007432:	2300      	movlt	r3, #0
 8007434:	e734      	b.n	80072a0 <_dtoa_r+0x720>
 8007436:	9e07      	ldr	r6, [sp, #28]
 8007438:	9d04      	ldr	r5, [sp, #16]
 800743a:	9f08      	ldr	r7, [sp, #32]
 800743c:	e73b      	b.n	80072b6 <_dtoa_r+0x736>
 800743e:	9a07      	ldr	r2, [sp, #28]
 8007440:	e767      	b.n	8007312 <_dtoa_r+0x792>
 8007442:	9b06      	ldr	r3, [sp, #24]
 8007444:	2b01      	cmp	r3, #1
 8007446:	dc18      	bgt.n	800747a <_dtoa_r+0x8fa>
 8007448:	f1ba 0f00 	cmp.w	sl, #0
 800744c:	d115      	bne.n	800747a <_dtoa_r+0x8fa>
 800744e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007452:	b993      	cbnz	r3, 800747a <_dtoa_r+0x8fa>
 8007454:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007458:	0d1b      	lsrs	r3, r3, #20
 800745a:	051b      	lsls	r3, r3, #20
 800745c:	b183      	cbz	r3, 8007480 <_dtoa_r+0x900>
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	3301      	adds	r3, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	9b05      	ldr	r3, [sp, #20]
 8007466:	3301      	adds	r3, #1
 8007468:	9305      	str	r3, [sp, #20]
 800746a:	f04f 0801 	mov.w	r8, #1
 800746e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007470:	2b00      	cmp	r3, #0
 8007472:	f47f af6a 	bne.w	800734a <_dtoa_r+0x7ca>
 8007476:	2001      	movs	r0, #1
 8007478:	e76f      	b.n	800735a <_dtoa_r+0x7da>
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	e7f6      	b.n	800746e <_dtoa_r+0x8ee>
 8007480:	4698      	mov	r8, r3
 8007482:	e7f4      	b.n	800746e <_dtoa_r+0x8ee>
 8007484:	f43f af7d 	beq.w	8007382 <_dtoa_r+0x802>
 8007488:	4618      	mov	r0, r3
 800748a:	301c      	adds	r0, #28
 800748c:	e772      	b.n	8007374 <_dtoa_r+0x7f4>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	dc37      	bgt.n	8007504 <_dtoa_r+0x984>
 8007494:	9b06      	ldr	r3, [sp, #24]
 8007496:	2b02      	cmp	r3, #2
 8007498:	dd34      	ble.n	8007504 <_dtoa_r+0x984>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	9302      	str	r3, [sp, #8]
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	b96b      	cbnz	r3, 80074be <_dtoa_r+0x93e>
 80074a2:	4631      	mov	r1, r6
 80074a4:	2205      	movs	r2, #5
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 f9c6 	bl	8007838 <__multadd>
 80074ac:	4601      	mov	r1, r0
 80074ae:	4606      	mov	r6, r0
 80074b0:	ee18 0a10 	vmov	r0, s16
 80074b4:	f000 fbe0 	bl	8007c78 <__mcmp>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	f73f adbb 	bgt.w	8007034 <_dtoa_r+0x4b4>
 80074be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c0:	9d01      	ldr	r5, [sp, #4]
 80074c2:	43db      	mvns	r3, r3
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	f04f 0800 	mov.w	r8, #0
 80074ca:	4631      	mov	r1, r6
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 f991 	bl	80077f4 <_Bfree>
 80074d2:	2f00      	cmp	r7, #0
 80074d4:	f43f aea4 	beq.w	8007220 <_dtoa_r+0x6a0>
 80074d8:	f1b8 0f00 	cmp.w	r8, #0
 80074dc:	d005      	beq.n	80074ea <_dtoa_r+0x96a>
 80074de:	45b8      	cmp	r8, r7
 80074e0:	d003      	beq.n	80074ea <_dtoa_r+0x96a>
 80074e2:	4641      	mov	r1, r8
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 f985 	bl	80077f4 <_Bfree>
 80074ea:	4639      	mov	r1, r7
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 f981 	bl	80077f4 <_Bfree>
 80074f2:	e695      	b.n	8007220 <_dtoa_r+0x6a0>
 80074f4:	2600      	movs	r6, #0
 80074f6:	4637      	mov	r7, r6
 80074f8:	e7e1      	b.n	80074be <_dtoa_r+0x93e>
 80074fa:	9700      	str	r7, [sp, #0]
 80074fc:	4637      	mov	r7, r6
 80074fe:	e599      	b.n	8007034 <_dtoa_r+0x4b4>
 8007500:	40240000 	.word	0x40240000
 8007504:	9b08      	ldr	r3, [sp, #32]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80ca 	beq.w	80076a0 <_dtoa_r+0xb20>
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	9302      	str	r3, [sp, #8]
 8007510:	2d00      	cmp	r5, #0
 8007512:	dd05      	ble.n	8007520 <_dtoa_r+0x9a0>
 8007514:	4639      	mov	r1, r7
 8007516:	462a      	mov	r2, r5
 8007518:	4620      	mov	r0, r4
 800751a:	f000 fb3d 	bl	8007b98 <__lshift>
 800751e:	4607      	mov	r7, r0
 8007520:	f1b8 0f00 	cmp.w	r8, #0
 8007524:	d05b      	beq.n	80075de <_dtoa_r+0xa5e>
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4620      	mov	r0, r4
 800752a:	f000 f923 	bl	8007774 <_Balloc>
 800752e:	4605      	mov	r5, r0
 8007530:	b928      	cbnz	r0, 800753e <_dtoa_r+0x9be>
 8007532:	4b87      	ldr	r3, [pc, #540]	; (8007750 <_dtoa_r+0xbd0>)
 8007534:	4602      	mov	r2, r0
 8007536:	f240 21ea 	movw	r1, #746	; 0x2ea
 800753a:	f7ff bb3b 	b.w	8006bb4 <_dtoa_r+0x34>
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	3202      	adds	r2, #2
 8007542:	0092      	lsls	r2, r2, #2
 8007544:	f107 010c 	add.w	r1, r7, #12
 8007548:	300c      	adds	r0, #12
 800754a:	f7fe fded 	bl	8006128 <memcpy>
 800754e:	2201      	movs	r2, #1
 8007550:	4629      	mov	r1, r5
 8007552:	4620      	mov	r0, r4
 8007554:	f000 fb20 	bl	8007b98 <__lshift>
 8007558:	9b01      	ldr	r3, [sp, #4]
 800755a:	f103 0901 	add.w	r9, r3, #1
 800755e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007562:	4413      	add	r3, r2
 8007564:	9305      	str	r3, [sp, #20]
 8007566:	f00a 0301 	and.w	r3, sl, #1
 800756a:	46b8      	mov	r8, r7
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	4607      	mov	r7, r0
 8007570:	4631      	mov	r1, r6
 8007572:	ee18 0a10 	vmov	r0, s16
 8007576:	f7ff fa77 	bl	8006a68 <quorem>
 800757a:	4641      	mov	r1, r8
 800757c:	9002      	str	r0, [sp, #8]
 800757e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007582:	ee18 0a10 	vmov	r0, s16
 8007586:	f000 fb77 	bl	8007c78 <__mcmp>
 800758a:	463a      	mov	r2, r7
 800758c:	9003      	str	r0, [sp, #12]
 800758e:	4631      	mov	r1, r6
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fb8d 	bl	8007cb0 <__mdiff>
 8007596:	68c2      	ldr	r2, [r0, #12]
 8007598:	f109 3bff 	add.w	fp, r9, #4294967295
 800759c:	4605      	mov	r5, r0
 800759e:	bb02      	cbnz	r2, 80075e2 <_dtoa_r+0xa62>
 80075a0:	4601      	mov	r1, r0
 80075a2:	ee18 0a10 	vmov	r0, s16
 80075a6:	f000 fb67 	bl	8007c78 <__mcmp>
 80075aa:	4602      	mov	r2, r0
 80075ac:	4629      	mov	r1, r5
 80075ae:	4620      	mov	r0, r4
 80075b0:	9207      	str	r2, [sp, #28]
 80075b2:	f000 f91f 	bl	80077f4 <_Bfree>
 80075b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80075ba:	ea43 0102 	orr.w	r1, r3, r2
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	430b      	orrs	r3, r1
 80075c2:	464d      	mov	r5, r9
 80075c4:	d10f      	bne.n	80075e6 <_dtoa_r+0xa66>
 80075c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075ca:	d02a      	beq.n	8007622 <_dtoa_r+0xaa2>
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	dd02      	ble.n	80075d8 <_dtoa_r+0xa58>
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80075d8:	f88b a000 	strb.w	sl, [fp]
 80075dc:	e775      	b.n	80074ca <_dtoa_r+0x94a>
 80075de:	4638      	mov	r0, r7
 80075e0:	e7ba      	b.n	8007558 <_dtoa_r+0x9d8>
 80075e2:	2201      	movs	r2, #1
 80075e4:	e7e2      	b.n	80075ac <_dtoa_r+0xa2c>
 80075e6:	9b03      	ldr	r3, [sp, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	db04      	blt.n	80075f6 <_dtoa_r+0xa76>
 80075ec:	9906      	ldr	r1, [sp, #24]
 80075ee:	430b      	orrs	r3, r1
 80075f0:	9904      	ldr	r1, [sp, #16]
 80075f2:	430b      	orrs	r3, r1
 80075f4:	d122      	bne.n	800763c <_dtoa_r+0xabc>
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	ddee      	ble.n	80075d8 <_dtoa_r+0xa58>
 80075fa:	ee18 1a10 	vmov	r1, s16
 80075fe:	2201      	movs	r2, #1
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fac9 	bl	8007b98 <__lshift>
 8007606:	4631      	mov	r1, r6
 8007608:	ee08 0a10 	vmov	s16, r0
 800760c:	f000 fb34 	bl	8007c78 <__mcmp>
 8007610:	2800      	cmp	r0, #0
 8007612:	dc03      	bgt.n	800761c <_dtoa_r+0xa9c>
 8007614:	d1e0      	bne.n	80075d8 <_dtoa_r+0xa58>
 8007616:	f01a 0f01 	tst.w	sl, #1
 800761a:	d0dd      	beq.n	80075d8 <_dtoa_r+0xa58>
 800761c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007620:	d1d7      	bne.n	80075d2 <_dtoa_r+0xa52>
 8007622:	2339      	movs	r3, #57	; 0x39
 8007624:	f88b 3000 	strb.w	r3, [fp]
 8007628:	462b      	mov	r3, r5
 800762a:	461d      	mov	r5, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007632:	2a39      	cmp	r2, #57	; 0x39
 8007634:	d071      	beq.n	800771a <_dtoa_r+0xb9a>
 8007636:	3201      	adds	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	e746      	b.n	80074ca <_dtoa_r+0x94a>
 800763c:	2a00      	cmp	r2, #0
 800763e:	dd07      	ble.n	8007650 <_dtoa_r+0xad0>
 8007640:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007644:	d0ed      	beq.n	8007622 <_dtoa_r+0xaa2>
 8007646:	f10a 0301 	add.w	r3, sl, #1
 800764a:	f88b 3000 	strb.w	r3, [fp]
 800764e:	e73c      	b.n	80074ca <_dtoa_r+0x94a>
 8007650:	9b05      	ldr	r3, [sp, #20]
 8007652:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007656:	4599      	cmp	r9, r3
 8007658:	d047      	beq.n	80076ea <_dtoa_r+0xb6a>
 800765a:	ee18 1a10 	vmov	r1, s16
 800765e:	2300      	movs	r3, #0
 8007660:	220a      	movs	r2, #10
 8007662:	4620      	mov	r0, r4
 8007664:	f000 f8e8 	bl	8007838 <__multadd>
 8007668:	45b8      	cmp	r8, r7
 800766a:	ee08 0a10 	vmov	s16, r0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	f04f 020a 	mov.w	r2, #10
 8007676:	4641      	mov	r1, r8
 8007678:	4620      	mov	r0, r4
 800767a:	d106      	bne.n	800768a <_dtoa_r+0xb0a>
 800767c:	f000 f8dc 	bl	8007838 <__multadd>
 8007680:	4680      	mov	r8, r0
 8007682:	4607      	mov	r7, r0
 8007684:	f109 0901 	add.w	r9, r9, #1
 8007688:	e772      	b.n	8007570 <_dtoa_r+0x9f0>
 800768a:	f000 f8d5 	bl	8007838 <__multadd>
 800768e:	4639      	mov	r1, r7
 8007690:	4680      	mov	r8, r0
 8007692:	2300      	movs	r3, #0
 8007694:	220a      	movs	r2, #10
 8007696:	4620      	mov	r0, r4
 8007698:	f000 f8ce 	bl	8007838 <__multadd>
 800769c:	4607      	mov	r7, r0
 800769e:	e7f1      	b.n	8007684 <_dtoa_r+0xb04>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	9d01      	ldr	r5, [sp, #4]
 80076a6:	ee18 0a10 	vmov	r0, s16
 80076aa:	4631      	mov	r1, r6
 80076ac:	f7ff f9dc 	bl	8006a68 <quorem>
 80076b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	f805 ab01 	strb.w	sl, [r5], #1
 80076ba:	1aea      	subs	r2, r5, r3
 80076bc:	9b02      	ldr	r3, [sp, #8]
 80076be:	4293      	cmp	r3, r2
 80076c0:	dd09      	ble.n	80076d6 <_dtoa_r+0xb56>
 80076c2:	ee18 1a10 	vmov	r1, s16
 80076c6:	2300      	movs	r3, #0
 80076c8:	220a      	movs	r2, #10
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 f8b4 	bl	8007838 <__multadd>
 80076d0:	ee08 0a10 	vmov	s16, r0
 80076d4:	e7e7      	b.n	80076a6 <_dtoa_r+0xb26>
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bfc8      	it	gt
 80076dc:	461d      	movgt	r5, r3
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	bfd8      	it	le
 80076e2:	2501      	movle	r5, #1
 80076e4:	441d      	add	r5, r3
 80076e6:	f04f 0800 	mov.w	r8, #0
 80076ea:	ee18 1a10 	vmov	r1, s16
 80076ee:	2201      	movs	r2, #1
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fa51 	bl	8007b98 <__lshift>
 80076f6:	4631      	mov	r1, r6
 80076f8:	ee08 0a10 	vmov	s16, r0
 80076fc:	f000 fabc 	bl	8007c78 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	dc91      	bgt.n	8007628 <_dtoa_r+0xaa8>
 8007704:	d102      	bne.n	800770c <_dtoa_r+0xb8c>
 8007706:	f01a 0f01 	tst.w	sl, #1
 800770a:	d18d      	bne.n	8007628 <_dtoa_r+0xaa8>
 800770c:	462b      	mov	r3, r5
 800770e:	461d      	mov	r5, r3
 8007710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007714:	2a30      	cmp	r2, #48	; 0x30
 8007716:	d0fa      	beq.n	800770e <_dtoa_r+0xb8e>
 8007718:	e6d7      	b.n	80074ca <_dtoa_r+0x94a>
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d184      	bne.n	800762a <_dtoa_r+0xaaa>
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2331      	movs	r3, #49	; 0x31
 8007728:	7013      	strb	r3, [r2, #0]
 800772a:	e6ce      	b.n	80074ca <_dtoa_r+0x94a>
 800772c:	4b09      	ldr	r3, [pc, #36]	; (8007754 <_dtoa_r+0xbd4>)
 800772e:	f7ff ba95 	b.w	8006c5c <_dtoa_r+0xdc>
 8007732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007734:	2b00      	cmp	r3, #0
 8007736:	f47f aa6e 	bne.w	8006c16 <_dtoa_r+0x96>
 800773a:	4b07      	ldr	r3, [pc, #28]	; (8007758 <_dtoa_r+0xbd8>)
 800773c:	f7ff ba8e 	b.w	8006c5c <_dtoa_r+0xdc>
 8007740:	9b02      	ldr	r3, [sp, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dcae      	bgt.n	80076a4 <_dtoa_r+0xb24>
 8007746:	9b06      	ldr	r3, [sp, #24]
 8007748:	2b02      	cmp	r3, #2
 800774a:	f73f aea8 	bgt.w	800749e <_dtoa_r+0x91e>
 800774e:	e7a9      	b.n	80076a4 <_dtoa_r+0xb24>
 8007750:	08009063 	.word	0x08009063
 8007754:	08008fc0 	.word	0x08008fc0
 8007758:	08008fe4 	.word	0x08008fe4

0800775c <_localeconv_r>:
 800775c:	4800      	ldr	r0, [pc, #0]	; (8007760 <_localeconv_r+0x4>)
 800775e:	4770      	bx	lr
 8007760:	2000016c 	.word	0x2000016c

08007764 <malloc>:
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <malloc+0xc>)
 8007766:	4601      	mov	r1, r0
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f000 bc09 	b.w	8007f80 <_malloc_r>
 800776e:	bf00      	nop
 8007770:	20000018 	.word	0x20000018

08007774 <_Balloc>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007778:	4604      	mov	r4, r0
 800777a:	460d      	mov	r5, r1
 800777c:	b976      	cbnz	r6, 800779c <_Balloc+0x28>
 800777e:	2010      	movs	r0, #16
 8007780:	f7ff fff0 	bl	8007764 <malloc>
 8007784:	4602      	mov	r2, r0
 8007786:	6260      	str	r0, [r4, #36]	; 0x24
 8007788:	b920      	cbnz	r0, 8007794 <_Balloc+0x20>
 800778a:	4b18      	ldr	r3, [pc, #96]	; (80077ec <_Balloc+0x78>)
 800778c:	4818      	ldr	r0, [pc, #96]	; (80077f0 <_Balloc+0x7c>)
 800778e:	2166      	movs	r1, #102	; 0x66
 8007790:	f000 fdd6 	bl	8008340 <__assert_func>
 8007794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007798:	6006      	str	r6, [r0, #0]
 800779a:	60c6      	str	r6, [r0, #12]
 800779c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800779e:	68f3      	ldr	r3, [r6, #12]
 80077a0:	b183      	cbz	r3, 80077c4 <_Balloc+0x50>
 80077a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077aa:	b9b8      	cbnz	r0, 80077dc <_Balloc+0x68>
 80077ac:	2101      	movs	r1, #1
 80077ae:	fa01 f605 	lsl.w	r6, r1, r5
 80077b2:	1d72      	adds	r2, r6, #5
 80077b4:	0092      	lsls	r2, r2, #2
 80077b6:	4620      	mov	r0, r4
 80077b8:	f000 fb60 	bl	8007e7c <_calloc_r>
 80077bc:	b160      	cbz	r0, 80077d8 <_Balloc+0x64>
 80077be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077c2:	e00e      	b.n	80077e2 <_Balloc+0x6e>
 80077c4:	2221      	movs	r2, #33	; 0x21
 80077c6:	2104      	movs	r1, #4
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fb57 	bl	8007e7c <_calloc_r>
 80077ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077d0:	60f0      	str	r0, [r6, #12]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e4      	bne.n	80077a2 <_Balloc+0x2e>
 80077d8:	2000      	movs	r0, #0
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	6802      	ldr	r2, [r0, #0]
 80077de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077e2:	2300      	movs	r3, #0
 80077e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077e8:	e7f7      	b.n	80077da <_Balloc+0x66>
 80077ea:	bf00      	nop
 80077ec:	08008ff1 	.word	0x08008ff1
 80077f0:	08009074 	.word	0x08009074

080077f4 <_Bfree>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077f8:	4605      	mov	r5, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	b976      	cbnz	r6, 800781c <_Bfree+0x28>
 80077fe:	2010      	movs	r0, #16
 8007800:	f7ff ffb0 	bl	8007764 <malloc>
 8007804:	4602      	mov	r2, r0
 8007806:	6268      	str	r0, [r5, #36]	; 0x24
 8007808:	b920      	cbnz	r0, 8007814 <_Bfree+0x20>
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <_Bfree+0x3c>)
 800780c:	4809      	ldr	r0, [pc, #36]	; (8007834 <_Bfree+0x40>)
 800780e:	218a      	movs	r1, #138	; 0x8a
 8007810:	f000 fd96 	bl	8008340 <__assert_func>
 8007814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007818:	6006      	str	r6, [r0, #0]
 800781a:	60c6      	str	r6, [r0, #12]
 800781c:	b13c      	cbz	r4, 800782e <_Bfree+0x3a>
 800781e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007820:	6862      	ldr	r2, [r4, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007828:	6021      	str	r1, [r4, #0]
 800782a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	08008ff1 	.word	0x08008ff1
 8007834:	08009074 	.word	0x08009074

08007838 <__multadd>:
 8007838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800783c:	690d      	ldr	r5, [r1, #16]
 800783e:	4607      	mov	r7, r0
 8007840:	460c      	mov	r4, r1
 8007842:	461e      	mov	r6, r3
 8007844:	f101 0c14 	add.w	ip, r1, #20
 8007848:	2000      	movs	r0, #0
 800784a:	f8dc 3000 	ldr.w	r3, [ip]
 800784e:	b299      	uxth	r1, r3
 8007850:	fb02 6101 	mla	r1, r2, r1, r6
 8007854:	0c1e      	lsrs	r6, r3, #16
 8007856:	0c0b      	lsrs	r3, r1, #16
 8007858:	fb02 3306 	mla	r3, r2, r6, r3
 800785c:	b289      	uxth	r1, r1
 800785e:	3001      	adds	r0, #1
 8007860:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007864:	4285      	cmp	r5, r0
 8007866:	f84c 1b04 	str.w	r1, [ip], #4
 800786a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800786e:	dcec      	bgt.n	800784a <__multadd+0x12>
 8007870:	b30e      	cbz	r6, 80078b6 <__multadd+0x7e>
 8007872:	68a3      	ldr	r3, [r4, #8]
 8007874:	42ab      	cmp	r3, r5
 8007876:	dc19      	bgt.n	80078ac <__multadd+0x74>
 8007878:	6861      	ldr	r1, [r4, #4]
 800787a:	4638      	mov	r0, r7
 800787c:	3101      	adds	r1, #1
 800787e:	f7ff ff79 	bl	8007774 <_Balloc>
 8007882:	4680      	mov	r8, r0
 8007884:	b928      	cbnz	r0, 8007892 <__multadd+0x5a>
 8007886:	4602      	mov	r2, r0
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <__multadd+0x84>)
 800788a:	480d      	ldr	r0, [pc, #52]	; (80078c0 <__multadd+0x88>)
 800788c:	21b5      	movs	r1, #181	; 0xb5
 800788e:	f000 fd57 	bl	8008340 <__assert_func>
 8007892:	6922      	ldr	r2, [r4, #16]
 8007894:	3202      	adds	r2, #2
 8007896:	f104 010c 	add.w	r1, r4, #12
 800789a:	0092      	lsls	r2, r2, #2
 800789c:	300c      	adds	r0, #12
 800789e:	f7fe fc43 	bl	8006128 <memcpy>
 80078a2:	4621      	mov	r1, r4
 80078a4:	4638      	mov	r0, r7
 80078a6:	f7ff ffa5 	bl	80077f4 <_Bfree>
 80078aa:	4644      	mov	r4, r8
 80078ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078b0:	3501      	adds	r5, #1
 80078b2:	615e      	str	r6, [r3, #20]
 80078b4:	6125      	str	r5, [r4, #16]
 80078b6:	4620      	mov	r0, r4
 80078b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078bc:	08009063 	.word	0x08009063
 80078c0:	08009074 	.word	0x08009074

080078c4 <__hi0bits>:
 80078c4:	0c03      	lsrs	r3, r0, #16
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	b9d3      	cbnz	r3, 8007900 <__hi0bits+0x3c>
 80078ca:	0400      	lsls	r0, r0, #16
 80078cc:	2310      	movs	r3, #16
 80078ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078d2:	bf04      	itt	eq
 80078d4:	0200      	lsleq	r0, r0, #8
 80078d6:	3308      	addeq	r3, #8
 80078d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078dc:	bf04      	itt	eq
 80078de:	0100      	lsleq	r0, r0, #4
 80078e0:	3304      	addeq	r3, #4
 80078e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078e6:	bf04      	itt	eq
 80078e8:	0080      	lsleq	r0, r0, #2
 80078ea:	3302      	addeq	r3, #2
 80078ec:	2800      	cmp	r0, #0
 80078ee:	db05      	blt.n	80078fc <__hi0bits+0x38>
 80078f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078f4:	f103 0301 	add.w	r3, r3, #1
 80078f8:	bf08      	it	eq
 80078fa:	2320      	moveq	r3, #32
 80078fc:	4618      	mov	r0, r3
 80078fe:	4770      	bx	lr
 8007900:	2300      	movs	r3, #0
 8007902:	e7e4      	b.n	80078ce <__hi0bits+0xa>

08007904 <__lo0bits>:
 8007904:	6803      	ldr	r3, [r0, #0]
 8007906:	f013 0207 	ands.w	r2, r3, #7
 800790a:	4601      	mov	r1, r0
 800790c:	d00b      	beq.n	8007926 <__lo0bits+0x22>
 800790e:	07da      	lsls	r2, r3, #31
 8007910:	d423      	bmi.n	800795a <__lo0bits+0x56>
 8007912:	0798      	lsls	r0, r3, #30
 8007914:	bf49      	itett	mi
 8007916:	085b      	lsrmi	r3, r3, #1
 8007918:	089b      	lsrpl	r3, r3, #2
 800791a:	2001      	movmi	r0, #1
 800791c:	600b      	strmi	r3, [r1, #0]
 800791e:	bf5c      	itt	pl
 8007920:	600b      	strpl	r3, [r1, #0]
 8007922:	2002      	movpl	r0, #2
 8007924:	4770      	bx	lr
 8007926:	b298      	uxth	r0, r3
 8007928:	b9a8      	cbnz	r0, 8007956 <__lo0bits+0x52>
 800792a:	0c1b      	lsrs	r3, r3, #16
 800792c:	2010      	movs	r0, #16
 800792e:	b2da      	uxtb	r2, r3
 8007930:	b90a      	cbnz	r2, 8007936 <__lo0bits+0x32>
 8007932:	3008      	adds	r0, #8
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	071a      	lsls	r2, r3, #28
 8007938:	bf04      	itt	eq
 800793a:	091b      	lsreq	r3, r3, #4
 800793c:	3004      	addeq	r0, #4
 800793e:	079a      	lsls	r2, r3, #30
 8007940:	bf04      	itt	eq
 8007942:	089b      	lsreq	r3, r3, #2
 8007944:	3002      	addeq	r0, #2
 8007946:	07da      	lsls	r2, r3, #31
 8007948:	d403      	bmi.n	8007952 <__lo0bits+0x4e>
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	f100 0001 	add.w	r0, r0, #1
 8007950:	d005      	beq.n	800795e <__lo0bits+0x5a>
 8007952:	600b      	str	r3, [r1, #0]
 8007954:	4770      	bx	lr
 8007956:	4610      	mov	r0, r2
 8007958:	e7e9      	b.n	800792e <__lo0bits+0x2a>
 800795a:	2000      	movs	r0, #0
 800795c:	4770      	bx	lr
 800795e:	2020      	movs	r0, #32
 8007960:	4770      	bx	lr
	...

08007964 <__i2b>:
 8007964:	b510      	push	{r4, lr}
 8007966:	460c      	mov	r4, r1
 8007968:	2101      	movs	r1, #1
 800796a:	f7ff ff03 	bl	8007774 <_Balloc>
 800796e:	4602      	mov	r2, r0
 8007970:	b928      	cbnz	r0, 800797e <__i2b+0x1a>
 8007972:	4b05      	ldr	r3, [pc, #20]	; (8007988 <__i2b+0x24>)
 8007974:	4805      	ldr	r0, [pc, #20]	; (800798c <__i2b+0x28>)
 8007976:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800797a:	f000 fce1 	bl	8008340 <__assert_func>
 800797e:	2301      	movs	r3, #1
 8007980:	6144      	str	r4, [r0, #20]
 8007982:	6103      	str	r3, [r0, #16]
 8007984:	bd10      	pop	{r4, pc}
 8007986:	bf00      	nop
 8007988:	08009063 	.word	0x08009063
 800798c:	08009074 	.word	0x08009074

08007990 <__multiply>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	4691      	mov	r9, r2
 8007996:	690a      	ldr	r2, [r1, #16]
 8007998:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800799c:	429a      	cmp	r2, r3
 800799e:	bfb8      	it	lt
 80079a0:	460b      	movlt	r3, r1
 80079a2:	460c      	mov	r4, r1
 80079a4:	bfbc      	itt	lt
 80079a6:	464c      	movlt	r4, r9
 80079a8:	4699      	movlt	r9, r3
 80079aa:	6927      	ldr	r7, [r4, #16]
 80079ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079b0:	68a3      	ldr	r3, [r4, #8]
 80079b2:	6861      	ldr	r1, [r4, #4]
 80079b4:	eb07 060a 	add.w	r6, r7, sl
 80079b8:	42b3      	cmp	r3, r6
 80079ba:	b085      	sub	sp, #20
 80079bc:	bfb8      	it	lt
 80079be:	3101      	addlt	r1, #1
 80079c0:	f7ff fed8 	bl	8007774 <_Balloc>
 80079c4:	b930      	cbnz	r0, 80079d4 <__multiply+0x44>
 80079c6:	4602      	mov	r2, r0
 80079c8:	4b44      	ldr	r3, [pc, #272]	; (8007adc <__multiply+0x14c>)
 80079ca:	4845      	ldr	r0, [pc, #276]	; (8007ae0 <__multiply+0x150>)
 80079cc:	f240 115d 	movw	r1, #349	; 0x15d
 80079d0:	f000 fcb6 	bl	8008340 <__assert_func>
 80079d4:	f100 0514 	add.w	r5, r0, #20
 80079d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079dc:	462b      	mov	r3, r5
 80079de:	2200      	movs	r2, #0
 80079e0:	4543      	cmp	r3, r8
 80079e2:	d321      	bcc.n	8007a28 <__multiply+0x98>
 80079e4:	f104 0314 	add.w	r3, r4, #20
 80079e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079ec:	f109 0314 	add.w	r3, r9, #20
 80079f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079f4:	9202      	str	r2, [sp, #8]
 80079f6:	1b3a      	subs	r2, r7, r4
 80079f8:	3a15      	subs	r2, #21
 80079fa:	f022 0203 	bic.w	r2, r2, #3
 80079fe:	3204      	adds	r2, #4
 8007a00:	f104 0115 	add.w	r1, r4, #21
 8007a04:	428f      	cmp	r7, r1
 8007a06:	bf38      	it	cc
 8007a08:	2204      	movcc	r2, #4
 8007a0a:	9201      	str	r2, [sp, #4]
 8007a0c:	9a02      	ldr	r2, [sp, #8]
 8007a0e:	9303      	str	r3, [sp, #12]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d80c      	bhi.n	8007a2e <__multiply+0x9e>
 8007a14:	2e00      	cmp	r6, #0
 8007a16:	dd03      	ble.n	8007a20 <__multiply+0x90>
 8007a18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d05a      	beq.n	8007ad6 <__multiply+0x146>
 8007a20:	6106      	str	r6, [r0, #16]
 8007a22:	b005      	add	sp, #20
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	f843 2b04 	str.w	r2, [r3], #4
 8007a2c:	e7d8      	b.n	80079e0 <__multiply+0x50>
 8007a2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a32:	f1ba 0f00 	cmp.w	sl, #0
 8007a36:	d024      	beq.n	8007a82 <__multiply+0xf2>
 8007a38:	f104 0e14 	add.w	lr, r4, #20
 8007a3c:	46a9      	mov	r9, r5
 8007a3e:	f04f 0c00 	mov.w	ip, #0
 8007a42:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a46:	f8d9 1000 	ldr.w	r1, [r9]
 8007a4a:	fa1f fb82 	uxth.w	fp, r2
 8007a4e:	b289      	uxth	r1, r1
 8007a50:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a58:	f8d9 2000 	ldr.w	r2, [r9]
 8007a5c:	4461      	add	r1, ip
 8007a5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a62:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a6a:	b289      	uxth	r1, r1
 8007a6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a70:	4577      	cmp	r7, lr
 8007a72:	f849 1b04 	str.w	r1, [r9], #4
 8007a76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a7a:	d8e2      	bhi.n	8007a42 <__multiply+0xb2>
 8007a7c:	9a01      	ldr	r2, [sp, #4]
 8007a7e:	f845 c002 	str.w	ip, [r5, r2]
 8007a82:	9a03      	ldr	r2, [sp, #12]
 8007a84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	f1b9 0f00 	cmp.w	r9, #0
 8007a8e:	d020      	beq.n	8007ad2 <__multiply+0x142>
 8007a90:	6829      	ldr	r1, [r5, #0]
 8007a92:	f104 0c14 	add.w	ip, r4, #20
 8007a96:	46ae      	mov	lr, r5
 8007a98:	f04f 0a00 	mov.w	sl, #0
 8007a9c:	f8bc b000 	ldrh.w	fp, [ip]
 8007aa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007aa4:	fb09 220b 	mla	r2, r9, fp, r2
 8007aa8:	4492      	add	sl, r2
 8007aaa:	b289      	uxth	r1, r1
 8007aac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ab0:	f84e 1b04 	str.w	r1, [lr], #4
 8007ab4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ab8:	f8be 1000 	ldrh.w	r1, [lr]
 8007abc:	0c12      	lsrs	r2, r2, #16
 8007abe:	fb09 1102 	mla	r1, r9, r2, r1
 8007ac2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ac6:	4567      	cmp	r7, ip
 8007ac8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007acc:	d8e6      	bhi.n	8007a9c <__multiply+0x10c>
 8007ace:	9a01      	ldr	r2, [sp, #4]
 8007ad0:	50a9      	str	r1, [r5, r2]
 8007ad2:	3504      	adds	r5, #4
 8007ad4:	e79a      	b.n	8007a0c <__multiply+0x7c>
 8007ad6:	3e01      	subs	r6, #1
 8007ad8:	e79c      	b.n	8007a14 <__multiply+0x84>
 8007ada:	bf00      	nop
 8007adc:	08009063 	.word	0x08009063
 8007ae0:	08009074 	.word	0x08009074

08007ae4 <__pow5mult>:
 8007ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae8:	4615      	mov	r5, r2
 8007aea:	f012 0203 	ands.w	r2, r2, #3
 8007aee:	4606      	mov	r6, r0
 8007af0:	460f      	mov	r7, r1
 8007af2:	d007      	beq.n	8007b04 <__pow5mult+0x20>
 8007af4:	4c25      	ldr	r4, [pc, #148]	; (8007b8c <__pow5mult+0xa8>)
 8007af6:	3a01      	subs	r2, #1
 8007af8:	2300      	movs	r3, #0
 8007afa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007afe:	f7ff fe9b 	bl	8007838 <__multadd>
 8007b02:	4607      	mov	r7, r0
 8007b04:	10ad      	asrs	r5, r5, #2
 8007b06:	d03d      	beq.n	8007b84 <__pow5mult+0xa0>
 8007b08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b0a:	b97c      	cbnz	r4, 8007b2c <__pow5mult+0x48>
 8007b0c:	2010      	movs	r0, #16
 8007b0e:	f7ff fe29 	bl	8007764 <malloc>
 8007b12:	4602      	mov	r2, r0
 8007b14:	6270      	str	r0, [r6, #36]	; 0x24
 8007b16:	b928      	cbnz	r0, 8007b24 <__pow5mult+0x40>
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <__pow5mult+0xac>)
 8007b1a:	481e      	ldr	r0, [pc, #120]	; (8007b94 <__pow5mult+0xb0>)
 8007b1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b20:	f000 fc0e 	bl	8008340 <__assert_func>
 8007b24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b28:	6004      	str	r4, [r0, #0]
 8007b2a:	60c4      	str	r4, [r0, #12]
 8007b2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b34:	b94c      	cbnz	r4, 8007b4a <__pow5mult+0x66>
 8007b36:	f240 2171 	movw	r1, #625	; 0x271
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7ff ff12 	bl	8007964 <__i2b>
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b46:	4604      	mov	r4, r0
 8007b48:	6003      	str	r3, [r0, #0]
 8007b4a:	f04f 0900 	mov.w	r9, #0
 8007b4e:	07eb      	lsls	r3, r5, #31
 8007b50:	d50a      	bpl.n	8007b68 <__pow5mult+0x84>
 8007b52:	4639      	mov	r1, r7
 8007b54:	4622      	mov	r2, r4
 8007b56:	4630      	mov	r0, r6
 8007b58:	f7ff ff1a 	bl	8007990 <__multiply>
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	4680      	mov	r8, r0
 8007b60:	4630      	mov	r0, r6
 8007b62:	f7ff fe47 	bl	80077f4 <_Bfree>
 8007b66:	4647      	mov	r7, r8
 8007b68:	106d      	asrs	r5, r5, #1
 8007b6a:	d00b      	beq.n	8007b84 <__pow5mult+0xa0>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	b938      	cbnz	r0, 8007b80 <__pow5mult+0x9c>
 8007b70:	4622      	mov	r2, r4
 8007b72:	4621      	mov	r1, r4
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7ff ff0b 	bl	8007990 <__multiply>
 8007b7a:	6020      	str	r0, [r4, #0]
 8007b7c:	f8c0 9000 	str.w	r9, [r0]
 8007b80:	4604      	mov	r4, r0
 8007b82:	e7e4      	b.n	8007b4e <__pow5mult+0x6a>
 8007b84:	4638      	mov	r0, r7
 8007b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b8a:	bf00      	nop
 8007b8c:	080091c0 	.word	0x080091c0
 8007b90:	08008ff1 	.word	0x08008ff1
 8007b94:	08009074 	.word	0x08009074

08007b98 <__lshift>:
 8007b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	6849      	ldr	r1, [r1, #4]
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ba6:	68a3      	ldr	r3, [r4, #8]
 8007ba8:	4607      	mov	r7, r0
 8007baa:	4691      	mov	r9, r2
 8007bac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bb0:	f108 0601 	add.w	r6, r8, #1
 8007bb4:	42b3      	cmp	r3, r6
 8007bb6:	db0b      	blt.n	8007bd0 <__lshift+0x38>
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f7ff fddb 	bl	8007774 <_Balloc>
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	b948      	cbnz	r0, 8007bd6 <__lshift+0x3e>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <__lshift+0xd8>)
 8007bc6:	482b      	ldr	r0, [pc, #172]	; (8007c74 <__lshift+0xdc>)
 8007bc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bcc:	f000 fbb8 	bl	8008340 <__assert_func>
 8007bd0:	3101      	adds	r1, #1
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	e7ee      	b.n	8007bb4 <__lshift+0x1c>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f100 0114 	add.w	r1, r0, #20
 8007bdc:	f100 0210 	add.w	r2, r0, #16
 8007be0:	4618      	mov	r0, r3
 8007be2:	4553      	cmp	r3, sl
 8007be4:	db37      	blt.n	8007c56 <__lshift+0xbe>
 8007be6:	6920      	ldr	r0, [r4, #16]
 8007be8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bec:	f104 0314 	add.w	r3, r4, #20
 8007bf0:	f019 091f 	ands.w	r9, r9, #31
 8007bf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bfc:	d02f      	beq.n	8007c5e <__lshift+0xc6>
 8007bfe:	f1c9 0e20 	rsb	lr, r9, #32
 8007c02:	468a      	mov	sl, r1
 8007c04:	f04f 0c00 	mov.w	ip, #0
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	fa02 f209 	lsl.w	r2, r2, r9
 8007c0e:	ea42 020c 	orr.w	r2, r2, ip
 8007c12:	f84a 2b04 	str.w	r2, [sl], #4
 8007c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1a:	4298      	cmp	r0, r3
 8007c1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c20:	d8f2      	bhi.n	8007c08 <__lshift+0x70>
 8007c22:	1b03      	subs	r3, r0, r4
 8007c24:	3b15      	subs	r3, #21
 8007c26:	f023 0303 	bic.w	r3, r3, #3
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	f104 0215 	add.w	r2, r4, #21
 8007c30:	4290      	cmp	r0, r2
 8007c32:	bf38      	it	cc
 8007c34:	2304      	movcc	r3, #4
 8007c36:	f841 c003 	str.w	ip, [r1, r3]
 8007c3a:	f1bc 0f00 	cmp.w	ip, #0
 8007c3e:	d001      	beq.n	8007c44 <__lshift+0xac>
 8007c40:	f108 0602 	add.w	r6, r8, #2
 8007c44:	3e01      	subs	r6, #1
 8007c46:	4638      	mov	r0, r7
 8007c48:	612e      	str	r6, [r5, #16]
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	f7ff fdd2 	bl	80077f4 <_Bfree>
 8007c50:	4628      	mov	r0, r5
 8007c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c56:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	e7c1      	b.n	8007be2 <__lshift+0x4a>
 8007c5e:	3904      	subs	r1, #4
 8007c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c64:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c68:	4298      	cmp	r0, r3
 8007c6a:	d8f9      	bhi.n	8007c60 <__lshift+0xc8>
 8007c6c:	e7ea      	b.n	8007c44 <__lshift+0xac>
 8007c6e:	bf00      	nop
 8007c70:	08009063 	.word	0x08009063
 8007c74:	08009074 	.word	0x08009074

08007c78 <__mcmp>:
 8007c78:	b530      	push	{r4, r5, lr}
 8007c7a:	6902      	ldr	r2, [r0, #16]
 8007c7c:	690c      	ldr	r4, [r1, #16]
 8007c7e:	1b12      	subs	r2, r2, r4
 8007c80:	d10e      	bne.n	8007ca0 <__mcmp+0x28>
 8007c82:	f100 0314 	add.w	r3, r0, #20
 8007c86:	3114      	adds	r1, #20
 8007c88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c98:	42a5      	cmp	r5, r4
 8007c9a:	d003      	beq.n	8007ca4 <__mcmp+0x2c>
 8007c9c:	d305      	bcc.n	8007caa <__mcmp+0x32>
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	bd30      	pop	{r4, r5, pc}
 8007ca4:	4283      	cmp	r3, r0
 8007ca6:	d3f3      	bcc.n	8007c90 <__mcmp+0x18>
 8007ca8:	e7fa      	b.n	8007ca0 <__mcmp+0x28>
 8007caa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cae:	e7f7      	b.n	8007ca0 <__mcmp+0x28>

08007cb0 <__mdiff>:
 8007cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4620      	mov	r0, r4
 8007cbc:	4690      	mov	r8, r2
 8007cbe:	f7ff ffdb 	bl	8007c78 <__mcmp>
 8007cc2:	1e05      	subs	r5, r0, #0
 8007cc4:	d110      	bne.n	8007ce8 <__mdiff+0x38>
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7ff fd53 	bl	8007774 <_Balloc>
 8007cce:	b930      	cbnz	r0, 8007cde <__mdiff+0x2e>
 8007cd0:	4b3a      	ldr	r3, [pc, #232]	; (8007dbc <__mdiff+0x10c>)
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	f240 2132 	movw	r1, #562	; 0x232
 8007cd8:	4839      	ldr	r0, [pc, #228]	; (8007dc0 <__mdiff+0x110>)
 8007cda:	f000 fb31 	bl	8008340 <__assert_func>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ce4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce8:	bfa4      	itt	ge
 8007cea:	4643      	movge	r3, r8
 8007cec:	46a0      	movge	r8, r4
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cf4:	bfa6      	itte	ge
 8007cf6:	461c      	movge	r4, r3
 8007cf8:	2500      	movge	r5, #0
 8007cfa:	2501      	movlt	r5, #1
 8007cfc:	f7ff fd3a 	bl	8007774 <_Balloc>
 8007d00:	b920      	cbnz	r0, 8007d0c <__mdiff+0x5c>
 8007d02:	4b2e      	ldr	r3, [pc, #184]	; (8007dbc <__mdiff+0x10c>)
 8007d04:	4602      	mov	r2, r0
 8007d06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d0a:	e7e5      	b.n	8007cd8 <__mdiff+0x28>
 8007d0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d10:	6926      	ldr	r6, [r4, #16]
 8007d12:	60c5      	str	r5, [r0, #12]
 8007d14:	f104 0914 	add.w	r9, r4, #20
 8007d18:	f108 0514 	add.w	r5, r8, #20
 8007d1c:	f100 0e14 	add.w	lr, r0, #20
 8007d20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d28:	f108 0210 	add.w	r2, r8, #16
 8007d2c:	46f2      	mov	sl, lr
 8007d2e:	2100      	movs	r1, #0
 8007d30:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d38:	fa1f f883 	uxth.w	r8, r3
 8007d3c:	fa11 f18b 	uxtah	r1, r1, fp
 8007d40:	0c1b      	lsrs	r3, r3, #16
 8007d42:	eba1 0808 	sub.w	r8, r1, r8
 8007d46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d4e:	fa1f f888 	uxth.w	r8, r8
 8007d52:	1419      	asrs	r1, r3, #16
 8007d54:	454e      	cmp	r6, r9
 8007d56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d5a:	f84a 3b04 	str.w	r3, [sl], #4
 8007d5e:	d8e7      	bhi.n	8007d30 <__mdiff+0x80>
 8007d60:	1b33      	subs	r3, r6, r4
 8007d62:	3b15      	subs	r3, #21
 8007d64:	f023 0303 	bic.w	r3, r3, #3
 8007d68:	3304      	adds	r3, #4
 8007d6a:	3415      	adds	r4, #21
 8007d6c:	42a6      	cmp	r6, r4
 8007d6e:	bf38      	it	cc
 8007d70:	2304      	movcc	r3, #4
 8007d72:	441d      	add	r5, r3
 8007d74:	4473      	add	r3, lr
 8007d76:	469e      	mov	lr, r3
 8007d78:	462e      	mov	r6, r5
 8007d7a:	4566      	cmp	r6, ip
 8007d7c:	d30e      	bcc.n	8007d9c <__mdiff+0xec>
 8007d7e:	f10c 0203 	add.w	r2, ip, #3
 8007d82:	1b52      	subs	r2, r2, r5
 8007d84:	f022 0203 	bic.w	r2, r2, #3
 8007d88:	3d03      	subs	r5, #3
 8007d8a:	45ac      	cmp	ip, r5
 8007d8c:	bf38      	it	cc
 8007d8e:	2200      	movcc	r2, #0
 8007d90:	441a      	add	r2, r3
 8007d92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d96:	b17b      	cbz	r3, 8007db8 <__mdiff+0x108>
 8007d98:	6107      	str	r7, [r0, #16]
 8007d9a:	e7a3      	b.n	8007ce4 <__mdiff+0x34>
 8007d9c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007da0:	fa11 f288 	uxtah	r2, r1, r8
 8007da4:	1414      	asrs	r4, r2, #16
 8007da6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007daa:	b292      	uxth	r2, r2
 8007dac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007db0:	f84e 2b04 	str.w	r2, [lr], #4
 8007db4:	1421      	asrs	r1, r4, #16
 8007db6:	e7e0      	b.n	8007d7a <__mdiff+0xca>
 8007db8:	3f01      	subs	r7, #1
 8007dba:	e7ea      	b.n	8007d92 <__mdiff+0xe2>
 8007dbc:	08009063 	.word	0x08009063
 8007dc0:	08009074 	.word	0x08009074

08007dc4 <__d2b>:
 8007dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dc8:	4689      	mov	r9, r1
 8007dca:	2101      	movs	r1, #1
 8007dcc:	ec57 6b10 	vmov	r6, r7, d0
 8007dd0:	4690      	mov	r8, r2
 8007dd2:	f7ff fccf 	bl	8007774 <_Balloc>
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	b930      	cbnz	r0, 8007de8 <__d2b+0x24>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	4b25      	ldr	r3, [pc, #148]	; (8007e74 <__d2b+0xb0>)
 8007dde:	4826      	ldr	r0, [pc, #152]	; (8007e78 <__d2b+0xb4>)
 8007de0:	f240 310a 	movw	r1, #778	; 0x30a
 8007de4:	f000 faac 	bl	8008340 <__assert_func>
 8007de8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007dec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007df0:	bb35      	cbnz	r5, 8007e40 <__d2b+0x7c>
 8007df2:	2e00      	cmp	r6, #0
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	d028      	beq.n	8007e4a <__d2b+0x86>
 8007df8:	4668      	mov	r0, sp
 8007dfa:	9600      	str	r6, [sp, #0]
 8007dfc:	f7ff fd82 	bl	8007904 <__lo0bits>
 8007e00:	9900      	ldr	r1, [sp, #0]
 8007e02:	b300      	cbz	r0, 8007e46 <__d2b+0x82>
 8007e04:	9a01      	ldr	r2, [sp, #4]
 8007e06:	f1c0 0320 	rsb	r3, r0, #32
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	40c2      	lsrs	r2, r0
 8007e12:	6163      	str	r3, [r4, #20]
 8007e14:	9201      	str	r2, [sp, #4]
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	61a3      	str	r3, [r4, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bf14      	ite	ne
 8007e1e:	2202      	movne	r2, #2
 8007e20:	2201      	moveq	r2, #1
 8007e22:	6122      	str	r2, [r4, #16]
 8007e24:	b1d5      	cbz	r5, 8007e5c <__d2b+0x98>
 8007e26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e2a:	4405      	add	r5, r0
 8007e2c:	f8c9 5000 	str.w	r5, [r9]
 8007e30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e34:	f8c8 0000 	str.w	r0, [r8]
 8007e38:	4620      	mov	r0, r4
 8007e3a:	b003      	add	sp, #12
 8007e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e44:	e7d5      	b.n	8007df2 <__d2b+0x2e>
 8007e46:	6161      	str	r1, [r4, #20]
 8007e48:	e7e5      	b.n	8007e16 <__d2b+0x52>
 8007e4a:	a801      	add	r0, sp, #4
 8007e4c:	f7ff fd5a 	bl	8007904 <__lo0bits>
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	6163      	str	r3, [r4, #20]
 8007e54:	2201      	movs	r2, #1
 8007e56:	6122      	str	r2, [r4, #16]
 8007e58:	3020      	adds	r0, #32
 8007e5a:	e7e3      	b.n	8007e24 <__d2b+0x60>
 8007e5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e64:	f8c9 0000 	str.w	r0, [r9]
 8007e68:	6918      	ldr	r0, [r3, #16]
 8007e6a:	f7ff fd2b 	bl	80078c4 <__hi0bits>
 8007e6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e72:	e7df      	b.n	8007e34 <__d2b+0x70>
 8007e74:	08009063 	.word	0x08009063
 8007e78:	08009074 	.word	0x08009074

08007e7c <_calloc_r>:
 8007e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e7e:	fba1 2402 	umull	r2, r4, r1, r2
 8007e82:	b94c      	cbnz	r4, 8007e98 <_calloc_r+0x1c>
 8007e84:	4611      	mov	r1, r2
 8007e86:	9201      	str	r2, [sp, #4]
 8007e88:	f000 f87a 	bl	8007f80 <_malloc_r>
 8007e8c:	9a01      	ldr	r2, [sp, #4]
 8007e8e:	4605      	mov	r5, r0
 8007e90:	b930      	cbnz	r0, 8007ea0 <_calloc_r+0x24>
 8007e92:	4628      	mov	r0, r5
 8007e94:	b003      	add	sp, #12
 8007e96:	bd30      	pop	{r4, r5, pc}
 8007e98:	220c      	movs	r2, #12
 8007e9a:	6002      	str	r2, [r0, #0]
 8007e9c:	2500      	movs	r5, #0
 8007e9e:	e7f8      	b.n	8007e92 <_calloc_r+0x16>
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	f7fe f94f 	bl	8006144 <memset>
 8007ea6:	e7f4      	b.n	8007e92 <_calloc_r+0x16>

08007ea8 <_free_r>:
 8007ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	d044      	beq.n	8007f38 <_free_r+0x90>
 8007eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb2:	9001      	str	r0, [sp, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eba:	bfb8      	it	lt
 8007ebc:	18e4      	addlt	r4, r4, r3
 8007ebe:	f000 fa9b 	bl	80083f8 <__malloc_lock>
 8007ec2:	4a1e      	ldr	r2, [pc, #120]	; (8007f3c <_free_r+0x94>)
 8007ec4:	9801      	ldr	r0, [sp, #4]
 8007ec6:	6813      	ldr	r3, [r2, #0]
 8007ec8:	b933      	cbnz	r3, 8007ed8 <_free_r+0x30>
 8007eca:	6063      	str	r3, [r4, #4]
 8007ecc:	6014      	str	r4, [r2, #0]
 8007ece:	b003      	add	sp, #12
 8007ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed4:	f000 ba96 	b.w	8008404 <__malloc_unlock>
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	d908      	bls.n	8007eee <_free_r+0x46>
 8007edc:	6825      	ldr	r5, [r4, #0]
 8007ede:	1961      	adds	r1, r4, r5
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf01      	itttt	eq
 8007ee4:	6819      	ldreq	r1, [r3, #0]
 8007ee6:	685b      	ldreq	r3, [r3, #4]
 8007ee8:	1949      	addeq	r1, r1, r5
 8007eea:	6021      	streq	r1, [r4, #0]
 8007eec:	e7ed      	b.n	8007eca <_free_r+0x22>
 8007eee:	461a      	mov	r2, r3
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	b10b      	cbz	r3, 8007ef8 <_free_r+0x50>
 8007ef4:	42a3      	cmp	r3, r4
 8007ef6:	d9fa      	bls.n	8007eee <_free_r+0x46>
 8007ef8:	6811      	ldr	r1, [r2, #0]
 8007efa:	1855      	adds	r5, r2, r1
 8007efc:	42a5      	cmp	r5, r4
 8007efe:	d10b      	bne.n	8007f18 <_free_r+0x70>
 8007f00:	6824      	ldr	r4, [r4, #0]
 8007f02:	4421      	add	r1, r4
 8007f04:	1854      	adds	r4, r2, r1
 8007f06:	42a3      	cmp	r3, r4
 8007f08:	6011      	str	r1, [r2, #0]
 8007f0a:	d1e0      	bne.n	8007ece <_free_r+0x26>
 8007f0c:	681c      	ldr	r4, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	6053      	str	r3, [r2, #4]
 8007f12:	4421      	add	r1, r4
 8007f14:	6011      	str	r1, [r2, #0]
 8007f16:	e7da      	b.n	8007ece <_free_r+0x26>
 8007f18:	d902      	bls.n	8007f20 <_free_r+0x78>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	6003      	str	r3, [r0, #0]
 8007f1e:	e7d6      	b.n	8007ece <_free_r+0x26>
 8007f20:	6825      	ldr	r5, [r4, #0]
 8007f22:	1961      	adds	r1, r4, r5
 8007f24:	428b      	cmp	r3, r1
 8007f26:	bf04      	itt	eq
 8007f28:	6819      	ldreq	r1, [r3, #0]
 8007f2a:	685b      	ldreq	r3, [r3, #4]
 8007f2c:	6063      	str	r3, [r4, #4]
 8007f2e:	bf04      	itt	eq
 8007f30:	1949      	addeq	r1, r1, r5
 8007f32:	6021      	streq	r1, [r4, #0]
 8007f34:	6054      	str	r4, [r2, #4]
 8007f36:	e7ca      	b.n	8007ece <_free_r+0x26>
 8007f38:	b003      	add	sp, #12
 8007f3a:	bd30      	pop	{r4, r5, pc}
 8007f3c:	20000758 	.word	0x20000758

08007f40 <sbrk_aligned>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4e0e      	ldr	r6, [pc, #56]	; (8007f7c <sbrk_aligned+0x3c>)
 8007f44:	460c      	mov	r4, r1
 8007f46:	6831      	ldr	r1, [r6, #0]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	b911      	cbnz	r1, 8007f52 <sbrk_aligned+0x12>
 8007f4c:	f000 f9e8 	bl	8008320 <_sbrk_r>
 8007f50:	6030      	str	r0, [r6, #0]
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 f9e3 	bl	8008320 <_sbrk_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d00a      	beq.n	8007f74 <sbrk_aligned+0x34>
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d007      	beq.n	8007f78 <sbrk_aligned+0x38>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 f9d8 	bl	8008320 <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d101      	bne.n	8007f78 <sbrk_aligned+0x38>
 8007f74:	f04f 34ff 	mov.w	r4, #4294967295
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	2000075c 	.word	0x2000075c

08007f80 <_malloc_r>:
 8007f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f84:	1ccd      	adds	r5, r1, #3
 8007f86:	f025 0503 	bic.w	r5, r5, #3
 8007f8a:	3508      	adds	r5, #8
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	bf38      	it	cc
 8007f90:	250c      	movcc	r5, #12
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	4607      	mov	r7, r0
 8007f96:	db01      	blt.n	8007f9c <_malloc_r+0x1c>
 8007f98:	42a9      	cmp	r1, r5
 8007f9a:	d905      	bls.n	8007fa8 <_malloc_r+0x28>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	2600      	movs	r6, #0
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa8:	4e2e      	ldr	r6, [pc, #184]	; (8008064 <_malloc_r+0xe4>)
 8007faa:	f000 fa25 	bl	80083f8 <__malloc_lock>
 8007fae:	6833      	ldr	r3, [r6, #0]
 8007fb0:	461c      	mov	r4, r3
 8007fb2:	bb34      	cbnz	r4, 8008002 <_malloc_r+0x82>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f7ff ffc2 	bl	8007f40 <sbrk_aligned>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	d14d      	bne.n	800805e <_malloc_r+0xde>
 8007fc2:	6834      	ldr	r4, [r6, #0]
 8007fc4:	4626      	mov	r6, r4
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	d140      	bne.n	800804c <_malloc_r+0xcc>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4638      	mov	r0, r7
 8007fd0:	eb04 0803 	add.w	r8, r4, r3
 8007fd4:	f000 f9a4 	bl	8008320 <_sbrk_r>
 8007fd8:	4580      	cmp	r8, r0
 8007fda:	d13a      	bne.n	8008052 <_malloc_r+0xd2>
 8007fdc:	6821      	ldr	r1, [r4, #0]
 8007fde:	3503      	adds	r5, #3
 8007fe0:	1a6d      	subs	r5, r5, r1
 8007fe2:	f025 0503 	bic.w	r5, r5, #3
 8007fe6:	3508      	adds	r5, #8
 8007fe8:	2d0c      	cmp	r5, #12
 8007fea:	bf38      	it	cc
 8007fec:	250c      	movcc	r5, #12
 8007fee:	4629      	mov	r1, r5
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff ffa5 	bl	8007f40 <sbrk_aligned>
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d02b      	beq.n	8008052 <_malloc_r+0xd2>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	442b      	add	r3, r5
 8007ffe:	6023      	str	r3, [r4, #0]
 8008000:	e00e      	b.n	8008020 <_malloc_r+0xa0>
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	1b52      	subs	r2, r2, r5
 8008006:	d41e      	bmi.n	8008046 <_malloc_r+0xc6>
 8008008:	2a0b      	cmp	r2, #11
 800800a:	d916      	bls.n	800803a <_malloc_r+0xba>
 800800c:	1961      	adds	r1, r4, r5
 800800e:	42a3      	cmp	r3, r4
 8008010:	6025      	str	r5, [r4, #0]
 8008012:	bf18      	it	ne
 8008014:	6059      	strne	r1, [r3, #4]
 8008016:	6863      	ldr	r3, [r4, #4]
 8008018:	bf08      	it	eq
 800801a:	6031      	streq	r1, [r6, #0]
 800801c:	5162      	str	r2, [r4, r5]
 800801e:	604b      	str	r3, [r1, #4]
 8008020:	4638      	mov	r0, r7
 8008022:	f104 060b 	add.w	r6, r4, #11
 8008026:	f000 f9ed 	bl	8008404 <__malloc_unlock>
 800802a:	f026 0607 	bic.w	r6, r6, #7
 800802e:	1d23      	adds	r3, r4, #4
 8008030:	1af2      	subs	r2, r6, r3
 8008032:	d0b6      	beq.n	8007fa2 <_malloc_r+0x22>
 8008034:	1b9b      	subs	r3, r3, r6
 8008036:	50a3      	str	r3, [r4, r2]
 8008038:	e7b3      	b.n	8007fa2 <_malloc_r+0x22>
 800803a:	6862      	ldr	r2, [r4, #4]
 800803c:	42a3      	cmp	r3, r4
 800803e:	bf0c      	ite	eq
 8008040:	6032      	streq	r2, [r6, #0]
 8008042:	605a      	strne	r2, [r3, #4]
 8008044:	e7ec      	b.n	8008020 <_malloc_r+0xa0>
 8008046:	4623      	mov	r3, r4
 8008048:	6864      	ldr	r4, [r4, #4]
 800804a:	e7b2      	b.n	8007fb2 <_malloc_r+0x32>
 800804c:	4634      	mov	r4, r6
 800804e:	6876      	ldr	r6, [r6, #4]
 8008050:	e7b9      	b.n	8007fc6 <_malloc_r+0x46>
 8008052:	230c      	movs	r3, #12
 8008054:	603b      	str	r3, [r7, #0]
 8008056:	4638      	mov	r0, r7
 8008058:	f000 f9d4 	bl	8008404 <__malloc_unlock>
 800805c:	e7a1      	b.n	8007fa2 <_malloc_r+0x22>
 800805e:	6025      	str	r5, [r4, #0]
 8008060:	e7de      	b.n	8008020 <_malloc_r+0xa0>
 8008062:	bf00      	nop
 8008064:	20000758 	.word	0x20000758

08008068 <__ssputs_r>:
 8008068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806c:	688e      	ldr	r6, [r1, #8]
 800806e:	429e      	cmp	r6, r3
 8008070:	4682      	mov	sl, r0
 8008072:	460c      	mov	r4, r1
 8008074:	4690      	mov	r8, r2
 8008076:	461f      	mov	r7, r3
 8008078:	d838      	bhi.n	80080ec <__ssputs_r+0x84>
 800807a:	898a      	ldrh	r2, [r1, #12]
 800807c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008080:	d032      	beq.n	80080e8 <__ssputs_r+0x80>
 8008082:	6825      	ldr	r5, [r4, #0]
 8008084:	6909      	ldr	r1, [r1, #16]
 8008086:	eba5 0901 	sub.w	r9, r5, r1
 800808a:	6965      	ldr	r5, [r4, #20]
 800808c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008094:	3301      	adds	r3, #1
 8008096:	444b      	add	r3, r9
 8008098:	106d      	asrs	r5, r5, #1
 800809a:	429d      	cmp	r5, r3
 800809c:	bf38      	it	cc
 800809e:	461d      	movcc	r5, r3
 80080a0:	0553      	lsls	r3, r2, #21
 80080a2:	d531      	bpl.n	8008108 <__ssputs_r+0xa0>
 80080a4:	4629      	mov	r1, r5
 80080a6:	f7ff ff6b 	bl	8007f80 <_malloc_r>
 80080aa:	4606      	mov	r6, r0
 80080ac:	b950      	cbnz	r0, 80080c4 <__ssputs_r+0x5c>
 80080ae:	230c      	movs	r3, #12
 80080b0:	f8ca 3000 	str.w	r3, [sl]
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	f04f 30ff 	mov.w	r0, #4294967295
 80080c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c4:	6921      	ldr	r1, [r4, #16]
 80080c6:	464a      	mov	r2, r9
 80080c8:	f7fe f82e 	bl	8006128 <memcpy>
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	6126      	str	r6, [r4, #16]
 80080da:	6165      	str	r5, [r4, #20]
 80080dc:	444e      	add	r6, r9
 80080de:	eba5 0509 	sub.w	r5, r5, r9
 80080e2:	6026      	str	r6, [r4, #0]
 80080e4:	60a5      	str	r5, [r4, #8]
 80080e6:	463e      	mov	r6, r7
 80080e8:	42be      	cmp	r6, r7
 80080ea:	d900      	bls.n	80080ee <__ssputs_r+0x86>
 80080ec:	463e      	mov	r6, r7
 80080ee:	6820      	ldr	r0, [r4, #0]
 80080f0:	4632      	mov	r2, r6
 80080f2:	4641      	mov	r1, r8
 80080f4:	f000 f966 	bl	80083c4 <memmove>
 80080f8:	68a3      	ldr	r3, [r4, #8]
 80080fa:	1b9b      	subs	r3, r3, r6
 80080fc:	60a3      	str	r3, [r4, #8]
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	4433      	add	r3, r6
 8008102:	6023      	str	r3, [r4, #0]
 8008104:	2000      	movs	r0, #0
 8008106:	e7db      	b.n	80080c0 <__ssputs_r+0x58>
 8008108:	462a      	mov	r2, r5
 800810a:	f000 f981 	bl	8008410 <_realloc_r>
 800810e:	4606      	mov	r6, r0
 8008110:	2800      	cmp	r0, #0
 8008112:	d1e1      	bne.n	80080d8 <__ssputs_r+0x70>
 8008114:	6921      	ldr	r1, [r4, #16]
 8008116:	4650      	mov	r0, sl
 8008118:	f7ff fec6 	bl	8007ea8 <_free_r>
 800811c:	e7c7      	b.n	80080ae <__ssputs_r+0x46>
	...

08008120 <_svfiprintf_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	4698      	mov	r8, r3
 8008126:	898b      	ldrh	r3, [r1, #12]
 8008128:	061b      	lsls	r3, r3, #24
 800812a:	b09d      	sub	sp, #116	; 0x74
 800812c:	4607      	mov	r7, r0
 800812e:	460d      	mov	r5, r1
 8008130:	4614      	mov	r4, r2
 8008132:	d50e      	bpl.n	8008152 <_svfiprintf_r+0x32>
 8008134:	690b      	ldr	r3, [r1, #16]
 8008136:	b963      	cbnz	r3, 8008152 <_svfiprintf_r+0x32>
 8008138:	2140      	movs	r1, #64	; 0x40
 800813a:	f7ff ff21 	bl	8007f80 <_malloc_r>
 800813e:	6028      	str	r0, [r5, #0]
 8008140:	6128      	str	r0, [r5, #16]
 8008142:	b920      	cbnz	r0, 800814e <_svfiprintf_r+0x2e>
 8008144:	230c      	movs	r3, #12
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	e0d1      	b.n	80082f2 <_svfiprintf_r+0x1d2>
 800814e:	2340      	movs	r3, #64	; 0x40
 8008150:	616b      	str	r3, [r5, #20]
 8008152:	2300      	movs	r3, #0
 8008154:	9309      	str	r3, [sp, #36]	; 0x24
 8008156:	2320      	movs	r3, #32
 8008158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800815c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008160:	2330      	movs	r3, #48	; 0x30
 8008162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800830c <_svfiprintf_r+0x1ec>
 8008166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800816a:	f04f 0901 	mov.w	r9, #1
 800816e:	4623      	mov	r3, r4
 8008170:	469a      	mov	sl, r3
 8008172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008176:	b10a      	cbz	r2, 800817c <_svfiprintf_r+0x5c>
 8008178:	2a25      	cmp	r2, #37	; 0x25
 800817a:	d1f9      	bne.n	8008170 <_svfiprintf_r+0x50>
 800817c:	ebba 0b04 	subs.w	fp, sl, r4
 8008180:	d00b      	beq.n	800819a <_svfiprintf_r+0x7a>
 8008182:	465b      	mov	r3, fp
 8008184:	4622      	mov	r2, r4
 8008186:	4629      	mov	r1, r5
 8008188:	4638      	mov	r0, r7
 800818a:	f7ff ff6d 	bl	8008068 <__ssputs_r>
 800818e:	3001      	adds	r0, #1
 8008190:	f000 80aa 	beq.w	80082e8 <_svfiprintf_r+0x1c8>
 8008194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008196:	445a      	add	r2, fp
 8008198:	9209      	str	r2, [sp, #36]	; 0x24
 800819a:	f89a 3000 	ldrb.w	r3, [sl]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 80a2 	beq.w	80082e8 <_svfiprintf_r+0x1c8>
 80081a4:	2300      	movs	r3, #0
 80081a6:	f04f 32ff 	mov.w	r2, #4294967295
 80081aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ae:	f10a 0a01 	add.w	sl, sl, #1
 80081b2:	9304      	str	r3, [sp, #16]
 80081b4:	9307      	str	r3, [sp, #28]
 80081b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081ba:	931a      	str	r3, [sp, #104]	; 0x68
 80081bc:	4654      	mov	r4, sl
 80081be:	2205      	movs	r2, #5
 80081c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c4:	4851      	ldr	r0, [pc, #324]	; (800830c <_svfiprintf_r+0x1ec>)
 80081c6:	f7f8 f80b 	bl	80001e0 <memchr>
 80081ca:	9a04      	ldr	r2, [sp, #16]
 80081cc:	b9d8      	cbnz	r0, 8008206 <_svfiprintf_r+0xe6>
 80081ce:	06d0      	lsls	r0, r2, #27
 80081d0:	bf44      	itt	mi
 80081d2:	2320      	movmi	r3, #32
 80081d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d8:	0711      	lsls	r1, r2, #28
 80081da:	bf44      	itt	mi
 80081dc:	232b      	movmi	r3, #43	; 0x2b
 80081de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081e2:	f89a 3000 	ldrb.w	r3, [sl]
 80081e6:	2b2a      	cmp	r3, #42	; 0x2a
 80081e8:	d015      	beq.n	8008216 <_svfiprintf_r+0xf6>
 80081ea:	9a07      	ldr	r2, [sp, #28]
 80081ec:	4654      	mov	r4, sl
 80081ee:	2000      	movs	r0, #0
 80081f0:	f04f 0c0a 	mov.w	ip, #10
 80081f4:	4621      	mov	r1, r4
 80081f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081fa:	3b30      	subs	r3, #48	; 0x30
 80081fc:	2b09      	cmp	r3, #9
 80081fe:	d94e      	bls.n	800829e <_svfiprintf_r+0x17e>
 8008200:	b1b0      	cbz	r0, 8008230 <_svfiprintf_r+0x110>
 8008202:	9207      	str	r2, [sp, #28]
 8008204:	e014      	b.n	8008230 <_svfiprintf_r+0x110>
 8008206:	eba0 0308 	sub.w	r3, r0, r8
 800820a:	fa09 f303 	lsl.w	r3, r9, r3
 800820e:	4313      	orrs	r3, r2
 8008210:	9304      	str	r3, [sp, #16]
 8008212:	46a2      	mov	sl, r4
 8008214:	e7d2      	b.n	80081bc <_svfiprintf_r+0x9c>
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	1d19      	adds	r1, r3, #4
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	9103      	str	r1, [sp, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	bfbb      	ittet	lt
 8008222:	425b      	neglt	r3, r3
 8008224:	f042 0202 	orrlt.w	r2, r2, #2
 8008228:	9307      	strge	r3, [sp, #28]
 800822a:	9307      	strlt	r3, [sp, #28]
 800822c:	bfb8      	it	lt
 800822e:	9204      	strlt	r2, [sp, #16]
 8008230:	7823      	ldrb	r3, [r4, #0]
 8008232:	2b2e      	cmp	r3, #46	; 0x2e
 8008234:	d10c      	bne.n	8008250 <_svfiprintf_r+0x130>
 8008236:	7863      	ldrb	r3, [r4, #1]
 8008238:	2b2a      	cmp	r3, #42	; 0x2a
 800823a:	d135      	bne.n	80082a8 <_svfiprintf_r+0x188>
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	1d1a      	adds	r2, r3, #4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	9203      	str	r2, [sp, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	bfb8      	it	lt
 8008248:	f04f 33ff 	movlt.w	r3, #4294967295
 800824c:	3402      	adds	r4, #2
 800824e:	9305      	str	r3, [sp, #20]
 8008250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800831c <_svfiprintf_r+0x1fc>
 8008254:	7821      	ldrb	r1, [r4, #0]
 8008256:	2203      	movs	r2, #3
 8008258:	4650      	mov	r0, sl
 800825a:	f7f7 ffc1 	bl	80001e0 <memchr>
 800825e:	b140      	cbz	r0, 8008272 <_svfiprintf_r+0x152>
 8008260:	2340      	movs	r3, #64	; 0x40
 8008262:	eba0 000a 	sub.w	r0, r0, sl
 8008266:	fa03 f000 	lsl.w	r0, r3, r0
 800826a:	9b04      	ldr	r3, [sp, #16]
 800826c:	4303      	orrs	r3, r0
 800826e:	3401      	adds	r4, #1
 8008270:	9304      	str	r3, [sp, #16]
 8008272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008276:	4826      	ldr	r0, [pc, #152]	; (8008310 <_svfiprintf_r+0x1f0>)
 8008278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800827c:	2206      	movs	r2, #6
 800827e:	f7f7 ffaf 	bl	80001e0 <memchr>
 8008282:	2800      	cmp	r0, #0
 8008284:	d038      	beq.n	80082f8 <_svfiprintf_r+0x1d8>
 8008286:	4b23      	ldr	r3, [pc, #140]	; (8008314 <_svfiprintf_r+0x1f4>)
 8008288:	bb1b      	cbnz	r3, 80082d2 <_svfiprintf_r+0x1b2>
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	3307      	adds	r3, #7
 800828e:	f023 0307 	bic.w	r3, r3, #7
 8008292:	3308      	adds	r3, #8
 8008294:	9303      	str	r3, [sp, #12]
 8008296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008298:	4433      	add	r3, r6
 800829a:	9309      	str	r3, [sp, #36]	; 0x24
 800829c:	e767      	b.n	800816e <_svfiprintf_r+0x4e>
 800829e:	fb0c 3202 	mla	r2, ip, r2, r3
 80082a2:	460c      	mov	r4, r1
 80082a4:	2001      	movs	r0, #1
 80082a6:	e7a5      	b.n	80081f4 <_svfiprintf_r+0xd4>
 80082a8:	2300      	movs	r3, #0
 80082aa:	3401      	adds	r4, #1
 80082ac:	9305      	str	r3, [sp, #20]
 80082ae:	4619      	mov	r1, r3
 80082b0:	f04f 0c0a 	mov.w	ip, #10
 80082b4:	4620      	mov	r0, r4
 80082b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ba:	3a30      	subs	r2, #48	; 0x30
 80082bc:	2a09      	cmp	r2, #9
 80082be:	d903      	bls.n	80082c8 <_svfiprintf_r+0x1a8>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0c5      	beq.n	8008250 <_svfiprintf_r+0x130>
 80082c4:	9105      	str	r1, [sp, #20]
 80082c6:	e7c3      	b.n	8008250 <_svfiprintf_r+0x130>
 80082c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80082cc:	4604      	mov	r4, r0
 80082ce:	2301      	movs	r3, #1
 80082d0:	e7f0      	b.n	80082b4 <_svfiprintf_r+0x194>
 80082d2:	ab03      	add	r3, sp, #12
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	462a      	mov	r2, r5
 80082d8:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <_svfiprintf_r+0x1f8>)
 80082da:	a904      	add	r1, sp, #16
 80082dc:	4638      	mov	r0, r7
 80082de:	f7fd ffd9 	bl	8006294 <_printf_float>
 80082e2:	1c42      	adds	r2, r0, #1
 80082e4:	4606      	mov	r6, r0
 80082e6:	d1d6      	bne.n	8008296 <_svfiprintf_r+0x176>
 80082e8:	89ab      	ldrh	r3, [r5, #12]
 80082ea:	065b      	lsls	r3, r3, #25
 80082ec:	f53f af2c 	bmi.w	8008148 <_svfiprintf_r+0x28>
 80082f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082f2:	b01d      	add	sp, #116	; 0x74
 80082f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f8:	ab03      	add	r3, sp, #12
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	462a      	mov	r2, r5
 80082fe:	4b06      	ldr	r3, [pc, #24]	; (8008318 <_svfiprintf_r+0x1f8>)
 8008300:	a904      	add	r1, sp, #16
 8008302:	4638      	mov	r0, r7
 8008304:	f7fe fa6a 	bl	80067dc <_printf_i>
 8008308:	e7eb      	b.n	80082e2 <_svfiprintf_r+0x1c2>
 800830a:	bf00      	nop
 800830c:	080091cc 	.word	0x080091cc
 8008310:	080091d6 	.word	0x080091d6
 8008314:	08006295 	.word	0x08006295
 8008318:	08008069 	.word	0x08008069
 800831c:	080091d2 	.word	0x080091d2

08008320 <_sbrk_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4d06      	ldr	r5, [pc, #24]	; (800833c <_sbrk_r+0x1c>)
 8008324:	2300      	movs	r3, #0
 8008326:	4604      	mov	r4, r0
 8008328:	4608      	mov	r0, r1
 800832a:	602b      	str	r3, [r5, #0]
 800832c:	f7f9 fb40 	bl	80019b0 <_sbrk>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_sbrk_r+0x1a>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_sbrk_r+0x1a>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20000760 	.word	0x20000760

08008340 <__assert_func>:
 8008340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008342:	4614      	mov	r4, r2
 8008344:	461a      	mov	r2, r3
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <__assert_func+0x2c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4605      	mov	r5, r0
 800834c:	68d8      	ldr	r0, [r3, #12]
 800834e:	b14c      	cbz	r4, 8008364 <__assert_func+0x24>
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <__assert_func+0x30>)
 8008352:	9100      	str	r1, [sp, #0]
 8008354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008358:	4906      	ldr	r1, [pc, #24]	; (8008374 <__assert_func+0x34>)
 800835a:	462b      	mov	r3, r5
 800835c:	f000 f80e 	bl	800837c <fiprintf>
 8008360:	f000 faac 	bl	80088bc <abort>
 8008364:	4b04      	ldr	r3, [pc, #16]	; (8008378 <__assert_func+0x38>)
 8008366:	461c      	mov	r4, r3
 8008368:	e7f3      	b.n	8008352 <__assert_func+0x12>
 800836a:	bf00      	nop
 800836c:	20000018 	.word	0x20000018
 8008370:	080091dd 	.word	0x080091dd
 8008374:	080091ea 	.word	0x080091ea
 8008378:	08009218 	.word	0x08009218

0800837c <fiprintf>:
 800837c:	b40e      	push	{r1, r2, r3}
 800837e:	b503      	push	{r0, r1, lr}
 8008380:	4601      	mov	r1, r0
 8008382:	ab03      	add	r3, sp, #12
 8008384:	4805      	ldr	r0, [pc, #20]	; (800839c <fiprintf+0x20>)
 8008386:	f853 2b04 	ldr.w	r2, [r3], #4
 800838a:	6800      	ldr	r0, [r0, #0]
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	f000 f897 	bl	80084c0 <_vfiprintf_r>
 8008392:	b002      	add	sp, #8
 8008394:	f85d eb04 	ldr.w	lr, [sp], #4
 8008398:	b003      	add	sp, #12
 800839a:	4770      	bx	lr
 800839c:	20000018 	.word	0x20000018

080083a0 <__ascii_mbtowc>:
 80083a0:	b082      	sub	sp, #8
 80083a2:	b901      	cbnz	r1, 80083a6 <__ascii_mbtowc+0x6>
 80083a4:	a901      	add	r1, sp, #4
 80083a6:	b142      	cbz	r2, 80083ba <__ascii_mbtowc+0x1a>
 80083a8:	b14b      	cbz	r3, 80083be <__ascii_mbtowc+0x1e>
 80083aa:	7813      	ldrb	r3, [r2, #0]
 80083ac:	600b      	str	r3, [r1, #0]
 80083ae:	7812      	ldrb	r2, [r2, #0]
 80083b0:	1e10      	subs	r0, r2, #0
 80083b2:	bf18      	it	ne
 80083b4:	2001      	movne	r0, #1
 80083b6:	b002      	add	sp, #8
 80083b8:	4770      	bx	lr
 80083ba:	4610      	mov	r0, r2
 80083bc:	e7fb      	b.n	80083b6 <__ascii_mbtowc+0x16>
 80083be:	f06f 0001 	mvn.w	r0, #1
 80083c2:	e7f8      	b.n	80083b6 <__ascii_mbtowc+0x16>

080083c4 <memmove>:
 80083c4:	4288      	cmp	r0, r1
 80083c6:	b510      	push	{r4, lr}
 80083c8:	eb01 0402 	add.w	r4, r1, r2
 80083cc:	d902      	bls.n	80083d4 <memmove+0x10>
 80083ce:	4284      	cmp	r4, r0
 80083d0:	4623      	mov	r3, r4
 80083d2:	d807      	bhi.n	80083e4 <memmove+0x20>
 80083d4:	1e43      	subs	r3, r0, #1
 80083d6:	42a1      	cmp	r1, r4
 80083d8:	d008      	beq.n	80083ec <memmove+0x28>
 80083da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083e2:	e7f8      	b.n	80083d6 <memmove+0x12>
 80083e4:	4402      	add	r2, r0
 80083e6:	4601      	mov	r1, r0
 80083e8:	428a      	cmp	r2, r1
 80083ea:	d100      	bne.n	80083ee <memmove+0x2a>
 80083ec:	bd10      	pop	{r4, pc}
 80083ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083f6:	e7f7      	b.n	80083e8 <memmove+0x24>

080083f8 <__malloc_lock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__malloc_lock+0x8>)
 80083fa:	f000 bc1f 	b.w	8008c3c <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	20000764 	.word	0x20000764

08008404 <__malloc_unlock>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__malloc_unlock+0x8>)
 8008406:	f000 bc1a 	b.w	8008c3e <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	20000764 	.word	0x20000764

08008410 <_realloc_r>:
 8008410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008414:	4680      	mov	r8, r0
 8008416:	4614      	mov	r4, r2
 8008418:	460e      	mov	r6, r1
 800841a:	b921      	cbnz	r1, 8008426 <_realloc_r+0x16>
 800841c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008420:	4611      	mov	r1, r2
 8008422:	f7ff bdad 	b.w	8007f80 <_malloc_r>
 8008426:	b92a      	cbnz	r2, 8008434 <_realloc_r+0x24>
 8008428:	f7ff fd3e 	bl	8007ea8 <_free_r>
 800842c:	4625      	mov	r5, r4
 800842e:	4628      	mov	r0, r5
 8008430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008434:	f000 fc6a 	bl	8008d0c <_malloc_usable_size_r>
 8008438:	4284      	cmp	r4, r0
 800843a:	4607      	mov	r7, r0
 800843c:	d802      	bhi.n	8008444 <_realloc_r+0x34>
 800843e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008442:	d812      	bhi.n	800846a <_realloc_r+0x5a>
 8008444:	4621      	mov	r1, r4
 8008446:	4640      	mov	r0, r8
 8008448:	f7ff fd9a 	bl	8007f80 <_malloc_r>
 800844c:	4605      	mov	r5, r0
 800844e:	2800      	cmp	r0, #0
 8008450:	d0ed      	beq.n	800842e <_realloc_r+0x1e>
 8008452:	42bc      	cmp	r4, r7
 8008454:	4622      	mov	r2, r4
 8008456:	4631      	mov	r1, r6
 8008458:	bf28      	it	cs
 800845a:	463a      	movcs	r2, r7
 800845c:	f7fd fe64 	bl	8006128 <memcpy>
 8008460:	4631      	mov	r1, r6
 8008462:	4640      	mov	r0, r8
 8008464:	f7ff fd20 	bl	8007ea8 <_free_r>
 8008468:	e7e1      	b.n	800842e <_realloc_r+0x1e>
 800846a:	4635      	mov	r5, r6
 800846c:	e7df      	b.n	800842e <_realloc_r+0x1e>

0800846e <__sfputc_r>:
 800846e:	6893      	ldr	r3, [r2, #8]
 8008470:	3b01      	subs	r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	b410      	push	{r4}
 8008476:	6093      	str	r3, [r2, #8]
 8008478:	da08      	bge.n	800848c <__sfputc_r+0x1e>
 800847a:	6994      	ldr	r4, [r2, #24]
 800847c:	42a3      	cmp	r3, r4
 800847e:	db01      	blt.n	8008484 <__sfputc_r+0x16>
 8008480:	290a      	cmp	r1, #10
 8008482:	d103      	bne.n	800848c <__sfputc_r+0x1e>
 8008484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008488:	f000 b94a 	b.w	8008720 <__swbuf_r>
 800848c:	6813      	ldr	r3, [r2, #0]
 800848e:	1c58      	adds	r0, r3, #1
 8008490:	6010      	str	r0, [r2, #0]
 8008492:	7019      	strb	r1, [r3, #0]
 8008494:	4608      	mov	r0, r1
 8008496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800849a:	4770      	bx	lr

0800849c <__sfputs_r>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	4606      	mov	r6, r0
 80084a0:	460f      	mov	r7, r1
 80084a2:	4614      	mov	r4, r2
 80084a4:	18d5      	adds	r5, r2, r3
 80084a6:	42ac      	cmp	r4, r5
 80084a8:	d101      	bne.n	80084ae <__sfputs_r+0x12>
 80084aa:	2000      	movs	r0, #0
 80084ac:	e007      	b.n	80084be <__sfputs_r+0x22>
 80084ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b2:	463a      	mov	r2, r7
 80084b4:	4630      	mov	r0, r6
 80084b6:	f7ff ffda 	bl	800846e <__sfputc_r>
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	d1f3      	bne.n	80084a6 <__sfputs_r+0xa>
 80084be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084c0 <_vfiprintf_r>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	460d      	mov	r5, r1
 80084c6:	b09d      	sub	sp, #116	; 0x74
 80084c8:	4614      	mov	r4, r2
 80084ca:	4698      	mov	r8, r3
 80084cc:	4606      	mov	r6, r0
 80084ce:	b118      	cbz	r0, 80084d8 <_vfiprintf_r+0x18>
 80084d0:	6983      	ldr	r3, [r0, #24]
 80084d2:	b90b      	cbnz	r3, 80084d8 <_vfiprintf_r+0x18>
 80084d4:	f000 fb14 	bl	8008b00 <__sinit>
 80084d8:	4b89      	ldr	r3, [pc, #548]	; (8008700 <_vfiprintf_r+0x240>)
 80084da:	429d      	cmp	r5, r3
 80084dc:	d11b      	bne.n	8008516 <_vfiprintf_r+0x56>
 80084de:	6875      	ldr	r5, [r6, #4]
 80084e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e2:	07d9      	lsls	r1, r3, #31
 80084e4:	d405      	bmi.n	80084f2 <_vfiprintf_r+0x32>
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	059a      	lsls	r2, r3, #22
 80084ea:	d402      	bmi.n	80084f2 <_vfiprintf_r+0x32>
 80084ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ee:	f000 fba5 	bl	8008c3c <__retarget_lock_acquire_recursive>
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	071b      	lsls	r3, r3, #28
 80084f6:	d501      	bpl.n	80084fc <_vfiprintf_r+0x3c>
 80084f8:	692b      	ldr	r3, [r5, #16]
 80084fa:	b9eb      	cbnz	r3, 8008538 <_vfiprintf_r+0x78>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f96e 	bl	80087e0 <__swsetup_r>
 8008504:	b1c0      	cbz	r0, 8008538 <_vfiprintf_r+0x78>
 8008506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008508:	07dc      	lsls	r4, r3, #31
 800850a:	d50e      	bpl.n	800852a <_vfiprintf_r+0x6a>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	b01d      	add	sp, #116	; 0x74
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	4b7b      	ldr	r3, [pc, #492]	; (8008704 <_vfiprintf_r+0x244>)
 8008518:	429d      	cmp	r5, r3
 800851a:	d101      	bne.n	8008520 <_vfiprintf_r+0x60>
 800851c:	68b5      	ldr	r5, [r6, #8]
 800851e:	e7df      	b.n	80084e0 <_vfiprintf_r+0x20>
 8008520:	4b79      	ldr	r3, [pc, #484]	; (8008708 <_vfiprintf_r+0x248>)
 8008522:	429d      	cmp	r5, r3
 8008524:	bf08      	it	eq
 8008526:	68f5      	ldreq	r5, [r6, #12]
 8008528:	e7da      	b.n	80084e0 <_vfiprintf_r+0x20>
 800852a:	89ab      	ldrh	r3, [r5, #12]
 800852c:	0598      	lsls	r0, r3, #22
 800852e:	d4ed      	bmi.n	800850c <_vfiprintf_r+0x4c>
 8008530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008532:	f000 fb84 	bl	8008c3e <__retarget_lock_release_recursive>
 8008536:	e7e9      	b.n	800850c <_vfiprintf_r+0x4c>
 8008538:	2300      	movs	r3, #0
 800853a:	9309      	str	r3, [sp, #36]	; 0x24
 800853c:	2320      	movs	r3, #32
 800853e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008542:	f8cd 800c 	str.w	r8, [sp, #12]
 8008546:	2330      	movs	r3, #48	; 0x30
 8008548:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800870c <_vfiprintf_r+0x24c>
 800854c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008550:	f04f 0901 	mov.w	r9, #1
 8008554:	4623      	mov	r3, r4
 8008556:	469a      	mov	sl, r3
 8008558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855c:	b10a      	cbz	r2, 8008562 <_vfiprintf_r+0xa2>
 800855e:	2a25      	cmp	r2, #37	; 0x25
 8008560:	d1f9      	bne.n	8008556 <_vfiprintf_r+0x96>
 8008562:	ebba 0b04 	subs.w	fp, sl, r4
 8008566:	d00b      	beq.n	8008580 <_vfiprintf_r+0xc0>
 8008568:	465b      	mov	r3, fp
 800856a:	4622      	mov	r2, r4
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f7ff ff94 	bl	800849c <__sfputs_r>
 8008574:	3001      	adds	r0, #1
 8008576:	f000 80aa 	beq.w	80086ce <_vfiprintf_r+0x20e>
 800857a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857c:	445a      	add	r2, fp
 800857e:	9209      	str	r2, [sp, #36]	; 0x24
 8008580:	f89a 3000 	ldrb.w	r3, [sl]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 80a2 	beq.w	80086ce <_vfiprintf_r+0x20e>
 800858a:	2300      	movs	r3, #0
 800858c:	f04f 32ff 	mov.w	r2, #4294967295
 8008590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008594:	f10a 0a01 	add.w	sl, sl, #1
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a0:	931a      	str	r3, [sp, #104]	; 0x68
 80085a2:	4654      	mov	r4, sl
 80085a4:	2205      	movs	r2, #5
 80085a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085aa:	4858      	ldr	r0, [pc, #352]	; (800870c <_vfiprintf_r+0x24c>)
 80085ac:	f7f7 fe18 	bl	80001e0 <memchr>
 80085b0:	9a04      	ldr	r2, [sp, #16]
 80085b2:	b9d8      	cbnz	r0, 80085ec <_vfiprintf_r+0x12c>
 80085b4:	06d1      	lsls	r1, r2, #27
 80085b6:	bf44      	itt	mi
 80085b8:	2320      	movmi	r3, #32
 80085ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085be:	0713      	lsls	r3, r2, #28
 80085c0:	bf44      	itt	mi
 80085c2:	232b      	movmi	r3, #43	; 0x2b
 80085c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c8:	f89a 3000 	ldrb.w	r3, [sl]
 80085cc:	2b2a      	cmp	r3, #42	; 0x2a
 80085ce:	d015      	beq.n	80085fc <_vfiprintf_r+0x13c>
 80085d0:	9a07      	ldr	r2, [sp, #28]
 80085d2:	4654      	mov	r4, sl
 80085d4:	2000      	movs	r0, #0
 80085d6:	f04f 0c0a 	mov.w	ip, #10
 80085da:	4621      	mov	r1, r4
 80085dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e0:	3b30      	subs	r3, #48	; 0x30
 80085e2:	2b09      	cmp	r3, #9
 80085e4:	d94e      	bls.n	8008684 <_vfiprintf_r+0x1c4>
 80085e6:	b1b0      	cbz	r0, 8008616 <_vfiprintf_r+0x156>
 80085e8:	9207      	str	r2, [sp, #28]
 80085ea:	e014      	b.n	8008616 <_vfiprintf_r+0x156>
 80085ec:	eba0 0308 	sub.w	r3, r0, r8
 80085f0:	fa09 f303 	lsl.w	r3, r9, r3
 80085f4:	4313      	orrs	r3, r2
 80085f6:	9304      	str	r3, [sp, #16]
 80085f8:	46a2      	mov	sl, r4
 80085fa:	e7d2      	b.n	80085a2 <_vfiprintf_r+0xe2>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d19      	adds	r1, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9103      	str	r1, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbb      	ittet	lt
 8008608:	425b      	neglt	r3, r3
 800860a:	f042 0202 	orrlt.w	r2, r2, #2
 800860e:	9307      	strge	r3, [sp, #28]
 8008610:	9307      	strlt	r3, [sp, #28]
 8008612:	bfb8      	it	lt
 8008614:	9204      	strlt	r2, [sp, #16]
 8008616:	7823      	ldrb	r3, [r4, #0]
 8008618:	2b2e      	cmp	r3, #46	; 0x2e
 800861a:	d10c      	bne.n	8008636 <_vfiprintf_r+0x176>
 800861c:	7863      	ldrb	r3, [r4, #1]
 800861e:	2b2a      	cmp	r3, #42	; 0x2a
 8008620:	d135      	bne.n	800868e <_vfiprintf_r+0x1ce>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	9203      	str	r2, [sp, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	bfb8      	it	lt
 800862e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008632:	3402      	adds	r4, #2
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800871c <_vfiprintf_r+0x25c>
 800863a:	7821      	ldrb	r1, [r4, #0]
 800863c:	2203      	movs	r2, #3
 800863e:	4650      	mov	r0, sl
 8008640:	f7f7 fdce 	bl	80001e0 <memchr>
 8008644:	b140      	cbz	r0, 8008658 <_vfiprintf_r+0x198>
 8008646:	2340      	movs	r3, #64	; 0x40
 8008648:	eba0 000a 	sub.w	r0, r0, sl
 800864c:	fa03 f000 	lsl.w	r0, r3, r0
 8008650:	9b04      	ldr	r3, [sp, #16]
 8008652:	4303      	orrs	r3, r0
 8008654:	3401      	adds	r4, #1
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865c:	482c      	ldr	r0, [pc, #176]	; (8008710 <_vfiprintf_r+0x250>)
 800865e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008662:	2206      	movs	r2, #6
 8008664:	f7f7 fdbc 	bl	80001e0 <memchr>
 8008668:	2800      	cmp	r0, #0
 800866a:	d03f      	beq.n	80086ec <_vfiprintf_r+0x22c>
 800866c:	4b29      	ldr	r3, [pc, #164]	; (8008714 <_vfiprintf_r+0x254>)
 800866e:	bb1b      	cbnz	r3, 80086b8 <_vfiprintf_r+0x1f8>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	3307      	adds	r3, #7
 8008674:	f023 0307 	bic.w	r3, r3, #7
 8008678:	3308      	adds	r3, #8
 800867a:	9303      	str	r3, [sp, #12]
 800867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867e:	443b      	add	r3, r7
 8008680:	9309      	str	r3, [sp, #36]	; 0x24
 8008682:	e767      	b.n	8008554 <_vfiprintf_r+0x94>
 8008684:	fb0c 3202 	mla	r2, ip, r2, r3
 8008688:	460c      	mov	r4, r1
 800868a:	2001      	movs	r0, #1
 800868c:	e7a5      	b.n	80085da <_vfiprintf_r+0x11a>
 800868e:	2300      	movs	r3, #0
 8008690:	3401      	adds	r4, #1
 8008692:	9305      	str	r3, [sp, #20]
 8008694:	4619      	mov	r1, r3
 8008696:	f04f 0c0a 	mov.w	ip, #10
 800869a:	4620      	mov	r0, r4
 800869c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a0:	3a30      	subs	r2, #48	; 0x30
 80086a2:	2a09      	cmp	r2, #9
 80086a4:	d903      	bls.n	80086ae <_vfiprintf_r+0x1ee>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0c5      	beq.n	8008636 <_vfiprintf_r+0x176>
 80086aa:	9105      	str	r1, [sp, #20]
 80086ac:	e7c3      	b.n	8008636 <_vfiprintf_r+0x176>
 80086ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b2:	4604      	mov	r4, r0
 80086b4:	2301      	movs	r3, #1
 80086b6:	e7f0      	b.n	800869a <_vfiprintf_r+0x1da>
 80086b8:	ab03      	add	r3, sp, #12
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	462a      	mov	r2, r5
 80086be:	4b16      	ldr	r3, [pc, #88]	; (8008718 <_vfiprintf_r+0x258>)
 80086c0:	a904      	add	r1, sp, #16
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7fd fde6 	bl	8006294 <_printf_float>
 80086c8:	4607      	mov	r7, r0
 80086ca:	1c78      	adds	r0, r7, #1
 80086cc:	d1d6      	bne.n	800867c <_vfiprintf_r+0x1bc>
 80086ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d0:	07d9      	lsls	r1, r3, #31
 80086d2:	d405      	bmi.n	80086e0 <_vfiprintf_r+0x220>
 80086d4:	89ab      	ldrh	r3, [r5, #12]
 80086d6:	059a      	lsls	r2, r3, #22
 80086d8:	d402      	bmi.n	80086e0 <_vfiprintf_r+0x220>
 80086da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086dc:	f000 faaf 	bl	8008c3e <__retarget_lock_release_recursive>
 80086e0:	89ab      	ldrh	r3, [r5, #12]
 80086e2:	065b      	lsls	r3, r3, #25
 80086e4:	f53f af12 	bmi.w	800850c <_vfiprintf_r+0x4c>
 80086e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ea:	e711      	b.n	8008510 <_vfiprintf_r+0x50>
 80086ec:	ab03      	add	r3, sp, #12
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	462a      	mov	r2, r5
 80086f2:	4b09      	ldr	r3, [pc, #36]	; (8008718 <_vfiprintf_r+0x258>)
 80086f4:	a904      	add	r1, sp, #16
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7fe f870 	bl	80067dc <_printf_i>
 80086fc:	e7e4      	b.n	80086c8 <_vfiprintf_r+0x208>
 80086fe:	bf00      	nop
 8008700:	08009344 	.word	0x08009344
 8008704:	08009364 	.word	0x08009364
 8008708:	08009324 	.word	0x08009324
 800870c:	080091cc 	.word	0x080091cc
 8008710:	080091d6 	.word	0x080091d6
 8008714:	08006295 	.word	0x08006295
 8008718:	0800849d 	.word	0x0800849d
 800871c:	080091d2 	.word	0x080091d2

08008720 <__swbuf_r>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	460e      	mov	r6, r1
 8008724:	4614      	mov	r4, r2
 8008726:	4605      	mov	r5, r0
 8008728:	b118      	cbz	r0, 8008732 <__swbuf_r+0x12>
 800872a:	6983      	ldr	r3, [r0, #24]
 800872c:	b90b      	cbnz	r3, 8008732 <__swbuf_r+0x12>
 800872e:	f000 f9e7 	bl	8008b00 <__sinit>
 8008732:	4b21      	ldr	r3, [pc, #132]	; (80087b8 <__swbuf_r+0x98>)
 8008734:	429c      	cmp	r4, r3
 8008736:	d12b      	bne.n	8008790 <__swbuf_r+0x70>
 8008738:	686c      	ldr	r4, [r5, #4]
 800873a:	69a3      	ldr	r3, [r4, #24]
 800873c:	60a3      	str	r3, [r4, #8]
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	071a      	lsls	r2, r3, #28
 8008742:	d52f      	bpl.n	80087a4 <__swbuf_r+0x84>
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	b36b      	cbz	r3, 80087a4 <__swbuf_r+0x84>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	6820      	ldr	r0, [r4, #0]
 800874c:	1ac0      	subs	r0, r0, r3
 800874e:	6963      	ldr	r3, [r4, #20]
 8008750:	b2f6      	uxtb	r6, r6
 8008752:	4283      	cmp	r3, r0
 8008754:	4637      	mov	r7, r6
 8008756:	dc04      	bgt.n	8008762 <__swbuf_r+0x42>
 8008758:	4621      	mov	r1, r4
 800875a:	4628      	mov	r0, r5
 800875c:	f000 f93c 	bl	80089d8 <_fflush_r>
 8008760:	bb30      	cbnz	r0, 80087b0 <__swbuf_r+0x90>
 8008762:	68a3      	ldr	r3, [r4, #8]
 8008764:	3b01      	subs	r3, #1
 8008766:	60a3      	str	r3, [r4, #8]
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	6022      	str	r2, [r4, #0]
 800876e:	701e      	strb	r6, [r3, #0]
 8008770:	6963      	ldr	r3, [r4, #20]
 8008772:	3001      	adds	r0, #1
 8008774:	4283      	cmp	r3, r0
 8008776:	d004      	beq.n	8008782 <__swbuf_r+0x62>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	07db      	lsls	r3, r3, #31
 800877c:	d506      	bpl.n	800878c <__swbuf_r+0x6c>
 800877e:	2e0a      	cmp	r6, #10
 8008780:	d104      	bne.n	800878c <__swbuf_r+0x6c>
 8008782:	4621      	mov	r1, r4
 8008784:	4628      	mov	r0, r5
 8008786:	f000 f927 	bl	80089d8 <_fflush_r>
 800878a:	b988      	cbnz	r0, 80087b0 <__swbuf_r+0x90>
 800878c:	4638      	mov	r0, r7
 800878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008790:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <__swbuf_r+0x9c>)
 8008792:	429c      	cmp	r4, r3
 8008794:	d101      	bne.n	800879a <__swbuf_r+0x7a>
 8008796:	68ac      	ldr	r4, [r5, #8]
 8008798:	e7cf      	b.n	800873a <__swbuf_r+0x1a>
 800879a:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <__swbuf_r+0xa0>)
 800879c:	429c      	cmp	r4, r3
 800879e:	bf08      	it	eq
 80087a0:	68ec      	ldreq	r4, [r5, #12]
 80087a2:	e7ca      	b.n	800873a <__swbuf_r+0x1a>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f81a 	bl	80087e0 <__swsetup_r>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0cb      	beq.n	8008748 <__swbuf_r+0x28>
 80087b0:	f04f 37ff 	mov.w	r7, #4294967295
 80087b4:	e7ea      	b.n	800878c <__swbuf_r+0x6c>
 80087b6:	bf00      	nop
 80087b8:	08009344 	.word	0x08009344
 80087bc:	08009364 	.word	0x08009364
 80087c0:	08009324 	.word	0x08009324

080087c4 <__ascii_wctomb>:
 80087c4:	b149      	cbz	r1, 80087da <__ascii_wctomb+0x16>
 80087c6:	2aff      	cmp	r2, #255	; 0xff
 80087c8:	bf85      	ittet	hi
 80087ca:	238a      	movhi	r3, #138	; 0x8a
 80087cc:	6003      	strhi	r3, [r0, #0]
 80087ce:	700a      	strbls	r2, [r1, #0]
 80087d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80087d4:	bf98      	it	ls
 80087d6:	2001      	movls	r0, #1
 80087d8:	4770      	bx	lr
 80087da:	4608      	mov	r0, r1
 80087dc:	4770      	bx	lr
	...

080087e0 <__swsetup_r>:
 80087e0:	4b32      	ldr	r3, [pc, #200]	; (80088ac <__swsetup_r+0xcc>)
 80087e2:	b570      	push	{r4, r5, r6, lr}
 80087e4:	681d      	ldr	r5, [r3, #0]
 80087e6:	4606      	mov	r6, r0
 80087e8:	460c      	mov	r4, r1
 80087ea:	b125      	cbz	r5, 80087f6 <__swsetup_r+0x16>
 80087ec:	69ab      	ldr	r3, [r5, #24]
 80087ee:	b913      	cbnz	r3, 80087f6 <__swsetup_r+0x16>
 80087f0:	4628      	mov	r0, r5
 80087f2:	f000 f985 	bl	8008b00 <__sinit>
 80087f6:	4b2e      	ldr	r3, [pc, #184]	; (80088b0 <__swsetup_r+0xd0>)
 80087f8:	429c      	cmp	r4, r3
 80087fa:	d10f      	bne.n	800881c <__swsetup_r+0x3c>
 80087fc:	686c      	ldr	r4, [r5, #4]
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008804:	0719      	lsls	r1, r3, #28
 8008806:	d42c      	bmi.n	8008862 <__swsetup_r+0x82>
 8008808:	06dd      	lsls	r5, r3, #27
 800880a:	d411      	bmi.n	8008830 <__swsetup_r+0x50>
 800880c:	2309      	movs	r3, #9
 800880e:	6033      	str	r3, [r6, #0]
 8008810:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	f04f 30ff 	mov.w	r0, #4294967295
 800881a:	e03e      	b.n	800889a <__swsetup_r+0xba>
 800881c:	4b25      	ldr	r3, [pc, #148]	; (80088b4 <__swsetup_r+0xd4>)
 800881e:	429c      	cmp	r4, r3
 8008820:	d101      	bne.n	8008826 <__swsetup_r+0x46>
 8008822:	68ac      	ldr	r4, [r5, #8]
 8008824:	e7eb      	b.n	80087fe <__swsetup_r+0x1e>
 8008826:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <__swsetup_r+0xd8>)
 8008828:	429c      	cmp	r4, r3
 800882a:	bf08      	it	eq
 800882c:	68ec      	ldreq	r4, [r5, #12]
 800882e:	e7e6      	b.n	80087fe <__swsetup_r+0x1e>
 8008830:	0758      	lsls	r0, r3, #29
 8008832:	d512      	bpl.n	800885a <__swsetup_r+0x7a>
 8008834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008836:	b141      	cbz	r1, 800884a <__swsetup_r+0x6a>
 8008838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800883c:	4299      	cmp	r1, r3
 800883e:	d002      	beq.n	8008846 <__swsetup_r+0x66>
 8008840:	4630      	mov	r0, r6
 8008842:	f7ff fb31 	bl	8007ea8 <_free_r>
 8008846:	2300      	movs	r3, #0
 8008848:	6363      	str	r3, [r4, #52]	; 0x34
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	2300      	movs	r3, #0
 8008854:	6063      	str	r3, [r4, #4]
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f043 0308 	orr.w	r3, r3, #8
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	b94b      	cbnz	r3, 800887a <__swsetup_r+0x9a>
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800886c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008870:	d003      	beq.n	800887a <__swsetup_r+0x9a>
 8008872:	4621      	mov	r1, r4
 8008874:	4630      	mov	r0, r6
 8008876:	f000 fa09 	bl	8008c8c <__smakebuf_r>
 800887a:	89a0      	ldrh	r0, [r4, #12]
 800887c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008880:	f010 0301 	ands.w	r3, r0, #1
 8008884:	d00a      	beq.n	800889c <__swsetup_r+0xbc>
 8008886:	2300      	movs	r3, #0
 8008888:	60a3      	str	r3, [r4, #8]
 800888a:	6963      	ldr	r3, [r4, #20]
 800888c:	425b      	negs	r3, r3
 800888e:	61a3      	str	r3, [r4, #24]
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	b943      	cbnz	r3, 80088a6 <__swsetup_r+0xc6>
 8008894:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008898:	d1ba      	bne.n	8008810 <__swsetup_r+0x30>
 800889a:	bd70      	pop	{r4, r5, r6, pc}
 800889c:	0781      	lsls	r1, r0, #30
 800889e:	bf58      	it	pl
 80088a0:	6963      	ldrpl	r3, [r4, #20]
 80088a2:	60a3      	str	r3, [r4, #8]
 80088a4:	e7f4      	b.n	8008890 <__swsetup_r+0xb0>
 80088a6:	2000      	movs	r0, #0
 80088a8:	e7f7      	b.n	800889a <__swsetup_r+0xba>
 80088aa:	bf00      	nop
 80088ac:	20000018 	.word	0x20000018
 80088b0:	08009344 	.word	0x08009344
 80088b4:	08009364 	.word	0x08009364
 80088b8:	08009324 	.word	0x08009324

080088bc <abort>:
 80088bc:	b508      	push	{r3, lr}
 80088be:	2006      	movs	r0, #6
 80088c0:	f000 fa54 	bl	8008d6c <raise>
 80088c4:	2001      	movs	r0, #1
 80088c6:	f7f8 fffb 	bl	80018c0 <_exit>
	...

080088cc <__sflush_r>:
 80088cc:	898a      	ldrh	r2, [r1, #12]
 80088ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d2:	4605      	mov	r5, r0
 80088d4:	0710      	lsls	r0, r2, #28
 80088d6:	460c      	mov	r4, r1
 80088d8:	d458      	bmi.n	800898c <__sflush_r+0xc0>
 80088da:	684b      	ldr	r3, [r1, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dc05      	bgt.n	80088ec <__sflush_r+0x20>
 80088e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	dc02      	bgt.n	80088ec <__sflush_r+0x20>
 80088e6:	2000      	movs	r0, #0
 80088e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ee:	2e00      	cmp	r6, #0
 80088f0:	d0f9      	beq.n	80088e6 <__sflush_r+0x1a>
 80088f2:	2300      	movs	r3, #0
 80088f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088f8:	682f      	ldr	r7, [r5, #0]
 80088fa:	602b      	str	r3, [r5, #0]
 80088fc:	d032      	beq.n	8008964 <__sflush_r+0x98>
 80088fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	075a      	lsls	r2, r3, #29
 8008904:	d505      	bpl.n	8008912 <__sflush_r+0x46>
 8008906:	6863      	ldr	r3, [r4, #4]
 8008908:	1ac0      	subs	r0, r0, r3
 800890a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800890c:	b10b      	cbz	r3, 8008912 <__sflush_r+0x46>
 800890e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008910:	1ac0      	subs	r0, r0, r3
 8008912:	2300      	movs	r3, #0
 8008914:	4602      	mov	r2, r0
 8008916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008918:	6a21      	ldr	r1, [r4, #32]
 800891a:	4628      	mov	r0, r5
 800891c:	47b0      	blx	r6
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	d106      	bne.n	8008932 <__sflush_r+0x66>
 8008924:	6829      	ldr	r1, [r5, #0]
 8008926:	291d      	cmp	r1, #29
 8008928:	d82c      	bhi.n	8008984 <__sflush_r+0xb8>
 800892a:	4a2a      	ldr	r2, [pc, #168]	; (80089d4 <__sflush_r+0x108>)
 800892c:	40ca      	lsrs	r2, r1
 800892e:	07d6      	lsls	r6, r2, #31
 8008930:	d528      	bpl.n	8008984 <__sflush_r+0xb8>
 8008932:	2200      	movs	r2, #0
 8008934:	6062      	str	r2, [r4, #4]
 8008936:	04d9      	lsls	r1, r3, #19
 8008938:	6922      	ldr	r2, [r4, #16]
 800893a:	6022      	str	r2, [r4, #0]
 800893c:	d504      	bpl.n	8008948 <__sflush_r+0x7c>
 800893e:	1c42      	adds	r2, r0, #1
 8008940:	d101      	bne.n	8008946 <__sflush_r+0x7a>
 8008942:	682b      	ldr	r3, [r5, #0]
 8008944:	b903      	cbnz	r3, 8008948 <__sflush_r+0x7c>
 8008946:	6560      	str	r0, [r4, #84]	; 0x54
 8008948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800894a:	602f      	str	r7, [r5, #0]
 800894c:	2900      	cmp	r1, #0
 800894e:	d0ca      	beq.n	80088e6 <__sflush_r+0x1a>
 8008950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008954:	4299      	cmp	r1, r3
 8008956:	d002      	beq.n	800895e <__sflush_r+0x92>
 8008958:	4628      	mov	r0, r5
 800895a:	f7ff faa5 	bl	8007ea8 <_free_r>
 800895e:	2000      	movs	r0, #0
 8008960:	6360      	str	r0, [r4, #52]	; 0x34
 8008962:	e7c1      	b.n	80088e8 <__sflush_r+0x1c>
 8008964:	6a21      	ldr	r1, [r4, #32]
 8008966:	2301      	movs	r3, #1
 8008968:	4628      	mov	r0, r5
 800896a:	47b0      	blx	r6
 800896c:	1c41      	adds	r1, r0, #1
 800896e:	d1c7      	bne.n	8008900 <__sflush_r+0x34>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0c4      	beq.n	8008900 <__sflush_r+0x34>
 8008976:	2b1d      	cmp	r3, #29
 8008978:	d001      	beq.n	800897e <__sflush_r+0xb2>
 800897a:	2b16      	cmp	r3, #22
 800897c:	d101      	bne.n	8008982 <__sflush_r+0xb6>
 800897e:	602f      	str	r7, [r5, #0]
 8008980:	e7b1      	b.n	80088e6 <__sflush_r+0x1a>
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008988:	81a3      	strh	r3, [r4, #12]
 800898a:	e7ad      	b.n	80088e8 <__sflush_r+0x1c>
 800898c:	690f      	ldr	r7, [r1, #16]
 800898e:	2f00      	cmp	r7, #0
 8008990:	d0a9      	beq.n	80088e6 <__sflush_r+0x1a>
 8008992:	0793      	lsls	r3, r2, #30
 8008994:	680e      	ldr	r6, [r1, #0]
 8008996:	bf08      	it	eq
 8008998:	694b      	ldreq	r3, [r1, #20]
 800899a:	600f      	str	r7, [r1, #0]
 800899c:	bf18      	it	ne
 800899e:	2300      	movne	r3, #0
 80089a0:	eba6 0807 	sub.w	r8, r6, r7
 80089a4:	608b      	str	r3, [r1, #8]
 80089a6:	f1b8 0f00 	cmp.w	r8, #0
 80089aa:	dd9c      	ble.n	80088e6 <__sflush_r+0x1a>
 80089ac:	6a21      	ldr	r1, [r4, #32]
 80089ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089b0:	4643      	mov	r3, r8
 80089b2:	463a      	mov	r2, r7
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b0      	blx	r6
 80089b8:	2800      	cmp	r0, #0
 80089ba:	dc06      	bgt.n	80089ca <__sflush_r+0xfe>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c2:	81a3      	strh	r3, [r4, #12]
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	e78e      	b.n	80088e8 <__sflush_r+0x1c>
 80089ca:	4407      	add	r7, r0
 80089cc:	eba8 0800 	sub.w	r8, r8, r0
 80089d0:	e7e9      	b.n	80089a6 <__sflush_r+0xda>
 80089d2:	bf00      	nop
 80089d4:	20400001 	.word	0x20400001

080089d8 <_fflush_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	690b      	ldr	r3, [r1, #16]
 80089dc:	4605      	mov	r5, r0
 80089de:	460c      	mov	r4, r1
 80089e0:	b913      	cbnz	r3, 80089e8 <_fflush_r+0x10>
 80089e2:	2500      	movs	r5, #0
 80089e4:	4628      	mov	r0, r5
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	b118      	cbz	r0, 80089f2 <_fflush_r+0x1a>
 80089ea:	6983      	ldr	r3, [r0, #24]
 80089ec:	b90b      	cbnz	r3, 80089f2 <_fflush_r+0x1a>
 80089ee:	f000 f887 	bl	8008b00 <__sinit>
 80089f2:	4b14      	ldr	r3, [pc, #80]	; (8008a44 <_fflush_r+0x6c>)
 80089f4:	429c      	cmp	r4, r3
 80089f6:	d11b      	bne.n	8008a30 <_fflush_r+0x58>
 80089f8:	686c      	ldr	r4, [r5, #4]
 80089fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d0ef      	beq.n	80089e2 <_fflush_r+0xa>
 8008a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a04:	07d0      	lsls	r0, r2, #31
 8008a06:	d404      	bmi.n	8008a12 <_fflush_r+0x3a>
 8008a08:	0599      	lsls	r1, r3, #22
 8008a0a:	d402      	bmi.n	8008a12 <_fflush_r+0x3a>
 8008a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a0e:	f000 f915 	bl	8008c3c <__retarget_lock_acquire_recursive>
 8008a12:	4628      	mov	r0, r5
 8008a14:	4621      	mov	r1, r4
 8008a16:	f7ff ff59 	bl	80088cc <__sflush_r>
 8008a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a1c:	07da      	lsls	r2, r3, #31
 8008a1e:	4605      	mov	r5, r0
 8008a20:	d4e0      	bmi.n	80089e4 <_fflush_r+0xc>
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	059b      	lsls	r3, r3, #22
 8008a26:	d4dd      	bmi.n	80089e4 <_fflush_r+0xc>
 8008a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2a:	f000 f908 	bl	8008c3e <__retarget_lock_release_recursive>
 8008a2e:	e7d9      	b.n	80089e4 <_fflush_r+0xc>
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <_fflush_r+0x70>)
 8008a32:	429c      	cmp	r4, r3
 8008a34:	d101      	bne.n	8008a3a <_fflush_r+0x62>
 8008a36:	68ac      	ldr	r4, [r5, #8]
 8008a38:	e7df      	b.n	80089fa <_fflush_r+0x22>
 8008a3a:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <_fflush_r+0x74>)
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	bf08      	it	eq
 8008a40:	68ec      	ldreq	r4, [r5, #12]
 8008a42:	e7da      	b.n	80089fa <_fflush_r+0x22>
 8008a44:	08009344 	.word	0x08009344
 8008a48:	08009364 	.word	0x08009364
 8008a4c:	08009324 	.word	0x08009324

08008a50 <std>:
 8008a50:	2300      	movs	r3, #0
 8008a52:	b510      	push	{r4, lr}
 8008a54:	4604      	mov	r4, r0
 8008a56:	e9c0 3300 	strd	r3, r3, [r0]
 8008a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a5e:	6083      	str	r3, [r0, #8]
 8008a60:	8181      	strh	r1, [r0, #12]
 8008a62:	6643      	str	r3, [r0, #100]	; 0x64
 8008a64:	81c2      	strh	r2, [r0, #14]
 8008a66:	6183      	str	r3, [r0, #24]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	2208      	movs	r2, #8
 8008a6c:	305c      	adds	r0, #92	; 0x5c
 8008a6e:	f7fd fb69 	bl	8006144 <memset>
 8008a72:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <std+0x38>)
 8008a74:	6263      	str	r3, [r4, #36]	; 0x24
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <std+0x3c>)
 8008a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <std+0x40>)
 8008a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <std+0x44>)
 8008a80:	6224      	str	r4, [r4, #32]
 8008a82:	6323      	str	r3, [r4, #48]	; 0x30
 8008a84:	bd10      	pop	{r4, pc}
 8008a86:	bf00      	nop
 8008a88:	08008da5 	.word	0x08008da5
 8008a8c:	08008dc7 	.word	0x08008dc7
 8008a90:	08008dff 	.word	0x08008dff
 8008a94:	08008e23 	.word	0x08008e23

08008a98 <_cleanup_r>:
 8008a98:	4901      	ldr	r1, [pc, #4]	; (8008aa0 <_cleanup_r+0x8>)
 8008a9a:	f000 b8af 	b.w	8008bfc <_fwalk_reent>
 8008a9e:	bf00      	nop
 8008aa0:	080089d9 	.word	0x080089d9

08008aa4 <__sfmoreglue>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	2268      	movs	r2, #104	; 0x68
 8008aa8:	1e4d      	subs	r5, r1, #1
 8008aaa:	4355      	muls	r5, r2
 8008aac:	460e      	mov	r6, r1
 8008aae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ab2:	f7ff fa65 	bl	8007f80 <_malloc_r>
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	b140      	cbz	r0, 8008acc <__sfmoreglue+0x28>
 8008aba:	2100      	movs	r1, #0
 8008abc:	e9c0 1600 	strd	r1, r6, [r0]
 8008ac0:	300c      	adds	r0, #12
 8008ac2:	60a0      	str	r0, [r4, #8]
 8008ac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ac8:	f7fd fb3c 	bl	8006144 <memset>
 8008acc:	4620      	mov	r0, r4
 8008ace:	bd70      	pop	{r4, r5, r6, pc}

08008ad0 <__sfp_lock_acquire>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__sfp_lock_acquire+0x8>)
 8008ad2:	f000 b8b3 	b.w	8008c3c <__retarget_lock_acquire_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	20000765 	.word	0x20000765

08008adc <__sfp_lock_release>:
 8008adc:	4801      	ldr	r0, [pc, #4]	; (8008ae4 <__sfp_lock_release+0x8>)
 8008ade:	f000 b8ae 	b.w	8008c3e <__retarget_lock_release_recursive>
 8008ae2:	bf00      	nop
 8008ae4:	20000765 	.word	0x20000765

08008ae8 <__sinit_lock_acquire>:
 8008ae8:	4801      	ldr	r0, [pc, #4]	; (8008af0 <__sinit_lock_acquire+0x8>)
 8008aea:	f000 b8a7 	b.w	8008c3c <__retarget_lock_acquire_recursive>
 8008aee:	bf00      	nop
 8008af0:	20000766 	.word	0x20000766

08008af4 <__sinit_lock_release>:
 8008af4:	4801      	ldr	r0, [pc, #4]	; (8008afc <__sinit_lock_release+0x8>)
 8008af6:	f000 b8a2 	b.w	8008c3e <__retarget_lock_release_recursive>
 8008afa:	bf00      	nop
 8008afc:	20000766 	.word	0x20000766

08008b00 <__sinit>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	4604      	mov	r4, r0
 8008b04:	f7ff fff0 	bl	8008ae8 <__sinit_lock_acquire>
 8008b08:	69a3      	ldr	r3, [r4, #24]
 8008b0a:	b11b      	cbz	r3, 8008b14 <__sinit+0x14>
 8008b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b10:	f7ff bff0 	b.w	8008af4 <__sinit_lock_release>
 8008b14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b18:	6523      	str	r3, [r4, #80]	; 0x50
 8008b1a:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <__sinit+0x68>)
 8008b1c:	4a13      	ldr	r2, [pc, #76]	; (8008b6c <__sinit+0x6c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b22:	42a3      	cmp	r3, r4
 8008b24:	bf04      	itt	eq
 8008b26:	2301      	moveq	r3, #1
 8008b28:	61a3      	streq	r3, [r4, #24]
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 f820 	bl	8008b70 <__sfp>
 8008b30:	6060      	str	r0, [r4, #4]
 8008b32:	4620      	mov	r0, r4
 8008b34:	f000 f81c 	bl	8008b70 <__sfp>
 8008b38:	60a0      	str	r0, [r4, #8]
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 f818 	bl	8008b70 <__sfp>
 8008b40:	2200      	movs	r2, #0
 8008b42:	60e0      	str	r0, [r4, #12]
 8008b44:	2104      	movs	r1, #4
 8008b46:	6860      	ldr	r0, [r4, #4]
 8008b48:	f7ff ff82 	bl	8008a50 <std>
 8008b4c:	68a0      	ldr	r0, [r4, #8]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	2109      	movs	r1, #9
 8008b52:	f7ff ff7d 	bl	8008a50 <std>
 8008b56:	68e0      	ldr	r0, [r4, #12]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	2112      	movs	r1, #18
 8008b5c:	f7ff ff78 	bl	8008a50 <std>
 8008b60:	2301      	movs	r3, #1
 8008b62:	61a3      	str	r3, [r4, #24]
 8008b64:	e7d2      	b.n	8008b0c <__sinit+0xc>
 8008b66:	bf00      	nop
 8008b68:	08008fac 	.word	0x08008fac
 8008b6c:	08008a99 	.word	0x08008a99

08008b70 <__sfp>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	4607      	mov	r7, r0
 8008b74:	f7ff ffac 	bl	8008ad0 <__sfp_lock_acquire>
 8008b78:	4b1e      	ldr	r3, [pc, #120]	; (8008bf4 <__sfp+0x84>)
 8008b7a:	681e      	ldr	r6, [r3, #0]
 8008b7c:	69b3      	ldr	r3, [r6, #24]
 8008b7e:	b913      	cbnz	r3, 8008b86 <__sfp+0x16>
 8008b80:	4630      	mov	r0, r6
 8008b82:	f7ff ffbd 	bl	8008b00 <__sinit>
 8008b86:	3648      	adds	r6, #72	; 0x48
 8008b88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	d503      	bpl.n	8008b98 <__sfp+0x28>
 8008b90:	6833      	ldr	r3, [r6, #0]
 8008b92:	b30b      	cbz	r3, 8008bd8 <__sfp+0x68>
 8008b94:	6836      	ldr	r6, [r6, #0]
 8008b96:	e7f7      	b.n	8008b88 <__sfp+0x18>
 8008b98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b9c:	b9d5      	cbnz	r5, 8008bd4 <__sfp+0x64>
 8008b9e:	4b16      	ldr	r3, [pc, #88]	; (8008bf8 <__sfp+0x88>)
 8008ba0:	60e3      	str	r3, [r4, #12]
 8008ba2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ba6:	6665      	str	r5, [r4, #100]	; 0x64
 8008ba8:	f000 f847 	bl	8008c3a <__retarget_lock_init_recursive>
 8008bac:	f7ff ff96 	bl	8008adc <__sfp_lock_release>
 8008bb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bb8:	6025      	str	r5, [r4, #0]
 8008bba:	61a5      	str	r5, [r4, #24]
 8008bbc:	2208      	movs	r2, #8
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bc4:	f7fd fabe 	bl	8006144 <memset>
 8008bc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd4:	3468      	adds	r4, #104	; 0x68
 8008bd6:	e7d9      	b.n	8008b8c <__sfp+0x1c>
 8008bd8:	2104      	movs	r1, #4
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f7ff ff62 	bl	8008aa4 <__sfmoreglue>
 8008be0:	4604      	mov	r4, r0
 8008be2:	6030      	str	r0, [r6, #0]
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d1d5      	bne.n	8008b94 <__sfp+0x24>
 8008be8:	f7ff ff78 	bl	8008adc <__sfp_lock_release>
 8008bec:	230c      	movs	r3, #12
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	e7ee      	b.n	8008bd0 <__sfp+0x60>
 8008bf2:	bf00      	nop
 8008bf4:	08008fac 	.word	0x08008fac
 8008bf8:	ffff0001 	.word	0xffff0001

08008bfc <_fwalk_reent>:
 8008bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c00:	4606      	mov	r6, r0
 8008c02:	4688      	mov	r8, r1
 8008c04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c08:	2700      	movs	r7, #0
 8008c0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c0e:	f1b9 0901 	subs.w	r9, r9, #1
 8008c12:	d505      	bpl.n	8008c20 <_fwalk_reent+0x24>
 8008c14:	6824      	ldr	r4, [r4, #0]
 8008c16:	2c00      	cmp	r4, #0
 8008c18:	d1f7      	bne.n	8008c0a <_fwalk_reent+0xe>
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c20:	89ab      	ldrh	r3, [r5, #12]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d907      	bls.n	8008c36 <_fwalk_reent+0x3a>
 8008c26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	d003      	beq.n	8008c36 <_fwalk_reent+0x3a>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4630      	mov	r0, r6
 8008c32:	47c0      	blx	r8
 8008c34:	4307      	orrs	r7, r0
 8008c36:	3568      	adds	r5, #104	; 0x68
 8008c38:	e7e9      	b.n	8008c0e <_fwalk_reent+0x12>

08008c3a <__retarget_lock_init_recursive>:
 8008c3a:	4770      	bx	lr

08008c3c <__retarget_lock_acquire_recursive>:
 8008c3c:	4770      	bx	lr

08008c3e <__retarget_lock_release_recursive>:
 8008c3e:	4770      	bx	lr

08008c40 <__swhatbuf_r>:
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	460e      	mov	r6, r1
 8008c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	b096      	sub	sp, #88	; 0x58
 8008c4c:	4614      	mov	r4, r2
 8008c4e:	461d      	mov	r5, r3
 8008c50:	da08      	bge.n	8008c64 <__swhatbuf_r+0x24>
 8008c52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	602a      	str	r2, [r5, #0]
 8008c5a:	061a      	lsls	r2, r3, #24
 8008c5c:	d410      	bmi.n	8008c80 <__swhatbuf_r+0x40>
 8008c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c62:	e00e      	b.n	8008c82 <__swhatbuf_r+0x42>
 8008c64:	466a      	mov	r2, sp
 8008c66:	f000 f903 	bl	8008e70 <_fstat_r>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	dbf1      	blt.n	8008c52 <__swhatbuf_r+0x12>
 8008c6e:	9a01      	ldr	r2, [sp, #4]
 8008c70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c78:	425a      	negs	r2, r3
 8008c7a:	415a      	adcs	r2, r3
 8008c7c:	602a      	str	r2, [r5, #0]
 8008c7e:	e7ee      	b.n	8008c5e <__swhatbuf_r+0x1e>
 8008c80:	2340      	movs	r3, #64	; 0x40
 8008c82:	2000      	movs	r0, #0
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	b016      	add	sp, #88	; 0x58
 8008c88:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c8c <__smakebuf_r>:
 8008c8c:	898b      	ldrh	r3, [r1, #12]
 8008c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c90:	079d      	lsls	r5, r3, #30
 8008c92:	4606      	mov	r6, r0
 8008c94:	460c      	mov	r4, r1
 8008c96:	d507      	bpl.n	8008ca8 <__smakebuf_r+0x1c>
 8008c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	6123      	str	r3, [r4, #16]
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	6163      	str	r3, [r4, #20]
 8008ca4:	b002      	add	sp, #8
 8008ca6:	bd70      	pop	{r4, r5, r6, pc}
 8008ca8:	ab01      	add	r3, sp, #4
 8008caa:	466a      	mov	r2, sp
 8008cac:	f7ff ffc8 	bl	8008c40 <__swhatbuf_r>
 8008cb0:	9900      	ldr	r1, [sp, #0]
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7ff f963 	bl	8007f80 <_malloc_r>
 8008cba:	b948      	cbnz	r0, 8008cd0 <__smakebuf_r+0x44>
 8008cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc0:	059a      	lsls	r2, r3, #22
 8008cc2:	d4ef      	bmi.n	8008ca4 <__smakebuf_r+0x18>
 8008cc4:	f023 0303 	bic.w	r3, r3, #3
 8008cc8:	f043 0302 	orr.w	r3, r3, #2
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	e7e3      	b.n	8008c98 <__smakebuf_r+0xc>
 8008cd0:	4b0d      	ldr	r3, [pc, #52]	; (8008d08 <__smakebuf_r+0x7c>)
 8008cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	6020      	str	r0, [r4, #0]
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	6163      	str	r3, [r4, #20]
 8008ce2:	9b01      	ldr	r3, [sp, #4]
 8008ce4:	6120      	str	r0, [r4, #16]
 8008ce6:	b15b      	cbz	r3, 8008d00 <__smakebuf_r+0x74>
 8008ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cec:	4630      	mov	r0, r6
 8008cee:	f000 f8d1 	bl	8008e94 <_isatty_r>
 8008cf2:	b128      	cbz	r0, 8008d00 <__smakebuf_r+0x74>
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	f043 0301 	orr.w	r3, r3, #1
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	89a0      	ldrh	r0, [r4, #12]
 8008d02:	4305      	orrs	r5, r0
 8008d04:	81a5      	strh	r5, [r4, #12]
 8008d06:	e7cd      	b.n	8008ca4 <__smakebuf_r+0x18>
 8008d08:	08008a99 	.word	0x08008a99

08008d0c <_malloc_usable_size_r>:
 8008d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d10:	1f18      	subs	r0, r3, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bfbc      	itt	lt
 8008d16:	580b      	ldrlt	r3, [r1, r0]
 8008d18:	18c0      	addlt	r0, r0, r3
 8008d1a:	4770      	bx	lr

08008d1c <_raise_r>:
 8008d1c:	291f      	cmp	r1, #31
 8008d1e:	b538      	push	{r3, r4, r5, lr}
 8008d20:	4604      	mov	r4, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	d904      	bls.n	8008d30 <_raise_r+0x14>
 8008d26:	2316      	movs	r3, #22
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d32:	b112      	cbz	r2, 8008d3a <_raise_r+0x1e>
 8008d34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d38:	b94b      	cbnz	r3, 8008d4e <_raise_r+0x32>
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 f830 	bl	8008da0 <_getpid_r>
 8008d40:	462a      	mov	r2, r5
 8008d42:	4601      	mov	r1, r0
 8008d44:	4620      	mov	r0, r4
 8008d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d4a:	f000 b817 	b.w	8008d7c <_kill_r>
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d00a      	beq.n	8008d68 <_raise_r+0x4c>
 8008d52:	1c59      	adds	r1, r3, #1
 8008d54:	d103      	bne.n	8008d5e <_raise_r+0x42>
 8008d56:	2316      	movs	r3, #22
 8008d58:	6003      	str	r3, [r0, #0]
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	e7e7      	b.n	8008d2e <_raise_r+0x12>
 8008d5e:	2400      	movs	r4, #0
 8008d60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d64:	4628      	mov	r0, r5
 8008d66:	4798      	blx	r3
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e7e0      	b.n	8008d2e <_raise_r+0x12>

08008d6c <raise>:
 8008d6c:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <raise+0xc>)
 8008d6e:	4601      	mov	r1, r0
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	f7ff bfd3 	b.w	8008d1c <_raise_r>
 8008d76:	bf00      	nop
 8008d78:	20000018 	.word	0x20000018

08008d7c <_kill_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	; (8008d9c <_kill_r+0x20>)
 8008d80:	2300      	movs	r3, #0
 8008d82:	4604      	mov	r4, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	4611      	mov	r1, r2
 8008d88:	602b      	str	r3, [r5, #0]
 8008d8a:	f7f8 fd89 	bl	80018a0 <_kill>
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	d102      	bne.n	8008d98 <_kill_r+0x1c>
 8008d92:	682b      	ldr	r3, [r5, #0]
 8008d94:	b103      	cbz	r3, 8008d98 <_kill_r+0x1c>
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	bd38      	pop	{r3, r4, r5, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000760 	.word	0x20000760

08008da0 <_getpid_r>:
 8008da0:	f7f8 bd76 	b.w	8001890 <_getpid>

08008da4 <__sread>:
 8008da4:	b510      	push	{r4, lr}
 8008da6:	460c      	mov	r4, r1
 8008da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dac:	f000 f894 	bl	8008ed8 <_read_r>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	bfab      	itete	ge
 8008db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008db6:	89a3      	ldrhlt	r3, [r4, #12]
 8008db8:	181b      	addge	r3, r3, r0
 8008dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dbe:	bfac      	ite	ge
 8008dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dc2:	81a3      	strhlt	r3, [r4, #12]
 8008dc4:	bd10      	pop	{r4, pc}

08008dc6 <__swrite>:
 8008dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dca:	461f      	mov	r7, r3
 8008dcc:	898b      	ldrh	r3, [r1, #12]
 8008dce:	05db      	lsls	r3, r3, #23
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	d505      	bpl.n	8008de4 <__swrite+0x1e>
 8008dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ddc:	2302      	movs	r3, #2
 8008dde:	2200      	movs	r2, #0
 8008de0:	f000 f868 	bl	8008eb4 <_lseek_r>
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dee:	81a3      	strh	r3, [r4, #12]
 8008df0:	4632      	mov	r2, r6
 8008df2:	463b      	mov	r3, r7
 8008df4:	4628      	mov	r0, r5
 8008df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfa:	f000 b817 	b.w	8008e2c <_write_r>

08008dfe <__sseek>:
 8008dfe:	b510      	push	{r4, lr}
 8008e00:	460c      	mov	r4, r1
 8008e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e06:	f000 f855 	bl	8008eb4 <_lseek_r>
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	bf15      	itete	ne
 8008e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e1a:	81a3      	strheq	r3, [r4, #12]
 8008e1c:	bf18      	it	ne
 8008e1e:	81a3      	strhne	r3, [r4, #12]
 8008e20:	bd10      	pop	{r4, pc}

08008e22 <__sclose>:
 8008e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e26:	f000 b813 	b.w	8008e50 <_close_r>
	...

08008e2c <_write_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d07      	ldr	r5, [pc, #28]	; (8008e4c <_write_r+0x20>)
 8008e30:	4604      	mov	r4, r0
 8008e32:	4608      	mov	r0, r1
 8008e34:	4611      	mov	r1, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	602a      	str	r2, [r5, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f7f8 fd67 	bl	800190e <_write>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_write_r+0x1e>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_write_r+0x1e>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20000760 	.word	0x20000760

08008e50 <_close_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d06      	ldr	r5, [pc, #24]	; (8008e6c <_close_r+0x1c>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7f8 fd73 	bl	8001946 <_close>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_close_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_close_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	20000760 	.word	0x20000760

08008e70 <_fstat_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d07      	ldr	r5, [pc, #28]	; (8008e90 <_fstat_r+0x20>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	f7f8 fd6e 	bl	800195e <_fstat>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d102      	bne.n	8008e8c <_fstat_r+0x1c>
 8008e86:	682b      	ldr	r3, [r5, #0]
 8008e88:	b103      	cbz	r3, 8008e8c <_fstat_r+0x1c>
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	bd38      	pop	{r3, r4, r5, pc}
 8008e8e:	bf00      	nop
 8008e90:	20000760 	.word	0x20000760

08008e94 <_isatty_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d06      	ldr	r5, [pc, #24]	; (8008eb0 <_isatty_r+0x1c>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	602b      	str	r3, [r5, #0]
 8008ea0:	f7f8 fd6d 	bl	800197e <_isatty>
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	d102      	bne.n	8008eae <_isatty_r+0x1a>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	b103      	cbz	r3, 8008eae <_isatty_r+0x1a>
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	20000760 	.word	0x20000760

08008eb4 <_lseek_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d07      	ldr	r5, [pc, #28]	; (8008ed4 <_lseek_r+0x20>)
 8008eb8:	4604      	mov	r4, r0
 8008eba:	4608      	mov	r0, r1
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	602a      	str	r2, [r5, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f7f8 fd66 	bl	8001994 <_lseek>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_lseek_r+0x1e>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_lseek_r+0x1e>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	20000760 	.word	0x20000760

08008ed8 <_read_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	; (8008ef8 <_read_r+0x20>)
 8008edc:	4604      	mov	r4, r0
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	602a      	str	r2, [r5, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f7f8 fcf4 	bl	80018d4 <_read>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_read_r+0x1e>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_read_r+0x1e>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	20000760 	.word	0x20000760

08008efc <_init>:
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	bf00      	nop
 8008f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f02:	bc08      	pop	{r3}
 8008f04:	469e      	mov	lr, r3
 8008f06:	4770      	bx	lr

08008f08 <_fini>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	bf00      	nop
 8008f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0e:	bc08      	pop	{r3}
 8008f10:	469e      	mov	lr, r3
 8008f12:	4770      	bx	lr
